{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/Next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/Next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/Next/source/images/Sign.png","path":"images/Sign.png","modified":0,"renderable":1},{"_id":"themes/Next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/Next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/Next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/Next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/Next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/Next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/Next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/Next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/Next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/Next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/Next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/Next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/Next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/Next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/Next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/Next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/Next/source/images/avatar1.jpg","path":"images/avatar1.jpg","modified":0,"renderable":1},{"_id":"themes/Next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/Next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/Next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/Next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/Next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/Next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/Next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/Next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/Next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/Next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/Next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/Next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/Next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/Next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"12b382bfca543d2d3f2da6cf1d37d16cf90b09b6","modified":1559914430000},{"_id":"themes/Next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1527476262000},{"_id":"themes/Next/.DS_Store","hash":"d5f969c435c3ad05bcc403bbfd5af57171990c3e","modified":1529653859000},{"_id":"themes/Next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1527476262000},{"_id":"themes/Next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1527476262000},{"_id":"themes/Next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1527476262000},{"_id":"themes/Next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1527476262000},{"_id":"themes/Next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1527476262000},{"_id":"themes/Next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1527476262000},{"_id":"themes/Next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1527476262000},{"_id":"themes/Next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1527476262000},{"_id":"themes/Next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1527476262000},{"_id":"themes/Next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1527476262000},{"_id":"themes/Next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1527476262000},{"_id":"themes/Next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1527476262000},{"_id":"themes/Next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1527476262000},{"_id":"themes/Next/_config.yml","hash":"0aa1e75b09d5b75c96ddae4af52f799bf3bad7d7","modified":1529657411000},{"_id":"themes/Next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1527476262000},{"_id":"source/_posts/crawler-1.md","hash":"a58194087dc809b6a8ba693180820522206b45d3","modified":1529636890000},{"_id":"source/_posts/.DS_Store","hash":"6830f18d64c5951acb2f354d36d86581869a66ce","modified":1559719200000},{"_id":"source/_posts/crawler-3.md","hash":"6f858350638186d6d61e24ed4daddddb00ac90ee","modified":1529636936000},{"_id":"source/_posts/crawler-2.md","hash":"b233ed9c82efa9a8877acbbc65903e8bbde07afc","modified":1529636893000},{"_id":"source/_posts/crawler-4-selenium.md","hash":"3b5959ac04deb9cb17569a48aed4627c141b5c1b","modified":1529647344000},{"_id":"source/_posts/crawler-5-bs4index.md","hash":"3ccd69948bdcd7a5addf32339c697d37592df708","modified":1529647576000},{"_id":"source/_posts/data-visualization-2.md","hash":"a97de4a686a4a9637f2ece8487eaa2e2c4afd24e","modified":1529646703000},{"_id":"source/_posts/data-visualization-1.md","hash":"6fc466701b3db7aabd8662eb1ed3f708c886c6d4","modified":1529646186000},{"_id":"source/_posts/efficient-frontier.md","hash":"c3e2d67f7089e43dfc2c67cb7b1dec8e72266e3d","modified":1529647680000},{"_id":"source/_posts/echo-control-2048.md","hash":"c06032d7bf5695ae1d05d626239b452f1792e967","modified":1529646425000},{"_id":"source/_posts/fib-recur.md","hash":"63f31efb1f2841bdf87c519b3a8d1f680b67b012","modified":1529646742000},{"_id":"source/_posts/financial-reporting-intro.md","hash":"14d18344fb4c96724add3f6dbff1930ff463ce53","modified":1527696539000},{"_id":"source/_posts/first.md","hash":"3cb944124db99bd4a6100900dd0bf5d33b9be539","modified":1527650573000},{"_id":"source/_posts/flask-blog.md","hash":"48958f6ca55ce10e1a9984bd7783b1e9dae1bed7","modified":1529645888000},{"_id":"source/_posts/flask-flatpages-manual.md","hash":"db0ac06d6e76f9d578cd6134515be804ef5f2e4b","modified":1527731822000},{"_id":"source/_posts/flask-pagination.md","hash":"e80e4d75d8668cd9835198eefaf6908a649e864f","modified":1529644481000},{"_id":"source/_posts/frozen-flask-manual.md","hash":"0266bba36359c54016c53be426c4781774cf2c4b","modified":1527731843000},{"_id":"source/_posts/pdf-operation.md","hash":"df3fb273806171eca69e0df94ffb0fc3a3ff5102","modified":1559904686000},{"_id":"source/_posts/keyword-search.md","hash":"318688035dbae4fd9dd6a71ca7f8f4ea983ae902","modified":1529645112000},{"_id":"source/_posts/ip-proxy-pool.md","hash":"247df171a7ec28d247b642f8ade759ab073ff73a","modified":1529656883000},{"_id":"source/_posts/module-import.md","hash":"dbe94ed7c3c81096d5fd43d2fda5fdc2290170cc","modified":1529645169000},{"_id":"source/_posts/ternary-expression.md","hash":"c8cdb3138db55487f9d9955297a34cb6137c0275","modified":1529645884000},{"_id":"source/_posts/why-corporate-finance.md","hash":"8a960e9c92f905171fc9b4f136af6619472ce2ee","modified":1527724443000},{"_id":"source/categories/index.md","hash":"086101db89e861a8707f9a79c0db462dc748d7de","modified":1527737436000},{"_id":"themes/Next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1527476262000},{"_id":"themes/Next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1527476262000},{"_id":"themes/Next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1527476102000},{"_id":"themes/Next/.git/packed-refs","hash":"8e36811256ee380c2c65692f1b8f8e77c5bc33c9","modified":1527476262000},{"_id":"themes/Next/.git/index","hash":"6e896a8949e879fdf7d1cebb423de13328c3ac28","modified":1527476262000},{"_id":"themes/Next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1527476262000},{"_id":"themes/Next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1527476262000},{"_id":"themes/Next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1527476262000},{"_id":"themes/Next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1527476262000},{"_id":"themes/Next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1527476262000},{"_id":"themes/Next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1527476262000},{"_id":"themes/Next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1527476262000},{"_id":"themes/Next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1527476262000},{"_id":"themes/Next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1527476262000},{"_id":"themes/Next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1527476262000},{"_id":"themes/Next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1527476262000},{"_id":"themes/Next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1527476262000},{"_id":"themes/Next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1527476262000},{"_id":"themes/Next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1527476262000},{"_id":"themes/Next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1527476262000},{"_id":"themes/Next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1527476262000},{"_id":"themes/Next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1527476262000},{"_id":"themes/Next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1527476262000},{"_id":"themes/Next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1527476262000},{"_id":"themes/Next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1527476262000},{"_id":"themes/Next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1527476262000},{"_id":"themes/Next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1527476262000},{"_id":"themes/Next/source/.DS_Store","hash":"dd6ec92fd624b3410142b0dc0781a151866e5370","modified":1529653859000},{"_id":"themes/Next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1527476262000},{"_id":"themes/Next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1527476262000},{"_id":"themes/Next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1527476262000},{"_id":"themes/Next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1527476262000},{"_id":"themes/Next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1527476262000},{"_id":"themes/Next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1527476262000},{"_id":"themes/Next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1527476262000},{"_id":"themes/Next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1527476262000},{"_id":"themes/Next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1527476262000},{"_id":"themes/Next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1527476262000},{"_id":"themes/Next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1527476262000},{"_id":"source/_posts/crawler-5-bs4index/hook.png","hash":"4838e3806e418b9fe8e6745e0e48a6af4745b251","modified":1487478455000},{"_id":"source/_posts/crawler-5-bs4index/newtree.png","hash":"c22d3cac35b38923d7ccc5c1e019d7174adac027","modified":1487478457000},{"_id":"source/_posts/crawler-5-bs4index/bstree.png","hash":"7f7c7a594ff47ffb2a2bffc5940778be989bc1f0","modified":1487478454000},{"_id":"source/_posts/crawler-5-bs4index/stock.png","hash":"64be0d4e8f940e2935ac7d28657ae0df40fd5c2a","modified":1487478467000},{"_id":"source/_posts/data-visualization-1/npvprofile1.png","hash":"a20163e0283512da0c48996504618cd3cb319f96","modified":1483014097000},{"_id":"source/_posts/data-visualization-1/npvprofile2.png","hash":"7d913251a05c3e3afb6e354b97c95242903cfbd9","modified":1483014097000},{"_id":"source/_posts/data-visualization-2/barh.png","hash":"64803376f151b7753c44be39161ea2b43664cf9b","modified":1483014097000},{"_id":"source/_posts/data-visualization-2/bar.png","hash":"132f0ec2a91e517bc4dac00eb6311de4740b2af5","modified":1483014097000},{"_id":"source/_posts/data-visualization-2/data.png","hash":"080884862c41fca484d85126c4261d0cf55613ca","modified":1483014097000},{"_id":"source/_posts/data-visualization-2/hist.png","hash":"eb9825b1c2893fc41969bdb718ea3f146a171116","modified":1483014097000},{"_id":"source/_posts/data-visualization-1/npvprofile3.png","hash":"3da23479628e5b73a598cb2623e9b28ecc419dd6","modified":1483014097000},{"_id":"source/_posts/data-visualization-2/line.png","hash":"4dacb2595c4366df0e50a01e6f184fb9ceb5c5e4","modified":1483014097000},{"_id":"source/_posts/data-visualization-2/linecompare.png","hash":"333bb3699026d1cd8ccc2adb223f598cf8d4683b","modified":1483014097000},{"_id":"source/_posts/data-visualization-2/scatter.png","hash":"1aeeab922ad8a06c38013bfc7f1138beedf44daa","modified":1483014097000},{"_id":"source/_posts/data-visualization-2/pie.png","hash":"c349f97b1671f096fd73ad1b204e34ddcec40dac","modified":1483014097000},{"_id":"source/_posts/data-visualization-2/sp500.png","hash":"116b68019af445db2ecbf46d9c70bf429594e936","modified":1483014097000},{"_id":"source/_posts/data-visualization-2/unpie.png","hash":"c89a7f286c017525799f4a34617840927a37168c","modified":1483014097000},{"_id":"source/_posts/data-visualization-2/twobars.png","hash":"b4bd4026527c666f390241c26e6aa36a071283bb","modified":1483014097000},{"_id":"source/_posts/data-visualization-2/tenQ.png","hash":"9e53f02c7ff53b55a1950a7543c4879e4142c4a4","modified":1483014097000},{"_id":"source/_posts/echo-control-2048/2048.png","hash":"d5152e61769944f6a8b85f1d231f8200fd8def0f","modified":1483014097000},{"_id":"source/_posts/efficient-frontier/optresult-min.png","hash":"03a5537d4296eedffec8692bf8f82cf83684ab9c","modified":1488086460000},{"_id":"source/_posts/efficient-frontier/result.png","hash":"2b190ac8fa5ebd492199e0cdc2f6f3913dc63eca","modified":1488086473000},{"_id":"source/_posts/ip-proxy-pool/flow_min.png","hash":"1169a3919a2c4f62ecaec2ec4036262c197111a5","modified":1529656833000},{"_id":"source/_posts/fib-recur/slowfastfib.png","hash":"16aeeccfadbb94cff541b12f6f9d75a7293c610f","modified":1483048763000},{"_id":"themes/Next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527476262000},{"_id":"source/_posts/crawler-4-selenium/search.png","hash":"52eda858c3d80b1877736fd2edfd266b8ebaba8a","modified":1486004526000},{"_id":"themes/Next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1527476102000},{"_id":"themes/Next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1527476102000},{"_id":"themes/Next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1527476102000},{"_id":"themes/Next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1527476102000},{"_id":"themes/Next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1527476102000},{"_id":"themes/Next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1527476102000},{"_id":"themes/Next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1527476102000},{"_id":"themes/Next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1527476102000},{"_id":"themes/Next/.git/logs/HEAD","hash":"fbbd475809286e0b6c922cb28851a10981827115","modified":1527476262000},{"_id":"themes/Next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1527476102000},{"_id":"themes/Next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1527476102000},{"_id":"themes/Next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1527476102000},{"_id":"themes/Next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1527476262000},{"_id":"themes/Next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1527476262000},{"_id":"themes/Next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1527476262000},{"_id":"themes/Next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1527476262000},{"_id":"themes/Next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1527476262000},{"_id":"themes/Next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1527476262000},{"_id":"themes/Next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1527476262000},{"_id":"themes/Next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1527476262000},{"_id":"themes/Next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1527476262000},{"_id":"themes/Next/source/css/.DS_Store","hash":"fc0d67bc3a0c558bdeb0c9bc4ebbcc32158ba6f1","modified":1527920462000},{"_id":"themes/Next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1527476262000},{"_id":"themes/Next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1527476262000},{"_id":"themes/Next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1527476262000},{"_id":"themes/Next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1527476262000},{"_id":"themes/Next/source/images/.DS_Store","hash":"0aaa2f36cd446684412b1d5dbdf1e1654f8f070b","modified":1529982923000},{"_id":"themes/Next/source/images/Sign.png","hash":"0ceb4e84fbac3ffffcfcb91bbbfca765e80c8905","modified":1529653807000},{"_id":"themes/Next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1527476262000},{"_id":"themes/Next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1527476262000},{"_id":"themes/Next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1527476262000},{"_id":"themes/Next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1527476262000},{"_id":"themes/Next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1527476262000},{"_id":"themes/Next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1527476262000},{"_id":"themes/Next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1527476262000},{"_id":"themes/Next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1527476262000},{"_id":"themes/Next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1527476262000},{"_id":"themes/Next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1527476262000},{"_id":"themes/Next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1527476262000},{"_id":"themes/Next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1527476262000},{"_id":"themes/Next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1527476262000},{"_id":"themes/Next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1527476262000},{"_id":"themes/Next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1527476262000},{"_id":"themes/Next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1527476262000},{"_id":"themes/Next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1527476262000},{"_id":"themes/Next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1527476262000},{"_id":"themes/Next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1527476262000},{"_id":"themes/Next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1527476262000},{"_id":"themes/Next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1527476262000},{"_id":"themes/Next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1527476262000},{"_id":"themes/Next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1527476262000},{"_id":"themes/Next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1527476262000},{"_id":"themes/Next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1527476262000},{"_id":"themes/Next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1527476262000},{"_id":"themes/Next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1527476262000},{"_id":"themes/Next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1527476262000},{"_id":"themes/Next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1527476262000},{"_id":"themes/Next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1527476262000},{"_id":"themes/Next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1527476262000},{"_id":"themes/Next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1527476262000},{"_id":"themes/Next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527476262000},{"_id":"themes/Next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527476262000},{"_id":"themes/Next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527476262000},{"_id":"themes/Next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527476262000},{"_id":"themes/Next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527476262000},{"_id":"themes/Next/source/images/avatar1.jpg","hash":"9b7880a6d7b171a4b4b6c0b36470823ef44a3b0f","modified":1491443965000},{"_id":"themes/Next/source/images/avatar.jpg","hash":"3dff7d670a61eaf75f8d28dcc68f8eea2a2f5304","modified":1529647794000},{"_id":"themes/Next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527476262000},{"_id":"themes/Next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527476262000},{"_id":"themes/Next/.git/refs/heads/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1527476262000},{"_id":"themes/Next/source/css/_common/.DS_Store","hash":"983751f8104d7d997f4f47c6d15647ff181de82f","modified":1527920540000},{"_id":"themes/Next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1527476262000},{"_id":"themes/Next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1527476262000},{"_id":"themes/Next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1527476262000},{"_id":"themes/Next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1527476262000},{"_id":"themes/Next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1527476262000},{"_id":"themes/Next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1527476262000},{"_id":"themes/Next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1527476262000},{"_id":"themes/Next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1527476262000},{"_id":"themes/Next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1527476262000},{"_id":"themes/Next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1527476262000},{"_id":"themes/Next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1527476262000},{"_id":"themes/Next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1527476262000},{"_id":"themes/Next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1527476262000},{"_id":"themes/Next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1527476262000},{"_id":"themes/Next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1527476262000},{"_id":"themes/Next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1527476262000},{"_id":"themes/Next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1527476262000},{"_id":"themes/Next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1527476262000},{"_id":"themes/Next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1527476262000},{"_id":"themes/Next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1527476262000},{"_id":"themes/Next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1527476262000},{"_id":"themes/Next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1527476262000},{"_id":"themes/Next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1527476262000},{"_id":"themes/Next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1527476262000},{"_id":"themes/Next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1527476262000},{"_id":"themes/Next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1527476262000},{"_id":"themes/Next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1527476262000},{"_id":"themes/Next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1527476262000},{"_id":"themes/Next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1527476262000},{"_id":"themes/Next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1527476262000},{"_id":"themes/Next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1527476262000},{"_id":"themes/Next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1527476262000},{"_id":"themes/Next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1527476262000},{"_id":"themes/Next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1527476262000},{"_id":"themes/Next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1527476262000},{"_id":"themes/Next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1527476262000},{"_id":"themes/Next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1527476262000},{"_id":"themes/Next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1527476262000},{"_id":"themes/Next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1527476262000},{"_id":"themes/Next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1527476262000},{"_id":"themes/Next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1527476262000},{"_id":"themes/Next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1527476262000},{"_id":"themes/Next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1527476262000},{"_id":"themes/Next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1527476262000},{"_id":"themes/Next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1527476262000},{"_id":"themes/Next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1527476262000},{"_id":"themes/Next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1527476262000},{"_id":"themes/Next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1527476262000},{"_id":"themes/Next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1527476262000},{"_id":"themes/Next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1527476262000},{"_id":"themes/Next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1527476262000},{"_id":"themes/Next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1527476262000},{"_id":"themes/Next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1527476262000},{"_id":"themes/Next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1527476262000},{"_id":"themes/Next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1527476262000},{"_id":"themes/Next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1527476262000},{"_id":"themes/Next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1527476262000},{"_id":"themes/Next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1527476262000},{"_id":"themes/Next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1527476262000},{"_id":"themes/Next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1527476262000},{"_id":"themes/Next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1527476262000},{"_id":"themes/Next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1527476262000},{"_id":"themes/Next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1527476262000},{"_id":"themes/Next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1527476262000},{"_id":"themes/Next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1527476262000},{"_id":"themes/Next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1527476262000},{"_id":"themes/Next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1527476262000},{"_id":"themes/Next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1527476262000},{"_id":"themes/Next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1527476262000},{"_id":"themes/Next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1527476262000},{"_id":"themes/Next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1527476262000},{"_id":"themes/Next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1527476262000},{"_id":"themes/Next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1527476262000},{"_id":"themes/Next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1527476262000},{"_id":"themes/Next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1527476262000},{"_id":"themes/Next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1527476262000},{"_id":"themes/Next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1527476262000},{"_id":"themes/Next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1527476262000},{"_id":"themes/Next/.git/logs/refs/heads/master","hash":"fbbd475809286e0b6c922cb28851a10981827115","modified":1527476262000},{"_id":"themes/Next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/.DS_Store","hash":"4eac1b120815de27ba60d2cba6131d6d7b6c28e5","modified":1527920540000},{"_id":"themes/Next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1527476262000},{"_id":"themes/Next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1527476262000},{"_id":"themes/Next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1527476262000},{"_id":"themes/Next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1527476262000},{"_id":"themes/Next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1527476262000},{"_id":"themes/Next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1527476262000},{"_id":"themes/Next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1527476262000},{"_id":"themes/Next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1527476262000},{"_id":"themes/Next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1527476262000},{"_id":"themes/Next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1527476262000},{"_id":"themes/Next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1527476262000},{"_id":"themes/Next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1527476262000},{"_id":"themes/Next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1527476262000},{"_id":"themes/Next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1527476262000},{"_id":"themes/Next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1527476262000},{"_id":"themes/Next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1527476262000},{"_id":"themes/Next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1527476262000},{"_id":"themes/Next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1527476262000},{"_id":"themes/Next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1527476262000},{"_id":"themes/Next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1527476262000},{"_id":"themes/Next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1527476262000},{"_id":"themes/Next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1527476262000},{"_id":"themes/Next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1527476262000},{"_id":"themes/Next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1527476262000},{"_id":"themes/Next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1527476262000},{"_id":"themes/Next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1527476262000},{"_id":"themes/Next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1527476262000},{"_id":"themes/Next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1527476262000},{"_id":"themes/Next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1527476262000},{"_id":"themes/Next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1527476262000},{"_id":"themes/Next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1527476262000},{"_id":"themes/Next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1527476262000},{"_id":"themes/Next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1527476262000},{"_id":"themes/Next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1527476262000},{"_id":"themes/Next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1527476262000},{"_id":"themes/Next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1527476262000},{"_id":"themes/Next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1527476262000},{"_id":"themes/Next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1527476262000},{"_id":"themes/Next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1527476262000},{"_id":"themes/Next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1527476262000},{"_id":"themes/Next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1527476262000},{"_id":"themes/Next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1527476262000},{"_id":"themes/Next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1527476262000},{"_id":"themes/Next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1527476262000},{"_id":"themes/Next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1527476262000},{"_id":"themes/Next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1527476262000},{"_id":"themes/Next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1527476262000},{"_id":"themes/Next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1527476262000},{"_id":"themes/Next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1527476262000},{"_id":"themes/Next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1527476262000},{"_id":"themes/Next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1527476262000},{"_id":"themes/Next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1527476262000},{"_id":"themes/Next/.git/logs/refs/remotes/origin/HEAD","hash":"fbbd475809286e0b6c922cb28851a10981827115","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1527476262000},{"_id":"themes/Next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1527476262000},{"_id":"themes/Next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1527476262000},{"_id":"themes/Next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1527476262000},{"_id":"themes/Next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1527476262000},{"_id":"themes/Next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1527476262000},{"_id":"themes/Next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1527476262000},{"_id":"themes/Next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1527476262000},{"_id":"themes/Next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1527476262000},{"_id":"themes/Next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1527476262000},{"_id":"themes/Next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1527476262000},{"_id":"themes/Next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1527476262000},{"_id":"themes/Next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1527476262000},{"_id":"themes/Next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1527476262000},{"_id":"themes/Next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1527476262000},{"_id":"themes/Next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1527476262000},{"_id":"themes/Next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1527476262000},{"_id":"themes/Next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1527476262000},{"_id":"themes/Next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1527476262000},{"_id":"themes/Next/.git/objects/pack/pack-b2b65ac9ce13f7c74817e2d796fa7bdf726ce713.idx","hash":"cf8585f16cdaee972295179072632318da32a115","modified":1527476262000},{"_id":"themes/Next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1527476262000},{"_id":"themes/Next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1527476262000},{"_id":"themes/Next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1527476262000},{"_id":"themes/Next/.git/objects/pack/pack-b2b65ac9ce13f7c74817e2d796fa7bdf726ce713.pack","hash":"9b04d947756a6934b8a860b90c69f13cdf8b4733","modified":1527476262000},{"_id":"source/_posts/go-intro.md","hash":"ef2df9b66e3468572cc067b6151298fb19db82be","modified":1559917652000},{"_id":"public/article/efficient-frontier/index.html","hash":"3bd10ce7cd2b691c4e6e96cdb675834a3eac5cbd","modified":1559919003693},{"_id":"public/article/ip-proxy-pool/index.html","hash":"ae348930290a27b108b32fb6bbaa979e623b1294","modified":1559919003710},{"_id":"public/article/crawler-5-bs4index/index.html","hash":"ca6f1e978b5788430ad7e8fe587774beb025c819","modified":1559919003711},{"_id":"public/article/crawler-4-selenium/index.html","hash":"b2a9f2d55ba8d40bef0a1f5bb13b59fcaeb01897","modified":1559919003711},{"_id":"public/article/fib-recur/index.html","hash":"64a6e26abde95cf8e2b4ccf202b40d992aba854c","modified":1559919003711},{"_id":"public/article/data-visualization-2/index.html","hash":"c8eb8de8ca297623b15195a6ea21336378ef9886","modified":1559919003711},{"_id":"public/article/first/index.html","hash":"99a1d64e9be9fab9d6a113e5106146bc53fc6411","modified":1559919003933},{"_id":"public/categories/Python爬虫/index.html","hash":"10f2c89af54981fc783bcf64228ac0807d671589","modified":1559919003934},{"_id":"public/categories/Python/index.html","hash":"87b2bcf27d73629ac8024dc67939d3a7b0c69d93","modified":1559919003934},{"_id":"public/categories/随笔/index.html","hash":"d5a2d7fe040675dee26c7fd26bc0ad244f8b9574","modified":1559919003935},{"_id":"public/categories/Python数据可视化/index.html","hash":"6141a5ef79e453eee25f2aafdb0bf0779ce1174a","modified":1559919003935},{"_id":"public/categories/数据可视化/index.html","hash":"4c0e68769fbee61268d9053be94672649baa8a3d","modified":1559919003935},{"_id":"public/categories/Python金融/index.html","hash":"8645ebeb180e2a14f0312669f659e63dc0d3d565","modified":1559919003935},{"_id":"public/categories/Finance/index.html","hash":"9aaf68a853281cdfb03be329ecdbb18cf38052c3","modified":1559919003935},{"_id":"public/archives/page/3/index.html","hash":"d87bd286ca4123118a16739efda57ae034e97e61","modified":1559919003935},{"_id":"public/archives/2016/page/2/index.html","hash":"3f675e88fedadbe443a5b73644ecc9888f2c78f4","modified":1559919003935},{"_id":"public/archives/2016/08/index.html","hash":"0fcdaa459c9483de80ca743b7ea2dea45fbd4468","modified":1559919003935},{"_id":"public/archives/2016/09/index.html","hash":"5d8222a7635f0672d58f3a022362bebdc6e072cb","modified":1559919003935},{"_id":"public/archives/2016/10/index.html","hash":"207b4f13319d9ab63c23a5559b800086de66a675","modified":1559919003935},{"_id":"public/archives/2016/12/index.html","hash":"452b8fcc12b4b2eb5daad21effb008b9f128b60c","modified":1559919003935},{"_id":"public/archives/2016/11/index.html","hash":"b20d7f151ee7c599fe6313b2c36dd11fe153dd67","modified":1559919003935},{"_id":"public/archives/2017/index.html","hash":"6fe72354c3be7e7963e23036bcfbcd6cbe4056f9","modified":1559919003935},{"_id":"public/categories/Flask/index.html","hash":"0e9edf14171e8d3cdf7d09ea0f28584b5d7cd0f4","modified":1559919003935},{"_id":"public/categories/index.html","hash":"5ce990f24c3a2a284c137eaee2fb71eb9127e655","modified":1559919003935},{"_id":"public/archives/2017/02/index.html","hash":"cba44dc5460b094e380743eb9e9c0265e3644ed2","modified":1559919003935},{"_id":"public/archives/2018/index.html","hash":"3a9fd13ab28e2c7aa6bbe56b40193d320d29e8bb","modified":1559919003935},{"_id":"public/archives/2018/04/index.html","hash":"5f19e6b4a15f250d505ab16f6e8bf203d25df8ef","modified":1559919003935},{"_id":"public/article/pdf-operation/index.html","hash":"7893807d6cbdc105e967a3e745f238e39286718c","modified":1559919003935},{"_id":"public/article/keyword-search/index.html","hash":"97c5e1a7e63fe2b775424854291966e8d2bd1ebb","modified":1559919003935},{"_id":"public/article/echo-control-2048/index.html","hash":"c47507e26c104408ed20b8de880f72fc8cf0f766","modified":1559919003935},{"_id":"public/article/data-visualization-1/index.html","hash":"2693d579c3f2a912308b45aa7b2f23f14d020716","modified":1559919003935},{"_id":"public/article/crawler-3/index.html","hash":"02a50a35e3435d1af15646aa1196ccae6f5ea9c2","modified":1559919003935},{"_id":"public/article/crawler-2/index.html","hash":"05e946d7b9b18003ee4c323973f1686e65816978","modified":1559919003936},{"_id":"public/article/crawler-1/index.html","hash":"f3281d577082454fa63120394714c7dc4917b39d","modified":1559919003936},{"_id":"public/article/flask-pagination/index.html","hash":"e1f41af0826e262573a354cb917f39c8d9cddc46","modified":1559919003936},{"_id":"public/article/financial-reporting-intro/index.html","hash":"e899fb8040b82eaecbbba66ef7b7d41756a7f5f5","modified":1559919003936},{"_id":"public/article/ternary-expression/index.html","hash":"70b504a35744cbdce8e0caa43b438e8508c1ad3e","modified":1559919003936},{"_id":"public/article/flask-blog/index.html","hash":"4e933174e29dd650d361482ea406e515c011e86f","modified":1559919003936},{"_id":"public/article/why-corporate-finance/index.html","hash":"856c5610e9314b172596c8bb45f6089847d15586","modified":1559919003936},{"_id":"public/article/module-import/index.html","hash":"442acc23616befc130fc36320e35a9cc7a874a29","modified":1559919003936},{"_id":"public/article/flask-flatpages-manual/index.html","hash":"c7860314b1db5b273d53c934601452bf25a970c2","modified":1559919003936},{"_id":"public/article/frozen-flask-manual/index.html","hash":"454790e923edfb8af1fa51ac079588511f277701","modified":1559919003936},{"_id":"public/archives/index.html","hash":"043921a45d62ae647b279eb1609715b3d7b9b06e","modified":1559919003936},{"_id":"public/archives/page/2/index.html","hash":"5f92a2e1b8f4a31ec6f6bd0f2cd6ef505945e625","modified":1559919003936},{"_id":"public/archives/2016/index.html","hash":"0c4f8c724645181c4996514025ebd3c615127357","modified":1559919003936},{"_id":"public/index.html","hash":"0eed82b8d52f43c675f9b89067f791b8d080e5c6","modified":1559919003936},{"_id":"public/page/3/index.html","hash":"32cc170f81d47d616020b6ed6042fb5a53ba2655","modified":1559919003936},{"_id":"public/page/2/index.html","hash":"55dcd8f0d49a11a1696e39a28d4e7b69251b9c5a","modified":1559919003936},{"_id":"public/categories/Go/index.html","hash":"e22b68ab2a9443f0e92de7e76e98c49e52d5d3e8","modified":1559919003938},{"_id":"public/archives/2018/06/index.html","hash":"cdf21930ca1943034a9d9015ac8571d416a6a58e","modified":1559919003938},{"_id":"public/archives/2019/index.html","hash":"7d51982b6c9979849c31c4ce9e8f341753700f57","modified":1559919003938},{"_id":"public/archives/2019/06/index.html","hash":"39e232b7721ab244e74f3615a71df6ac46a2814d","modified":1559919003938},{"_id":"public/article/go-intro/index.html","hash":"b553eab56e3c9707d5a689f0f8ea003d9a242ba5","modified":1559919003938}],"Category":[{"name":"Python","_id":"cjiqvlnuh0002glu3rv8cw646"},{"name":"Python爬虫","_id":"cjiqvlnun0006glu3m5fvul40"},{"name":"Flask","_id":"cjiqvlnuq000aglu325ck4hu5"},{"name":"随笔","_id":"cjiqvlnuv000fglu33a9lacfa"},{"name":"Python数据可视化","_id":"cjiqvlnwe000xglu3pekuly4n"},{"name":"数据可视化","_id":"cjiqvlnwh0012glu3f1pknhf3"},{"name":"Python金融","_id":"cjiqvlnwj0015glu34h6981j9"},{"name":"Finance","_id":"cjiqvlo1t001dglu3wrgh95qo"},{"name":"Go","_id":"cjwlypz5a0001xho93xv3igt4"}],"Data":[],"Page":[{"title":"分类","date":"2014-12-22T04:39:04.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2014-12-22 12:39:04\ntype: \"categories\"\n---\n","updated":"2018-05-31T03:30:36.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjiqvlnwa000qglu3bptmuxhm","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Python爬虫:多线程爬虫入门","date":"2016-10-22T02:14:42.000Z","_content":"\n看了[上一篇文章](../12)的朋友们会发现虽然我们可以爬取整个相册，但是**速度非常慢**，需要一个一个来爬，排队等待的效率是极其低下的。针对这种大部分时间浪费在网络阻塞的情况，python的多线程方法在这里大显神威。那什么是多线程呢，很简单: 假如需要做的事情是搬砖，而电脑是搬砖工人，通常程序都是单线程运行。也就是说只有一个工人在搬砖。如果觉得这样速度很慢，你可以\n\n> **多请几个工人**\n\n\n<!--More-->\n\n\n首先让我们引入python自带的多线程的库threading\n\n\t```Python\n\timport threading\n\t```\n\n## 改良我们的worker()\n\n\t```Python\n\tdef worker():\n\t\t\tglobal girl_entry\n\t\t\twhile girl_entry:\n\t\t\t\tlock.acquire()\n\t\t\t\tentry_base = girl_entry.pop(0)\n\t\t\t\tlock.release()\n\t\t\t\tpic_link_pool=pic_seeker(entry_base[0])\n\t\t\t\tpic_downloader(pic_link_pool,entry_base[1])\n    ```\n和之前相比我们的worker\n\n- 在第3行添加了循环\n- 在第5，7行添加了锁的操作\n\n### 循环\n\n一个不能自发工作的worker不是好worker,所以我们将之前主函数的循环移动到worker里面使之能够获得下一个链接继续工作\n\n### 锁的操作\n\n由于我们将要使用多线程，为了保证girl_entry列表不会被弄乱，或产生不必要的错误（几个线程同时获得了一个entry_link)。我们必须对该全局变量的读写操作上锁来保证相同时间内只能有一个线程从该列表取得入口链接，与取得链接操作对应的是第5行：\n\t\n\t\tentry_base = girl_entry.pop(0)\n我们只需要在该操作的前后来进行锁的获取和释放即可。\n\n\n## 创建一个多线程爬虫的类\n\n\n\t```Python\n\tclass Worker_thread(threading.Thread):\n\t\n\t\t\tdef __init__(self,func,thread_id):\n\t\t\t\t\tsuper(Worker_thread,self).__init__()\n\t\t\t\t\tself.thread_id = thread_id\n\t\t\t\t\tself.func = func\n\t\t\tdef run(self):\n\t\t\t\t\tprint(\"线程%d启动\"%self.thread_id)\n\t\t\t\t\tself.func()\n\t\t\t\t\tprint(\"线程%d结束\"%self.thread_id)\n\t```\n\n- 我们创建了一个Worker_thread继承了threading.Thread里面定义的所有属性和方法，只需要添加你想要使该线程运行的内容即可。\n- 在这里我们使用self.func来接受外部传入的函数作为该Worker_thread中运行的函数。在后面我们会将worker传入。\n- self.thread_id是后外部传入的数字，用来表示线程名字，可以去掉\n\n## 启动多线程\n\n\t```Python\n\tdef main():\n\t\tthreads = [Worker_thread(worker,i) for i in range(1,3)]\n\t\tfor thread in threads:\n\t\t\tthread.start()\n\t\tfor t in threads:\n\t\t\tt.join()\n\t```\n\n- 第2行我们使用列表解析式生成了多个线程类对象（Worker_thread)，将我们的worker作为对象传入\n- 第3,4行我们使用 .start()方法启动每一条线程，注意我们使用的是start方法而不是run方法，但是我们实际上执行的是run\n- 第5，6行表示，只有当子线程结束后，主线程才可以结束。使用.join()方法。因为默认我们的主线程结束后子线程会被放入后台继续运行的。\n\n\n\n","source":"_posts/crawler-3.md","raw":"---\ntitle: Python爬虫:多线程爬虫入门\ndate: 2016-10-22 10:14:42\ntags:\ncategories: Python\n---\n\n看了[上一篇文章](../12)的朋友们会发现虽然我们可以爬取整个相册，但是**速度非常慢**，需要一个一个来爬，排队等待的效率是极其低下的。针对这种大部分时间浪费在网络阻塞的情况，python的多线程方法在这里大显神威。那什么是多线程呢，很简单: 假如需要做的事情是搬砖，而电脑是搬砖工人，通常程序都是单线程运行。也就是说只有一个工人在搬砖。如果觉得这样速度很慢，你可以\n\n> **多请几个工人**\n\n\n<!--More-->\n\n\n首先让我们引入python自带的多线程的库threading\n\n\t```Python\n\timport threading\n\t```\n\n## 改良我们的worker()\n\n\t```Python\n\tdef worker():\n\t\t\tglobal girl_entry\n\t\t\twhile girl_entry:\n\t\t\t\tlock.acquire()\n\t\t\t\tentry_base = girl_entry.pop(0)\n\t\t\t\tlock.release()\n\t\t\t\tpic_link_pool=pic_seeker(entry_base[0])\n\t\t\t\tpic_downloader(pic_link_pool,entry_base[1])\n    ```\n和之前相比我们的worker\n\n- 在第3行添加了循环\n- 在第5，7行添加了锁的操作\n\n### 循环\n\n一个不能自发工作的worker不是好worker,所以我们将之前主函数的循环移动到worker里面使之能够获得下一个链接继续工作\n\n### 锁的操作\n\n由于我们将要使用多线程，为了保证girl_entry列表不会被弄乱，或产生不必要的错误（几个线程同时获得了一个entry_link)。我们必须对该全局变量的读写操作上锁来保证相同时间内只能有一个线程从该列表取得入口链接，与取得链接操作对应的是第5行：\n\t\n\t\tentry_base = girl_entry.pop(0)\n我们只需要在该操作的前后来进行锁的获取和释放即可。\n\n\n## 创建一个多线程爬虫的类\n\n\n\t```Python\n\tclass Worker_thread(threading.Thread):\n\t\n\t\t\tdef __init__(self,func,thread_id):\n\t\t\t\t\tsuper(Worker_thread,self).__init__()\n\t\t\t\t\tself.thread_id = thread_id\n\t\t\t\t\tself.func = func\n\t\t\tdef run(self):\n\t\t\t\t\tprint(\"线程%d启动\"%self.thread_id)\n\t\t\t\t\tself.func()\n\t\t\t\t\tprint(\"线程%d结束\"%self.thread_id)\n\t```\n\n- 我们创建了一个Worker_thread继承了threading.Thread里面定义的所有属性和方法，只需要添加你想要使该线程运行的内容即可。\n- 在这里我们使用self.func来接受外部传入的函数作为该Worker_thread中运行的函数。在后面我们会将worker传入。\n- self.thread_id是后外部传入的数字，用来表示线程名字，可以去掉\n\n## 启动多线程\n\n\t```Python\n\tdef main():\n\t\tthreads = [Worker_thread(worker,i) for i in range(1,3)]\n\t\tfor thread in threads:\n\t\t\tthread.start()\n\t\tfor t in threads:\n\t\t\tt.join()\n\t```\n\n- 第2行我们使用列表解析式生成了多个线程类对象（Worker_thread)，将我们的worker作为对象传入\n- 第3,4行我们使用 .start()方法启动每一条线程，注意我们使用的是start方法而不是run方法，但是我们实际上执行的是run\n- 第5，6行表示，只有当子线程结束后，主线程才可以结束。使用.join()方法。因为默认我们的主线程结束后子线程会被放入后台继续运行的。\n\n\n\n","slug":"crawler-3","published":1,"updated":"2018-06-22T03:08:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiqvlnua0000glu3xwzldp06","content":"<p>看了<a href=\"../12\">上一篇文章</a>的朋友们会发现虽然我们可以爬取整个相册，但是<strong>速度非常慢</strong>，需要一个一个来爬，排队等待的效率是极其低下的。针对这种大部分时间浪费在网络阻塞的情况，python的多线程方法在这里大显神威。那什么是多线程呢，很简单: 假如需要做的事情是搬砖，而电脑是搬砖工人，通常程序都是单线程运行。也就是说只有一个工人在搬砖。如果觉得这样速度很慢，你可以</p>\n<blockquote>\n<p><strong>多请几个工人</strong></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>首先让我们引入python自带的多线程的库threading</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br></pre></td></tr></table></figure>\n</code></pre><h2 id=\"改良我们的worker\"><a href=\"#改良我们的worker\" class=\"headerlink\" title=\"改良我们的worker()\"></a>改良我们的worker()</h2><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">worker</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">global</span> girl_entry</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> girl_entry:</span><br><span class=\"line\">\t\t\tlock.acquire()</span><br><span class=\"line\">\t\t\tentry_base = girl_entry.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tlock.release()</span><br><span class=\"line\">\t\t\tpic_link_pool=pic_seeker(entry_base[<span class=\"number\">0</span>])</span><br><span class=\"line\">\t\t\tpic_downloader(pic_link_pool,entry_base[<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n</code></pre><p>和之前相比我们的worker</p>\n<ul>\n<li>在第3行添加了循环</li>\n<li>在第5，7行添加了锁的操作</li>\n</ul>\n<h3 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h3><p>一个不能自发工作的worker不是好worker,所以我们将之前主函数的循环移动到worker里面使之能够获得下一个链接继续工作</p>\n<h3 id=\"锁的操作\"><a href=\"#锁的操作\" class=\"headerlink\" title=\"锁的操作\"></a>锁的操作</h3><p>由于我们将要使用多线程，为了保证girl_entry列表不会被弄乱，或产生不必要的错误（几个线程同时获得了一个entry_link)。我们必须对该全局变量的读写操作上锁来保证相同时间内只能有一个线程从该列表取得入口链接，与取得链接操作对应的是第5行：</p>\n<pre><code>entry_base = girl_entry.pop(0)\n</code></pre><p>我们只需要在该操作的前后来进行锁的获取和释放即可。</p>\n<h2 id=\"创建一个多线程爬虫的类\"><a href=\"#创建一个多线程爬虫的类\" class=\"headerlink\" title=\"创建一个多线程爬虫的类\"></a>创建一个多线程爬虫的类</h2><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker_thread</span><span class=\"params\">(threading.Thread)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,func,thread_id)</span>:</span></span><br><span class=\"line\">\t\t\t\tsuper(Worker_thread,self).__init__()</span><br><span class=\"line\">\t\t\t\tself.thread_id = thread_id</span><br><span class=\"line\">\t\t\t\tself.func = func</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t\t\t\tprint(<span class=\"string\">\"线程%d启动\"</span>%self.thread_id)</span><br><span class=\"line\">\t\t\t\tself.func()</span><br><span class=\"line\">\t\t\t\tprint(<span class=\"string\">\"线程%d结束\"</span>%self.thread_id)</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>我们创建了一个Worker_thread继承了threading.Thread里面定义的所有属性和方法，只需要添加你想要使该线程运行的内容即可。</li>\n<li>在这里我们使用self.func来接受外部传入的函数作为该Worker_thread中运行的函数。在后面我们会将worker传入。</li>\n<li>self.thread_id是后外部传入的数字，用来表示线程名字，可以去掉</li>\n</ul>\n<h2 id=\"启动多线程\"><a href=\"#启动多线程\" class=\"headerlink\" title=\"启动多线程\"></a>启动多线程</h2><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\tthreads = [Worker_thread(worker,i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">3</span>)]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> thread <span class=\"keyword\">in</span> threads:</span><br><span class=\"line\">\t\tthread.start()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> threads:</span><br><span class=\"line\">\t\tt.join()</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>第2行我们使用列表解析式生成了多个线程类对象（Worker_thread)，将我们的worker作为对象传入</li>\n<li>第3,4行我们使用 .start()方法启动每一条线程，注意我们使用的是start方法而不是run方法，但是我们实际上执行的是run</li>\n<li>第5，6行表示，只有当子线程结束后，主线程才可以结束。使用.join()方法。因为默认我们的主线程结束后子线程会被放入后台继续运行的。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>看了<a href=\"../12\">上一篇文章</a>的朋友们会发现虽然我们可以爬取整个相册，但是<strong>速度非常慢</strong>，需要一个一个来爬，排队等待的效率是极其低下的。针对这种大部分时间浪费在网络阻塞的情况，python的多线程方法在这里大显神威。那什么是多线程呢，很简单: 假如需要做的事情是搬砖，而电脑是搬砖工人，通常程序都是单线程运行。也就是说只有一个工人在搬砖。如果觉得这样速度很慢，你可以</p>\n<blockquote>\n<p><strong>多请几个工人</strong></p>\n</blockquote>","more":"<p>首先让我们引入python自带的多线程的库threading</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br></pre></td></tr></table></figure>\n</code></pre><h2 id=\"改良我们的worker\"><a href=\"#改良我们的worker\" class=\"headerlink\" title=\"改良我们的worker()\"></a>改良我们的worker()</h2><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">worker</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">global</span> girl_entry</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> girl_entry:</span><br><span class=\"line\">\t\t\tlock.acquire()</span><br><span class=\"line\">\t\t\tentry_base = girl_entry.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tlock.release()</span><br><span class=\"line\">\t\t\tpic_link_pool=pic_seeker(entry_base[<span class=\"number\">0</span>])</span><br><span class=\"line\">\t\t\tpic_downloader(pic_link_pool,entry_base[<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n</code></pre><p>和之前相比我们的worker</p>\n<ul>\n<li>在第3行添加了循环</li>\n<li>在第5，7行添加了锁的操作</li>\n</ul>\n<h3 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h3><p>一个不能自发工作的worker不是好worker,所以我们将之前主函数的循环移动到worker里面使之能够获得下一个链接继续工作</p>\n<h3 id=\"锁的操作\"><a href=\"#锁的操作\" class=\"headerlink\" title=\"锁的操作\"></a>锁的操作</h3><p>由于我们将要使用多线程，为了保证girl_entry列表不会被弄乱，或产生不必要的错误（几个线程同时获得了一个entry_link)。我们必须对该全局变量的读写操作上锁来保证相同时间内只能有一个线程从该列表取得入口链接，与取得链接操作对应的是第5行：</p>\n<pre><code>entry_base = girl_entry.pop(0)\n</code></pre><p>我们只需要在该操作的前后来进行锁的获取和释放即可。</p>\n<h2 id=\"创建一个多线程爬虫的类\"><a href=\"#创建一个多线程爬虫的类\" class=\"headerlink\" title=\"创建一个多线程爬虫的类\"></a>创建一个多线程爬虫的类</h2><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker_thread</span><span class=\"params\">(threading.Thread)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,func,thread_id)</span>:</span></span><br><span class=\"line\">\t\t\t\tsuper(Worker_thread,self).__init__()</span><br><span class=\"line\">\t\t\t\tself.thread_id = thread_id</span><br><span class=\"line\">\t\t\t\tself.func = func</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t\t\t\tprint(<span class=\"string\">\"线程%d启动\"</span>%self.thread_id)</span><br><span class=\"line\">\t\t\t\tself.func()</span><br><span class=\"line\">\t\t\t\tprint(<span class=\"string\">\"线程%d结束\"</span>%self.thread_id)</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>我们创建了一个Worker_thread继承了threading.Thread里面定义的所有属性和方法，只需要添加你想要使该线程运行的内容即可。</li>\n<li>在这里我们使用self.func来接受外部传入的函数作为该Worker_thread中运行的函数。在后面我们会将worker传入。</li>\n<li>self.thread_id是后外部传入的数字，用来表示线程名字，可以去掉</li>\n</ul>\n<h2 id=\"启动多线程\"><a href=\"#启动多线程\" class=\"headerlink\" title=\"启动多线程\"></a>启动多线程</h2><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\tthreads = [Worker_thread(worker,i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">3</span>)]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> thread <span class=\"keyword\">in</span> threads:</span><br><span class=\"line\">\t\tthread.start()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> threads:</span><br><span class=\"line\">\t\tt.join()</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>第2行我们使用列表解析式生成了多个线程类对象（Worker_thread)，将我们的worker作为对象传入</li>\n<li>第3,4行我们使用 .start()方法启动每一条线程，注意我们使用的是start方法而不是run方法，但是我们实际上执行的是run</li>\n<li>第5，6行表示，只有当子线程结束后，主线程才可以结束。使用.join()方法。因为默认我们的主线程结束后子线程会被放入后台继续运行的。</li>\n</ul>"},{"title":"Python爬虫之为BeautifulSoup添加索引查找","date":"2017-02-18T03:15:05.000Z","_content":"最近在帮金融教授爬取优先股的数据，要求不能过滤掉部分信息缺失的数据并将缺失部分用\"N/A\"填充。这样一来必须要使用正则表达式将原始数据切成很小片，很不方便，好在有解析利器 BeautifulSoup,但是不知道什么原因BeautifulSoup只能索引到多个同类子节点的第一个节点。不能索引给我造成了极大困扰，有时候甚至还是需要使用纯正则来解析数据。思前想后我决定自己为其添加索引功能以备不时之需。\n\n<!--More-->\n\n下面我们通过例子来讲解如何为BeautifulSoup添加：\n- 关键字索引\n- 列表索引\n\n##元数据\n\n这是要摘取几千条数据中的一个\n\n![](crawler-5-bs4index/stock.png)\n\n我们来看它的源代码\n\n\t```Python\n\tIn [37]: p\n\tOut[37]: '<tr bgcolor=\"#CFCFCF\">\\n\\t\\t<td>\\n\\t\\t<font face=\"arial, helvetica, sans-serif\" size=\"2\">\\n\\t\\t\\t<a\n\thref=\"search.cfm?tickersymbol=ADK-A&amp;sopt=symbol\"><b>ADK-A</b></a><br\n\t/>00650W409\\n\\t\\t</font>\\n\\t\\t</td>\\n\\n\\t\\t<td>\\n\\t\\t<font face=\"arial, helvetica, sans-serif\" size=\"2\"><b>AdCare Health\n\tSystems, 10.875% Series A Cumulative Redeemable Preferred Stock</b></font>\\n\\n\\n<font size=\"2\">\\n\\n\\t<br /><font face=\"\"\n\tcolor=\"Green\">IPO:\\xa011/07/12</font>\\xa0\\xa0\\xa0\\n\\n\\n\\n\\n\\t\\xa0\\xa0\\xa0<a\n\thref=\"http://www.sec.gov/Archives/edgar/data/1004724/000104746912010172/a2211594z424b5.htm\" target=\"SECEDGAR\"><b>IPO\n\tProspectus @ SEC EDGAR</b></a>\\n\\t\\n\\t\\t\\xa0\\xa0\\xa0Call\n\tDate:\\xa012/01/17\\n\\t</font>\\n\\n\\n\\n\\n\\t\\t</td>\\n\\n\\t\\t\\n\\t\\t\\n\\n\\t\\t\\n\\t\\t\\n\\t\\t\\n\\n\\t\\t\\n\\t\\t\\n\\t\\t\\n\\n\\n\\n\\n<td\n\talign=\"center\">\\n\\t<font size=\"2\">\\n\\t\\n\\t\\n\\t\\n\\n\\t\\n\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t<a\n\thref=\"https://www.nyse.com/quote/XASE:ADKpA\" target=\"QUOTE\">AMEX</a><br />\\n\\t\\t\\t<a\n\thref=\"https://www.nyse.com/quote/XASE:ADKpA\"\n\ttarget=\"CHART\">Chart</a>\\n\\t\\t\\n\\n\\t\\n\\n\\t</font>\\n\\n\\t\\n\\n</td>\\n\\n\\n\\n\\t\\t\\n\\t\\t\\n\\t\\t\\n\\t</tr>'\n\t```\n\t\n##数据结构\t\n\n它的结构应该是这样的\n\n\t```html\n\t<tr>\n\t <td>\n\t  <font>\n\t   <a>\n\t\t<b>\n\t\t ADK-A\n\t\t</b>\n\t   </a>\n\t   <br/>\n\t   00650W409\n\t  </font>\n\t </td>\n\t <td>\n\t  <font>\n\t   <b>\n\t\tAdCare Health Systems, 10.875% Series A Cumulative Redeemable Preferred Stock\n\t   </b>\n\t  </font>\n\t  <font>\n\t   <br/>\n\t   <font>\n\t\tIPO: 11/07/12\n\t   </font>\n\t   <a href=\"http://www.sec.gov/Archives/edgar/data/1004724/000104746912010172/a2211594z424b5.htm\"\">\n\t\t<b>\n\t\t IPO Prospectus @ SEC EDGAR\n\t\t</b>\n\t   </a>\n\t   Call Date: 12/01/17\n\t  </font>\n\t </td>\n\t <td>\n\t  <font>\n\t   <a>\n\t\tAMEX\n\t   </a>\n\t   <br/>\n\t   <a>\n\t\tChart\n\t   </a>\n\t  </font>\n\t </td>\n\t</tr>\n\t```\n对于大多数数据来说，我们完全可以根据这个结构写一个正则表达式来进行抓取，将所需要的内容替换为提取的符号即可进行匹配。但是如果里面某一项内容缺失，比如没有给出IPO日期，则整个表达式不能匹配到该条数据并将其排除在外，造成数据缺失。更不能将缺失的内容进行填补。所以我们先将内容用正则切割成几个小部分（比如按td标签切分成3块），然后再分别用正则匹配。这样很麻烦。\n\n##BeautifulSoup树形结构图解\n\n所以我们有了BeautifulSoup这样的神器，只要输入tr.td.font.a.b就能从前往后索引到‘ADK-A’，这条数据。‘’\n\n但是，不知道为什么，BS只支持第一条个节点的直接索引。比如我想要第二个td标签的第二个b标签，很遗憾，我们并不能使用索引直接链式调用\n\n好在天无绝人之路，BS提供了一种间接方法，迭代，来调用其他的子节点。说白了就是写个循环是可以接触到这些隐藏的节点的。\n\n我们来看下图\n\n![](crawler-5-bs4index/bstree.png)\n\n实线代表可以直接使用链式调用可以接触到的节点，虚线代表使用迭代可以接触到的节点。实际上G1我们同样可以直接在A下面调用，但是即便这样我们还是不能达到我们想要的。那怎么办呢？曲线救国嘛，好在我们可以遍历整个树，把树上的节点全部摘下来放在我们改过结构的树上。\n\n##使用Hook的树\n\n首先来看我们关键的组件，钩子Hook.它其实本身有点像二叉树或者链表的节点，一头指向父级元素，一头指向子级元素（的集合）。\n\n![](crawler-5-bs4index/hook.png)\n\n我们从图中不难看出，hook处在两个BS树节点的中间，其中父级元素指向的节点为自身所代表的BS树节点（因为可以直接调用到）,子级元素指向一个分类过后的字典，我们可以通过字典来对类别进行关键字搜索。每一个类别都是一个列表，这样我们可以按顺序排列后按顺序索引。更完整的例子如下图\n\n\n![](crawler-5-bs4index/newtree.png)\n\n\n值得注意的是，父级Hook的子集是一个子级hook的集合，因为hook可以代表本身的BS树节点。\n\n\n##实现\n\n看图比较复杂，其实代码很简单，首先我们创建一个hook的类\n\n\t```Python\n\tclass Hook():\n\n\t\tdef __init__(self,root):\n\t\t\tself.root = root\n\t\t\tself.child = {}\n\t```\n\n- self.root 是本身的BS树节点\n- self.child 是一个字典，可以使用关键字索引\n\n然后使用递归，从BS的某一节点开始，将分支的内容转移到新的树上并分类。\n\n\t```Python\n\tdef load_node(roottag,child=None):\n\t\thook = Hook(roottag)\n\t\tfor each in roottag:\n\t\t\tif isinstance(each,Tag):\n\t\t\t\tsubhook = load_node(each,hook.child)\n\t\t\t\tif each.name in hook.child:\n\t\t\t\t\thook.child[each.name].append(subhook)\n\t\t\t\telse:\n\t\t\t\t\thook.child[each.name]=[subhook,]\n\t\treturn hook\n\t```\n- 首先先初始化一个hook实例，并将其“挂”在当前节点\n- 然后迭代子元素，判断是否为Tag（我们需要的节点类型）,如果不是就过滤掉\n- 递归调用本函数，将该Tag作为该函数的当前节点，返回一个与之对应的hook\n- 将新的hook添加到我们的字典中\n\n\n##演示\n\n\t```Python\n\tIn [27]: test\n\tOut[27]: <__main__.Tode at 0x10e7e32e8>\n\n\tIn [28]: test.child\n\tOut[28]: \n\t{'td': [<__main__.Tode at 0x10e7e3358>,\n\t  <__main__.Tode at 0x10e7e3ef0>,\n\t  <__main__.Tode at 0x10e7e31d0>]}\n\n\tIn [29]: test.child['td'][0]\n\tOut[29]: <__main__.Tode at 0x10e7e3358>\n\n\tIn [30]: test.child['td'][0].child\n\tOut[30]: {'font': [<__main__.Tode at 0x10e7e3278>]}\n\n\tIn [31]: test.child['td'][0].child['font'][0]\n\tOut[31]: <__main__.Tode at 0x10e7e3278>\n\n\tIn [32]: test.child['td'][0].child['font'][0].child\n\tOut[32]: {'a': [<__main__.Tode at 0x10e7e3d30>], 'br': [<__main__.Tode at 0x10e7e3940>]}\n\n\tIn [33]: test.child['td'][0].child['font'][0].child['a'][0]\n\tOut[33]: <__main__.Tode at 0x10e7e3d30>\n\n\tIn [34]: test.child['td'][0].child['font'][0].child['a'][0].root\n\tOut[34]: <a href=\"search.cfm?tickersymbol=ADK-A&amp;sopt=symbol\"><b>ADK-A</b></a>\n\n\tIn [35]: test.child['td'][0].child['font'][0].root\n\tOut[35]: \n\t<font face=\"arial, helvetica, sans-serif\" size=\"2\">\n\t<a href=\"search.cfm?tickersymbol=ADK-A&amp;sopt=symbol\"><b>ADK-A</b></a><br/>00650W409\n\t\t\t</font>\n\n\tIn [36]: test.child['td'][0].root\n\tOut[36]: \n\t<td>\n\t<font face=\"arial, helvetica, sans-serif\" size=\"2\">\n\t<a href=\"search.cfm?tickersymbol=ADK-A&amp;sopt=symbol\"><b>ADK-A</b></a><br/>00650W409\n\t\t\t</font>\n\t</td>\n\t```\n嗯，就是这样，还是需要正则提取，但是少了切片会快很多。上面的数据可以作为练习，试着删掉某一块数据\n\n\n\n以后会更新部分方法使调用过程更加方便\n\n","source":"_posts/crawler-5-bs4index.md","raw":"---\ntitle: Python爬虫之为BeautifulSoup添加索引查找\ndate: 2017-02-18 11:15:05\ntags:\ncategories: Python爬虫\n\n---\n最近在帮金融教授爬取优先股的数据，要求不能过滤掉部分信息缺失的数据并将缺失部分用\"N/A\"填充。这样一来必须要使用正则表达式将原始数据切成很小片，很不方便，好在有解析利器 BeautifulSoup,但是不知道什么原因BeautifulSoup只能索引到多个同类子节点的第一个节点。不能索引给我造成了极大困扰，有时候甚至还是需要使用纯正则来解析数据。思前想后我决定自己为其添加索引功能以备不时之需。\n\n<!--More-->\n\n下面我们通过例子来讲解如何为BeautifulSoup添加：\n- 关键字索引\n- 列表索引\n\n##元数据\n\n这是要摘取几千条数据中的一个\n\n![](crawler-5-bs4index/stock.png)\n\n我们来看它的源代码\n\n\t```Python\n\tIn [37]: p\n\tOut[37]: '<tr bgcolor=\"#CFCFCF\">\\n\\t\\t<td>\\n\\t\\t<font face=\"arial, helvetica, sans-serif\" size=\"2\">\\n\\t\\t\\t<a\n\thref=\"search.cfm?tickersymbol=ADK-A&amp;sopt=symbol\"><b>ADK-A</b></a><br\n\t/>00650W409\\n\\t\\t</font>\\n\\t\\t</td>\\n\\n\\t\\t<td>\\n\\t\\t<font face=\"arial, helvetica, sans-serif\" size=\"2\"><b>AdCare Health\n\tSystems, 10.875% Series A Cumulative Redeemable Preferred Stock</b></font>\\n\\n\\n<font size=\"2\">\\n\\n\\t<br /><font face=\"\"\n\tcolor=\"Green\">IPO:\\xa011/07/12</font>\\xa0\\xa0\\xa0\\n\\n\\n\\n\\n\\t\\xa0\\xa0\\xa0<a\n\thref=\"http://www.sec.gov/Archives/edgar/data/1004724/000104746912010172/a2211594z424b5.htm\" target=\"SECEDGAR\"><b>IPO\n\tProspectus @ SEC EDGAR</b></a>\\n\\t\\n\\t\\t\\xa0\\xa0\\xa0Call\n\tDate:\\xa012/01/17\\n\\t</font>\\n\\n\\n\\n\\n\\t\\t</td>\\n\\n\\t\\t\\n\\t\\t\\n\\n\\t\\t\\n\\t\\t\\n\\t\\t\\n\\n\\t\\t\\n\\t\\t\\n\\t\\t\\n\\n\\n\\n\\n<td\n\talign=\"center\">\\n\\t<font size=\"2\">\\n\\t\\n\\t\\n\\t\\n\\n\\t\\n\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t<a\n\thref=\"https://www.nyse.com/quote/XASE:ADKpA\" target=\"QUOTE\">AMEX</a><br />\\n\\t\\t\\t<a\n\thref=\"https://www.nyse.com/quote/XASE:ADKpA\"\n\ttarget=\"CHART\">Chart</a>\\n\\t\\t\\n\\n\\t\\n\\n\\t</font>\\n\\n\\t\\n\\n</td>\\n\\n\\n\\n\\t\\t\\n\\t\\t\\n\\t\\t\\n\\t</tr>'\n\t```\n\t\n##数据结构\t\n\n它的结构应该是这样的\n\n\t```html\n\t<tr>\n\t <td>\n\t  <font>\n\t   <a>\n\t\t<b>\n\t\t ADK-A\n\t\t</b>\n\t   </a>\n\t   <br/>\n\t   00650W409\n\t  </font>\n\t </td>\n\t <td>\n\t  <font>\n\t   <b>\n\t\tAdCare Health Systems, 10.875% Series A Cumulative Redeemable Preferred Stock\n\t   </b>\n\t  </font>\n\t  <font>\n\t   <br/>\n\t   <font>\n\t\tIPO: 11/07/12\n\t   </font>\n\t   <a href=\"http://www.sec.gov/Archives/edgar/data/1004724/000104746912010172/a2211594z424b5.htm\"\">\n\t\t<b>\n\t\t IPO Prospectus @ SEC EDGAR\n\t\t</b>\n\t   </a>\n\t   Call Date: 12/01/17\n\t  </font>\n\t </td>\n\t <td>\n\t  <font>\n\t   <a>\n\t\tAMEX\n\t   </a>\n\t   <br/>\n\t   <a>\n\t\tChart\n\t   </a>\n\t  </font>\n\t </td>\n\t</tr>\n\t```\n对于大多数数据来说，我们完全可以根据这个结构写一个正则表达式来进行抓取，将所需要的内容替换为提取的符号即可进行匹配。但是如果里面某一项内容缺失，比如没有给出IPO日期，则整个表达式不能匹配到该条数据并将其排除在外，造成数据缺失。更不能将缺失的内容进行填补。所以我们先将内容用正则切割成几个小部分（比如按td标签切分成3块），然后再分别用正则匹配。这样很麻烦。\n\n##BeautifulSoup树形结构图解\n\n所以我们有了BeautifulSoup这样的神器，只要输入tr.td.font.a.b就能从前往后索引到‘ADK-A’，这条数据。‘’\n\n但是，不知道为什么，BS只支持第一条个节点的直接索引。比如我想要第二个td标签的第二个b标签，很遗憾，我们并不能使用索引直接链式调用\n\n好在天无绝人之路，BS提供了一种间接方法，迭代，来调用其他的子节点。说白了就是写个循环是可以接触到这些隐藏的节点的。\n\n我们来看下图\n\n![](crawler-5-bs4index/bstree.png)\n\n实线代表可以直接使用链式调用可以接触到的节点，虚线代表使用迭代可以接触到的节点。实际上G1我们同样可以直接在A下面调用，但是即便这样我们还是不能达到我们想要的。那怎么办呢？曲线救国嘛，好在我们可以遍历整个树，把树上的节点全部摘下来放在我们改过结构的树上。\n\n##使用Hook的树\n\n首先来看我们关键的组件，钩子Hook.它其实本身有点像二叉树或者链表的节点，一头指向父级元素，一头指向子级元素（的集合）。\n\n![](crawler-5-bs4index/hook.png)\n\n我们从图中不难看出，hook处在两个BS树节点的中间，其中父级元素指向的节点为自身所代表的BS树节点（因为可以直接调用到）,子级元素指向一个分类过后的字典，我们可以通过字典来对类别进行关键字搜索。每一个类别都是一个列表，这样我们可以按顺序排列后按顺序索引。更完整的例子如下图\n\n\n![](crawler-5-bs4index/newtree.png)\n\n\n值得注意的是，父级Hook的子集是一个子级hook的集合，因为hook可以代表本身的BS树节点。\n\n\n##实现\n\n看图比较复杂，其实代码很简单，首先我们创建一个hook的类\n\n\t```Python\n\tclass Hook():\n\n\t\tdef __init__(self,root):\n\t\t\tself.root = root\n\t\t\tself.child = {}\n\t```\n\n- self.root 是本身的BS树节点\n- self.child 是一个字典，可以使用关键字索引\n\n然后使用递归，从BS的某一节点开始，将分支的内容转移到新的树上并分类。\n\n\t```Python\n\tdef load_node(roottag,child=None):\n\t\thook = Hook(roottag)\n\t\tfor each in roottag:\n\t\t\tif isinstance(each,Tag):\n\t\t\t\tsubhook = load_node(each,hook.child)\n\t\t\t\tif each.name in hook.child:\n\t\t\t\t\thook.child[each.name].append(subhook)\n\t\t\t\telse:\n\t\t\t\t\thook.child[each.name]=[subhook,]\n\t\treturn hook\n\t```\n- 首先先初始化一个hook实例，并将其“挂”在当前节点\n- 然后迭代子元素，判断是否为Tag（我们需要的节点类型）,如果不是就过滤掉\n- 递归调用本函数，将该Tag作为该函数的当前节点，返回一个与之对应的hook\n- 将新的hook添加到我们的字典中\n\n\n##演示\n\n\t```Python\n\tIn [27]: test\n\tOut[27]: <__main__.Tode at 0x10e7e32e8>\n\n\tIn [28]: test.child\n\tOut[28]: \n\t{'td': [<__main__.Tode at 0x10e7e3358>,\n\t  <__main__.Tode at 0x10e7e3ef0>,\n\t  <__main__.Tode at 0x10e7e31d0>]}\n\n\tIn [29]: test.child['td'][0]\n\tOut[29]: <__main__.Tode at 0x10e7e3358>\n\n\tIn [30]: test.child['td'][0].child\n\tOut[30]: {'font': [<__main__.Tode at 0x10e7e3278>]}\n\n\tIn [31]: test.child['td'][0].child['font'][0]\n\tOut[31]: <__main__.Tode at 0x10e7e3278>\n\n\tIn [32]: test.child['td'][0].child['font'][0].child\n\tOut[32]: {'a': [<__main__.Tode at 0x10e7e3d30>], 'br': [<__main__.Tode at 0x10e7e3940>]}\n\n\tIn [33]: test.child['td'][0].child['font'][0].child['a'][0]\n\tOut[33]: <__main__.Tode at 0x10e7e3d30>\n\n\tIn [34]: test.child['td'][0].child['font'][0].child['a'][0].root\n\tOut[34]: <a href=\"search.cfm?tickersymbol=ADK-A&amp;sopt=symbol\"><b>ADK-A</b></a>\n\n\tIn [35]: test.child['td'][0].child['font'][0].root\n\tOut[35]: \n\t<font face=\"arial, helvetica, sans-serif\" size=\"2\">\n\t<a href=\"search.cfm?tickersymbol=ADK-A&amp;sopt=symbol\"><b>ADK-A</b></a><br/>00650W409\n\t\t\t</font>\n\n\tIn [36]: test.child['td'][0].root\n\tOut[36]: \n\t<td>\n\t<font face=\"arial, helvetica, sans-serif\" size=\"2\">\n\t<a href=\"search.cfm?tickersymbol=ADK-A&amp;sopt=symbol\"><b>ADK-A</b></a><br/>00650W409\n\t\t\t</font>\n\t</td>\n\t```\n嗯，就是这样，还是需要正则提取，但是少了切片会快很多。上面的数据可以作为练习，试着删掉某一块数据\n\n\n\n以后会更新部分方法使调用过程更加方便\n\n","slug":"crawler-5-bs4index","published":1,"updated":"2018-06-22T06:06:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiqvlnuf0001glu3xu2s7853","content":"<p>最近在帮金融教授爬取优先股的数据，要求不能过滤掉部分信息缺失的数据并将缺失部分用”N/A”填充。这样一来必须要使用正则表达式将原始数据切成很小片，很不方便，好在有解析利器 BeautifulSoup,但是不知道什么原因BeautifulSoup只能索引到多个同类子节点的第一个节点。不能索引给我造成了极大困扰，有时候甚至还是需要使用纯正则来解析数据。思前想后我决定自己为其添加索引功能以备不时之需。</p>\n<a id=\"more\"></a>\n<p>下面我们通过例子来讲解如何为BeautifulSoup添加：</p>\n<ul>\n<li>关键字索引</li>\n<li>列表索引</li>\n</ul>\n<p>##元数据</p>\n<p>这是要摘取几千条数据中的一个</p>\n<p><img src=\"/article/crawler-5-bs4index/stock.png\" alt=\"\"></p>\n<p>我们来看它的源代码</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">37</span>]: p</span><br><span class=\"line\">Out[<span class=\"number\">37</span>]: <span class=\"string\">'&lt;tr bgcolor=\"#CFCFCF\"&gt;\\n\\t\\t&lt;td&gt;\\n\\t\\t&lt;font face=\"arial, helvetica, sans-serif\" size=\"2\"&gt;\\n\\t\\t\\t&lt;a</span></span><br><span class=\"line\"><span class=\"string\">href=\"search.cfm?tickersymbol=ADK-A&amp;amp;sopt=symbol\"&gt;&lt;b&gt;ADK-A&lt;/b&gt;&lt;/a&gt;&lt;br</span></span><br><span class=\"line\"><span class=\"string\">/&gt;00650W409\\n\\t\\t&lt;/font&gt;\\n\\t\\t&lt;/td&gt;\\n\\n\\t\\t&lt;td&gt;\\n\\t\\t&lt;font face=\"arial, helvetica, sans-serif\" size=\"2\"&gt;&lt;b&gt;AdCare Health</span></span><br><span class=\"line\"><span class=\"string\">Systems, 10.875% Series A Cumulative Redeemable Preferred Stock&lt;/b&gt;&lt;/font&gt;\\n\\n\\n&lt;font size=\"2\"&gt;\\n\\n\\t&lt;br /&gt;&lt;font face=\"\"</span></span><br><span class=\"line\"><span class=\"string\">color=\"Green\"&gt;IPO:\\xa011/07/12&lt;/font&gt;\\xa0\\xa0\\xa0\\n\\n\\n\\n\\n\\t\\xa0\\xa0\\xa0&lt;a</span></span><br><span class=\"line\"><span class=\"string\">href=\"http://www.sec.gov/Archives/edgar/data/1004724/000104746912010172/a2211594z424b5.htm\" target=\"SECEDGAR\"&gt;&lt;b&gt;IPO</span></span><br><span class=\"line\"><span class=\"string\">Prospectus @ SEC EDGAR&lt;/b&gt;&lt;/a&gt;\\n\\t\\n\\t\\t\\xa0\\xa0\\xa0Call</span></span><br><span class=\"line\"><span class=\"string\">Date:\\xa012/01/17\\n\\t&lt;/font&gt;\\n\\n\\n\\n\\n\\t\\t&lt;/td&gt;\\n\\n\\t\\t\\n\\t\\t\\n\\n\\t\\t\\n\\t\\t\\n\\t\\t\\n\\n\\t\\t\\n\\t\\t\\n\\t\\t\\n\\n\\n\\n\\n&lt;td</span></span><br><span class=\"line\"><span class=\"string\">align=\"center\"&gt;\\n\\t&lt;font size=\"2\"&gt;\\n\\t\\n\\t\\n\\t\\n\\n\\t\\n\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t&lt;a</span></span><br><span class=\"line\"><span class=\"string\">href=\"https://www.nyse.com/quote/XASE:ADKpA\" target=\"QUOTE\"&gt;AMEX&lt;/a&gt;&lt;br /&gt;\\n\\t\\t\\t&lt;a</span></span><br><span class=\"line\"><span class=\"string\">href=\"https://www.nyse.com/quote/XASE:ADKpA\"</span></span><br><span class=\"line\"><span class=\"string\">target=\"CHART\"&gt;Chart&lt;/a&gt;\\n\\t\\t\\n\\n\\t\\n\\n\\t&lt;/font&gt;\\n\\n\\t\\n\\n&lt;/td&gt;\\n\\n\\n\\n\\t\\t\\n\\t\\t\\n\\t\\t\\n\\t&lt;/tr&gt;'</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>##数据结构    </p>\n<p>它的结构应该是这样的</p>\n<pre><code><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">font</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">\t ADK-A</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">   00650W409</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">font</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">\tAdCare Health Systems, 10.875% Series A Cumulative Redeemable Preferred Stock</span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">font</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">font</span>&gt;</span></span><br><span class=\"line\">\tIPO: 11/07/12</span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.sec.gov/Archives/edgar/data/1004724/000104746912010172/a2211594z424b5.htm\"</span>\"&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">\t IPO Prospectus @ SEC EDGAR</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">   Call Date: 12/01/17</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">font</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\tAMEX</span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\tChart</span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>对于大多数数据来说，我们完全可以根据这个结构写一个正则表达式来进行抓取，将所需要的内容替换为提取的符号即可进行匹配。但是如果里面某一项内容缺失，比如没有给出IPO日期，则整个表达式不能匹配到该条数据并将其排除在外，造成数据缺失。更不能将缺失的内容进行填补。所以我们先将内容用正则切割成几个小部分（比如按td标签切分成3块），然后再分别用正则匹配。这样很麻烦。</p>\n<p>##BeautifulSoup树形结构图解</p>\n<p>所以我们有了BeautifulSoup这样的神器，只要输入tr.td.font.a.b就能从前往后索引到‘ADK-A’，这条数据。‘’</p>\n<p>但是，不知道为什么，BS只支持第一条个节点的直接索引。比如我想要第二个td标签的第二个b标签，很遗憾，我们并不能使用索引直接链式调用</p>\n<p>好在天无绝人之路，BS提供了一种间接方法，迭代，来调用其他的子节点。说白了就是写个循环是可以接触到这些隐藏的节点的。</p>\n<p>我们来看下图</p>\n<p><img src=\"/article/crawler-5-bs4index/bstree.png\" alt=\"\"></p>\n<p>实线代表可以直接使用链式调用可以接触到的节点，虚线代表使用迭代可以接触到的节点。实际上G1我们同样可以直接在A下面调用，但是即便这样我们还是不能达到我们想要的。那怎么办呢？曲线救国嘛，好在我们可以遍历整个树，把树上的节点全部摘下来放在我们改过结构的树上。</p>\n<p>##使用Hook的树</p>\n<p>首先来看我们关键的组件，钩子Hook.它其实本身有点像二叉树或者链表的节点，一头指向父级元素，一头指向子级元素（的集合）。</p>\n<p><img src=\"/article/crawler-5-bs4index/hook.png\" alt=\"\"></p>\n<p>我们从图中不难看出，hook处在两个BS树节点的中间，其中父级元素指向的节点为自身所代表的BS树节点（因为可以直接调用到）,子级元素指向一个分类过后的字典，我们可以通过字典来对类别进行关键字搜索。每一个类别都是一个列表，这样我们可以按顺序排列后按顺序索引。更完整的例子如下图</p>\n<p><img src=\"/article/crawler-5-bs4index/newtree.png\" alt=\"\"></p>\n<p>值得注意的是，父级Hook的子集是一个子级hook的集合，因为hook可以代表本身的BS树节点。</p>\n<p>##实现</p>\n<p>看图比较复杂，其实代码很简单，首先我们创建一个hook的类</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hook</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,root)</span>:</span></span><br><span class=\"line\">\t\tself.root = root</span><br><span class=\"line\">\t\tself.child = &#123;&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>self.root 是本身的BS树节点</li>\n<li>self.child 是一个字典，可以使用关键字索引</li>\n</ul>\n<p>然后使用递归，从BS的某一节点开始，将分支的内容转移到新的树上并分类。</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load_node</span><span class=\"params\">(roottag,child=None)</span>:</span></span><br><span class=\"line\">\thook = Hook(roottag)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> roottag:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> isinstance(each,Tag):</span><br><span class=\"line\">\t\t\tsubhook = load_node(each,hook.child)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> each.name <span class=\"keyword\">in</span> hook.child:</span><br><span class=\"line\">\t\t\t\thook.child[each.name].append(subhook)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\thook.child[each.name]=[subhook,]</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> hook</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>首先先初始化一个hook实例，并将其“挂”在当前节点</li>\n<li>然后迭代子元素，判断是否为Tag（我们需要的节点类型）,如果不是就过滤掉</li>\n<li>递归调用本函数，将该Tag作为该函数的当前节点，返回一个与之对应的hook</li>\n<li>将新的hook添加到我们的字典中</li>\n</ul>\n<p>##演示</p>\n<pre><code><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">27</span>]: test</span><br><span class=\"line\">Out[<span class=\"number\">27</span>]: &lt;__main__.Tode at <span class=\"number\">0x10e7e32e8</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">28</span>]: test.child</span><br><span class=\"line\">Out[<span class=\"number\">28</span>]: </span><br><span class=\"line\">&#123;<span class=\"string\">'td'</span>: [&lt;__main__.Tode at <span class=\"number\">0x10e7e3358</span>&gt;,</span><br><span class=\"line\">  &lt;__main__.Tode at <span class=\"number\">0x10e7e3ef0</span>&gt;,</span><br><span class=\"line\">  &lt;__main__.Tode at <span class=\"number\">0x10e7e31d0</span>&gt;]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">29</span>]: test.child[<span class=\"string\">'td'</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">Out[<span class=\"number\">29</span>]: &lt;__main__.Tode at <span class=\"number\">0x10e7e3358</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">30</span>]: test.child[<span class=\"string\">'td'</span>][<span class=\"number\">0</span>].child</span><br><span class=\"line\">Out[<span class=\"number\">30</span>]: &#123;<span class=\"string\">'font'</span>: [&lt;__main__.Tode at <span class=\"number\">0x10e7e3278</span>&gt;]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">31</span>]: test.child[<span class=\"string\">'td'</span>][<span class=\"number\">0</span>].child[<span class=\"string\">'font'</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">Out[<span class=\"number\">31</span>]: &lt;__main__.Tode at <span class=\"number\">0x10e7e3278</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">32</span>]: test.child[<span class=\"string\">'td'</span>][<span class=\"number\">0</span>].child[<span class=\"string\">'font'</span>][<span class=\"number\">0</span>].child</span><br><span class=\"line\">Out[<span class=\"number\">32</span>]: &#123;<span class=\"string\">'a'</span>: [&lt;__main__.Tode at <span class=\"number\">0x10e7e3d30</span>&gt;], <span class=\"string\">'br'</span>: [&lt;__main__.Tode at <span class=\"number\">0x10e7e3940</span>&gt;]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">33</span>]: test.child[<span class=\"string\">'td'</span>][<span class=\"number\">0</span>].child[<span class=\"string\">'font'</span>][<span class=\"number\">0</span>].child[<span class=\"string\">'a'</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">Out[<span class=\"number\">33</span>]: &lt;__main__.Tode at <span class=\"number\">0x10e7e3d30</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">34</span>]: test.child[<span class=\"string\">'td'</span>][<span class=\"number\">0</span>].child[<span class=\"string\">'font'</span>][<span class=\"number\">0</span>].child[<span class=\"string\">'a'</span>][<span class=\"number\">0</span>].root</span><br><span class=\"line\">Out[34]: &lt;a href=\"search.cfm?tickersymbol=ADK-A&amp;amp;sopt=symbol\"&gt;&lt;b&gt;ADK-A&lt;/b&gt;&lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">35</span>]: test.child[<span class=\"string\">'td'</span>][<span class=\"number\">0</span>].child[<span class=\"string\">'font'</span>][<span class=\"number\">0</span>].root</span><br><span class=\"line\">Out[<span class=\"number\">35</span>]: </span><br><span class=\"line\">&lt;font face=<span class=\"string\">\"arial, helvetica, sans-serif\"</span> size=<span class=\"string\">\"2\"</span>&gt;</span><br><span class=\"line\">&lt;a href=\"search.cfm?tickersymbol=ADK-A&amp;amp;sopt=symbol\"&gt;&lt;b&gt;ADK-A&lt;/b&gt;&lt;/a&gt;&lt;br/&gt;00650W409</span><br><span class=\"line\">\t\t&lt;/font&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">36</span>]: test.child[<span class=\"string\">'td'</span>][<span class=\"number\">0</span>].root</span><br><span class=\"line\">Out[<span class=\"number\">36</span>]: </span><br><span class=\"line\">&lt;td&gt;</span><br><span class=\"line\">&lt;font face=<span class=\"string\">\"arial, helvetica, sans-serif\"</span> size=<span class=\"string\">\"2\"</span>&gt;</span><br><span class=\"line\">&lt;a href=\"search.cfm?tickersymbol=ADK-A&amp;amp;sopt=symbol\"&gt;&lt;b&gt;ADK-A&lt;/b&gt;&lt;/a&gt;&lt;br/&gt;00650W409</span><br><span class=\"line\">\t\t&lt;/font&gt;</span><br><span class=\"line\">&lt;/td&gt;</span><br></pre></td></tr></table></figure>\n</code></pre><p>嗯，就是这样，还是需要正则提取，但是少了切片会快很多。上面的数据可以作为练习，试着删掉某一块数据</p>\n<p>以后会更新部分方法使调用过程更加方便</p>\n","site":{"data":{}},"excerpt":"<p>最近在帮金融教授爬取优先股的数据，要求不能过滤掉部分信息缺失的数据并将缺失部分用”N/A”填充。这样一来必须要使用正则表达式将原始数据切成很小片，很不方便，好在有解析利器 BeautifulSoup,但是不知道什么原因BeautifulSoup只能索引到多个同类子节点的第一个节点。不能索引给我造成了极大困扰，有时候甚至还是需要使用纯正则来解析数据。思前想后我决定自己为其添加索引功能以备不时之需。</p>","more":"<p>下面我们通过例子来讲解如何为BeautifulSoup添加：</p>\n<ul>\n<li>关键字索引</li>\n<li>列表索引</li>\n</ul>\n<p>##元数据</p>\n<p>这是要摘取几千条数据中的一个</p>\n<p><img src=\"/article/crawler-5-bs4index/stock.png\" alt=\"\"></p>\n<p>我们来看它的源代码</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">37</span>]: p</span><br><span class=\"line\">Out[<span class=\"number\">37</span>]: <span class=\"string\">'&lt;tr bgcolor=\"#CFCFCF\"&gt;\\n\\t\\t&lt;td&gt;\\n\\t\\t&lt;font face=\"arial, helvetica, sans-serif\" size=\"2\"&gt;\\n\\t\\t\\t&lt;a</span></span><br><span class=\"line\"><span class=\"string\">href=\"search.cfm?tickersymbol=ADK-A&amp;amp;sopt=symbol\"&gt;&lt;b&gt;ADK-A&lt;/b&gt;&lt;/a&gt;&lt;br</span></span><br><span class=\"line\"><span class=\"string\">/&gt;00650W409\\n\\t\\t&lt;/font&gt;\\n\\t\\t&lt;/td&gt;\\n\\n\\t\\t&lt;td&gt;\\n\\t\\t&lt;font face=\"arial, helvetica, sans-serif\" size=\"2\"&gt;&lt;b&gt;AdCare Health</span></span><br><span class=\"line\"><span class=\"string\">Systems, 10.875% Series A Cumulative Redeemable Preferred Stock&lt;/b&gt;&lt;/font&gt;\\n\\n\\n&lt;font size=\"2\"&gt;\\n\\n\\t&lt;br /&gt;&lt;font face=\"\"</span></span><br><span class=\"line\"><span class=\"string\">color=\"Green\"&gt;IPO:\\xa011/07/12&lt;/font&gt;\\xa0\\xa0\\xa0\\n\\n\\n\\n\\n\\t\\xa0\\xa0\\xa0&lt;a</span></span><br><span class=\"line\"><span class=\"string\">href=\"http://www.sec.gov/Archives/edgar/data/1004724/000104746912010172/a2211594z424b5.htm\" target=\"SECEDGAR\"&gt;&lt;b&gt;IPO</span></span><br><span class=\"line\"><span class=\"string\">Prospectus @ SEC EDGAR&lt;/b&gt;&lt;/a&gt;\\n\\t\\n\\t\\t\\xa0\\xa0\\xa0Call</span></span><br><span class=\"line\"><span class=\"string\">Date:\\xa012/01/17\\n\\t&lt;/font&gt;\\n\\n\\n\\n\\n\\t\\t&lt;/td&gt;\\n\\n\\t\\t\\n\\t\\t\\n\\n\\t\\t\\n\\t\\t\\n\\t\\t\\n\\n\\t\\t\\n\\t\\t\\n\\t\\t\\n\\n\\n\\n\\n&lt;td</span></span><br><span class=\"line\"><span class=\"string\">align=\"center\"&gt;\\n\\t&lt;font size=\"2\"&gt;\\n\\t\\n\\t\\n\\t\\n\\n\\t\\n\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t&lt;a</span></span><br><span class=\"line\"><span class=\"string\">href=\"https://www.nyse.com/quote/XASE:ADKpA\" target=\"QUOTE\"&gt;AMEX&lt;/a&gt;&lt;br /&gt;\\n\\t\\t\\t&lt;a</span></span><br><span class=\"line\"><span class=\"string\">href=\"https://www.nyse.com/quote/XASE:ADKpA\"</span></span><br><span class=\"line\"><span class=\"string\">target=\"CHART\"&gt;Chart&lt;/a&gt;\\n\\t\\t\\n\\n\\t\\n\\n\\t&lt;/font&gt;\\n\\n\\t\\n\\n&lt;/td&gt;\\n\\n\\n\\n\\t\\t\\n\\t\\t\\n\\t\\t\\n\\t&lt;/tr&gt;'</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>##数据结构    </p>\n<p>它的结构应该是这样的</p>\n<pre><code><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">font</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">\t ADK-A</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">   00650W409</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">font</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">\tAdCare Health Systems, 10.875% Series A Cumulative Redeemable Preferred Stock</span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">font</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">font</span>&gt;</span></span><br><span class=\"line\">\tIPO: 11/07/12</span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.sec.gov/Archives/edgar/data/1004724/000104746912010172/a2211594z424b5.htm\"</span>\"&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">\t IPO Prospectus @ SEC EDGAR</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">   Call Date: 12/01/17</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">font</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\tAMEX</span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\tChart</span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>对于大多数数据来说，我们完全可以根据这个结构写一个正则表达式来进行抓取，将所需要的内容替换为提取的符号即可进行匹配。但是如果里面某一项内容缺失，比如没有给出IPO日期，则整个表达式不能匹配到该条数据并将其排除在外，造成数据缺失。更不能将缺失的内容进行填补。所以我们先将内容用正则切割成几个小部分（比如按td标签切分成3块），然后再分别用正则匹配。这样很麻烦。</p>\n<p>##BeautifulSoup树形结构图解</p>\n<p>所以我们有了BeautifulSoup这样的神器，只要输入tr.td.font.a.b就能从前往后索引到‘ADK-A’，这条数据。‘’</p>\n<p>但是，不知道为什么，BS只支持第一条个节点的直接索引。比如我想要第二个td标签的第二个b标签，很遗憾，我们并不能使用索引直接链式调用</p>\n<p>好在天无绝人之路，BS提供了一种间接方法，迭代，来调用其他的子节点。说白了就是写个循环是可以接触到这些隐藏的节点的。</p>\n<p>我们来看下图</p>\n<p><img src=\"/article/crawler-5-bs4index/bstree.png\" alt=\"\"></p>\n<p>实线代表可以直接使用链式调用可以接触到的节点，虚线代表使用迭代可以接触到的节点。实际上G1我们同样可以直接在A下面调用，但是即便这样我们还是不能达到我们想要的。那怎么办呢？曲线救国嘛，好在我们可以遍历整个树，把树上的节点全部摘下来放在我们改过结构的树上。</p>\n<p>##使用Hook的树</p>\n<p>首先来看我们关键的组件，钩子Hook.它其实本身有点像二叉树或者链表的节点，一头指向父级元素，一头指向子级元素（的集合）。</p>\n<p><img src=\"/article/crawler-5-bs4index/hook.png\" alt=\"\"></p>\n<p>我们从图中不难看出，hook处在两个BS树节点的中间，其中父级元素指向的节点为自身所代表的BS树节点（因为可以直接调用到）,子级元素指向一个分类过后的字典，我们可以通过字典来对类别进行关键字搜索。每一个类别都是一个列表，这样我们可以按顺序排列后按顺序索引。更完整的例子如下图</p>\n<p><img src=\"/article/crawler-5-bs4index/newtree.png\" alt=\"\"></p>\n<p>值得注意的是，父级Hook的子集是一个子级hook的集合，因为hook可以代表本身的BS树节点。</p>\n<p>##实现</p>\n<p>看图比较复杂，其实代码很简单，首先我们创建一个hook的类</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hook</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,root)</span>:</span></span><br><span class=\"line\">\t\tself.root = root</span><br><span class=\"line\">\t\tself.child = &#123;&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>self.root 是本身的BS树节点</li>\n<li>self.child 是一个字典，可以使用关键字索引</li>\n</ul>\n<p>然后使用递归，从BS的某一节点开始，将分支的内容转移到新的树上并分类。</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load_node</span><span class=\"params\">(roottag,child=None)</span>:</span></span><br><span class=\"line\">\thook = Hook(roottag)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> roottag:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> isinstance(each,Tag):</span><br><span class=\"line\">\t\t\tsubhook = load_node(each,hook.child)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> each.name <span class=\"keyword\">in</span> hook.child:</span><br><span class=\"line\">\t\t\t\thook.child[each.name].append(subhook)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\thook.child[each.name]=[subhook,]</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> hook</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>首先先初始化一个hook实例，并将其“挂”在当前节点</li>\n<li>然后迭代子元素，判断是否为Tag（我们需要的节点类型）,如果不是就过滤掉</li>\n<li>递归调用本函数，将该Tag作为该函数的当前节点，返回一个与之对应的hook</li>\n<li>将新的hook添加到我们的字典中</li>\n</ul>\n<p>##演示</p>\n<pre><code><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">27</span>]: test</span><br><span class=\"line\">Out[<span class=\"number\">27</span>]: &lt;__main__.Tode at <span class=\"number\">0x10e7e32e8</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">28</span>]: test.child</span><br><span class=\"line\">Out[<span class=\"number\">28</span>]: </span><br><span class=\"line\">&#123;<span class=\"string\">'td'</span>: [&lt;__main__.Tode at <span class=\"number\">0x10e7e3358</span>&gt;,</span><br><span class=\"line\">  &lt;__main__.Tode at <span class=\"number\">0x10e7e3ef0</span>&gt;,</span><br><span class=\"line\">  &lt;__main__.Tode at <span class=\"number\">0x10e7e31d0</span>&gt;]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">29</span>]: test.child[<span class=\"string\">'td'</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">Out[<span class=\"number\">29</span>]: &lt;__main__.Tode at <span class=\"number\">0x10e7e3358</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">30</span>]: test.child[<span class=\"string\">'td'</span>][<span class=\"number\">0</span>].child</span><br><span class=\"line\">Out[<span class=\"number\">30</span>]: &#123;<span class=\"string\">'font'</span>: [&lt;__main__.Tode at <span class=\"number\">0x10e7e3278</span>&gt;]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">31</span>]: test.child[<span class=\"string\">'td'</span>][<span class=\"number\">0</span>].child[<span class=\"string\">'font'</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">Out[<span class=\"number\">31</span>]: &lt;__main__.Tode at <span class=\"number\">0x10e7e3278</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">32</span>]: test.child[<span class=\"string\">'td'</span>][<span class=\"number\">0</span>].child[<span class=\"string\">'font'</span>][<span class=\"number\">0</span>].child</span><br><span class=\"line\">Out[<span class=\"number\">32</span>]: &#123;<span class=\"string\">'a'</span>: [&lt;__main__.Tode at <span class=\"number\">0x10e7e3d30</span>&gt;], <span class=\"string\">'br'</span>: [&lt;__main__.Tode at <span class=\"number\">0x10e7e3940</span>&gt;]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">33</span>]: test.child[<span class=\"string\">'td'</span>][<span class=\"number\">0</span>].child[<span class=\"string\">'font'</span>][<span class=\"number\">0</span>].child[<span class=\"string\">'a'</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">Out[<span class=\"number\">33</span>]: &lt;__main__.Tode at <span class=\"number\">0x10e7e3d30</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">34</span>]: test.child[<span class=\"string\">'td'</span>][<span class=\"number\">0</span>].child[<span class=\"string\">'font'</span>][<span class=\"number\">0</span>].child[<span class=\"string\">'a'</span>][<span class=\"number\">0</span>].root</span><br><span class=\"line\">Out[34]: &lt;a href=\"search.cfm?tickersymbol=ADK-A&amp;amp;sopt=symbol\"&gt;&lt;b&gt;ADK-A&lt;/b&gt;&lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">35</span>]: test.child[<span class=\"string\">'td'</span>][<span class=\"number\">0</span>].child[<span class=\"string\">'font'</span>][<span class=\"number\">0</span>].root</span><br><span class=\"line\">Out[<span class=\"number\">35</span>]: </span><br><span class=\"line\">&lt;font face=<span class=\"string\">\"arial, helvetica, sans-serif\"</span> size=<span class=\"string\">\"2\"</span>&gt;</span><br><span class=\"line\">&lt;a href=\"search.cfm?tickersymbol=ADK-A&amp;amp;sopt=symbol\"&gt;&lt;b&gt;ADK-A&lt;/b&gt;&lt;/a&gt;&lt;br/&gt;00650W409</span><br><span class=\"line\">\t\t&lt;/font&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">36</span>]: test.child[<span class=\"string\">'td'</span>][<span class=\"number\">0</span>].root</span><br><span class=\"line\">Out[<span class=\"number\">36</span>]: </span><br><span class=\"line\">&lt;td&gt;</span><br><span class=\"line\">&lt;font face=<span class=\"string\">\"arial, helvetica, sans-serif\"</span> size=<span class=\"string\">\"2\"</span>&gt;</span><br><span class=\"line\">&lt;a href=\"search.cfm?tickersymbol=ADK-A&amp;amp;sopt=symbol\"&gt;&lt;b&gt;ADK-A&lt;/b&gt;&lt;/a&gt;&lt;br/&gt;00650W409</span><br><span class=\"line\">\t\t&lt;/font&gt;</span><br><span class=\"line\">&lt;/td&gt;</span><br></pre></td></tr></table></figure>\n</code></pre><p>嗯，就是这样，还是需要正则提取，但是少了切片会快很多。上面的数据可以作为练习，试着删掉某一块数据</p>\n<p>以后会更新部分方法使调用过程更加方便</p>"},{"title":"使用Echosim语音控制2048","date":"2016-11-06T02:50:35.000Z","_content":"\n前一阵子去hackathon和队友体验了一把Amazon Echo特别爽。这个小玩意扩展能力很好，你可以通过它直接和你的电脑进行交互。这次我们使用python的Flask来通过Echosim操作2048，完成各个方向的滑动。\n\n![](echo-control-2048/2048.png)\n\n让我们开始吧！\n\n<!--More-->\n\n\n##工具准备\n\n- Flask \n- Flask-Ask\n- EchoSim\n- ngrok\n- Python3\n- [Python 2048](https://github.com/yangshun/2048-python)\n\n\n## 修改2048的输入源\n\n要使用Echo作为输入源，原理非常简单粗暴。只要把程序中的键盘输入源去掉->换成Echo输入源。具体来讲就是\n\n- 使用'left','right'字符串来代替键盘按键\n- 使用Echo生成'left,'right'字符串\n\n让我们先来看看2048程序里面的两个文件，其中puzzle部分包含了键盘输入部分，分为下面几个部分\n\n第一部分定义了2048以接受'wasd'字符的方式来操作\n\t```Python\n    KEY_UP = \"'w'\"\n\tKEY_DOWN = \"'s'\"\n\tKEY_LEFT = \"'a'\"\n\tKEY_RIGHT = \"'d'\"\n\t```\n因为我们会对Echo说出具体方向，所以我们把它改成\n\t```Python\n\tKEY_UP = \"up\"\n\tKEY_DOWN = \"down\"\n\tKEY_LEFT = \"left\"\n\tKEY_RIGHT = \"right\"\n\t```\n现在我们要取消wasd与键盘上的wasd按键绑定，先删掉GameGrid类中__init__方法里面的\n\t```Python\n\tself.master.bind(\"<Key>\", self.key_down)\n\t```\n接着将key_down方法中的\n\t```Python\n\tkey = repr(event.char)\n\t```\n改成\n\t```Python\n\tkey = event\n\t```\n由于程序使用了tkinter的GUI，内部又一个封闭的循环我们不能通过python的交互指令来操作2048,所以我们需要先禁用这个初始化以及自动循环的过程，后面我们手动初始化，来到GameGrid类中的__init__方法，删除下面几行\n\n    ```Python    \n    self.mainloop()\n    ```\n\n这个时候我们已经摆脱了了原来的操作方式，来python的交互界面试一下\n\n\t```Python\n\t>>> from puzzle import *\n\t>>> gamegrid = Gamegrid()\n\t#操作\n\t>>> gamegrid.key_down('up')\n\t>>> gamegrid.key_down('down')\n\t```\n\n这个时候我们对puzzle.py的改造已经完成，我们需要一种类似input的方法来进行移动，接下来我们来使用Flask搭建和Echo沟通的桥梁\n\n\n\n## 交互模型\n\n修改了原游戏之前，我们先来看交互模型，这为我们以后使用Flask-Ask构建了框架。在交互模型中我们要定义Intent（意图），和不同表达所对应的意图。\n\n### Intent Schema\n\n\t{\n\n\t    \"intents\": [\n\t      \n\t      {\n\n\t\t\"intent\": \"YesIntent\"\n\n\t      }, \n\t      \n\t      \n\t      {\n\n\t\t\"intent\": \"AnswerIntent\",\n\n\t\t\"slots\": [\n\t\t{\n\t\t\t\"name\": \"action\",\n\t\t\t\"type\": \"LIST_OF_SIGNS\"\n\t\t}\n\t\t\t]\n\n\t       }\n\t      \n\t\t\t]\n\n\t}\n\nAmazon Echo 使用json格式来进行交互,上面这个交互模型主要包含了各个Intent,其中\n\n- YesIntent: 当Echo询问是否开始游戏时，回答是时执行（启动游戏）\n- AnswerIntent：启动游戏后，所有的指令都通过此条传输，此处定义Echo接收的变量名名称和类型，我们将使用slot来定义，名字为action,类型为自定义类型LIST\\_OF\\_SIGNS\n\n### Custom Slot Types\n\n在这里我们定义LIST_OF_SIGNS为 \n\n\tup\n\tdown\n\tleft\n\tright\n\n\n\n### Sample Utterance\n\n这里定义了识别方法，当你说yes/start/begin时会自动导向YesIntent,'{}'内是会被传输的变量\n\n\tYesIntent start\n\tYesIntent begin\n\tYesIntent Yes\n\n\tAnswerIntent {action} \n\tAnswerIntent turn {action}\n\tAnswerIntent go {action}\n\n\n##使用Flask-Ask搭建服务\n\n创建一个名为server.py的文件\n\n### 初始化\n\n引入我们的工具包，引入2048\n\n\n\t```Python\n\tfrom flask import Flask\n\tfrom flask_ask import Ask,statement,question,session\n\tfrom puzzle import *\n\t```\n对引入的内容进行初始化，因为游戏没有开始，我们设置状态为not\\_yet\n\n\t```Python\n\tapp = Flask(\\_\\_name\\_\\_)\n\task = Ask(app,\"/\")\n\tgamegrid=None\n\tstatus = 'not\\_yet'\n\t```\n### 欢迎界面\n欢迎界面就是当你命令Alexa(Echo)启动程序后，Echo的反应。我们在这里使用装饰器@ask.launch，并用字符串来表达Alexa要说的话，用question来发问。\n\n\t```Python\n\t@ask.launch\n\tdef welcome():\n\t\twelcome_msg = \"welcome to 20 48,say yes to begin, say instruction for instruction \"\n\t\t\n\t\treturn question(welcome_msg)\n\t```\n\n### 启动游戏\n\n欢迎界面过后我们要说yes来启动游戏，@ask.intent('YesIntent')表示回答\"YesIntent\"后对应的操作，我们在这里初始化游戏（使用global表示游戏在主线程中，tkinter的GUI必须在主线程中)，修改当前状态（避免在游戏过程中被重复执行）\n\n\n\t```Python\n\t@ask.intent('YesIntent')\n\tdef start_instruction():\n\n\t\tglobal status\n\t\tglobal gamegrid\n\t\tif status == 'not_yet':\n\t\t\tgamegrid =GameGrid()\n\t\t\tins_msg = \"Please say the direction to move\"\n\t\t\tstatus = 'in_game'\n\t\t\treturn question(ins_msg)\n\t\treturn question(\"already in game\")\n\t```\n\n### 操作\n\n启动游戏后，自动进入操作模式。这个时候我们使用定义好的AnswerIntent来接收指令，将action通过装饰器作为字符串变量传入函数中。\n\n\t```Python\n\t@ask.intent(\"AnswerIntent\",convert ={'action':str})\n\tdef game(action):\n\t\tglobal direc\n\t\tglobal gamegrid\n\t\tif action in ['left','right','up','down']:\n\t\t\ttry:\n\n\t\t\t\tgamegrid.key_down(action)\n\t\t\t\t\n\t\t\texcept:\n\t\t\t\tpass\n\n\t\t\treturn question('')\n\n\t\treturn question('invalid action,please try again')\n\t```\n\t\n如果action是有效的，我们的question是'',即没有反馈，当遇到非法操作时才报错\n\n\n### question和statement\n每次通过ask.launch进入程序后，都有一个新的session,statement和question的作用都是将预先安排好的字符串作为语音反馈。但是有一个关键的区别:statement会结束掉当前Session(直接退出)，而question会保留当前Session,这是我们循环的根本。\n\n## 测试\n\n### 启动服务\n\n下载ngrok，并运行\n\n- Unix/Mac\n\n\t./ngrok http 5000\n\n- Windows\n\t\n\tngrok.exe http 5000\n\n接着同时运行你写好的server.py\n\n### Developer上创建新技能\n\n登入你的Amazon Developer账户，点击Alexa －>Alexa Skill Kit -> Create a new skill进入设置页面\n\n\n- Skill Information,为我们的程序起名字（启动口令），我们这里叫 twenty forty eight\n\n>\t\"Alexa,Start Twenty forty eight\"\n\n- Interaction Model,将我们的交互模型放入即可\n\n\n- Configuration，选择HTTPS,并将你的ngrok生成的https地址拷贝到上面\n\n- SSL Certificate下选择‘My development endpoint is a sub-domain of a domain that has a wildcard certificate from a certificate authority’一项后，点击next,你的测试状态就变为可用了\n\n\n### Echosim\n\n进入[Echosim.io](Echosim.io),用你的amazon developer账户登入即可测试\n\n\n## 课后拓展\n\n\n有兴趣的朋友可以完成以下任务来巩固所学知识\n\n- 添加一个StopIntent使其可以终止\n- 判断输赢，并报出结果\n- 通过口令重新启动游戏\n\n\n\n## Reference\n\n- [2048-python](https://github.com/yangshun/2048-python)\n- [Flask-Ask Document](https://flask-ask.readthedocs.io/)\n- [Flask-Ask: A New Python Framework for Rapid Alexa Skills Kit Development](https://developer.amazon.com/public/community/post/Tx14R0IYYGH3SKT/Flask-Ask-A-New-Python-Framework-for-Rapid-Alexa-Skills-Kit-Development)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/echo-control-2048.md","raw":"---\ntitle: 使用Echosim语音控制2048 \ndate: 2016-11-06 10:50:35\ntags:\ncategories: Flask\n---\n\n前一阵子去hackathon和队友体验了一把Amazon Echo特别爽。这个小玩意扩展能力很好，你可以通过它直接和你的电脑进行交互。这次我们使用python的Flask来通过Echosim操作2048，完成各个方向的滑动。\n\n![](echo-control-2048/2048.png)\n\n让我们开始吧！\n\n<!--More-->\n\n\n##工具准备\n\n- Flask \n- Flask-Ask\n- EchoSim\n- ngrok\n- Python3\n- [Python 2048](https://github.com/yangshun/2048-python)\n\n\n## 修改2048的输入源\n\n要使用Echo作为输入源，原理非常简单粗暴。只要把程序中的键盘输入源去掉->换成Echo输入源。具体来讲就是\n\n- 使用'left','right'字符串来代替键盘按键\n- 使用Echo生成'left,'right'字符串\n\n让我们先来看看2048程序里面的两个文件，其中puzzle部分包含了键盘输入部分，分为下面几个部分\n\n第一部分定义了2048以接受'wasd'字符的方式来操作\n\t```Python\n    KEY_UP = \"'w'\"\n\tKEY_DOWN = \"'s'\"\n\tKEY_LEFT = \"'a'\"\n\tKEY_RIGHT = \"'d'\"\n\t```\n因为我们会对Echo说出具体方向，所以我们把它改成\n\t```Python\n\tKEY_UP = \"up\"\n\tKEY_DOWN = \"down\"\n\tKEY_LEFT = \"left\"\n\tKEY_RIGHT = \"right\"\n\t```\n现在我们要取消wasd与键盘上的wasd按键绑定，先删掉GameGrid类中__init__方法里面的\n\t```Python\n\tself.master.bind(\"<Key>\", self.key_down)\n\t```\n接着将key_down方法中的\n\t```Python\n\tkey = repr(event.char)\n\t```\n改成\n\t```Python\n\tkey = event\n\t```\n由于程序使用了tkinter的GUI，内部又一个封闭的循环我们不能通过python的交互指令来操作2048,所以我们需要先禁用这个初始化以及自动循环的过程，后面我们手动初始化，来到GameGrid类中的__init__方法，删除下面几行\n\n    ```Python    \n    self.mainloop()\n    ```\n\n这个时候我们已经摆脱了了原来的操作方式，来python的交互界面试一下\n\n\t```Python\n\t>>> from puzzle import *\n\t>>> gamegrid = Gamegrid()\n\t#操作\n\t>>> gamegrid.key_down('up')\n\t>>> gamegrid.key_down('down')\n\t```\n\n这个时候我们对puzzle.py的改造已经完成，我们需要一种类似input的方法来进行移动，接下来我们来使用Flask搭建和Echo沟通的桥梁\n\n\n\n## 交互模型\n\n修改了原游戏之前，我们先来看交互模型，这为我们以后使用Flask-Ask构建了框架。在交互模型中我们要定义Intent（意图），和不同表达所对应的意图。\n\n### Intent Schema\n\n\t{\n\n\t    \"intents\": [\n\t      \n\t      {\n\n\t\t\"intent\": \"YesIntent\"\n\n\t      }, \n\t      \n\t      \n\t      {\n\n\t\t\"intent\": \"AnswerIntent\",\n\n\t\t\"slots\": [\n\t\t{\n\t\t\t\"name\": \"action\",\n\t\t\t\"type\": \"LIST_OF_SIGNS\"\n\t\t}\n\t\t\t]\n\n\t       }\n\t      \n\t\t\t]\n\n\t}\n\nAmazon Echo 使用json格式来进行交互,上面这个交互模型主要包含了各个Intent,其中\n\n- YesIntent: 当Echo询问是否开始游戏时，回答是时执行（启动游戏）\n- AnswerIntent：启动游戏后，所有的指令都通过此条传输，此处定义Echo接收的变量名名称和类型，我们将使用slot来定义，名字为action,类型为自定义类型LIST\\_OF\\_SIGNS\n\n### Custom Slot Types\n\n在这里我们定义LIST_OF_SIGNS为 \n\n\tup\n\tdown\n\tleft\n\tright\n\n\n\n### Sample Utterance\n\n这里定义了识别方法，当你说yes/start/begin时会自动导向YesIntent,'{}'内是会被传输的变量\n\n\tYesIntent start\n\tYesIntent begin\n\tYesIntent Yes\n\n\tAnswerIntent {action} \n\tAnswerIntent turn {action}\n\tAnswerIntent go {action}\n\n\n##使用Flask-Ask搭建服务\n\n创建一个名为server.py的文件\n\n### 初始化\n\n引入我们的工具包，引入2048\n\n\n\t```Python\n\tfrom flask import Flask\n\tfrom flask_ask import Ask,statement,question,session\n\tfrom puzzle import *\n\t```\n对引入的内容进行初始化，因为游戏没有开始，我们设置状态为not\\_yet\n\n\t```Python\n\tapp = Flask(\\_\\_name\\_\\_)\n\task = Ask(app,\"/\")\n\tgamegrid=None\n\tstatus = 'not\\_yet'\n\t```\n### 欢迎界面\n欢迎界面就是当你命令Alexa(Echo)启动程序后，Echo的反应。我们在这里使用装饰器@ask.launch，并用字符串来表达Alexa要说的话，用question来发问。\n\n\t```Python\n\t@ask.launch\n\tdef welcome():\n\t\twelcome_msg = \"welcome to 20 48,say yes to begin, say instruction for instruction \"\n\t\t\n\t\treturn question(welcome_msg)\n\t```\n\n### 启动游戏\n\n欢迎界面过后我们要说yes来启动游戏，@ask.intent('YesIntent')表示回答\"YesIntent\"后对应的操作，我们在这里初始化游戏（使用global表示游戏在主线程中，tkinter的GUI必须在主线程中)，修改当前状态（避免在游戏过程中被重复执行）\n\n\n\t```Python\n\t@ask.intent('YesIntent')\n\tdef start_instruction():\n\n\t\tglobal status\n\t\tglobal gamegrid\n\t\tif status == 'not_yet':\n\t\t\tgamegrid =GameGrid()\n\t\t\tins_msg = \"Please say the direction to move\"\n\t\t\tstatus = 'in_game'\n\t\t\treturn question(ins_msg)\n\t\treturn question(\"already in game\")\n\t```\n\n### 操作\n\n启动游戏后，自动进入操作模式。这个时候我们使用定义好的AnswerIntent来接收指令，将action通过装饰器作为字符串变量传入函数中。\n\n\t```Python\n\t@ask.intent(\"AnswerIntent\",convert ={'action':str})\n\tdef game(action):\n\t\tglobal direc\n\t\tglobal gamegrid\n\t\tif action in ['left','right','up','down']:\n\t\t\ttry:\n\n\t\t\t\tgamegrid.key_down(action)\n\t\t\t\t\n\t\t\texcept:\n\t\t\t\tpass\n\n\t\t\treturn question('')\n\n\t\treturn question('invalid action,please try again')\n\t```\n\t\n如果action是有效的，我们的question是'',即没有反馈，当遇到非法操作时才报错\n\n\n### question和statement\n每次通过ask.launch进入程序后，都有一个新的session,statement和question的作用都是将预先安排好的字符串作为语音反馈。但是有一个关键的区别:statement会结束掉当前Session(直接退出)，而question会保留当前Session,这是我们循环的根本。\n\n## 测试\n\n### 启动服务\n\n下载ngrok，并运行\n\n- Unix/Mac\n\n\t./ngrok http 5000\n\n- Windows\n\t\n\tngrok.exe http 5000\n\n接着同时运行你写好的server.py\n\n### Developer上创建新技能\n\n登入你的Amazon Developer账户，点击Alexa －>Alexa Skill Kit -> Create a new skill进入设置页面\n\n\n- Skill Information,为我们的程序起名字（启动口令），我们这里叫 twenty forty eight\n\n>\t\"Alexa,Start Twenty forty eight\"\n\n- Interaction Model,将我们的交互模型放入即可\n\n\n- Configuration，选择HTTPS,并将你的ngrok生成的https地址拷贝到上面\n\n- SSL Certificate下选择‘My development endpoint is a sub-domain of a domain that has a wildcard certificate from a certificate authority’一项后，点击next,你的测试状态就变为可用了\n\n\n### Echosim\n\n进入[Echosim.io](Echosim.io),用你的amazon developer账户登入即可测试\n\n\n## 课后拓展\n\n\n有兴趣的朋友可以完成以下任务来巩固所学知识\n\n- 添加一个StopIntent使其可以终止\n- 判断输赢，并报出结果\n- 通过口令重新启动游戏\n\n\n\n## Reference\n\n- [2048-python](https://github.com/yangshun/2048-python)\n- [Flask-Ask Document](https://flask-ask.readthedocs.io/)\n- [Flask-Ask: A New Python Framework for Rapid Alexa Skills Kit Development](https://developer.amazon.com/public/community/post/Tx14R0IYYGH3SKT/Flask-Ask-A-New-Python-Framework-for-Rapid-Alexa-Skills-Kit-Development)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"echo-control-2048","published":1,"updated":"2018-06-22T05:47:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiqvlnuj0003glu3c67xwg33","content":"<p>前一阵子去hackathon和队友体验了一把Amazon Echo特别爽。这个小玩意扩展能力很好，你可以通过它直接和你的电脑进行交互。这次我们使用python的Flask来通过Echosim操作2048，完成各个方向的滑动。</p>\n<p><img src=\"/article/echo-control-2048/2048.png\" alt=\"\"></p>\n<p>让我们开始吧！</p>\n<a id=\"more\"></a>\n<p>##工具准备</p>\n<ul>\n<li>Flask </li>\n<li>Flask-Ask</li>\n<li>EchoSim</li>\n<li>ngrok</li>\n<li>Python3</li>\n<li><a href=\"https://github.com/yangshun/2048-python\" target=\"_blank\" rel=\"noopener\">Python 2048</a></li>\n</ul>\n<h2 id=\"修改2048的输入源\"><a href=\"#修改2048的输入源\" class=\"headerlink\" title=\"修改2048的输入源\"></a>修改2048的输入源</h2><p>要使用Echo作为输入源，原理非常简单粗暴。只要把程序中的键盘输入源去掉-&gt;换成Echo输入源。具体来讲就是</p>\n<ul>\n<li>使用’left’,’right’字符串来代替键盘按键</li>\n<li>使用Echo生成’left,’right’字符串</li>\n</ul>\n<p>让我们先来看看2048程序里面的两个文件，其中puzzle部分包含了键盘输入部分，分为下面几个部分</p>\n<p>第一部分定义了2048以接受’wasd’字符的方式来操作<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   KEY_UP = <span class=\"string\">\"'w'\"</span></span><br><span class=\"line\">KEY_DOWN = <span class=\"string\">\"'s'\"</span></span><br><span class=\"line\">KEY_LEFT = <span class=\"string\">\"'a'\"</span></span><br><span class=\"line\">KEY_RIGHT = <span class=\"string\">\"'d'\"</span></span><br></pre></td></tr></table></figure></p>\n<p>因为我们会对Echo说出具体方向，所以我们把它改成<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KEY_UP = <span class=\"string\">\"up\"</span></span><br><span class=\"line\">KEY_DOWN = <span class=\"string\">\"down\"</span></span><br><span class=\"line\">KEY_LEFT = <span class=\"string\">\"left\"</span></span><br><span class=\"line\">KEY_RIGHT = <span class=\"string\">\"right\"</span></span><br></pre></td></tr></table></figure></p>\n<p>现在我们要取消wasd与键盘上的wasd按键绑定，先删掉GameGrid类中<strong>init</strong>方法里面的<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.master.bind(<span class=\"string\">\"&lt;Key&gt;\"</span>, self.key_down)</span><br></pre></td></tr></table></figure></p>\n<p>接着将key_down方法中的<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key = repr(event.char)</span><br></pre></td></tr></table></figure></p>\n<p>改成<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key = event</span><br></pre></td></tr></table></figure></p>\n<p>由于程序使用了tkinter的GUI，内部又一个封闭的循环我们不能通过python的交互指令来操作2048,所以我们需要先禁用这个初始化以及自动循环的过程，后面我们手动初始化，来到GameGrid类中的<strong>init</strong>方法，删除下面几行</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.mainloop()</span><br></pre></td></tr></table></figure>\n</code></pre><p>这个时候我们已经摆脱了了原来的操作方式，来python的交互界面试一下</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> puzzle <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>gamegrid = Gamegrid()</span><br><span class=\"line\"><span class=\"comment\">#操作</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>gamegrid.key_down(<span class=\"string\">'up'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>gamegrid.key_down(<span class=\"string\">'down'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>这个时候我们对puzzle.py的改造已经完成，我们需要一种类似input的方法来进行移动，接下来我们来使用Flask搭建和Echo沟通的桥梁</p>\n<h2 id=\"交互模型\"><a href=\"#交互模型\" class=\"headerlink\" title=\"交互模型\"></a>交互模型</h2><p>修改了原游戏之前，我们先来看交互模型，这为我们以后使用Flask-Ask构建了框架。在交互模型中我们要定义Intent（意图），和不同表达所对应的意图。</p>\n<h3 id=\"Intent-Schema\"><a href=\"#Intent-Schema\" class=\"headerlink\" title=\"Intent Schema\"></a>Intent Schema</h3><pre><code>{\n\n    &quot;intents&quot;: [\n\n      {\n\n    &quot;intent&quot;: &quot;YesIntent&quot;\n\n      }, \n\n\n      {\n\n    &quot;intent&quot;: &quot;AnswerIntent&quot;,\n\n    &quot;slots&quot;: [\n    {\n        &quot;name&quot;: &quot;action&quot;,\n        &quot;type&quot;: &quot;LIST_OF_SIGNS&quot;\n    }\n        ]\n\n       }\n\n        ]\n\n}\n</code></pre><p>Amazon Echo 使用json格式来进行交互,上面这个交互模型主要包含了各个Intent,其中</p>\n<ul>\n<li>YesIntent: 当Echo询问是否开始游戏时，回答是时执行（启动游戏）</li>\n<li>AnswerIntent：启动游戏后，所有的指令都通过此条传输，此处定义Echo接收的变量名名称和类型，我们将使用slot来定义，名字为action,类型为自定义类型LIST_OF_SIGNS</li>\n</ul>\n<h3 id=\"Custom-Slot-Types\"><a href=\"#Custom-Slot-Types\" class=\"headerlink\" title=\"Custom Slot Types\"></a>Custom Slot Types</h3><p>在这里我们定义LIST_OF_SIGNS为 </p>\n<pre><code>up\ndown\nleft\nright\n</code></pre><h3 id=\"Sample-Utterance\"><a href=\"#Sample-Utterance\" class=\"headerlink\" title=\"Sample Utterance\"></a>Sample Utterance</h3><p>这里定义了识别方法，当你说yes/start/begin时会自动导向YesIntent,’{}’内是会被传输的变量</p>\n<pre><code>YesIntent start\nYesIntent begin\nYesIntent Yes\n\nAnswerIntent {action} \nAnswerIntent turn {action}\nAnswerIntent go {action}\n</code></pre><p>##使用Flask-Ask搭建服务</p>\n<p>创建一个名为server.py的文件</p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>引入我们的工具包，引入2048</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_ask <span class=\"keyword\">import</span> Ask,statement,question,session</span><br><span class=\"line\"><span class=\"keyword\">from</span> puzzle <span class=\"keyword\">import</span> *</span><br></pre></td></tr></table></figure>\n</code></pre><p>对引入的内容进行初始化，因为游戏没有开始，我们设置状态为not_yet</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app = Flask(\\_\\_name\\_\\_)</span><br><span class=\"line\">ask = Ask(app,<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">gamegrid=<span class=\"keyword\">None</span></span><br><span class=\"line\">status = <span class=\"string\">'not\\_yet'</span></span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"欢迎界面\"><a href=\"#欢迎界面\" class=\"headerlink\" title=\"欢迎界面\"></a>欢迎界面</h3><p>欢迎界面就是当你命令Alexa(Echo)启动程序后，Echo的反应。我们在这里使用装饰器@ask.launch，并用字符串来表达Alexa要说的话，用question来发问。</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ask.launch</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">welcome</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\twelcome_msg = <span class=\"string\">\"welcome to 20 48,say yes to begin, say instruction for instruction \"</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> question(welcome_msg)</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"启动游戏\"><a href=\"#启动游戏\" class=\"headerlink\" title=\"启动游戏\"></a>启动游戏</h3><p>欢迎界面过后我们要说yes来启动游戏，@ask.intent(‘YesIntent’)表示回答”YesIntent”后对应的操作，我们在这里初始化游戏（使用global表示游戏在主线程中，tkinter的GUI必须在主线程中)，修改当前状态（避免在游戏过程中被重复执行）</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ask.intent('YesIntent')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_instruction</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">global</span> status</span><br><span class=\"line\">\t<span class=\"keyword\">global</span> gamegrid</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> status == <span class=\"string\">'not_yet'</span>:</span><br><span class=\"line\">\t\tgamegrid =GameGrid()</span><br><span class=\"line\">\t\tins_msg = <span class=\"string\">\"Please say the direction to move\"</span></span><br><span class=\"line\">\t\tstatus = <span class=\"string\">'in_game'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> question(ins_msg)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> question(<span class=\"string\">\"already in game\"</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h3><p>启动游戏后，自动进入操作模式。这个时候我们使用定义好的AnswerIntent来接收指令，将action通过装饰器作为字符串变量传入函数中。</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ask.intent(\"AnswerIntent\",convert =&#123;'action':str&#125;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">game</span><span class=\"params\">(action)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">global</span> direc</span><br><span class=\"line\">\t<span class=\"keyword\">global</span> gamegrid</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> action <span class=\"keyword\">in</span> [<span class=\"string\">'left'</span>,<span class=\"string\">'right'</span>,<span class=\"string\">'up'</span>,<span class=\"string\">'down'</span>]:</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tgamegrid.key_down(action)</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">except</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> question(<span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> question(<span class=\"string\">'invalid action,please try again'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>如果action是有效的，我们的question是’’,即没有反馈，当遇到非法操作时才报错</p>\n<h3 id=\"question和statement\"><a href=\"#question和statement\" class=\"headerlink\" title=\"question和statement\"></a>question和statement</h3><p>每次通过ask.launch进入程序后，都有一个新的session,statement和question的作用都是将预先安排好的字符串作为语音反馈。但是有一个关键的区别:statement会结束掉当前Session(直接退出)，而question会保留当前Session,这是我们循环的根本。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><p>下载ngrok，并运行</p>\n<ul>\n<li><p>Unix/Mac</p>\n<p>  ./ngrok http 5000</p>\n</li>\n<li><p>Windows</p>\n<p>  ngrok.exe http 5000</p>\n</li>\n</ul>\n<p>接着同时运行你写好的server.py</p>\n<h3 id=\"Developer上创建新技能\"><a href=\"#Developer上创建新技能\" class=\"headerlink\" title=\"Developer上创建新技能\"></a>Developer上创建新技能</h3><p>登入你的Amazon Developer账户，点击Alexa －&gt;Alexa Skill Kit -&gt; Create a new skill进入设置页面</p>\n<ul>\n<li>Skill Information,为我们的程序起名字（启动口令），我们这里叫 twenty forty eight</li>\n</ul>\n<blockquote>\n<p>   “Alexa,Start Twenty forty eight”</p>\n</blockquote>\n<ul>\n<li>Interaction Model,将我们的交互模型放入即可</li>\n</ul>\n<ul>\n<li><p>Configuration，选择HTTPS,并将你的ngrok生成的https地址拷贝到上面</p>\n</li>\n<li><p>SSL Certificate下选择‘My development endpoint is a sub-domain of a domain that has a wildcard certificate from a certificate authority’一项后，点击next,你的测试状态就变为可用了</p>\n</li>\n</ul>\n<h3 id=\"Echosim\"><a href=\"#Echosim\" class=\"headerlink\" title=\"Echosim\"></a>Echosim</h3><p>进入<a href=\"Echosim.io\">Echosim.io</a>,用你的amazon developer账户登入即可测试</p>\n<h2 id=\"课后拓展\"><a href=\"#课后拓展\" class=\"headerlink\" title=\"课后拓展\"></a>课后拓展</h2><p>有兴趣的朋友可以完成以下任务来巩固所学知识</p>\n<ul>\n<li>添加一个StopIntent使其可以终止</li>\n<li>判断输赢，并报出结果</li>\n<li>通过口令重新启动游戏</li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://github.com/yangshun/2048-python\" target=\"_blank\" rel=\"noopener\">2048-python</a></li>\n<li><a href=\"https://flask-ask.readthedocs.io/\" target=\"_blank\" rel=\"noopener\">Flask-Ask Document</a></li>\n<li><a href=\"https://developer.amazon.com/public/community/post/Tx14R0IYYGH3SKT/Flask-Ask-A-New-Python-Framework-for-Rapid-Alexa-Skills-Kit-Development\" target=\"_blank\" rel=\"noopener\">Flask-Ask: A New Python Framework for Rapid Alexa Skills Kit Development</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>前一阵子去hackathon和队友体验了一把Amazon Echo特别爽。这个小玩意扩展能力很好，你可以通过它直接和你的电脑进行交互。这次我们使用python的Flask来通过Echosim操作2048，完成各个方向的滑动。</p>\n<p><img src=\"/article/echo-control-2048/2048.png\" alt=\"\"></p>\n<p>让我们开始吧！</p>","more":"<p>##工具准备</p>\n<ul>\n<li>Flask </li>\n<li>Flask-Ask</li>\n<li>EchoSim</li>\n<li>ngrok</li>\n<li>Python3</li>\n<li><a href=\"https://github.com/yangshun/2048-python\" target=\"_blank\" rel=\"noopener\">Python 2048</a></li>\n</ul>\n<h2 id=\"修改2048的输入源\"><a href=\"#修改2048的输入源\" class=\"headerlink\" title=\"修改2048的输入源\"></a>修改2048的输入源</h2><p>要使用Echo作为输入源，原理非常简单粗暴。只要把程序中的键盘输入源去掉-&gt;换成Echo输入源。具体来讲就是</p>\n<ul>\n<li>使用’left’,’right’字符串来代替键盘按键</li>\n<li>使用Echo生成’left,’right’字符串</li>\n</ul>\n<p>让我们先来看看2048程序里面的两个文件，其中puzzle部分包含了键盘输入部分，分为下面几个部分</p>\n<p>第一部分定义了2048以接受’wasd’字符的方式来操作<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   KEY_UP = <span class=\"string\">\"'w'\"</span></span><br><span class=\"line\">KEY_DOWN = <span class=\"string\">\"'s'\"</span></span><br><span class=\"line\">KEY_LEFT = <span class=\"string\">\"'a'\"</span></span><br><span class=\"line\">KEY_RIGHT = <span class=\"string\">\"'d'\"</span></span><br></pre></td></tr></table></figure></p>\n<p>因为我们会对Echo说出具体方向，所以我们把它改成<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KEY_UP = <span class=\"string\">\"up\"</span></span><br><span class=\"line\">KEY_DOWN = <span class=\"string\">\"down\"</span></span><br><span class=\"line\">KEY_LEFT = <span class=\"string\">\"left\"</span></span><br><span class=\"line\">KEY_RIGHT = <span class=\"string\">\"right\"</span></span><br></pre></td></tr></table></figure></p>\n<p>现在我们要取消wasd与键盘上的wasd按键绑定，先删掉GameGrid类中<strong>init</strong>方法里面的<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.master.bind(<span class=\"string\">\"&lt;Key&gt;\"</span>, self.key_down)</span><br></pre></td></tr></table></figure></p>\n<p>接着将key_down方法中的<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key = repr(event.char)</span><br></pre></td></tr></table></figure></p>\n<p>改成<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key = event</span><br></pre></td></tr></table></figure></p>\n<p>由于程序使用了tkinter的GUI，内部又一个封闭的循环我们不能通过python的交互指令来操作2048,所以我们需要先禁用这个初始化以及自动循环的过程，后面我们手动初始化，来到GameGrid类中的<strong>init</strong>方法，删除下面几行</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.mainloop()</span><br></pre></td></tr></table></figure>\n</code></pre><p>这个时候我们已经摆脱了了原来的操作方式，来python的交互界面试一下</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> puzzle <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>gamegrid = Gamegrid()</span><br><span class=\"line\"><span class=\"comment\">#操作</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>gamegrid.key_down(<span class=\"string\">'up'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>gamegrid.key_down(<span class=\"string\">'down'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>这个时候我们对puzzle.py的改造已经完成，我们需要一种类似input的方法来进行移动，接下来我们来使用Flask搭建和Echo沟通的桥梁</p>\n<h2 id=\"交互模型\"><a href=\"#交互模型\" class=\"headerlink\" title=\"交互模型\"></a>交互模型</h2><p>修改了原游戏之前，我们先来看交互模型，这为我们以后使用Flask-Ask构建了框架。在交互模型中我们要定义Intent（意图），和不同表达所对应的意图。</p>\n<h3 id=\"Intent-Schema\"><a href=\"#Intent-Schema\" class=\"headerlink\" title=\"Intent Schema\"></a>Intent Schema</h3><pre><code>{\n\n    &quot;intents&quot;: [\n\n      {\n\n    &quot;intent&quot;: &quot;YesIntent&quot;\n\n      }, \n\n\n      {\n\n    &quot;intent&quot;: &quot;AnswerIntent&quot;,\n\n    &quot;slots&quot;: [\n    {\n        &quot;name&quot;: &quot;action&quot;,\n        &quot;type&quot;: &quot;LIST_OF_SIGNS&quot;\n    }\n        ]\n\n       }\n\n        ]\n\n}\n</code></pre><p>Amazon Echo 使用json格式来进行交互,上面这个交互模型主要包含了各个Intent,其中</p>\n<ul>\n<li>YesIntent: 当Echo询问是否开始游戏时，回答是时执行（启动游戏）</li>\n<li>AnswerIntent：启动游戏后，所有的指令都通过此条传输，此处定义Echo接收的变量名名称和类型，我们将使用slot来定义，名字为action,类型为自定义类型LIST_OF_SIGNS</li>\n</ul>\n<h3 id=\"Custom-Slot-Types\"><a href=\"#Custom-Slot-Types\" class=\"headerlink\" title=\"Custom Slot Types\"></a>Custom Slot Types</h3><p>在这里我们定义LIST_OF_SIGNS为 </p>\n<pre><code>up\ndown\nleft\nright\n</code></pre><h3 id=\"Sample-Utterance\"><a href=\"#Sample-Utterance\" class=\"headerlink\" title=\"Sample Utterance\"></a>Sample Utterance</h3><p>这里定义了识别方法，当你说yes/start/begin时会自动导向YesIntent,’{}’内是会被传输的变量</p>\n<pre><code>YesIntent start\nYesIntent begin\nYesIntent Yes\n\nAnswerIntent {action} \nAnswerIntent turn {action}\nAnswerIntent go {action}\n</code></pre><p>##使用Flask-Ask搭建服务</p>\n<p>创建一个名为server.py的文件</p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>引入我们的工具包，引入2048</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_ask <span class=\"keyword\">import</span> Ask,statement,question,session</span><br><span class=\"line\"><span class=\"keyword\">from</span> puzzle <span class=\"keyword\">import</span> *</span><br></pre></td></tr></table></figure>\n</code></pre><p>对引入的内容进行初始化，因为游戏没有开始，我们设置状态为not_yet</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app = Flask(\\_\\_name\\_\\_)</span><br><span class=\"line\">ask = Ask(app,<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">gamegrid=<span class=\"keyword\">None</span></span><br><span class=\"line\">status = <span class=\"string\">'not\\_yet'</span></span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"欢迎界面\"><a href=\"#欢迎界面\" class=\"headerlink\" title=\"欢迎界面\"></a>欢迎界面</h3><p>欢迎界面就是当你命令Alexa(Echo)启动程序后，Echo的反应。我们在这里使用装饰器@ask.launch，并用字符串来表达Alexa要说的话，用question来发问。</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ask.launch</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">welcome</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\twelcome_msg = <span class=\"string\">\"welcome to 20 48,say yes to begin, say instruction for instruction \"</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> question(welcome_msg)</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"启动游戏\"><a href=\"#启动游戏\" class=\"headerlink\" title=\"启动游戏\"></a>启动游戏</h3><p>欢迎界面过后我们要说yes来启动游戏，@ask.intent(‘YesIntent’)表示回答”YesIntent”后对应的操作，我们在这里初始化游戏（使用global表示游戏在主线程中，tkinter的GUI必须在主线程中)，修改当前状态（避免在游戏过程中被重复执行）</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ask.intent('YesIntent')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_instruction</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">global</span> status</span><br><span class=\"line\">\t<span class=\"keyword\">global</span> gamegrid</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> status == <span class=\"string\">'not_yet'</span>:</span><br><span class=\"line\">\t\tgamegrid =GameGrid()</span><br><span class=\"line\">\t\tins_msg = <span class=\"string\">\"Please say the direction to move\"</span></span><br><span class=\"line\">\t\tstatus = <span class=\"string\">'in_game'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> question(ins_msg)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> question(<span class=\"string\">\"already in game\"</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h3><p>启动游戏后，自动进入操作模式。这个时候我们使用定义好的AnswerIntent来接收指令，将action通过装饰器作为字符串变量传入函数中。</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ask.intent(\"AnswerIntent\",convert =&#123;'action':str&#125;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">game</span><span class=\"params\">(action)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">global</span> direc</span><br><span class=\"line\">\t<span class=\"keyword\">global</span> gamegrid</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> action <span class=\"keyword\">in</span> [<span class=\"string\">'left'</span>,<span class=\"string\">'right'</span>,<span class=\"string\">'up'</span>,<span class=\"string\">'down'</span>]:</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tgamegrid.key_down(action)</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">except</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> question(<span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> question(<span class=\"string\">'invalid action,please try again'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>如果action是有效的，我们的question是’’,即没有反馈，当遇到非法操作时才报错</p>\n<h3 id=\"question和statement\"><a href=\"#question和statement\" class=\"headerlink\" title=\"question和statement\"></a>question和statement</h3><p>每次通过ask.launch进入程序后，都有一个新的session,statement和question的作用都是将预先安排好的字符串作为语音反馈。但是有一个关键的区别:statement会结束掉当前Session(直接退出)，而question会保留当前Session,这是我们循环的根本。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><p>下载ngrok，并运行</p>\n<ul>\n<li><p>Unix/Mac</p>\n<p>  ./ngrok http 5000</p>\n</li>\n<li><p>Windows</p>\n<p>  ngrok.exe http 5000</p>\n</li>\n</ul>\n<p>接着同时运行你写好的server.py</p>\n<h3 id=\"Developer上创建新技能\"><a href=\"#Developer上创建新技能\" class=\"headerlink\" title=\"Developer上创建新技能\"></a>Developer上创建新技能</h3><p>登入你的Amazon Developer账户，点击Alexa －&gt;Alexa Skill Kit -&gt; Create a new skill进入设置页面</p>\n<ul>\n<li>Skill Information,为我们的程序起名字（启动口令），我们这里叫 twenty forty eight</li>\n</ul>\n<blockquote>\n<p>   “Alexa,Start Twenty forty eight”</p>\n</blockquote>\n<ul>\n<li>Interaction Model,将我们的交互模型放入即可</li>\n</ul>\n<ul>\n<li><p>Configuration，选择HTTPS,并将你的ngrok生成的https地址拷贝到上面</p>\n</li>\n<li><p>SSL Certificate下选择‘My development endpoint is a sub-domain of a domain that has a wildcard certificate from a certificate authority’一项后，点击next,你的测试状态就变为可用了</p>\n</li>\n</ul>\n<h3 id=\"Echosim\"><a href=\"#Echosim\" class=\"headerlink\" title=\"Echosim\"></a>Echosim</h3><p>进入<a href=\"Echosim.io\">Echosim.io</a>,用你的amazon developer账户登入即可测试</p>\n<h2 id=\"课后拓展\"><a href=\"#课后拓展\" class=\"headerlink\" title=\"课后拓展\"></a>课后拓展</h2><p>有兴趣的朋友可以完成以下任务来巩固所学知识</p>\n<ul>\n<li>添加一个StopIntent使其可以终止</li>\n<li>判断输赢，并报出结果</li>\n<li>通过口令重新启动游戏</li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://github.com/yangshun/2048-python\" target=\"_blank\" rel=\"noopener\">2048-python</a></li>\n<li><a href=\"https://flask-ask.readthedocs.io/\" target=\"_blank\" rel=\"noopener\">Flask-Ask Document</a></li>\n<li><a href=\"https://developer.amazon.com/public/community/post/Tx14R0IYYGH3SKT/Flask-Ask-A-New-Python-Framework-for-Rapid-Alexa-Skills-Kit-Development\" target=\"_blank\" rel=\"noopener\">Flask-Ask: A New Python Framework for Rapid Alexa Skills Kit Development</a></li>\n</ul>"},{"title":"两种Fibnacci递归求解对比","date":"2016-12-29T03:10:36.000Z","_content":"\n## 斐波那契数列\n\n在我学C的时候，Fibnacci就是作为递归算法入门的经典案例。斐波那契数列是由列奥纳多•斐波那契通过兔子繁殖的例子提出的，对各个科学领域有非常重要的意义。\n\n\n>斐波那契数列：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...\n>如果设F(n）为该数列的第n项（n∈N\\*），那么这句话可以写成如下形式：:F(n)=F(n-1)+F(n-2)\n>显然这是一个线性递推数列。\n\n>参见[百科词条](http://baike.baidu.com/item/斐波那契数列)\n\n让我们来看看它是怎么实现的。\n\n<!--More-->\n## 普通递归求解\n\n\t```Python\n\tdef fib(n):\n\t\tif n == 0 or n == 1:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn fib(n-1) + fib(n-2)\n\t\t#return 1 if n==1 or n==0 else fib(n-1)+fib(n-2)\n\t```\n- 首先我们定义了fib的函数fib，该递归使用降序，即从n到0或1，到达顶点时不再继续\n- 设置条件跳出递归循环，当n == 0 or 1\n- 如果不满足跳出条件（满足循环条件），则执行递归循环(fib(n-1) + fib(n-2))\n\n我们来看一下执行的具体过程，以n = 5为例\n\n1.fib(5)\n2.fib(4)+fib(3)\n3.(fib(3)+fib(2))+(fib(2)+fib(1))\n4.((fib(2)+fib(1))+(fib(1)+showfib(0))+((fib(1)+fib(0))+fib(1)\n5.(((fib(1)+fib(0))+fib(1))+(fib(1)+fib(0))+((fib(1)+fib(0))+fib(1)\n\n从上面我们不难看出，当我们在对斐波那契数列递归求解时，同样的函数被调用了不只一次（fib(3)被调用了两次，fib(2)被调用了3次，fib(1)被调用了...\n\n\n\t```Python\n\t'''\n\t\t       5\n\t\t   4      3\n\t\t 3   2   2 1\n\t\t2 1 1 0 1 0 \n\t   1 0 \n\t'''\n\t```\n如果我们把fib函数的调用路径当做一个典型的二叉树，我们来看一下各函数的调用次数\n\n|函数|fib(5)|fib(4)|fib(3)|fib(2)|fib(1)|fib(0)|\n|---|---|---|---|---|---|---|---|\n|次数|1|1|2|3|5|3(同2)|\n\n因为我们将1和0看作递归函数的顶点而合并，数量为fib(2)+fib(1)的数量，为8.我们不难看出各项运算次数为1,1,2,3,5,8，该数列即为fibnacci数列，而总的运算次数为fibnacci数列0-5各项之和\n\n\n### 测试\n\n我们这里来计算一下，fib(40)所用时间\n\t```Python\n\tlocalhost:optimization Jakob$ python3 slowfib.py \n\tfib[40]= 165580141\n\t74.878676\n\t```\n计算fib(40)耗时74.87s.\n\n## 使用动态规划\n\n我们看了前面的计算方式后，发现过多的时间浪费在了重复的计算上。我们能不能找到一种方法更快速高效呢？我们来看下面的例子\n\n>** 1 1 2 3 5 8 13 21 ? 求出'?'所代表的fib(8)**\n\n非常简单，我们只需要13+21 ＝ 34就求出来了。但是我们之前的方法在计算时并没有将计算的结果进行保留。所以这次我们要使用dict来将内容进行保留，方便后续运算参考\n\n\t```Python\n\tdef fastfib(n,memo = {}):\n\t\tif n == 0 or n == 1:\n\t\t\treturn 1\n\t\ttry:\n\t\t\treturn memo[n]\n\t\texcept KeyError:\n\t\t\tresult = fastfib(n-1,memo) + fastfib(n-2,memo)\n\t\t\tmemo[n]= result\n\t\t\treturn result\n\t```\n> 动态规划算法，是通过状态和状态转移来进行递推：当我们求得fib(3)使，我们的状态应该是fib1到3为已知，再求得fib4时，状态转移为fib1-4为已知\n\n\n与之前的函数不同的是，我们这次添加了一个memo作为参考dict，而递归的结构是一样的：\n\n- 先判断n 是否为1 or 0\n- 如果不是，**查找当前字典中是否有该项的值（是否已经被计算过）**,我们这里使用try..except来处理\n- 如果没有找到，计算出结果并添加到memo\n- 将memo中n对应的fib值作为结果返回\n\n\t```Python\n\t'''\n\t\t       5\n\t\t   4       3\n\t\t3     2   2  1\n\t   2 1   1 0 1 0 \n\t  1 0 \n\t'''\n\t```\n\n同样是二叉树，过程简单很多\n- fib(5)-> call fib(4) -> call fib(3) -> 2,1,从左边第一排开始向下\n- 结果逐级返回并添加入memo\n- 返回时只使用索引，无需深入计算\n- 得到fib(5)\n- 最后我们可以看出，我们只遍历了最左边一排节点5,4,3,2,1;以及右侧子节点（左数第二排，从下往上）0,1,2,3\n\n### 测试\n\n我们来看一下fastfib（40)需要多久\n\t```Python\n\tlocalhost:optimization Jakob$ python3 slowfastfib.py \n\tfib[40]= 165580141\n\t0.000112000\n\t```\n耗时0.000112秒\n\n## fib(40)对比图\n\n![](fib-recur/slowfastfib.png)\n\n\n\n","source":"_posts/fib-recur.md","raw":"---\ntitle: 两种Fibnacci递归求解对比\ndate: 2016-12-29 11:10:36\ntags:\ncategories: Python\n---\n\n## 斐波那契数列\n\n在我学C的时候，Fibnacci就是作为递归算法入门的经典案例。斐波那契数列是由列奥纳多•斐波那契通过兔子繁殖的例子提出的，对各个科学领域有非常重要的意义。\n\n\n>斐波那契数列：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...\n>如果设F(n）为该数列的第n项（n∈N\\*），那么这句话可以写成如下形式：:F(n)=F(n-1)+F(n-2)\n>显然这是一个线性递推数列。\n\n>参见[百科词条](http://baike.baidu.com/item/斐波那契数列)\n\n让我们来看看它是怎么实现的。\n\n<!--More-->\n## 普通递归求解\n\n\t```Python\n\tdef fib(n):\n\t\tif n == 0 or n == 1:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn fib(n-1) + fib(n-2)\n\t\t#return 1 if n==1 or n==0 else fib(n-1)+fib(n-2)\n\t```\n- 首先我们定义了fib的函数fib，该递归使用降序，即从n到0或1，到达顶点时不再继续\n- 设置条件跳出递归循环，当n == 0 or 1\n- 如果不满足跳出条件（满足循环条件），则执行递归循环(fib(n-1) + fib(n-2))\n\n我们来看一下执行的具体过程，以n = 5为例\n\n1.fib(5)\n2.fib(4)+fib(3)\n3.(fib(3)+fib(2))+(fib(2)+fib(1))\n4.((fib(2)+fib(1))+(fib(1)+showfib(0))+((fib(1)+fib(0))+fib(1)\n5.(((fib(1)+fib(0))+fib(1))+(fib(1)+fib(0))+((fib(1)+fib(0))+fib(1)\n\n从上面我们不难看出，当我们在对斐波那契数列递归求解时，同样的函数被调用了不只一次（fib(3)被调用了两次，fib(2)被调用了3次，fib(1)被调用了...\n\n\n\t```Python\n\t'''\n\t\t       5\n\t\t   4      3\n\t\t 3   2   2 1\n\t\t2 1 1 0 1 0 \n\t   1 0 \n\t'''\n\t```\n如果我们把fib函数的调用路径当做一个典型的二叉树，我们来看一下各函数的调用次数\n\n|函数|fib(5)|fib(4)|fib(3)|fib(2)|fib(1)|fib(0)|\n|---|---|---|---|---|---|---|---|\n|次数|1|1|2|3|5|3(同2)|\n\n因为我们将1和0看作递归函数的顶点而合并，数量为fib(2)+fib(1)的数量，为8.我们不难看出各项运算次数为1,1,2,3,5,8，该数列即为fibnacci数列，而总的运算次数为fibnacci数列0-5各项之和\n\n\n### 测试\n\n我们这里来计算一下，fib(40)所用时间\n\t```Python\n\tlocalhost:optimization Jakob$ python3 slowfib.py \n\tfib[40]= 165580141\n\t74.878676\n\t```\n计算fib(40)耗时74.87s.\n\n## 使用动态规划\n\n我们看了前面的计算方式后，发现过多的时间浪费在了重复的计算上。我们能不能找到一种方法更快速高效呢？我们来看下面的例子\n\n>** 1 1 2 3 5 8 13 21 ? 求出'?'所代表的fib(8)**\n\n非常简单，我们只需要13+21 ＝ 34就求出来了。但是我们之前的方法在计算时并没有将计算的结果进行保留。所以这次我们要使用dict来将内容进行保留，方便后续运算参考\n\n\t```Python\n\tdef fastfib(n,memo = {}):\n\t\tif n == 0 or n == 1:\n\t\t\treturn 1\n\t\ttry:\n\t\t\treturn memo[n]\n\t\texcept KeyError:\n\t\t\tresult = fastfib(n-1,memo) + fastfib(n-2,memo)\n\t\t\tmemo[n]= result\n\t\t\treturn result\n\t```\n> 动态规划算法，是通过状态和状态转移来进行递推：当我们求得fib(3)使，我们的状态应该是fib1到3为已知，再求得fib4时，状态转移为fib1-4为已知\n\n\n与之前的函数不同的是，我们这次添加了一个memo作为参考dict，而递归的结构是一样的：\n\n- 先判断n 是否为1 or 0\n- 如果不是，**查找当前字典中是否有该项的值（是否已经被计算过）**,我们这里使用try..except来处理\n- 如果没有找到，计算出结果并添加到memo\n- 将memo中n对应的fib值作为结果返回\n\n\t```Python\n\t'''\n\t\t       5\n\t\t   4       3\n\t\t3     2   2  1\n\t   2 1   1 0 1 0 \n\t  1 0 \n\t'''\n\t```\n\n同样是二叉树，过程简单很多\n- fib(5)-> call fib(4) -> call fib(3) -> 2,1,从左边第一排开始向下\n- 结果逐级返回并添加入memo\n- 返回时只使用索引，无需深入计算\n- 得到fib(5)\n- 最后我们可以看出，我们只遍历了最左边一排节点5,4,3,2,1;以及右侧子节点（左数第二排，从下往上）0,1,2,3\n\n### 测试\n\n我们来看一下fastfib（40)需要多久\n\t```Python\n\tlocalhost:optimization Jakob$ python3 slowfastfib.py \n\tfib[40]= 165580141\n\t0.000112000\n\t```\n耗时0.000112秒\n\n## fib(40)对比图\n\n![](fib-recur/slowfastfib.png)\n\n\n\n","slug":"fib-recur","published":1,"updated":"2018-06-22T05:52:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiqvlnul0004glu34lk0l052","content":"<h2 id=\"斐波那契数列\"><a href=\"#斐波那契数列\" class=\"headerlink\" title=\"斐波那契数列\"></a>斐波那契数列</h2><p>在我学C的时候，Fibnacci就是作为递归算法入门的经典案例。斐波那契数列是由列奥纳多•斐波那契通过兔子繁殖的例子提出的，对各个科学领域有非常重要的意义。</p>\n<blockquote>\n<p>斐波那契数列：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, …<br>如果设F(n）为该数列的第n项（n∈N*），那么这句话可以写成如下形式：:F(n)=F(n-1)+F(n-2)<br>显然这是一个线性递推数列。</p>\n</blockquote>\n<blockquote>\n<p>参见<a href=\"http://baike.baidu.com/item/斐波那契数列\" target=\"_blank\" rel=\"noopener\">百科词条</a></p>\n</blockquote>\n<p>让我们来看看它是怎么实现的。</p>\n<a id=\"more\"></a>\n<h2 id=\"普通递归求解\"><a href=\"#普通递归求解\" class=\"headerlink\" title=\"普通递归求解\"></a>普通递归求解</h2><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> n == <span class=\"number\">0</span> <span class=\"keyword\">or</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> fib(n<span class=\"number\">-1</span>) + fib(n<span class=\"number\">-2</span>)</span><br><span class=\"line\">\t<span class=\"comment\">#return 1 if n==1 or n==0 else fib(n-1)+fib(n-2)</span></span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>首先我们定义了fib的函数fib，该递归使用降序，即从n到0或1，到达顶点时不再继续</li>\n<li>设置条件跳出递归循环，当n == 0 or 1</li>\n<li>如果不满足跳出条件（满足循环条件），则执行递归循环(fib(n-1) + fib(n-2))</li>\n</ul>\n<p>我们来看一下执行的具体过程，以n = 5为例</p>\n<p>1.fib(5)<br>2.fib(4)+fib(3)<br>3.(fib(3)+fib(2))+(fib(2)+fib(1))<br>4.((fib(2)+fib(1))+(fib(1)+showfib(0))+((fib(1)+fib(0))+fib(1)<br>5.(((fib(1)+fib(0))+fib(1))+(fib(1)+fib(0))+((fib(1)+fib(0))+fib(1)</p>\n<p>从上面我们不难看出，当我们在对斐波那契数列递归求解时，同样的函数被调用了不只一次（fib(3)被调用了两次，fib(2)被调用了3次，fib(1)被调用了…</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">\t       5</span></span><br><span class=\"line\"><span class=\"string\">\t   4      3</span></span><br><span class=\"line\"><span class=\"string\">\t 3   2   2 1</span></span><br><span class=\"line\"><span class=\"string\">\t2 1 1 0 1 0 </span></span><br><span class=\"line\"><span class=\"string\">   1 0 </span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>如果我们把fib函数的调用路径当做一个典型的二叉树，我们来看一下各函数的调用次数</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>fib(5)</th>\n<th>fib(4)</th>\n<th>fib(3)</th>\n<th>fib(2)</th>\n<th>fib(1)</th>\n<th>fib(0)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>次数</td>\n<td>1</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>5</td>\n<td>3(同2)</td>\n</tr>\n</tbody>\n</table>\n<p>因为我们将1和0看作递归函数的顶点而合并，数量为fib(2)+fib(1)的数量，为8.我们不难看出各项运算次数为1,1,2,3,5,8，该数列即为fibnacci数列，而总的运算次数为fibnacci数列0-5各项之和</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>我们这里来计算一下，fib(40)所用时间<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:optimization Jakob$ python3 slowfib.py </span><br><span class=\"line\">fib[<span class=\"number\">40</span>]= <span class=\"number\">165580141</span></span><br><span class=\"line\"><span class=\"number\">74.878676</span></span><br></pre></td></tr></table></figure></p>\n<p>计算fib(40)耗时74.87s.</p>\n<h2 id=\"使用动态规划\"><a href=\"#使用动态规划\" class=\"headerlink\" title=\"使用动态规划\"></a>使用动态规划</h2><p>我们看了前面的计算方式后，发现过多的时间浪费在了重复的计算上。我们能不能找到一种方法更快速高效呢？我们来看下面的例子</p>\n<blockquote>\n<p><strong> 1 1 2 3 5 8 13 21 ? 求出’?’所代表的fib(8)</strong></p>\n</blockquote>\n<p>非常简单，我们只需要13+21 ＝ 34就求出来了。但是我们之前的方法在计算时并没有将计算的结果进行保留。所以这次我们要使用dict来将内容进行保留，方便后续运算参考</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fastfib</span><span class=\"params\">(n,memo = &#123;&#125;)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> n == <span class=\"number\">0</span> <span class=\"keyword\">or</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">try</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> memo[n]</span><br><span class=\"line\">\t<span class=\"keyword\">except</span> KeyError:</span><br><span class=\"line\">\t\tresult = fastfib(n<span class=\"number\">-1</span>,memo) + fastfib(n<span class=\"number\">-2</span>,memo)</span><br><span class=\"line\">\t\tmemo[n]= result</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n</code></pre><blockquote>\n<p>动态规划算法，是通过状态和状态转移来进行递推：当我们求得fib(3)使，我们的状态应该是fib1到3为已知，再求得fib4时，状态转移为fib1-4为已知</p>\n</blockquote>\n<p>与之前的函数不同的是，我们这次添加了一个memo作为参考dict，而递归的结构是一样的：</p>\n<ul>\n<li>先判断n 是否为1 or 0</li>\n<li>如果不是，<strong>查找当前字典中是否有该项的值（是否已经被计算过）</strong>,我们这里使用try..except来处理</li>\n<li>如果没有找到，计算出结果并添加到memo</li>\n<li><p>将memo中n对应的fib值作为结果返回</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">\t       5</span></span><br><span class=\"line\"><span class=\"string\">\t   4       3</span></span><br><span class=\"line\"><span class=\"string\">\t3     2   2  1</span></span><br><span class=\"line\"><span class=\"string\">   2 1   1 0 1 0 </span></span><br><span class=\"line\"><span class=\"string\">  1 0 </span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>同样是二叉树，过程简单很多</p>\n<ul>\n<li>fib(5)-&gt; call fib(4) -&gt; call fib(3) -&gt; 2,1,从左边第一排开始向下</li>\n<li>结果逐级返回并添加入memo</li>\n<li>返回时只使用索引，无需深入计算</li>\n<li>得到fib(5)</li>\n<li>最后我们可以看出，我们只遍历了最左边一排节点5,4,3,2,1;以及右侧子节点（左数第二排，从下往上）0,1,2,3</li>\n</ul>\n<h3 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>我们来看一下fastfib（40)需要多久<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:optimization Jakob$ python3 slowfastfib.py </span><br><span class=\"line\">fib[<span class=\"number\">40</span>]= <span class=\"number\">165580141</span></span><br><span class=\"line\"><span class=\"number\">0.000112000</span></span><br></pre></td></tr></table></figure></p>\n<p>耗时0.000112秒</p>\n<h2 id=\"fib-40-对比图\"><a href=\"#fib-40-对比图\" class=\"headerlink\" title=\"fib(40)对比图\"></a>fib(40)对比图</h2><p><img src=\"/article/fib-recur/slowfastfib.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"斐波那契数列\"><a href=\"#斐波那契数列\" class=\"headerlink\" title=\"斐波那契数列\"></a>斐波那契数列</h2><p>在我学C的时候，Fibnacci就是作为递归算法入门的经典案例。斐波那契数列是由列奥纳多•斐波那契通过兔子繁殖的例子提出的，对各个科学领域有非常重要的意义。</p>\n<blockquote>\n<p>斐波那契数列：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, …<br>如果设F(n）为该数列的第n项（n∈N*），那么这句话可以写成如下形式：:F(n)=F(n-1)+F(n-2)<br>显然这是一个线性递推数列。</p>\n</blockquote>\n<blockquote>\n<p>参见<a href=\"http://baike.baidu.com/item/斐波那契数列\" target=\"_blank\" rel=\"noopener\">百科词条</a></p>\n</blockquote>\n<p>让我们来看看它是怎么实现的。</p>","more":"<h2 id=\"普通递归求解\"><a href=\"#普通递归求解\" class=\"headerlink\" title=\"普通递归求解\"></a>普通递归求解</h2><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> n == <span class=\"number\">0</span> <span class=\"keyword\">or</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> fib(n<span class=\"number\">-1</span>) + fib(n<span class=\"number\">-2</span>)</span><br><span class=\"line\">\t<span class=\"comment\">#return 1 if n==1 or n==0 else fib(n-1)+fib(n-2)</span></span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>首先我们定义了fib的函数fib，该递归使用降序，即从n到0或1，到达顶点时不再继续</li>\n<li>设置条件跳出递归循环，当n == 0 or 1</li>\n<li>如果不满足跳出条件（满足循环条件），则执行递归循环(fib(n-1) + fib(n-2))</li>\n</ul>\n<p>我们来看一下执行的具体过程，以n = 5为例</p>\n<p>1.fib(5)<br>2.fib(4)+fib(3)<br>3.(fib(3)+fib(2))+(fib(2)+fib(1))<br>4.((fib(2)+fib(1))+(fib(1)+showfib(0))+((fib(1)+fib(0))+fib(1)<br>5.(((fib(1)+fib(0))+fib(1))+(fib(1)+fib(0))+((fib(1)+fib(0))+fib(1)</p>\n<p>从上面我们不难看出，当我们在对斐波那契数列递归求解时，同样的函数被调用了不只一次（fib(3)被调用了两次，fib(2)被调用了3次，fib(1)被调用了…</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">\t       5</span></span><br><span class=\"line\"><span class=\"string\">\t   4      3</span></span><br><span class=\"line\"><span class=\"string\">\t 3   2   2 1</span></span><br><span class=\"line\"><span class=\"string\">\t2 1 1 0 1 0 </span></span><br><span class=\"line\"><span class=\"string\">   1 0 </span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>如果我们把fib函数的调用路径当做一个典型的二叉树，我们来看一下各函数的调用次数</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>fib(5)</th>\n<th>fib(4)</th>\n<th>fib(3)</th>\n<th>fib(2)</th>\n<th>fib(1)</th>\n<th>fib(0)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>次数</td>\n<td>1</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>5</td>\n<td>3(同2)</td>\n</tr>\n</tbody>\n</table>\n<p>因为我们将1和0看作递归函数的顶点而合并，数量为fib(2)+fib(1)的数量，为8.我们不难看出各项运算次数为1,1,2,3,5,8，该数列即为fibnacci数列，而总的运算次数为fibnacci数列0-5各项之和</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>我们这里来计算一下，fib(40)所用时间<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:optimization Jakob$ python3 slowfib.py </span><br><span class=\"line\">fib[<span class=\"number\">40</span>]= <span class=\"number\">165580141</span></span><br><span class=\"line\"><span class=\"number\">74.878676</span></span><br></pre></td></tr></table></figure></p>\n<p>计算fib(40)耗时74.87s.</p>\n<h2 id=\"使用动态规划\"><a href=\"#使用动态规划\" class=\"headerlink\" title=\"使用动态规划\"></a>使用动态规划</h2><p>我们看了前面的计算方式后，发现过多的时间浪费在了重复的计算上。我们能不能找到一种方法更快速高效呢？我们来看下面的例子</p>\n<blockquote>\n<p><strong> 1 1 2 3 5 8 13 21 ? 求出’?’所代表的fib(8)</strong></p>\n</blockquote>\n<p>非常简单，我们只需要13+21 ＝ 34就求出来了。但是我们之前的方法在计算时并没有将计算的结果进行保留。所以这次我们要使用dict来将内容进行保留，方便后续运算参考</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fastfib</span><span class=\"params\">(n,memo = &#123;&#125;)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> n == <span class=\"number\">0</span> <span class=\"keyword\">or</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">try</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> memo[n]</span><br><span class=\"line\">\t<span class=\"keyword\">except</span> KeyError:</span><br><span class=\"line\">\t\tresult = fastfib(n<span class=\"number\">-1</span>,memo) + fastfib(n<span class=\"number\">-2</span>,memo)</span><br><span class=\"line\">\t\tmemo[n]= result</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n</code></pre><blockquote>\n<p>动态规划算法，是通过状态和状态转移来进行递推：当我们求得fib(3)使，我们的状态应该是fib1到3为已知，再求得fib4时，状态转移为fib1-4为已知</p>\n</blockquote>\n<p>与之前的函数不同的是，我们这次添加了一个memo作为参考dict，而递归的结构是一样的：</p>\n<ul>\n<li>先判断n 是否为1 or 0</li>\n<li>如果不是，<strong>查找当前字典中是否有该项的值（是否已经被计算过）</strong>,我们这里使用try..except来处理</li>\n<li>如果没有找到，计算出结果并添加到memo</li>\n<li><p>将memo中n对应的fib值作为结果返回</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">\t       5</span></span><br><span class=\"line\"><span class=\"string\">\t   4       3</span></span><br><span class=\"line\"><span class=\"string\">\t3     2   2  1</span></span><br><span class=\"line\"><span class=\"string\">   2 1   1 0 1 0 </span></span><br><span class=\"line\"><span class=\"string\">  1 0 </span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>同样是二叉树，过程简单很多</p>\n<ul>\n<li>fib(5)-&gt; call fib(4) -&gt; call fib(3) -&gt; 2,1,从左边第一排开始向下</li>\n<li>结果逐级返回并添加入memo</li>\n<li>返回时只使用索引，无需深入计算</li>\n<li>得到fib(5)</li>\n<li>最后我们可以看出，我们只遍历了最左边一排节点5,4,3,2,1;以及右侧子节点（左数第二排，从下往上）0,1,2,3</li>\n</ul>\n<h3 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>我们来看一下fastfib（40)需要多久<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:optimization Jakob$ python3 slowfastfib.py </span><br><span class=\"line\">fib[<span class=\"number\">40</span>]= <span class=\"number\">165580141</span></span><br><span class=\"line\"><span class=\"number\">0.000112000</span></span><br></pre></td></tr></table></figure></p>\n<p>耗时0.000112秒</p>\n<h2 id=\"fib-40-对比图\"><a href=\"#fib-40-对比图\" class=\"headerlink\" title=\"fib(40)对比图\"></a>fib(40)对比图</h2><p><img src=\"/article/fib-recur/slowfastfib.png\" alt=\"\"></p>"},{"title":"First-post.写在前面","date":"2016-08-10T00:02:08.000Z","_content":"\nHello World. 这是博客的第一句话，也是我接触计算机学到的第一句话。\n\n一直以来都想有一个自己的博客，尽管很久都没有写过什么东西。建一个独立博客对我来说也是挺遥远的事情。 机缘巧合吧，它现在有了。\n\n<!--More-->\n\n从无到有，聚少成多。从前端网页到后端生成器脚本（可能是对Python的迷之信仰，最后我用了基于Flask的Frozen-Flask为核心驱动，有机会后面会讲），从买域名到学会用Github，从头到尾都是自己一点点写出来的。从开始的两眼一抹黑到现在基本功能实现，整个过程还是挺有意思的。尽管它现在还是一个半成品，还有很多预想中的功能还没有实现。但即便是这样，\n\n这仍然是我之前从来没有想到过的事情。\n\n关于未来，我想借此博客作一个手边的备忘录，记录自己学习过程中遇到的问题和解决方案，总结学到的知识方便日后查阅，还有就是作为自己成长的记录吧。同时也希望可以更好地回馈开源社区，提供一些我的学习经验。\n\n摸着石头过河也是过河。共勉！\n","source":"_posts/first.md","raw":"---\ntitle: First-post.写在前面\ndate: 2016-08-10 08:02:08\ncategories: 随笔\n---\n\nHello World. 这是博客的第一句话，也是我接触计算机学到的第一句话。\n\n一直以来都想有一个自己的博客，尽管很久都没有写过什么东西。建一个独立博客对我来说也是挺遥远的事情。 机缘巧合吧，它现在有了。\n\n<!--More-->\n\n从无到有，聚少成多。从前端网页到后端生成器脚本（可能是对Python的迷之信仰，最后我用了基于Flask的Frozen-Flask为核心驱动，有机会后面会讲），从买域名到学会用Github，从头到尾都是自己一点点写出来的。从开始的两眼一抹黑到现在基本功能实现，整个过程还是挺有意思的。尽管它现在还是一个半成品，还有很多预想中的功能还没有实现。但即便是这样，\n\n这仍然是我之前从来没有想到过的事情。\n\n关于未来，我想借此博客作一个手边的备忘录，记录自己学习过程中遇到的问题和解决方案，总结学到的知识方便日后查阅，还有就是作为自己成长的记录吧。同时也希望可以更好地回馈开源社区，提供一些我的学习经验。\n\n摸着石头过河也是过河。共勉！\n","slug":"first","published":1,"updated":"2018-05-30T03:22:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiqvlnum0005glu3qwt8mziu","content":"<p>Hello World. 这是博客的第一句话，也是我接触计算机学到的第一句话。</p>\n<p>一直以来都想有一个自己的博客，尽管很久都没有写过什么东西。建一个独立博客对我来说也是挺遥远的事情。 机缘巧合吧，它现在有了。</p>\n<a id=\"more\"></a>\n<p>从无到有，聚少成多。从前端网页到后端生成器脚本（可能是对Python的迷之信仰，最后我用了基于Flask的Frozen-Flask为核心驱动，有机会后面会讲），从买域名到学会用Github，从头到尾都是自己一点点写出来的。从开始的两眼一抹黑到现在基本功能实现，整个过程还是挺有意思的。尽管它现在还是一个半成品，还有很多预想中的功能还没有实现。但即便是这样，</p>\n<p>这仍然是我之前从来没有想到过的事情。</p>\n<p>关于未来，我想借此博客作一个手边的备忘录，记录自己学习过程中遇到的问题和解决方案，总结学到的知识方便日后查阅，还有就是作为自己成长的记录吧。同时也希望可以更好地回馈开源社区，提供一些我的学习经验。</p>\n<p>摸着石头过河也是过河。共勉！</p>\n","site":{"data":{}},"excerpt":"<p>Hello World. 这是博客的第一句话，也是我接触计算机学到的第一句话。</p>\n<p>一直以来都想有一个自己的博客，尽管很久都没有写过什么东西。建一个独立博客对我来说也是挺遥远的事情。 机缘巧合吧，它现在有了。</p>","more":"<p>从无到有，聚少成多。从前端网页到后端生成器脚本（可能是对Python的迷之信仰，最后我用了基于Flask的Frozen-Flask为核心驱动，有机会后面会讲），从买域名到学会用Github，从头到尾都是自己一点点写出来的。从开始的两眼一抹黑到现在基本功能实现，整个过程还是挺有意思的。尽管它现在还是一个半成品，还有很多预想中的功能还没有实现。但即便是这样，</p>\n<p>这仍然是我之前从来没有想到过的事情。</p>\n<p>关于未来，我想借此博客作一个手边的备忘录，记录自己学习过程中遇到的问题和解决方案，总结学到的知识方便日后查阅，还有就是作为自己成长的记录吧。同时也希望可以更好地回馈开源社区，提供一些我的学习经验。</p>\n<p>摸着石头过河也是过河。共勉！</p>"},{"title":"Flask分页方法","date":"2016-10-06T02:07:17.000Z","_content":"\n\n当博客文章达到一定数量的时候，把它们都放在同一个列表页面不是一个明智的选择，因为这样会使页面过大从而影响加载速度，影响读者的阅读体验。所以我们需要一个粉页的功能。在网上搜索了一下，大部分关于Flask的分页都基于SQLAlchemy，但是我们并不是通过数据库来管理文件的。我们需要一种更为通用的方法，构建我们自己的切片方法并设置正确的路由。\n\n<!--More-->\n\n\n## 切片\n\n首先我们需要对文章列表进行切片，在这里我们声明一个Pagination的类来获得不同部分的文章列表\n\n\t```Python\n\timport math\n\tclass Pagination(object):\n\t```\nPagination需要三个参数，分别是:\n\n- page 当前页面页码\n- per\\_page 每页显示数目\n- 文章列表（需要被切片的对象），使用len可获得总文章数\n\t\n\t```Python\n\tdef __init__(self,page,per_page,iterable):\n\t\tself.page = page\n\t\tself.per_page = per_page\n\t\tself.iterable = iterable\n\t\tself.total = len(iterable)\n\t```\n之后我们通过定义类方法来获得\n\t\t\t\n- 页面总数\n\t\n\t```Python\n\t@property\n\tdef total_pages(self):\n\t\treturn int(math.ceil(self.total/self.per_page))\n\t```\n- 是否有”上一页／下一页”,如果有返回True,否则False\n\n\t```Python\n\t@property\n\tdef has_prev(self):\n\t\treturn self.page > 1\n\t\n\t@property\n\tdef has_next(self):\n\t\treturn self.page < self.total_pages\n\t```\n- 页码列表\n\t\n\t```Python\n\t@property\n\tdef pager(self):\n\t#返回[1,2,3,...,n]\n\t\treturn list(range(1,self.total_pages+1))\n\t```\n- 切片后的当前页面列表\n\n\t```Python\n\t@property\n\tdef items(self):\n\t\tindex = self.page - 1\n\t\tstart = index * self.per_page\n\t\tend = start + self.per_page\n\t\t#如果当前第二页，每页6篇文章\n\t\t#则会返回第7-12篇文章的列表\t\n\t\treturn self.iterable[start:end]\n\t```\n- 切片后的当前页面列表\n\n## 路由\n\n- 设置路由\n\t\n\t```Python\n\t@postwall.route('/posts')#默认第一页路径为http://你的网站/posts\n\t@postwall.route('/posts/page/<int:page>/')#从第二页开始的路径\n\tdef posts(page = 1):#page = 1是默认第一页的时候page为1\n\t```\n其中page参数与‘int:page'对应，是页码的参数，并作为参数传入Pagination类\n\n- 使用Pagination类切片\n\n\t```Python\n\tPER_PAGE = 6\n\tpage_list = Pagination(page,PER_PAGE,sorted_posts)\n\t```\n- 将切片后的对象返回给模板:\n\n\t```Python\n\treturn render_template('posts.html',pagination = page_list)\n\t```\n在使用分页之前，由于我们只需要将所有页码加入到主页当中，所以我们只需要将文章列表传入模板，而现在我们使用了切片的Pagination类，这时候传入模板的是一个类对象而不是列表\n\n## 模板生成\n\n首先我们先创建一个模板的Marco模块pagination.html来表示我们生成页码的过程，pagination就是我们通过路由引入的切片后的类对象\n\n\t‘pagination = page_list‘\n\n第一行定义macro\n\n\t{% macro pager(pagination) %}\n在网页中创建一个分页区块\n\n\t\t<div class=\"pagination\">\n\n如果该对象的has\\_prev为True,显示上一页按钮\n\n\t\t\t{% if pagination.has_prev %}\n\t\t\t<div class =\"prev_next\"><a href =\"{{url_for('postwall.posts',page= pagination.page-1)}}\">&laquo</a></div>\n\t\t\t{% endif %}\n\n显示分页列表，在这里我们使用类对象里的‘页码列表’来生成页码，使用url\\_for函数来构造该页码的链接（将页码作为page参数传入路由,postwall.posts是你的路由函数)\n\n\t\t\t<ul class='pager'>\n\t\t\t\t{% for page_num in pagination.pager%}\n\t\t\t\t\t{% if page_num == pagination.page %}\n\t\t\t\t\t\t<li><b>{{page_num}}</b></li>\n\t\t\t\t\t{% else %}\n\t\t\t\t\t\t<li><a href =\"{{url_for('postwall.posts',page= page_num)}}\">{{page_num}}</a></li>\n\t\t\t\t\t{% endif %}\n\t\t\t\t{% endfor %}\n\t\t\t</ul>\n\t\t\t\n如果该对象的has\\_prev为True,显示上一页按钮\n\n\t\t\t{% if pagination.has_next %}\n\t\t\t<div class =\"prev_next\"><a href =\"{{url_for('postwall.posts',page= pagination.page+1)}}\">&raquo</a></div>\n\t\t\t{% endif %}\n\n结束pagination区块，结束macro\n\n\t    </div>\n\t{% endmacro %}\n\n\n\n\n","source":"_posts/flask-pagination.md","raw":"---\ntitle: Flask分页方法\ndate: 2016-10-06 10:07:17\ntags:\ncategories: Flask\n---\n\n\n当博客文章达到一定数量的时候，把它们都放在同一个列表页面不是一个明智的选择，因为这样会使页面过大从而影响加载速度，影响读者的阅读体验。所以我们需要一个粉页的功能。在网上搜索了一下，大部分关于Flask的分页都基于SQLAlchemy，但是我们并不是通过数据库来管理文件的。我们需要一种更为通用的方法，构建我们自己的切片方法并设置正确的路由。\n\n<!--More-->\n\n\n## 切片\n\n首先我们需要对文章列表进行切片，在这里我们声明一个Pagination的类来获得不同部分的文章列表\n\n\t```Python\n\timport math\n\tclass Pagination(object):\n\t```\nPagination需要三个参数，分别是:\n\n- page 当前页面页码\n- per\\_page 每页显示数目\n- 文章列表（需要被切片的对象），使用len可获得总文章数\n\t\n\t```Python\n\tdef __init__(self,page,per_page,iterable):\n\t\tself.page = page\n\t\tself.per_page = per_page\n\t\tself.iterable = iterable\n\t\tself.total = len(iterable)\n\t```\n之后我们通过定义类方法来获得\n\t\t\t\n- 页面总数\n\t\n\t```Python\n\t@property\n\tdef total_pages(self):\n\t\treturn int(math.ceil(self.total/self.per_page))\n\t```\n- 是否有”上一页／下一页”,如果有返回True,否则False\n\n\t```Python\n\t@property\n\tdef has_prev(self):\n\t\treturn self.page > 1\n\t\n\t@property\n\tdef has_next(self):\n\t\treturn self.page < self.total_pages\n\t```\n- 页码列表\n\t\n\t```Python\n\t@property\n\tdef pager(self):\n\t#返回[1,2,3,...,n]\n\t\treturn list(range(1,self.total_pages+1))\n\t```\n- 切片后的当前页面列表\n\n\t```Python\n\t@property\n\tdef items(self):\n\t\tindex = self.page - 1\n\t\tstart = index * self.per_page\n\t\tend = start + self.per_page\n\t\t#如果当前第二页，每页6篇文章\n\t\t#则会返回第7-12篇文章的列表\t\n\t\treturn self.iterable[start:end]\n\t```\n- 切片后的当前页面列表\n\n## 路由\n\n- 设置路由\n\t\n\t```Python\n\t@postwall.route('/posts')#默认第一页路径为http://你的网站/posts\n\t@postwall.route('/posts/page/<int:page>/')#从第二页开始的路径\n\tdef posts(page = 1):#page = 1是默认第一页的时候page为1\n\t```\n其中page参数与‘int:page'对应，是页码的参数，并作为参数传入Pagination类\n\n- 使用Pagination类切片\n\n\t```Python\n\tPER_PAGE = 6\n\tpage_list = Pagination(page,PER_PAGE,sorted_posts)\n\t```\n- 将切片后的对象返回给模板:\n\n\t```Python\n\treturn render_template('posts.html',pagination = page_list)\n\t```\n在使用分页之前，由于我们只需要将所有页码加入到主页当中，所以我们只需要将文章列表传入模板，而现在我们使用了切片的Pagination类，这时候传入模板的是一个类对象而不是列表\n\n## 模板生成\n\n首先我们先创建一个模板的Marco模块pagination.html来表示我们生成页码的过程，pagination就是我们通过路由引入的切片后的类对象\n\n\t‘pagination = page_list‘\n\n第一行定义macro\n\n\t{% macro pager(pagination) %}\n在网页中创建一个分页区块\n\n\t\t<div class=\"pagination\">\n\n如果该对象的has\\_prev为True,显示上一页按钮\n\n\t\t\t{% if pagination.has_prev %}\n\t\t\t<div class =\"prev_next\"><a href =\"{{url_for('postwall.posts',page= pagination.page-1)}}\">&laquo</a></div>\n\t\t\t{% endif %}\n\n显示分页列表，在这里我们使用类对象里的‘页码列表’来生成页码，使用url\\_for函数来构造该页码的链接（将页码作为page参数传入路由,postwall.posts是你的路由函数)\n\n\t\t\t<ul class='pager'>\n\t\t\t\t{% for page_num in pagination.pager%}\n\t\t\t\t\t{% if page_num == pagination.page %}\n\t\t\t\t\t\t<li><b>{{page_num}}</b></li>\n\t\t\t\t\t{% else %}\n\t\t\t\t\t\t<li><a href =\"{{url_for('postwall.posts',page= page_num)}}\">{{page_num}}</a></li>\n\t\t\t\t\t{% endif %}\n\t\t\t\t{% endfor %}\n\t\t\t</ul>\n\t\t\t\n如果该对象的has\\_prev为True,显示上一页按钮\n\n\t\t\t{% if pagination.has_next %}\n\t\t\t<div class =\"prev_next\"><a href =\"{{url_for('postwall.posts',page= pagination.page+1)}}\">&raquo</a></div>\n\t\t\t{% endif %}\n\n结束pagination区块，结束macro\n\n\t    </div>\n\t{% endmacro %}\n\n\n\n\n","slug":"flask-pagination","published":1,"updated":"2018-06-22T05:14:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiqvlnun0007glu3mpfwfn95","content":"<p>当博客文章达到一定数量的时候，把它们都放在同一个列表页面不是一个明智的选择，因为这样会使页面过大从而影响加载速度，影响读者的阅读体验。所以我们需要一个粉页的功能。在网上搜索了一下，大部分关于Flask的分页都基于SQLAlchemy，但是我们并不是通过数据库来管理文件的。我们需要一种更为通用的方法，构建我们自己的切片方法并设置正确的路由。</p>\n<a id=\"more\"></a>\n<h2 id=\"切片\"><a href=\"#切片\" class=\"headerlink\" title=\"切片\"></a>切片</h2><p>首先我们需要对文章列表进行切片，在这里我们声明一个Pagination的类来获得不同部分的文章列表</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pagination</span><span class=\"params\">(object)</span>:</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>Pagination需要三个参数，分别是:</p>\n<ul>\n<li>page 当前页面页码</li>\n<li>per_page 每页显示数目</li>\n<li><p>文章列表（需要被切片的对象），使用len可获得总文章数</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,page,per_page,iterable)</span>:</span></span><br><span class=\"line\">\tself.page = page</span><br><span class=\"line\">\tself.per_page = per_page</span><br><span class=\"line\">\tself.iterable = iterable</span><br><span class=\"line\">\tself.total = len(iterable)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>之后我们通过定义类方法来获得</p>\n<ul>\n<li><p>页面总数</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@property</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total_pages</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> int(math.ceil(self.total/self.per_page))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>是否有”上一页／下一页”,如果有返回True,否则False</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@property</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">has_prev</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.page &gt; <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@property</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">has_next</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.page &lt; self.total_pages</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>页码列表</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@property</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pager</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\"><span class=\"comment\">#返回[1,2,3,...,n]</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> list(range(<span class=\"number\">1</span>,self.total_pages+<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切片后的当前页面列表</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@property</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">items</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\tindex = self.page - <span class=\"number\">1</span></span><br><span class=\"line\">\tstart = index * self.per_page</span><br><span class=\"line\">\tend = start + self.per_page</span><br><span class=\"line\">\t<span class=\"comment\">#如果当前第二页，每页6篇文章</span></span><br><span class=\"line\">\t<span class=\"comment\">#则会返回第7-12篇文章的列表\t</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.iterable[start:end]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切片后的当前页面列表</p>\n</li>\n</ul>\n<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><ul>\n<li><p>设置路由</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@postwall.route('/posts')#默认第一页路径为http://你的网站/posts</span></span><br><span class=\"line\"><span class=\"meta\">@postwall.route('/posts/page/&lt;int:page&gt;/')#从第二页开始的路径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">posts</span><span class=\"params\">(page = <span class=\"number\">1</span>)</span>:</span><span class=\"comment\">#page = 1是默认第一页的时候page为1</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>其中page参数与‘int:page’对应，是页码的参数，并作为参数传入Pagination类</p>\n<ul>\n<li><p>使用Pagination类切片</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PER_PAGE = <span class=\"number\">6</span></span><br><span class=\"line\">page_list = Pagination(page,PER_PAGE,sorted_posts)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将切片后的对象返回给模板:</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> render_template(<span class=\"string\">'posts.html'</span>,pagination = page_list)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>在使用分页之前，由于我们只需要将所有页码加入到主页当中，所以我们只需要将文章列表传入模板，而现在我们使用了切片的Pagination类，这时候传入模板的是一个类对象而不是列表</p>\n<h2 id=\"模板生成\"><a href=\"#模板生成\" class=\"headerlink\" title=\"模板生成\"></a>模板生成</h2><p>首先我们先创建一个模板的Marco模块pagination.html来表示我们生成页码的过程，pagination就是我们通过路由引入的切片后的类对象</p>\n<pre><code>‘pagination = page_list‘\n</code></pre><p>第一行定义macro</p>\n<pre><code>{% macro pager(pagination) %}\n在网页中创建一个分页区块\n\n\t\t<div class=\"pagination\">\n\n如果该对象的has\\_prev为True,显示上一页按钮\n\n\t\t\t{% if pagination.has_prev %}\n\t\t\t<div class=\"prev_next\"><a href=\"{{url_for('postwall.posts',page= pagination.page-1)}}\">&laquo</a></div>\n\t\t\t{% endif %}\n\n显示分页列表，在这里我们使用类对象里的‘页码列表’来生成页码，使用url\\_for函数来构造该页码的链接（将页码作为page参数传入路由,postwall.posts是你的路由函数)\n\n\t\t\t<ul class=\"pager\">\n\t\t\t\t{% for page_num in pagination.pager%}\n\t\t\t\t\t{% if page_num == pagination.page %}\n\t\t\t\t\t\t<li><b>{{page_num}}</b></li>\n\t\t\t\t\t{% else %}\n\t\t\t\t\t\t<li><a href=\"{{url_for('postwall.posts',page= page_num)}}\">{{page_num}}</a></li>\n\t\t\t\t\t{% endif %}\n\t\t\t\t{% endfor %}\n\t\t\t</ul>\n\t\t\t\n如果该对象的has\\_prev为True,显示上一页按钮\n\n\t\t\t{% if pagination.has_next %}\n\t\t\t<div class=\"prev_next\"><a href=\"{{url_for('postwall.posts',page= pagination.page+1)}}\">&raquo</a></div>\n\t\t\t{% endif %}\n\n结束pagination区块，结束macro\n\n\t    </div>\n\t{% endmacro %}\n</code></pre>","site":{"data":{}},"excerpt":"<p>当博客文章达到一定数量的时候，把它们都放在同一个列表页面不是一个明智的选择，因为这样会使页面过大从而影响加载速度，影响读者的阅读体验。所以我们需要一个粉页的功能。在网上搜索了一下，大部分关于Flask的分页都基于SQLAlchemy，但是我们并不是通过数据库来管理文件的。我们需要一种更为通用的方法，构建我们自己的切片方法并设置正确的路由。</p>","more":"<h2 id=\"切片\"><a href=\"#切片\" class=\"headerlink\" title=\"切片\"></a>切片</h2><p>首先我们需要对文章列表进行切片，在这里我们声明一个Pagination的类来获得不同部分的文章列表</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pagination</span><span class=\"params\">(object)</span>:</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>Pagination需要三个参数，分别是:</p>\n<ul>\n<li>page 当前页面页码</li>\n<li>per_page 每页显示数目</li>\n<li><p>文章列表（需要被切片的对象），使用len可获得总文章数</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,page,per_page,iterable)</span>:</span></span><br><span class=\"line\">\tself.page = page</span><br><span class=\"line\">\tself.per_page = per_page</span><br><span class=\"line\">\tself.iterable = iterable</span><br><span class=\"line\">\tself.total = len(iterable)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>之后我们通过定义类方法来获得</p>\n<ul>\n<li><p>页面总数</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@property</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total_pages</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> int(math.ceil(self.total/self.per_page))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>是否有”上一页／下一页”,如果有返回True,否则False</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@property</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">has_prev</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.page &gt; <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@property</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">has_next</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.page &lt; self.total_pages</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>页码列表</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@property</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pager</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\"><span class=\"comment\">#返回[1,2,3,...,n]</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> list(range(<span class=\"number\">1</span>,self.total_pages+<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切片后的当前页面列表</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@property</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">items</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\tindex = self.page - <span class=\"number\">1</span></span><br><span class=\"line\">\tstart = index * self.per_page</span><br><span class=\"line\">\tend = start + self.per_page</span><br><span class=\"line\">\t<span class=\"comment\">#如果当前第二页，每页6篇文章</span></span><br><span class=\"line\">\t<span class=\"comment\">#则会返回第7-12篇文章的列表\t</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.iterable[start:end]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切片后的当前页面列表</p>\n</li>\n</ul>\n<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><ul>\n<li><p>设置路由</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@postwall.route('/posts')#默认第一页路径为http://你的网站/posts</span></span><br><span class=\"line\"><span class=\"meta\">@postwall.route('/posts/page/&lt;int:page&gt;/')#从第二页开始的路径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">posts</span><span class=\"params\">(page = <span class=\"number\">1</span>)</span>:</span><span class=\"comment\">#page = 1是默认第一页的时候page为1</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>其中page参数与‘int:page’对应，是页码的参数，并作为参数传入Pagination类</p>\n<ul>\n<li><p>使用Pagination类切片</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PER_PAGE = <span class=\"number\">6</span></span><br><span class=\"line\">page_list = Pagination(page,PER_PAGE,sorted_posts)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将切片后的对象返回给模板:</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> render_template(<span class=\"string\">'posts.html'</span>,pagination = page_list)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>在使用分页之前，由于我们只需要将所有页码加入到主页当中，所以我们只需要将文章列表传入模板，而现在我们使用了切片的Pagination类，这时候传入模板的是一个类对象而不是列表</p>\n<h2 id=\"模板生成\"><a href=\"#模板生成\" class=\"headerlink\" title=\"模板生成\"></a>模板生成</h2><p>首先我们先创建一个模板的Marco模块pagination.html来表示我们生成页码的过程，pagination就是我们通过路由引入的切片后的类对象</p>\n<pre><code>‘pagination = page_list‘\n</code></pre><p>第一行定义macro</p>\n<pre><code>{% macro pager(pagination) %}\n在网页中创建一个分页区块\n\n\t\t<div class=\"pagination\">\n\n如果该对象的has\\_prev为True,显示上一页按钮\n\n\t\t\t{% if pagination.has_prev %}\n\t\t\t<div class=\"prev_next\"><a href=\"{{url_for('postwall.posts',page= pagination.page-1)}}\">&laquo</a></div>\n\t\t\t{% endif %}\n\n显示分页列表，在这里我们使用类对象里的‘页码列表’来生成页码，使用url\\_for函数来构造该页码的链接（将页码作为page参数传入路由,postwall.posts是你的路由函数)\n\n\t\t\t<ul class=\"pager\">\n\t\t\t\t{% for page_num in pagination.pager%}\n\t\t\t\t\t{% if page_num == pagination.page %}\n\t\t\t\t\t\t<li><b>{{page_num}}</b></li>\n\t\t\t\t\t{% else %}\n\t\t\t\t\t\t<li><a href=\"{{url_for('postwall.posts',page= page_num)}}\">{{page_num}}</a></li>\n\t\t\t\t\t{% endif %}\n\t\t\t\t{% endfor %}\n\t\t\t</ul>\n\t\t\t\n如果该对象的has\\_prev为True,显示上一页按钮\n\n\t\t\t{% if pagination.has_next %}\n\t\t\t<div class=\"prev_next\"><a href=\"{{url_for('postwall.posts',page= pagination.page+1)}}\">&raquo</a></div>\n\t\t\t{% endif %}\n\n结束pagination区块，结束macro\n\n\t    </div>\n\t{% endmacro %}\n</code></pre>"},{"layout":"posts","title":"使用Python操作PDF","date":"2018-06-22T09:13:05.000Z","_content":"\n\n最近在工作过程中发现的问题。客户在经常会使用拍照的方法提供底稿资料，成千上万的照片在逐一转换，分类，合并，打印操作过程中会浪费大量的时间。之前有尝试过一些软件来操作但是效果仍不尽如人意。这次使用PyPDF2和PIL两个库来完成我们的PDF转换，制作插页，合并及分拆操作。\n\n\n<!--More-->\n\n##工具准备\n\n- Python3.x\n- PIL\n- Reportlab\n- PyPDF2\n\n## 获得当前目录下的所有文件及文件夹路径\n\n进行批量处理的前提是你可以访问多个文件，下面这行代码的作用是讲当前目录下的所有文件的完整路径放入一个列表中，方便后面通过循环来调用\n\n\t```Python\n\timport os\n\tfiles=[]\n\tfor filename in os.listdir(os.getcwd()):\n\t\tfiles.append(os.getcwd()+os.sep+filename) #方案一，放入files列表里,方便以后调用\n\t\tfunction(os.getcwd()+os.sep+filename)#方案二，不保存为到列表直接调用\n\t```\n\n- os.getcwd()：会显示当前路径（绝对路径）\n- os.listdir(os.getcwd())：会显示出当前路径下的所有文件及文件夹的名称（不包含路径），输出结果为['abc.pdf','xyz.jpg','123.xlsx','新建文件夹']\n- os.getcwd()+os.sep+filename：将文件名和路径结合在一起，os.sep为路径分隔符（Unix类系统为'/',Windows系列为\"//\"或'\\'\n- 方案一：使用第2行新建列表，第4行逐条添加到列表\n- 方案二：忽略第2、4行，直接使用第5行调用函数\n\n\n## 图片转换PDF\n\n\n\n\t```Python\n\timport PIL.Image\n\tdef img2pdf(filename,keyword):\n\t    im = PIL.Image.open(filename) #打开文件\n\t    name = filename.split(keyword)[0]#切掉后缀\n\t    im = im.convert('RGB')#转换为RGB\n\t    PIL.Image.Image.save(im,name+'.pdf',\"PDF\",resolution = 100.0)#保存为PDF\n\t    print(filename+' has been processed to %s'%name)#提示操作完成\n\t```\n\n\n\n<!--首先我们引入Python自带的PIL图片处理库，接着我们定义一个可以将图片转换为PDF的函数。该函数接收两个变量：\n- filename: 包含完整路径的文件名称（例如：abc/xyz/123.jpg)\n- keyword: 这里是指文件的后缀，可以是jpg,可以是png,等等等等，目的有两个：\n\t- 在保存前使用split函数切掉该后缀并替换为.pdf后缀\n\t- 与目录遍历工具配合（最后会讲）在同一目录下进行选择性操作，例如只转换目录下jpg文件而跳过png文件。\n操作过程的原理基本与手动处理相同，即：\n> 打开图片 -> 转换RGBA为RGB -> 保存文件为PDF格式\n1. 第3行：打开文件，这里使用的路径可以是绝对路径（推荐）也可以是相对路径\n2. 第4行：切掉之前的后缀(abc/xyz/123.jpg -> abc/xyz/123),方便后面添加新的后缀。也可以使用replace('.jpg','.pdf')直接替换\n3. 第5行：将图片转换为RGB三原色格式，有的图片格式为RGBA（RedBlueGreenAlpha),Alpha指透明度。我使用的版本不可直接保存为PDF\n4. 第6行：将pdf文件保存在同一目录下\n5. 第7行：当任务完成后提示操作完成-->\n\n## PDF文件操作\n\n### 制作分隔页\n\n    ```Python\n    from reportlab.pdfgen import canvas\n    from reportlab.platypus import Paragraph\n    import reportlab.pdfbase.ttfonts #导入reportlab的注册字体\n    reportlab.pdfbase.pdfmetrics.registerFont(reportlab.pdfbase.ttfonts.TTFont('LiHei', '/Users/chenghaoq/MySQL/LiHei.ttf'))\n    from reportlab.lib.units import inch\n    from reportlab.lib.styles import getSampleStyleSheet\n    \n    def Coverpage(passage):\n        styleSheet = getSampleStyleSheet()\n        style = styleSheet['BodyText']\n        style.fontName = 'LiHei'\n        style.fontSize = 20\n        style.leading = 20\n        c = canvas.Canvas('C.'+passage)\n        c.setFont('LiHei',20)\n        pa = Paragraph(passage,style)\n        pa.wrapOn(c,6*inch,8*inch)\n        pa.drawOn(c,100,500)\n        c.save()\n\n    ```\n\nCoverpage这个函数会在相同目录下生成一个新的插页PDF文件，我们在这里面使用reportlab来\n\n### PDF合并\n\n    ```Python\n    def pdf_merge(filelist,output_name,coverpage=False):\n        pdfFileWriter = PdfFileWriter()   \n        for print_file in filelist:\n                if '.pdf' in print_file:\n                    print(\"Processing %s\"%print_file)\n                    if coverpage:\n                    #create the cover page and append to the writer\n                        Coverpage(print_file)\n                        C_pdfReader = PdfFileReader(open('C.'+print_file, 'rb'),strict=False)\n                        pageObj = C_pdfReader.getPage(0)\n                        pdfFileWriter.addPage(pageObj)\n                    #read the file and append to the writer\n                    pdfReader = PdfFileReader(open(print_file, 'rb'),strict=False)\n                    numPages = pdfReader.getNumPages()\n                    for index in range(0, numPages):\n                        pageObj = pdfReader.getPage(index)\n                        pdfFileWriter.addPage(pageObj)     \n        pdfFileWriter.write(open(output_name, 'wb'))\n    ```\n\npdf_merge这个函数需要引入三个变量：\n1. 含有所有需要合并的PDF文件的列表（我们刚刚在同一目录下的批量操作中已经获得）\n2. 输出的文件名字 \n3. 是否使用插页隔开（可选,默认选是False，如果为True，将生成插页并插入至对应部分前，插页内容为文件名）\n\n\n\n### PDF分拆\n\n\n    ```Python\n    def pdf_split(pdf_file,page_range=None):\n        #range is a list seems like [2,3,5,7]\n        split_path = pdf_file.split('.pdf')[0]\n        os.makedirs(split_path)\n        pdfReader = PdfFileReader(open(pdf_file, 'rb'),strict=False)\n        numPages = [each-1 for each in page_range] if page_range else range(0,pdfReader.getNumPages())\n        for index in numpages:\n            pageObj = pdfReader.getPage(index)\n            pdfFileWriter = PdfFileWriter() \n            pdfFileWriter.addPage(pageObj)\n            pdfFileWriter.write(open(split_path+os.sep+\"%d.pdf\"%index, 'wb'))\n    ```\n        \n\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n","source":"_posts/pdf-operation.md","raw":"---\nlayout: posts\ntitle: 使用Python操作PDF\ndate: 2018-06-22 17:13:05\ntags:\ncategories: Python\n---\n\n\n最近在工作过程中发现的问题。客户在经常会使用拍照的方法提供底稿资料，成千上万的照片在逐一转换，分类，合并，打印操作过程中会浪费大量的时间。之前有尝试过一些软件来操作但是效果仍不尽如人意。这次使用PyPDF2和PIL两个库来完成我们的PDF转换，制作插页，合并及分拆操作。\n\n\n<!--More-->\n\n##工具准备\n\n- Python3.x\n- PIL\n- Reportlab\n- PyPDF2\n\n## 获得当前目录下的所有文件及文件夹路径\n\n进行批量处理的前提是你可以访问多个文件，下面这行代码的作用是讲当前目录下的所有文件的完整路径放入一个列表中，方便后面通过循环来调用\n\n\t```Python\n\timport os\n\tfiles=[]\n\tfor filename in os.listdir(os.getcwd()):\n\t\tfiles.append(os.getcwd()+os.sep+filename) #方案一，放入files列表里,方便以后调用\n\t\tfunction(os.getcwd()+os.sep+filename)#方案二，不保存为到列表直接调用\n\t```\n\n- os.getcwd()：会显示当前路径（绝对路径）\n- os.listdir(os.getcwd())：会显示出当前路径下的所有文件及文件夹的名称（不包含路径），输出结果为['abc.pdf','xyz.jpg','123.xlsx','新建文件夹']\n- os.getcwd()+os.sep+filename：将文件名和路径结合在一起，os.sep为路径分隔符（Unix类系统为'/',Windows系列为\"//\"或'\\'\n- 方案一：使用第2行新建列表，第4行逐条添加到列表\n- 方案二：忽略第2、4行，直接使用第5行调用函数\n\n\n## 图片转换PDF\n\n\n\n\t```Python\n\timport PIL.Image\n\tdef img2pdf(filename,keyword):\n\t    im = PIL.Image.open(filename) #打开文件\n\t    name = filename.split(keyword)[0]#切掉后缀\n\t    im = im.convert('RGB')#转换为RGB\n\t    PIL.Image.Image.save(im,name+'.pdf',\"PDF\",resolution = 100.0)#保存为PDF\n\t    print(filename+' has been processed to %s'%name)#提示操作完成\n\t```\n\n\n\n<!--首先我们引入Python自带的PIL图片处理库，接着我们定义一个可以将图片转换为PDF的函数。该函数接收两个变量：\n- filename: 包含完整路径的文件名称（例如：abc/xyz/123.jpg)\n- keyword: 这里是指文件的后缀，可以是jpg,可以是png,等等等等，目的有两个：\n\t- 在保存前使用split函数切掉该后缀并替换为.pdf后缀\n\t- 与目录遍历工具配合（最后会讲）在同一目录下进行选择性操作，例如只转换目录下jpg文件而跳过png文件。\n操作过程的原理基本与手动处理相同，即：\n> 打开图片 -> 转换RGBA为RGB -> 保存文件为PDF格式\n1. 第3行：打开文件，这里使用的路径可以是绝对路径（推荐）也可以是相对路径\n2. 第4行：切掉之前的后缀(abc/xyz/123.jpg -> abc/xyz/123),方便后面添加新的后缀。也可以使用replace('.jpg','.pdf')直接替换\n3. 第5行：将图片转换为RGB三原色格式，有的图片格式为RGBA（RedBlueGreenAlpha),Alpha指透明度。我使用的版本不可直接保存为PDF\n4. 第6行：将pdf文件保存在同一目录下\n5. 第7行：当任务完成后提示操作完成-->\n\n## PDF文件操作\n\n### 制作分隔页\n\n    ```Python\n    from reportlab.pdfgen import canvas\n    from reportlab.platypus import Paragraph\n    import reportlab.pdfbase.ttfonts #导入reportlab的注册字体\n    reportlab.pdfbase.pdfmetrics.registerFont(reportlab.pdfbase.ttfonts.TTFont('LiHei', '/Users/chenghaoq/MySQL/LiHei.ttf'))\n    from reportlab.lib.units import inch\n    from reportlab.lib.styles import getSampleStyleSheet\n    \n    def Coverpage(passage):\n        styleSheet = getSampleStyleSheet()\n        style = styleSheet['BodyText']\n        style.fontName = 'LiHei'\n        style.fontSize = 20\n        style.leading = 20\n        c = canvas.Canvas('C.'+passage)\n        c.setFont('LiHei',20)\n        pa = Paragraph(passage,style)\n        pa.wrapOn(c,6*inch,8*inch)\n        pa.drawOn(c,100,500)\n        c.save()\n\n    ```\n\nCoverpage这个函数会在相同目录下生成一个新的插页PDF文件，我们在这里面使用reportlab来\n\n### PDF合并\n\n    ```Python\n    def pdf_merge(filelist,output_name,coverpage=False):\n        pdfFileWriter = PdfFileWriter()   \n        for print_file in filelist:\n                if '.pdf' in print_file:\n                    print(\"Processing %s\"%print_file)\n                    if coverpage:\n                    #create the cover page and append to the writer\n                        Coverpage(print_file)\n                        C_pdfReader = PdfFileReader(open('C.'+print_file, 'rb'),strict=False)\n                        pageObj = C_pdfReader.getPage(0)\n                        pdfFileWriter.addPage(pageObj)\n                    #read the file and append to the writer\n                    pdfReader = PdfFileReader(open(print_file, 'rb'),strict=False)\n                    numPages = pdfReader.getNumPages()\n                    for index in range(0, numPages):\n                        pageObj = pdfReader.getPage(index)\n                        pdfFileWriter.addPage(pageObj)     \n        pdfFileWriter.write(open(output_name, 'wb'))\n    ```\n\npdf_merge这个函数需要引入三个变量：\n1. 含有所有需要合并的PDF文件的列表（我们刚刚在同一目录下的批量操作中已经获得）\n2. 输出的文件名字 \n3. 是否使用插页隔开（可选,默认选是False，如果为True，将生成插页并插入至对应部分前，插页内容为文件名）\n\n\n\n### PDF分拆\n\n\n    ```Python\n    def pdf_split(pdf_file,page_range=None):\n        #range is a list seems like [2,3,5,7]\n        split_path = pdf_file.split('.pdf')[0]\n        os.makedirs(split_path)\n        pdfReader = PdfFileReader(open(pdf_file, 'rb'),strict=False)\n        numPages = [each-1 for each in page_range] if page_range else range(0,pdfReader.getNumPages())\n        for index in numpages:\n            pageObj = pdfReader.getPage(index)\n            pdfFileWriter = PdfFileWriter() \n            pdfFileWriter.addPage(pageObj)\n            pdfFileWriter.write(open(split_path+os.sep+\"%d.pdf\"%index, 'wb'))\n    ```\n        \n\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n","slug":"pdf-operation","published":1,"updated":"2019-06-07T10:51:26.000Z","_id":"cjiqvlnup0008glu37m1t749x","comments":1,"photos":[],"link":"","content":"<p>最近在工作过程中发现的问题。客户在经常会使用拍照的方法提供底稿资料，成千上万的照片在逐一转换，分类，合并，打印操作过程中会浪费大量的时间。之前有尝试过一些软件来操作但是效果仍不尽如人意。这次使用PyPDF2和PIL两个库来完成我们的PDF转换，制作插页，合并及分拆操作。</p>\n<a id=\"more\"></a>\n<p>##工具准备</p>\n<ul>\n<li>Python3.x</li>\n<li>PIL</li>\n<li>Reportlab</li>\n<li>PyPDF2</li>\n</ul>\n<h2 id=\"获得当前目录下的所有文件及文件夹路径\"><a href=\"#获得当前目录下的所有文件及文件夹路径\" class=\"headerlink\" title=\"获得当前目录下的所有文件及文件夹路径\"></a>获得当前目录下的所有文件及文件夹路径</h2><p>进行批量处理的前提是你可以访问多个文件，下面这行代码的作用是讲当前目录下的所有文件的完整路径放入一个列表中，方便后面通过循环来调用</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">files=[]</span><br><span class=\"line\"><span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> os.listdir(os.getcwd()):</span><br><span class=\"line\">\tfiles.append(os.getcwd()+os.sep+filename) <span class=\"comment\">#方案一，放入files列表里,方便以后调用</span></span><br><span class=\"line\">\tfunction(os.getcwd()+os.sep+filename)<span class=\"comment\">#方案二，不保存为到列表直接调用</span></span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>os.getcwd()：会显示当前路径（绝对路径）</li>\n<li>os.listdir(os.getcwd())：会显示出当前路径下的所有文件及文件夹的名称（不包含路径），输出结果为[‘abc.pdf’,’xyz.jpg’,’123.xlsx’,’新建文件夹’]</li>\n<li>os.getcwd()+os.sep+filename：将文件名和路径结合在一起，os.sep为路径分隔符（Unix类系统为’/‘,Windows系列为”//“或’\\’</li>\n<li>方案一：使用第2行新建列表，第4行逐条添加到列表</li>\n<li>方案二：忽略第2、4行，直接使用第5行调用函数</li>\n</ul>\n<h2 id=\"图片转换PDF\"><a href=\"#图片转换PDF\" class=\"headerlink\" title=\"图片转换PDF\"></a>图片转换PDF</h2><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> PIL.Image</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">img2pdf</span><span class=\"params\">(filename,keyword)</span>:</span></span><br><span class=\"line\">    im = PIL.Image.open(filename) <span class=\"comment\">#打开文件</span></span><br><span class=\"line\">    name = filename.split(keyword)[<span class=\"number\">0</span>]<span class=\"comment\">#切掉后缀</span></span><br><span class=\"line\">    im = im.convert(<span class=\"string\">'RGB'</span>)<span class=\"comment\">#转换为RGB</span></span><br><span class=\"line\">    PIL.Image.Image.save(im,name+<span class=\"string\">'.pdf'</span>,<span class=\"string\">\"PDF\"</span>,resolution = <span class=\"number\">100.0</span>)<span class=\"comment\">#保存为PDF</span></span><br><span class=\"line\">    print(filename+<span class=\"string\">' has been processed to %s'</span>%name)<span class=\"comment\">#提示操作完成</span></span><br></pre></td></tr></table></figure>\n</code></pre><!--首先我们引入Python自带的PIL图片处理库，接着我们定义一个可以将图片转换为PDF的函数。该函数接收两个变量：\n- filename: 包含完整路径的文件名称（例如：abc/xyz/123.jpg)\n- keyword: 这里是指文件的后缀，可以是jpg,可以是png,等等等等，目的有两个：\n    - 在保存前使用split函数切掉该后缀并替换为.pdf后缀\n    - 与目录遍历工具配合（最后会讲）在同一目录下进行选择性操作，例如只转换目录下jpg文件而跳过png文件。\n操作过程的原理基本与手动处理相同，即：\n> 打开图片 -> 转换RGBA为RGB -> 保存文件为PDF格式\n1. 第3行：打开文件，这里使用的路径可以是绝对路径（推荐）也可以是相对路径\n2. 第4行：切掉之前的后缀(abc/xyz/123.jpg -> abc/xyz/123),方便后面添加新的后缀。也可以使用replace('.jpg','.pdf')直接替换\n3. 第5行：将图片转换为RGB三原色格式，有的图片格式为RGBA（RedBlueGreenAlpha),Alpha指透明度。我使用的版本不可直接保存为PDF\n4. 第6行：将pdf文件保存在同一目录下\n5. 第7行：当任务完成后提示操作完成-->\n<h2 id=\"PDF文件操作\"><a href=\"#PDF文件操作\" class=\"headerlink\" title=\"PDF文件操作\"></a>PDF文件操作</h2><h3 id=\"制作分隔页\"><a href=\"#制作分隔页\" class=\"headerlink\" title=\"制作分隔页\"></a>制作分隔页</h3><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> reportlab.pdfgen <span class=\"keyword\">import</span> canvas</span><br><span class=\"line\"><span class=\"keyword\">from</span> reportlab.platypus <span class=\"keyword\">import</span> Paragraph</span><br><span class=\"line\"><span class=\"keyword\">import</span> reportlab.pdfbase.ttfonts <span class=\"comment\">#导入reportlab的注册字体</span></span><br><span class=\"line\">reportlab.pdfbase.pdfmetrics.registerFont(reportlab.pdfbase.ttfonts.TTFont(<span class=\"string\">'LiHei'</span>, <span class=\"string\">'/Users/chenghaoq/MySQL/LiHei.ttf'</span>))</span><br><span class=\"line\"><span class=\"keyword\">from</span> reportlab.lib.units <span class=\"keyword\">import</span> inch</span><br><span class=\"line\"><span class=\"keyword\">from</span> reportlab.lib.styles <span class=\"keyword\">import</span> getSampleStyleSheet</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Coverpage</span><span class=\"params\">(passage)</span>:</span></span><br><span class=\"line\">    styleSheet = getSampleStyleSheet()</span><br><span class=\"line\">    style = styleSheet[<span class=\"string\">'BodyText'</span>]</span><br><span class=\"line\">    style.fontName = <span class=\"string\">'LiHei'</span></span><br><span class=\"line\">    style.fontSize = <span class=\"number\">20</span></span><br><span class=\"line\">    style.leading = <span class=\"number\">20</span></span><br><span class=\"line\">    c = canvas.Canvas(<span class=\"string\">'C.'</span>+passage)</span><br><span class=\"line\">    c.setFont(<span class=\"string\">'LiHei'</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\">    pa = Paragraph(passage,style)</span><br><span class=\"line\">    pa.wrapOn(c,<span class=\"number\">6</span>*inch,<span class=\"number\">8</span>*inch)</span><br><span class=\"line\">    pa.drawOn(c,<span class=\"number\">100</span>,<span class=\"number\">500</span>)</span><br><span class=\"line\">    c.save()</span><br></pre></td></tr></table></figure>\n</code></pre><p>Coverpage这个函数会在相同目录下生成一个新的插页PDF文件，我们在这里面使用reportlab来</p>\n<h3 id=\"PDF合并\"><a href=\"#PDF合并\" class=\"headerlink\" title=\"PDF合并\"></a>PDF合并</h3><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pdf_merge</span><span class=\"params\">(filelist,output_name,coverpage=False)</span>:</span></span><br><span class=\"line\">    pdfFileWriter = PdfFileWriter()   </span><br><span class=\"line\">    <span class=\"keyword\">for</span> print_file <span class=\"keyword\">in</span> filelist:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">'.pdf'</span> <span class=\"keyword\">in</span> print_file:</span><br><span class=\"line\">                print(<span class=\"string\">\"Processing %s\"</span>%print_file)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> coverpage:</span><br><span class=\"line\">                <span class=\"comment\">#create the cover page and append to the writer</span></span><br><span class=\"line\">                    Coverpage(print_file)</span><br><span class=\"line\">                    C_pdfReader = PdfFileReader(open(<span class=\"string\">'C.'</span>+print_file, <span class=\"string\">'rb'</span>),strict=<span class=\"keyword\">False</span>)</span><br><span class=\"line\">                    pageObj = C_pdfReader.getPage(<span class=\"number\">0</span>)</span><br><span class=\"line\">                    pdfFileWriter.addPage(pageObj)</span><br><span class=\"line\">                <span class=\"comment\">#read the file and append to the writer</span></span><br><span class=\"line\">                pdfReader = PdfFileReader(open(print_file, <span class=\"string\">'rb'</span>),strict=<span class=\"keyword\">False</span>)</span><br><span class=\"line\">                numPages = pdfReader.getNumPages()</span><br><span class=\"line\">                <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, numPages):</span><br><span class=\"line\">                    pageObj = pdfReader.getPage(index)</span><br><span class=\"line\">                    pdfFileWriter.addPage(pageObj)     </span><br><span class=\"line\">    pdfFileWriter.write(open(output_name, <span class=\"string\">'wb'</span>))</span><br></pre></td></tr></table></figure>\n</code></pre><p>pdf_merge这个函数需要引入三个变量：</p>\n<ol>\n<li>含有所有需要合并的PDF文件的列表（我们刚刚在同一目录下的批量操作中已经获得）</li>\n<li>输出的文件名字 </li>\n<li>是否使用插页隔开（可选,默认选是False，如果为True，将生成插页并插入至对应部分前，插页内容为文件名）</li>\n</ol>\n<h3 id=\"PDF分拆\"><a href=\"#PDF分拆\" class=\"headerlink\" title=\"PDF分拆\"></a>PDF分拆</h3><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pdf_split</span><span class=\"params\">(pdf_file,page_range=None)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#range is a list seems like [2,3,5,7]</span></span><br><span class=\"line\">    split_path = pdf_file.split(<span class=\"string\">'.pdf'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    os.makedirs(split_path)</span><br><span class=\"line\">    pdfReader = PdfFileReader(open(pdf_file, <span class=\"string\">'rb'</span>),strict=<span class=\"keyword\">False</span>)</span><br><span class=\"line\">    numPages = [each<span class=\"number\">-1</span> <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> page_range] <span class=\"keyword\">if</span> page_range <span class=\"keyword\">else</span> range(<span class=\"number\">0</span>,pdfReader.getNumPages())</span><br><span class=\"line\">    <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> numpages:</span><br><span class=\"line\">        pageObj = pdfReader.getPage(index)</span><br><span class=\"line\">        pdfFileWriter = PdfFileWriter() </span><br><span class=\"line\">        pdfFileWriter.addPage(pageObj)</span><br><span class=\"line\">        pdfFileWriter.write(open(split_path+os.sep+<span class=\"string\">\"%d.pdf\"</span>%index, <span class=\"string\">'wb'</span>))</span><br></pre></td></tr></table></figure>\n</code></pre>","site":{"data":{}},"excerpt":"<p>最近在工作过程中发现的问题。客户在经常会使用拍照的方法提供底稿资料，成千上万的照片在逐一转换，分类，合并，打印操作过程中会浪费大量的时间。之前有尝试过一些软件来操作但是效果仍不尽如人意。这次使用PyPDF2和PIL两个库来完成我们的PDF转换，制作插页，合并及分拆操作。</p>","more":"<p>##工具准备</p>\n<ul>\n<li>Python3.x</li>\n<li>PIL</li>\n<li>Reportlab</li>\n<li>PyPDF2</li>\n</ul>\n<h2 id=\"获得当前目录下的所有文件及文件夹路径\"><a href=\"#获得当前目录下的所有文件及文件夹路径\" class=\"headerlink\" title=\"获得当前目录下的所有文件及文件夹路径\"></a>获得当前目录下的所有文件及文件夹路径</h2><p>进行批量处理的前提是你可以访问多个文件，下面这行代码的作用是讲当前目录下的所有文件的完整路径放入一个列表中，方便后面通过循环来调用</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">files=[]</span><br><span class=\"line\"><span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> os.listdir(os.getcwd()):</span><br><span class=\"line\">\tfiles.append(os.getcwd()+os.sep+filename) <span class=\"comment\">#方案一，放入files列表里,方便以后调用</span></span><br><span class=\"line\">\tfunction(os.getcwd()+os.sep+filename)<span class=\"comment\">#方案二，不保存为到列表直接调用</span></span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>os.getcwd()：会显示当前路径（绝对路径）</li>\n<li>os.listdir(os.getcwd())：会显示出当前路径下的所有文件及文件夹的名称（不包含路径），输出结果为[‘abc.pdf’,’xyz.jpg’,’123.xlsx’,’新建文件夹’]</li>\n<li>os.getcwd()+os.sep+filename：将文件名和路径结合在一起，os.sep为路径分隔符（Unix类系统为’/‘,Windows系列为”//“或’\\’</li>\n<li>方案一：使用第2行新建列表，第4行逐条添加到列表</li>\n<li>方案二：忽略第2、4行，直接使用第5行调用函数</li>\n</ul>\n<h2 id=\"图片转换PDF\"><a href=\"#图片转换PDF\" class=\"headerlink\" title=\"图片转换PDF\"></a>图片转换PDF</h2><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> PIL.Image</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">img2pdf</span><span class=\"params\">(filename,keyword)</span>:</span></span><br><span class=\"line\">    im = PIL.Image.open(filename) <span class=\"comment\">#打开文件</span></span><br><span class=\"line\">    name = filename.split(keyword)[<span class=\"number\">0</span>]<span class=\"comment\">#切掉后缀</span></span><br><span class=\"line\">    im = im.convert(<span class=\"string\">'RGB'</span>)<span class=\"comment\">#转换为RGB</span></span><br><span class=\"line\">    PIL.Image.Image.save(im,name+<span class=\"string\">'.pdf'</span>,<span class=\"string\">\"PDF\"</span>,resolution = <span class=\"number\">100.0</span>)<span class=\"comment\">#保存为PDF</span></span><br><span class=\"line\">    print(filename+<span class=\"string\">' has been processed to %s'</span>%name)<span class=\"comment\">#提示操作完成</span></span><br></pre></td></tr></table></figure>\n</code></pre><!--首先我们引入Python自带的PIL图片处理库，接着我们定义一个可以将图片转换为PDF的函数。该函数接收两个变量：\n- filename: 包含完整路径的文件名称（例如：abc/xyz/123.jpg)\n- keyword: 这里是指文件的后缀，可以是jpg,可以是png,等等等等，目的有两个：\n    - 在保存前使用split函数切掉该后缀并替换为.pdf后缀\n    - 与目录遍历工具配合（最后会讲）在同一目录下进行选择性操作，例如只转换目录下jpg文件而跳过png文件。\n操作过程的原理基本与手动处理相同，即：\n> 打开图片 -> 转换RGBA为RGB -> 保存文件为PDF格式\n1. 第3行：打开文件，这里使用的路径可以是绝对路径（推荐）也可以是相对路径\n2. 第4行：切掉之前的后缀(abc/xyz/123.jpg -> abc/xyz/123),方便后面添加新的后缀。也可以使用replace('.jpg','.pdf')直接替换\n3. 第5行：将图片转换为RGB三原色格式，有的图片格式为RGBA（RedBlueGreenAlpha),Alpha指透明度。我使用的版本不可直接保存为PDF\n4. 第6行：将pdf文件保存在同一目录下\n5. 第7行：当任务完成后提示操作完成-->\n<h2 id=\"PDF文件操作\"><a href=\"#PDF文件操作\" class=\"headerlink\" title=\"PDF文件操作\"></a>PDF文件操作</h2><h3 id=\"制作分隔页\"><a href=\"#制作分隔页\" class=\"headerlink\" title=\"制作分隔页\"></a>制作分隔页</h3><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> reportlab.pdfgen <span class=\"keyword\">import</span> canvas</span><br><span class=\"line\"><span class=\"keyword\">from</span> reportlab.platypus <span class=\"keyword\">import</span> Paragraph</span><br><span class=\"line\"><span class=\"keyword\">import</span> reportlab.pdfbase.ttfonts <span class=\"comment\">#导入reportlab的注册字体</span></span><br><span class=\"line\">reportlab.pdfbase.pdfmetrics.registerFont(reportlab.pdfbase.ttfonts.TTFont(<span class=\"string\">'LiHei'</span>, <span class=\"string\">'/Users/chenghaoq/MySQL/LiHei.ttf'</span>))</span><br><span class=\"line\"><span class=\"keyword\">from</span> reportlab.lib.units <span class=\"keyword\">import</span> inch</span><br><span class=\"line\"><span class=\"keyword\">from</span> reportlab.lib.styles <span class=\"keyword\">import</span> getSampleStyleSheet</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Coverpage</span><span class=\"params\">(passage)</span>:</span></span><br><span class=\"line\">    styleSheet = getSampleStyleSheet()</span><br><span class=\"line\">    style = styleSheet[<span class=\"string\">'BodyText'</span>]</span><br><span class=\"line\">    style.fontName = <span class=\"string\">'LiHei'</span></span><br><span class=\"line\">    style.fontSize = <span class=\"number\">20</span></span><br><span class=\"line\">    style.leading = <span class=\"number\">20</span></span><br><span class=\"line\">    c = canvas.Canvas(<span class=\"string\">'C.'</span>+passage)</span><br><span class=\"line\">    c.setFont(<span class=\"string\">'LiHei'</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\">    pa = Paragraph(passage,style)</span><br><span class=\"line\">    pa.wrapOn(c,<span class=\"number\">6</span>*inch,<span class=\"number\">8</span>*inch)</span><br><span class=\"line\">    pa.drawOn(c,<span class=\"number\">100</span>,<span class=\"number\">500</span>)</span><br><span class=\"line\">    c.save()</span><br></pre></td></tr></table></figure>\n</code></pre><p>Coverpage这个函数会在相同目录下生成一个新的插页PDF文件，我们在这里面使用reportlab来</p>\n<h3 id=\"PDF合并\"><a href=\"#PDF合并\" class=\"headerlink\" title=\"PDF合并\"></a>PDF合并</h3><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pdf_merge</span><span class=\"params\">(filelist,output_name,coverpage=False)</span>:</span></span><br><span class=\"line\">    pdfFileWriter = PdfFileWriter()   </span><br><span class=\"line\">    <span class=\"keyword\">for</span> print_file <span class=\"keyword\">in</span> filelist:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">'.pdf'</span> <span class=\"keyword\">in</span> print_file:</span><br><span class=\"line\">                print(<span class=\"string\">\"Processing %s\"</span>%print_file)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> coverpage:</span><br><span class=\"line\">                <span class=\"comment\">#create the cover page and append to the writer</span></span><br><span class=\"line\">                    Coverpage(print_file)</span><br><span class=\"line\">                    C_pdfReader = PdfFileReader(open(<span class=\"string\">'C.'</span>+print_file, <span class=\"string\">'rb'</span>),strict=<span class=\"keyword\">False</span>)</span><br><span class=\"line\">                    pageObj = C_pdfReader.getPage(<span class=\"number\">0</span>)</span><br><span class=\"line\">                    pdfFileWriter.addPage(pageObj)</span><br><span class=\"line\">                <span class=\"comment\">#read the file and append to the writer</span></span><br><span class=\"line\">                pdfReader = PdfFileReader(open(print_file, <span class=\"string\">'rb'</span>),strict=<span class=\"keyword\">False</span>)</span><br><span class=\"line\">                numPages = pdfReader.getNumPages()</span><br><span class=\"line\">                <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, numPages):</span><br><span class=\"line\">                    pageObj = pdfReader.getPage(index)</span><br><span class=\"line\">                    pdfFileWriter.addPage(pageObj)     </span><br><span class=\"line\">    pdfFileWriter.write(open(output_name, <span class=\"string\">'wb'</span>))</span><br></pre></td></tr></table></figure>\n</code></pre><p>pdf_merge这个函数需要引入三个变量：</p>\n<ol>\n<li>含有所有需要合并的PDF文件的列表（我们刚刚在同一目录下的批量操作中已经获得）</li>\n<li>输出的文件名字 </li>\n<li>是否使用插页隔开（可选,默认选是False，如果为True，将生成插页并插入至对应部分前，插页内容为文件名）</li>\n</ol>\n<h3 id=\"PDF分拆\"><a href=\"#PDF分拆\" class=\"headerlink\" title=\"PDF分拆\"></a>PDF分拆</h3><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pdf_split</span><span class=\"params\">(pdf_file,page_range=None)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#range is a list seems like [2,3,5,7]</span></span><br><span class=\"line\">    split_path = pdf_file.split(<span class=\"string\">'.pdf'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    os.makedirs(split_path)</span><br><span class=\"line\">    pdfReader = PdfFileReader(open(pdf_file, <span class=\"string\">'rb'</span>),strict=<span class=\"keyword\">False</span>)</span><br><span class=\"line\">    numPages = [each<span class=\"number\">-1</span> <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> page_range] <span class=\"keyword\">if</span> page_range <span class=\"keyword\">else</span> range(<span class=\"number\">0</span>,pdfReader.getNumPages())</span><br><span class=\"line\">    <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> numpages:</span><br><span class=\"line\">        pageObj = pdfReader.getPage(index)</span><br><span class=\"line\">        pdfFileWriter = PdfFileWriter() </span><br><span class=\"line\">        pdfFileWriter.addPage(pageObj)</span><br><span class=\"line\">        pdfFileWriter.write(open(split_path+os.sep+<span class=\"string\">\"%d.pdf\"</span>%index, <span class=\"string\">'wb'</span>))</span><br></pre></td></tr></table></figure>\n</code></pre>"},{"title":"使用Python实现关键字搜索文件","date":"2016-12-10T02:56:28.000Z","_content":"\n让我们通过20行python代码实现一个简单的关键字搜索工具\n\n\n## 目录遍历\n首先我们来看如何实现目录遍历\n\n目录遍历的过程很简单:\n\n1. 将目标路径作为当前目录\n2. 罗列出当前目录下的所有内容\n3. 判断每一个目标是否是文件夹。\n4. 如果是，进入该文件夹搜索（将文件夹路径改为当前路径，多级目录在此处会循环)\n\n<!--More-->\n\n为什么我们要使用递归，与for对已知大小的列表的遍历相比，递归更适合与那些确定开始结束条件而过程不确定的情况。我们将初始路径设为起点，将目录下没有其他目录可以进入的情况设为终点\n\n让我们来看如何通过递归的方式来遍历某个路径下的所有内容\n\t\n\t```Python\n\tdef search(path):\n\t\tcontent = os.listdir(path)\n\t\tfor each in content:\n\t\t\teach_path = path + os.sep + each\n\t\t\tif os.path.isdir(each_path):\n\t\t\t\tsearch(each_path)\n\t\t\tprint(each_path)#测试输出\n\t```\n\n- 第1行：首先我们先定义一个search函数，参数path是接收的路径\n- 第2行：os.listdir(path) 将path路径下的所有(文件/文件夹)作为一个列表返回 \n- 第3行：使用for循环遍历当前目录\n- 第4行：构建当前目录下文件的完整目录（当前目录/文件名称），os.sep为当前操作系统的分隔符\n- 第5行：判断这个目标是否是文件夹\n- 第6行：如果是，把这个文件夹作为新的路径像刚才那样再来一遍\n- 第7行：最后在循环的后面我们加一个print来看看输出了什么\n\n来看我们的测试目录test的结构\n\n\t```Shell\n\ttest\n\t├── a\n\t│   ├── a\n\t│   ├── b\n\t│   └── c\n\t│       └── file.md\n\t├── b\n\t│   ├── a\n\t│   └── b\n\t│       └── target.py\n\t├── c\n\t│   └── a\n\t└── d\n\t```\n测试，进入test目录并使用os.getcwd()返回当前路径：\n\n\t```Python\n\t>>> search(os.getcwd())\n\t```\n输出结果\n\n\t```Shell\n\t/home/Jkob/Github/test/b/b/target.py\n\t/home/Jkob/Github/test/b/b\n\t/home/Jkob/Github/test/b/a\n\t/home/Jkob/Github/test/b\n\t/home/Jkob/Github/test/a/b\n\t/home/Jkob/Github/test/a/a\n\t/home/Jkob/Github/test/a/c/file.md\n\t/home/Jkob/Github/test/a/c\n\t/home/Jkob/Github/test/a\n\t/home/Jkob/Github/test/d\n\t/home/Jkob/Github/test/c/a\n\t/home/Jkob/Github/test/c\n\t```\n目录的遍历有什么用呢，我们可以添加条件来（搜索/操作）目录下所有符合条件的文件\n\n## 文件名搜索\n\n我们来对刚刚的函数进行简单的修改\n\t\n\t```Python\n\tdef search(path,keyword):\n\t\tcontent= os.listdir(path)\n\t\tfor each in content:\n\t\t\teach_path = path+os.sep+each\n\t\t\tif filename in each:\n\t\t\t\tprint(each_path)\n\t\t\tif os.path.isdir(each_path):\n\t\t\t\tsearch(each_path,keyword)\n\t```\n与刚刚不同的只有简单几行\n\n- 第1行：函数参数增加了要搜索的文件名\n- 第5,6行：增加了判断，我们这里使用‘in’ 而不是‘==’ 的目的是为了使用模糊匹配，只要包含搜索的关键字就符合条件\n-第8行：由于我们整个函数没有修改filename,所以我们可以将搜索条件传递下去\n\n我们这次再来测试，寻找藏起来的target.py\n\n\t```Python\n\t>>>search(os.getcwd(),'target')\n\t```\n结果\n\n\t```Python\n\t/home/Jkob/Github/test/b/b/target.py\n\t```\n再试一次\n\t\n\t```Python\n\t>>>search(os.getcwd(),'tar')\n\t```\n结果\n\n\t```Python\n\t/home/Jkob/Github/test/b/b/target.py\n\t```\n\n## 文件内容搜索\n\n然而只有文件名字符合并不能满足我们的需求，我们有时也需要查找文件里面的内容是否符合关键字需求\n\t\n\t```Python\n\tdef content_search(filepath,keyword):\n\t\tf = open(filepath,'r')\n\t\tfor line in f:\n\t\t\tif keyword in line:\n\t\t\t\tf.close()\n\t\t\t\treturn True\n\t\tf.close()\n\t\treturn False\n\t```\n在这里我们定义了一个函数content\\_search(),搜索文件内容并默认返回False，如果符合关键字条件即返回True并终端该项搜索\n\n别忘记关闭文件哦\n\n接下来我们将这个函数整合到我们刚刚的文件搜索函数中\n\n\n## 关键字搜索整合\n\n我们来把刚才的内容搜索函数添加到我们刚才的搜索函数中\n\n\t```Python\n\tdef search(path,keyword):\n\t\tcontent= os.listdir(path)\n\t\tfor each in content:\n\t\t\teach_path = path+os.sep+each\n\t\t\tif keyword in each:\n\t\t\t\tprint(each_path)\n\t\t\tif os.path.isdir(each_path):\n\t\t\t\tsearch(each_path,keyword)\n\t\t\telif content_search(each_path,keyword):\n\t\t\t\tprint(each_path)\n    ```\n\n我们只添加了最后两行，即当该文件包含关键字时，我们显示该文件路径。但是为什么我们不能把这个和刚才文件名判定条件放在一起呢？**因为有的文件名指代的是文件夹**,我们需要将其放在文件夹判断之后\n\n我们来测试一下,其实目录下的file.md文件是编辑过的，内容为'target':\n\n\t```Python\n\tsearch(os.getcwd(),'tar')\n    ```\n返回\n\t#!shell\n\t/home/Jkob/Github/test/b/b/target.py\n\t/home/Jkob/Github/test/a/c/file.md\n\n如果我们将整个文件作为工具的话，我们可以最后一行添加\n\n\t#!python\n\tsearch(os.getcwd(),input('Your Keyword:'))\n\n\n\n## 完整代码\n\t\n\t```Python\n\timport os\n\tdef search(path,keyword):\n\t\tcontent= os.listdir(path)\n\t\tfor each in content:\n\t\t\teach_path = path+os.sep+each\n\t\t\tif keyword in each:\n\t\t\t\tprint(each_path)\n\t\t\tif os.path.isdir(each_path):\n\t\t\t\tsearch(each_path,keyword)\n\t\t\telif content_search(each_path,keyword):\n\t\t\t\tprint(each_path)\n\tdef content_search(filepath,keyword):\n\t\tf = open(filepath,'r')\n\t\tfor line in f:\n\t\t\tif keyword in line:\n\t\t\t\tf.close()\n\t\t\t\treturn True\n\t\tf.close()\n\t\treturn False\n\tsearch(os.getcwd(),input('Your Keyword:'))\n    ```\n示例:\n\n\t```Shell\n\t[Jkob@localhost test] $ python3 test.py \n\tYour Keyword:tar\n\t/home/Jkob/Github/test/b/b/target.py\n\t/home/Jkob/Github/test/a/c/file.md\n\t```\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/keyword-search.md","raw":"---\ntitle: 使用Python实现关键字搜索文件\ndate: 2016-12-10 10:56:28\ntags:\ncategories: Python\n---\n\n让我们通过20行python代码实现一个简单的关键字搜索工具\n\n\n## 目录遍历\n首先我们来看如何实现目录遍历\n\n目录遍历的过程很简单:\n\n1. 将目标路径作为当前目录\n2. 罗列出当前目录下的所有内容\n3. 判断每一个目标是否是文件夹。\n4. 如果是，进入该文件夹搜索（将文件夹路径改为当前路径，多级目录在此处会循环)\n\n<!--More-->\n\n为什么我们要使用递归，与for对已知大小的列表的遍历相比，递归更适合与那些确定开始结束条件而过程不确定的情况。我们将初始路径设为起点，将目录下没有其他目录可以进入的情况设为终点\n\n让我们来看如何通过递归的方式来遍历某个路径下的所有内容\n\t\n\t```Python\n\tdef search(path):\n\t\tcontent = os.listdir(path)\n\t\tfor each in content:\n\t\t\teach_path = path + os.sep + each\n\t\t\tif os.path.isdir(each_path):\n\t\t\t\tsearch(each_path)\n\t\t\tprint(each_path)#测试输出\n\t```\n\n- 第1行：首先我们先定义一个search函数，参数path是接收的路径\n- 第2行：os.listdir(path) 将path路径下的所有(文件/文件夹)作为一个列表返回 \n- 第3行：使用for循环遍历当前目录\n- 第4行：构建当前目录下文件的完整目录（当前目录/文件名称），os.sep为当前操作系统的分隔符\n- 第5行：判断这个目标是否是文件夹\n- 第6行：如果是，把这个文件夹作为新的路径像刚才那样再来一遍\n- 第7行：最后在循环的后面我们加一个print来看看输出了什么\n\n来看我们的测试目录test的结构\n\n\t```Shell\n\ttest\n\t├── a\n\t│   ├── a\n\t│   ├── b\n\t│   └── c\n\t│       └── file.md\n\t├── b\n\t│   ├── a\n\t│   └── b\n\t│       └── target.py\n\t├── c\n\t│   └── a\n\t└── d\n\t```\n测试，进入test目录并使用os.getcwd()返回当前路径：\n\n\t```Python\n\t>>> search(os.getcwd())\n\t```\n输出结果\n\n\t```Shell\n\t/home/Jkob/Github/test/b/b/target.py\n\t/home/Jkob/Github/test/b/b\n\t/home/Jkob/Github/test/b/a\n\t/home/Jkob/Github/test/b\n\t/home/Jkob/Github/test/a/b\n\t/home/Jkob/Github/test/a/a\n\t/home/Jkob/Github/test/a/c/file.md\n\t/home/Jkob/Github/test/a/c\n\t/home/Jkob/Github/test/a\n\t/home/Jkob/Github/test/d\n\t/home/Jkob/Github/test/c/a\n\t/home/Jkob/Github/test/c\n\t```\n目录的遍历有什么用呢，我们可以添加条件来（搜索/操作）目录下所有符合条件的文件\n\n## 文件名搜索\n\n我们来对刚刚的函数进行简单的修改\n\t\n\t```Python\n\tdef search(path,keyword):\n\t\tcontent= os.listdir(path)\n\t\tfor each in content:\n\t\t\teach_path = path+os.sep+each\n\t\t\tif filename in each:\n\t\t\t\tprint(each_path)\n\t\t\tif os.path.isdir(each_path):\n\t\t\t\tsearch(each_path,keyword)\n\t```\n与刚刚不同的只有简单几行\n\n- 第1行：函数参数增加了要搜索的文件名\n- 第5,6行：增加了判断，我们这里使用‘in’ 而不是‘==’ 的目的是为了使用模糊匹配，只要包含搜索的关键字就符合条件\n-第8行：由于我们整个函数没有修改filename,所以我们可以将搜索条件传递下去\n\n我们这次再来测试，寻找藏起来的target.py\n\n\t```Python\n\t>>>search(os.getcwd(),'target')\n\t```\n结果\n\n\t```Python\n\t/home/Jkob/Github/test/b/b/target.py\n\t```\n再试一次\n\t\n\t```Python\n\t>>>search(os.getcwd(),'tar')\n\t```\n结果\n\n\t```Python\n\t/home/Jkob/Github/test/b/b/target.py\n\t```\n\n## 文件内容搜索\n\n然而只有文件名字符合并不能满足我们的需求，我们有时也需要查找文件里面的内容是否符合关键字需求\n\t\n\t```Python\n\tdef content_search(filepath,keyword):\n\t\tf = open(filepath,'r')\n\t\tfor line in f:\n\t\t\tif keyword in line:\n\t\t\t\tf.close()\n\t\t\t\treturn True\n\t\tf.close()\n\t\treturn False\n\t```\n在这里我们定义了一个函数content\\_search(),搜索文件内容并默认返回False，如果符合关键字条件即返回True并终端该项搜索\n\n别忘记关闭文件哦\n\n接下来我们将这个函数整合到我们刚刚的文件搜索函数中\n\n\n## 关键字搜索整合\n\n我们来把刚才的内容搜索函数添加到我们刚才的搜索函数中\n\n\t```Python\n\tdef search(path,keyword):\n\t\tcontent= os.listdir(path)\n\t\tfor each in content:\n\t\t\teach_path = path+os.sep+each\n\t\t\tif keyword in each:\n\t\t\t\tprint(each_path)\n\t\t\tif os.path.isdir(each_path):\n\t\t\t\tsearch(each_path,keyword)\n\t\t\telif content_search(each_path,keyword):\n\t\t\t\tprint(each_path)\n    ```\n\n我们只添加了最后两行，即当该文件包含关键字时，我们显示该文件路径。但是为什么我们不能把这个和刚才文件名判定条件放在一起呢？**因为有的文件名指代的是文件夹**,我们需要将其放在文件夹判断之后\n\n我们来测试一下,其实目录下的file.md文件是编辑过的，内容为'target':\n\n\t```Python\n\tsearch(os.getcwd(),'tar')\n    ```\n返回\n\t#!shell\n\t/home/Jkob/Github/test/b/b/target.py\n\t/home/Jkob/Github/test/a/c/file.md\n\n如果我们将整个文件作为工具的话，我们可以最后一行添加\n\n\t#!python\n\tsearch(os.getcwd(),input('Your Keyword:'))\n\n\n\n## 完整代码\n\t\n\t```Python\n\timport os\n\tdef search(path,keyword):\n\t\tcontent= os.listdir(path)\n\t\tfor each in content:\n\t\t\teach_path = path+os.sep+each\n\t\t\tif keyword in each:\n\t\t\t\tprint(each_path)\n\t\t\tif os.path.isdir(each_path):\n\t\t\t\tsearch(each_path,keyword)\n\t\t\telif content_search(each_path,keyword):\n\t\t\t\tprint(each_path)\n\tdef content_search(filepath,keyword):\n\t\tf = open(filepath,'r')\n\t\tfor line in f:\n\t\t\tif keyword in line:\n\t\t\t\tf.close()\n\t\t\t\treturn True\n\t\tf.close()\n\t\treturn False\n\tsearch(os.getcwd(),input('Your Keyword:'))\n    ```\n示例:\n\n\t```Shell\n\t[Jkob@localhost test] $ python3 test.py \n\tYour Keyword:tar\n\t/home/Jkob/Github/test/b/b/target.py\n\t/home/Jkob/Github/test/a/c/file.md\n\t```\n\n\n\n\n\n\n\n\n\n\n\n","slug":"keyword-search","published":1,"updated":"2018-06-22T05:25:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiqvlnuq000bglu33ne8eoeo","content":"<p>让我们通过20行python代码实现一个简单的关键字搜索工具</p>\n<h2 id=\"目录遍历\"><a href=\"#目录遍历\" class=\"headerlink\" title=\"目录遍历\"></a>目录遍历</h2><p>首先我们来看如何实现目录遍历</p>\n<p>目录遍历的过程很简单:</p>\n<ol>\n<li>将目标路径作为当前目录</li>\n<li>罗列出当前目录下的所有内容</li>\n<li>判断每一个目标是否是文件夹。</li>\n<li>如果是，进入该文件夹搜索（将文件夹路径改为当前路径，多级目录在此处会循环)</li>\n</ol>\n<a id=\"more\"></a>\n<p>为什么我们要使用递归，与for对已知大小的列表的遍历相比，递归更适合与那些确定开始结束条件而过程不确定的情况。我们将初始路径设为起点，将目录下没有其他目录可以进入的情况设为终点</p>\n<p>让我们来看如何通过递归的方式来遍历某个路径下的所有内容</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span><span class=\"params\">(path)</span>:</span></span><br><span class=\"line\">\tcontent = os.listdir(path)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> content:</span><br><span class=\"line\">\t\teach_path = path + os.sep + each</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> os.path.isdir(each_path):</span><br><span class=\"line\">\t\t\tsearch(each_path)</span><br><span class=\"line\">\t\tprint(each_path)<span class=\"comment\">#测试输出</span></span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>第1行：首先我们先定义一个search函数，参数path是接收的路径</li>\n<li>第2行：os.listdir(path) 将path路径下的所有(文件/文件夹)作为一个列表返回 </li>\n<li>第3行：使用for循环遍历当前目录</li>\n<li>第4行：构建当前目录下文件的完整目录（当前目录/文件名称），os.sep为当前操作系统的分隔符</li>\n<li>第5行：判断这个目标是否是文件夹</li>\n<li>第6行：如果是，把这个文件夹作为新的路径像刚才那样再来一遍</li>\n<li>第7行：最后在循环的后面我们加一个print来看看输出了什么</li>\n</ul>\n<p>来看我们的测试目录test的结构</p>\n<pre><code><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test</span><br><span class=\"line\">├── a</span><br><span class=\"line\">│   ├── a</span><br><span class=\"line\">│   ├── b</span><br><span class=\"line\">│   └── c</span><br><span class=\"line\">│       └── file.md</span><br><span class=\"line\">├── b</span><br><span class=\"line\">│   ├── a</span><br><span class=\"line\">│   └── b</span><br><span class=\"line\">│       └── target.py</span><br><span class=\"line\">├── c</span><br><span class=\"line\">│   └── a</span><br><span class=\"line\">└── d</span><br></pre></td></tr></table></figure>\n</code></pre><p>测试，进入test目录并使用os.getcwd()返回当前路径：</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>search(os.getcwd())</span><br></pre></td></tr></table></figure>\n</code></pre><p>输出结果</p>\n<pre><code><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/Jkob/Github/test/b/b/target.py</span><br><span class=\"line\">/home/Jkob/Github/test/b/b</span><br><span class=\"line\">/home/Jkob/Github/test/b/a</span><br><span class=\"line\">/home/Jkob/Github/test/b</span><br><span class=\"line\">/home/Jkob/Github/test/a/b</span><br><span class=\"line\">/home/Jkob/Github/test/a/a</span><br><span class=\"line\">/home/Jkob/Github/test/a/c/file.md</span><br><span class=\"line\">/home/Jkob/Github/test/a/c</span><br><span class=\"line\">/home/Jkob/Github/test/a</span><br><span class=\"line\">/home/Jkob/Github/test/d</span><br><span class=\"line\">/home/Jkob/Github/test/c/a</span><br><span class=\"line\">/home/Jkob/Github/test/c</span><br></pre></td></tr></table></figure>\n</code></pre><p>目录的遍历有什么用呢，我们可以添加条件来（搜索/操作）目录下所有符合条件的文件</p>\n<h2 id=\"文件名搜索\"><a href=\"#文件名搜索\" class=\"headerlink\" title=\"文件名搜索\"></a>文件名搜索</h2><p>我们来对刚刚的函数进行简单的修改</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span><span class=\"params\">(path,keyword)</span>:</span></span><br><span class=\"line\">\tcontent= os.listdir(path)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> content:</span><br><span class=\"line\">\t\teach_path = path+os.sep+each</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> filename <span class=\"keyword\">in</span> each:</span><br><span class=\"line\">\t\t\tprint(each_path)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> os.path.isdir(each_path):</span><br><span class=\"line\">\t\t\tsearch(each_path,keyword)</span><br></pre></td></tr></table></figure>\n</code></pre><p>与刚刚不同的只有简单几行</p>\n<ul>\n<li>第1行：函数参数增加了要搜索的文件名</li>\n<li>第5,6行：增加了判断，我们这里使用‘in’ 而不是‘==’ 的目的是为了使用模糊匹配，只要包含搜索的关键字就符合条件<br>-第8行：由于我们整个函数没有修改filename,所以我们可以将搜索条件传递下去</li>\n</ul>\n<p>我们这次再来测试，寻找藏起来的target.py</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;search(os.getcwd(),<span class=\"string\">'target'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>结果</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/Jkob/Github/test/b/b/target.py</span><br></pre></td></tr></table></figure>\n</code></pre><p>再试一次</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;search(os.getcwd(),<span class=\"string\">'tar'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>结果</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/Jkob/Github/test/b/b/target.py</span><br></pre></td></tr></table></figure>\n</code></pre><h2 id=\"文件内容搜索\"><a href=\"#文件内容搜索\" class=\"headerlink\" title=\"文件内容搜索\"></a>文件内容搜索</h2><p>然而只有文件名字符合并不能满足我们的需求，我们有时也需要查找文件里面的内容是否符合关键字需求</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">content_search</span><span class=\"params\">(filepath,keyword)</span>:</span></span><br><span class=\"line\">\tf = open(filepath,<span class=\"string\">'r'</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> keyword <span class=\"keyword\">in</span> line:</span><br><span class=\"line\">\t\t\tf.close()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">\tf.close()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>在这里我们定义了一个函数content_search(),搜索文件内容并默认返回False，如果符合关键字条件即返回True并终端该项搜索</p>\n<p>别忘记关闭文件哦</p>\n<p>接下来我们将这个函数整合到我们刚刚的文件搜索函数中</p>\n<h2 id=\"关键字搜索整合\"><a href=\"#关键字搜索整合\" class=\"headerlink\" title=\"关键字搜索整合\"></a>关键字搜索整合</h2><p>我们来把刚才的内容搜索函数添加到我们刚才的搜索函数中</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span><span class=\"params\">(path,keyword)</span>:</span></span><br><span class=\"line\">\tcontent= os.listdir(path)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> content:</span><br><span class=\"line\">\t\teach_path = path+os.sep+each</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> keyword <span class=\"keyword\">in</span> each:</span><br><span class=\"line\">\t\t\tprint(each_path)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> os.path.isdir(each_path):</span><br><span class=\"line\">\t\t\tsearch(each_path,keyword)</span><br><span class=\"line\">\t\t<span class=\"keyword\">elif</span> content_search(each_path,keyword):</span><br><span class=\"line\">\t\t\tprint(each_path)</span><br></pre></td></tr></table></figure>\n</code></pre><p>我们只添加了最后两行，即当该文件包含关键字时，我们显示该文件路径。但是为什么我们不能把这个和刚才文件名判定条件放在一起呢？<strong>因为有的文件名指代的是文件夹</strong>,我们需要将其放在文件夹判断之后</p>\n<p>我们来测试一下,其实目录下的file.md文件是编辑过的，内容为’target’:</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search(os.getcwd(),<span class=\"string\">'tar'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>返回</p>\n<pre><code>#!shell\n/home/Jkob/Github/test/b/b/target.py\n/home/Jkob/Github/test/a/c/file.md\n</code></pre><p>如果我们将整个文件作为工具的话，我们可以最后一行添加</p>\n<pre><code>#!python\nsearch(os.getcwd(),input(&apos;Your Keyword:&apos;))\n</code></pre><h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span><span class=\"params\">(path,keyword)</span>:</span></span><br><span class=\"line\">\tcontent= os.listdir(path)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> content:</span><br><span class=\"line\">\t\teach_path = path+os.sep+each</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> keyword <span class=\"keyword\">in</span> each:</span><br><span class=\"line\">\t\t\tprint(each_path)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> os.path.isdir(each_path):</span><br><span class=\"line\">\t\t\tsearch(each_path,keyword)</span><br><span class=\"line\">\t\t<span class=\"keyword\">elif</span> content_search(each_path,keyword):</span><br><span class=\"line\">\t\t\tprint(each_path)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">content_search</span><span class=\"params\">(filepath,keyword)</span>:</span></span><br><span class=\"line\">\tf = open(filepath,<span class=\"string\">'r'</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> keyword <span class=\"keyword\">in</span> line:</span><br><span class=\"line\">\t\t\tf.close()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">\tf.close()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">search(os.getcwd(),input(<span class=\"string\">'Your Keyword:'</span>))</span><br></pre></td></tr></table></figure>\n</code></pre><p>示例:</p>\n<pre><code><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Jkob@localhost test] $ python3 test.py </span><br><span class=\"line\">Your Keyword:tar</span><br><span class=\"line\">/home/Jkob/Github/test/b/b/target.py</span><br><span class=\"line\">/home/Jkob/Github/test/a/c/file.md</span><br></pre></td></tr></table></figure>\n</code></pre>","site":{"data":{}},"excerpt":"<p>让我们通过20行python代码实现一个简单的关键字搜索工具</p>\n<h2 id=\"目录遍历\"><a href=\"#目录遍历\" class=\"headerlink\" title=\"目录遍历\"></a>目录遍历</h2><p>首先我们来看如何实现目录遍历</p>\n<p>目录遍历的过程很简单:</p>\n<ol>\n<li>将目标路径作为当前目录</li>\n<li>罗列出当前目录下的所有内容</li>\n<li>判断每一个目标是否是文件夹。</li>\n<li>如果是，进入该文件夹搜索（将文件夹路径改为当前路径，多级目录在此处会循环)</li>\n</ol>","more":"<p>为什么我们要使用递归，与for对已知大小的列表的遍历相比，递归更适合与那些确定开始结束条件而过程不确定的情况。我们将初始路径设为起点，将目录下没有其他目录可以进入的情况设为终点</p>\n<p>让我们来看如何通过递归的方式来遍历某个路径下的所有内容</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span><span class=\"params\">(path)</span>:</span></span><br><span class=\"line\">\tcontent = os.listdir(path)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> content:</span><br><span class=\"line\">\t\teach_path = path + os.sep + each</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> os.path.isdir(each_path):</span><br><span class=\"line\">\t\t\tsearch(each_path)</span><br><span class=\"line\">\t\tprint(each_path)<span class=\"comment\">#测试输出</span></span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>第1行：首先我们先定义一个search函数，参数path是接收的路径</li>\n<li>第2行：os.listdir(path) 将path路径下的所有(文件/文件夹)作为一个列表返回 </li>\n<li>第3行：使用for循环遍历当前目录</li>\n<li>第4行：构建当前目录下文件的完整目录（当前目录/文件名称），os.sep为当前操作系统的分隔符</li>\n<li>第5行：判断这个目标是否是文件夹</li>\n<li>第6行：如果是，把这个文件夹作为新的路径像刚才那样再来一遍</li>\n<li>第7行：最后在循环的后面我们加一个print来看看输出了什么</li>\n</ul>\n<p>来看我们的测试目录test的结构</p>\n<pre><code><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test</span><br><span class=\"line\">├── a</span><br><span class=\"line\">│   ├── a</span><br><span class=\"line\">│   ├── b</span><br><span class=\"line\">│   └── c</span><br><span class=\"line\">│       └── file.md</span><br><span class=\"line\">├── b</span><br><span class=\"line\">│   ├── a</span><br><span class=\"line\">│   └── b</span><br><span class=\"line\">│       └── target.py</span><br><span class=\"line\">├── c</span><br><span class=\"line\">│   └── a</span><br><span class=\"line\">└── d</span><br></pre></td></tr></table></figure>\n</code></pre><p>测试，进入test目录并使用os.getcwd()返回当前路径：</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>search(os.getcwd())</span><br></pre></td></tr></table></figure>\n</code></pre><p>输出结果</p>\n<pre><code><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/Jkob/Github/test/b/b/target.py</span><br><span class=\"line\">/home/Jkob/Github/test/b/b</span><br><span class=\"line\">/home/Jkob/Github/test/b/a</span><br><span class=\"line\">/home/Jkob/Github/test/b</span><br><span class=\"line\">/home/Jkob/Github/test/a/b</span><br><span class=\"line\">/home/Jkob/Github/test/a/a</span><br><span class=\"line\">/home/Jkob/Github/test/a/c/file.md</span><br><span class=\"line\">/home/Jkob/Github/test/a/c</span><br><span class=\"line\">/home/Jkob/Github/test/a</span><br><span class=\"line\">/home/Jkob/Github/test/d</span><br><span class=\"line\">/home/Jkob/Github/test/c/a</span><br><span class=\"line\">/home/Jkob/Github/test/c</span><br></pre></td></tr></table></figure>\n</code></pre><p>目录的遍历有什么用呢，我们可以添加条件来（搜索/操作）目录下所有符合条件的文件</p>\n<h2 id=\"文件名搜索\"><a href=\"#文件名搜索\" class=\"headerlink\" title=\"文件名搜索\"></a>文件名搜索</h2><p>我们来对刚刚的函数进行简单的修改</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span><span class=\"params\">(path,keyword)</span>:</span></span><br><span class=\"line\">\tcontent= os.listdir(path)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> content:</span><br><span class=\"line\">\t\teach_path = path+os.sep+each</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> filename <span class=\"keyword\">in</span> each:</span><br><span class=\"line\">\t\t\tprint(each_path)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> os.path.isdir(each_path):</span><br><span class=\"line\">\t\t\tsearch(each_path,keyword)</span><br></pre></td></tr></table></figure>\n</code></pre><p>与刚刚不同的只有简单几行</p>\n<ul>\n<li>第1行：函数参数增加了要搜索的文件名</li>\n<li>第5,6行：增加了判断，我们这里使用‘in’ 而不是‘==’ 的目的是为了使用模糊匹配，只要包含搜索的关键字就符合条件<br>-第8行：由于我们整个函数没有修改filename,所以我们可以将搜索条件传递下去</li>\n</ul>\n<p>我们这次再来测试，寻找藏起来的target.py</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;search(os.getcwd(),<span class=\"string\">'target'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>结果</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/Jkob/Github/test/b/b/target.py</span><br></pre></td></tr></table></figure>\n</code></pre><p>再试一次</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;search(os.getcwd(),<span class=\"string\">'tar'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>结果</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/Jkob/Github/test/b/b/target.py</span><br></pre></td></tr></table></figure>\n</code></pre><h2 id=\"文件内容搜索\"><a href=\"#文件内容搜索\" class=\"headerlink\" title=\"文件内容搜索\"></a>文件内容搜索</h2><p>然而只有文件名字符合并不能满足我们的需求，我们有时也需要查找文件里面的内容是否符合关键字需求</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">content_search</span><span class=\"params\">(filepath,keyword)</span>:</span></span><br><span class=\"line\">\tf = open(filepath,<span class=\"string\">'r'</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> keyword <span class=\"keyword\">in</span> line:</span><br><span class=\"line\">\t\t\tf.close()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">\tf.close()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>在这里我们定义了一个函数content_search(),搜索文件内容并默认返回False，如果符合关键字条件即返回True并终端该项搜索</p>\n<p>别忘记关闭文件哦</p>\n<p>接下来我们将这个函数整合到我们刚刚的文件搜索函数中</p>\n<h2 id=\"关键字搜索整合\"><a href=\"#关键字搜索整合\" class=\"headerlink\" title=\"关键字搜索整合\"></a>关键字搜索整合</h2><p>我们来把刚才的内容搜索函数添加到我们刚才的搜索函数中</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span><span class=\"params\">(path,keyword)</span>:</span></span><br><span class=\"line\">\tcontent= os.listdir(path)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> content:</span><br><span class=\"line\">\t\teach_path = path+os.sep+each</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> keyword <span class=\"keyword\">in</span> each:</span><br><span class=\"line\">\t\t\tprint(each_path)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> os.path.isdir(each_path):</span><br><span class=\"line\">\t\t\tsearch(each_path,keyword)</span><br><span class=\"line\">\t\t<span class=\"keyword\">elif</span> content_search(each_path,keyword):</span><br><span class=\"line\">\t\t\tprint(each_path)</span><br></pre></td></tr></table></figure>\n</code></pre><p>我们只添加了最后两行，即当该文件包含关键字时，我们显示该文件路径。但是为什么我们不能把这个和刚才文件名判定条件放在一起呢？<strong>因为有的文件名指代的是文件夹</strong>,我们需要将其放在文件夹判断之后</p>\n<p>我们来测试一下,其实目录下的file.md文件是编辑过的，内容为’target’:</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search(os.getcwd(),<span class=\"string\">'tar'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>返回</p>\n<pre><code>#!shell\n/home/Jkob/Github/test/b/b/target.py\n/home/Jkob/Github/test/a/c/file.md\n</code></pre><p>如果我们将整个文件作为工具的话，我们可以最后一行添加</p>\n<pre><code>#!python\nsearch(os.getcwd(),input(&apos;Your Keyword:&apos;))\n</code></pre><h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span><span class=\"params\">(path,keyword)</span>:</span></span><br><span class=\"line\">\tcontent= os.listdir(path)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> content:</span><br><span class=\"line\">\t\teach_path = path+os.sep+each</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> keyword <span class=\"keyword\">in</span> each:</span><br><span class=\"line\">\t\t\tprint(each_path)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> os.path.isdir(each_path):</span><br><span class=\"line\">\t\t\tsearch(each_path,keyword)</span><br><span class=\"line\">\t\t<span class=\"keyword\">elif</span> content_search(each_path,keyword):</span><br><span class=\"line\">\t\t\tprint(each_path)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">content_search</span><span class=\"params\">(filepath,keyword)</span>:</span></span><br><span class=\"line\">\tf = open(filepath,<span class=\"string\">'r'</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> keyword <span class=\"keyword\">in</span> line:</span><br><span class=\"line\">\t\t\tf.close()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">\tf.close()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">search(os.getcwd(),input(<span class=\"string\">'Your Keyword:'</span>))</span><br></pre></td></tr></table></figure>\n</code></pre><p>示例:</p>\n<pre><code><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Jkob@localhost test] $ python3 test.py </span><br><span class=\"line\">Your Keyword:tar</span><br><span class=\"line\">/home/Jkob/Github/test/b/b/target.py</span><br><span class=\"line\">/home/Jkob/Github/test/a/c/file.md</span><br></pre></td></tr></table></figure>\n</code></pre>"},{"title":"python3使用相对路径import","date":"2016-08-29T15:54:47.000Z","_content":"\n我们来python3在导入不同目录的模块时是怎么做的\n\n\n先来看一下我们的Project目录\n\n\t\t|---myproject\n\t\t├── __init__.py\n\t\t├── settings.py\n\t\t├── folderA\n\t\t│   └── testA.py\n\t\t├── folderB\n\t\t│\t├── __init__.py\n\t\t│   ├── testB.py\n\t\t├── test.py\n\n## 在相同目录下\n\n我们现在在myproject/目录下\n\n在同一目录下，我们可以使用'.'来表示当前目录：\n\t```Python\n\tfrom . import test.py\n\t```\n<!--More-->\n\n或者直接import \n\t```Python\n\timport test.py\n\t```\n如果你想使用同目录下某一文件的内容，假设我们test.py内有一对象名为app\n\t```Python\n\tfrom .test import app\n\t```\n\n\n## 在上级目录中\n\n我们现在在folderA下\n\n对于调用上级目录的内容，我们可以使用'..'来表示返回上一级目录，假设我们现在要调用上一层的test. py\n\t```Python\n\tfrom .. import test.py\n\t```\n如果你想使用上级目录下某一文件的内容，假设我们test.py内有一对象名为app\n\t```Python\n\tfrom ..test import app\n\t```\n## 在兄弟目录中\n\n现在我们仍然在folderA下\n\n我们可以看到，folderB是和folderA一样在myproject下面的目录，我们该怎么办呢？先返回上级目录调用，调用方法类似于上级目录下的某一文件.我们现在要调用folderB下的testB.py\n\t```Python\n\tfrom ..folderB import testB\n\t```\n\n## **__init__.py**是什么\n\n当一个目录下有**__init__.py**时，python将该目录认定为package。我们可以看到myproject/下面有一个__init__.py，这个时候myproject可以被当做package.\n\t```Python\n\timport myproject\n\t```\n而如果没有__init__.py的话，myproject只是文件夹，不可以被调用。__init__.py通常为空，但是也可以放从其他文件import 一些参数，假设我们的__init__.py引入了test.py的app\n\t```Python\n\tfrom .test import app\n\t```\n之后我们就可以直接通过包名来调用它\n\t```Python\n\tfrom myproject import app\n\t```\n\n## 从顶层调用及子目录调用\n\n\n我们可以使用'.'或者'..'来调用同一级或上一级的模块和对象，但是如果你想跨过多层调用（上上级目录)，你需要从顶层调用,我们当前的根目录是myproject/，对于子目录的调用方法我们通常使用'.'来链接 -> root.level1.level2\n\n我们现在的位置是folderA,假设我们需要调用folderB的testB.py,我们可以使用\n\t```Python\n\tfrom myproject.folderB import testB\n\t```\n那我们是不是也可以这样呢\n\t```Python\n\tfrom myproject.folderA import testA\n\t```\n很遗憾，是**不能**的。为什么会这样呢？因为仔细观察两个目录你可以发现folderA下并没有__init__.py，这样这个目录就只是文件夹而不是package，这意味着不能被import.\n\n","source":"_posts/module-import.md","raw":"---\ntitle: python3使用相对路径import\ndate: 2016-08-29 23:54:47\ntags:\ncategories: Python\n---\n\n我们来python3在导入不同目录的模块时是怎么做的\n\n\n先来看一下我们的Project目录\n\n\t\t|---myproject\n\t\t├── __init__.py\n\t\t├── settings.py\n\t\t├── folderA\n\t\t│   └── testA.py\n\t\t├── folderB\n\t\t│\t├── __init__.py\n\t\t│   ├── testB.py\n\t\t├── test.py\n\n## 在相同目录下\n\n我们现在在myproject/目录下\n\n在同一目录下，我们可以使用'.'来表示当前目录：\n\t```Python\n\tfrom . import test.py\n\t```\n<!--More-->\n\n或者直接import \n\t```Python\n\timport test.py\n\t```\n如果你想使用同目录下某一文件的内容，假设我们test.py内有一对象名为app\n\t```Python\n\tfrom .test import app\n\t```\n\n\n## 在上级目录中\n\n我们现在在folderA下\n\n对于调用上级目录的内容，我们可以使用'..'来表示返回上一级目录，假设我们现在要调用上一层的test. py\n\t```Python\n\tfrom .. import test.py\n\t```\n如果你想使用上级目录下某一文件的内容，假设我们test.py内有一对象名为app\n\t```Python\n\tfrom ..test import app\n\t```\n## 在兄弟目录中\n\n现在我们仍然在folderA下\n\n我们可以看到，folderB是和folderA一样在myproject下面的目录，我们该怎么办呢？先返回上级目录调用，调用方法类似于上级目录下的某一文件.我们现在要调用folderB下的testB.py\n\t```Python\n\tfrom ..folderB import testB\n\t```\n\n## **__init__.py**是什么\n\n当一个目录下有**__init__.py**时，python将该目录认定为package。我们可以看到myproject/下面有一个__init__.py，这个时候myproject可以被当做package.\n\t```Python\n\timport myproject\n\t```\n而如果没有__init__.py的话，myproject只是文件夹，不可以被调用。__init__.py通常为空，但是也可以放从其他文件import 一些参数，假设我们的__init__.py引入了test.py的app\n\t```Python\n\tfrom .test import app\n\t```\n之后我们就可以直接通过包名来调用它\n\t```Python\n\tfrom myproject import app\n\t```\n\n## 从顶层调用及子目录调用\n\n\n我们可以使用'.'或者'..'来调用同一级或上一级的模块和对象，但是如果你想跨过多层调用（上上级目录)，你需要从顶层调用,我们当前的根目录是myproject/，对于子目录的调用方法我们通常使用'.'来链接 -> root.level1.level2\n\n我们现在的位置是folderA,假设我们需要调用folderB的testB.py,我们可以使用\n\t```Python\n\tfrom myproject.folderB import testB\n\t```\n那我们是不是也可以这样呢\n\t```Python\n\tfrom myproject.folderA import testA\n\t```\n很遗憾，是**不能**的。为什么会这样呢？因为仔细观察两个目录你可以发现folderA下并没有__init__.py，这样这个目录就只是文件夹而不是package，这意味着不能被import.\n\n","slug":"module-import","published":1,"updated":"2018-06-22T05:26:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiqvlnus000dglu3q6uy7pfo","content":"<p>我们来python3在导入不同目录的模块时是怎么做的</p>\n<p>先来看一下我们的Project目录</p>\n<pre><code>|---myproject\n├── __init__.py\n├── settings.py\n├── folderA\n│   └── testA.py\n├── folderB\n│    ├── __init__.py\n│   ├── testB.py\n├── test.py\n</code></pre><h2 id=\"在相同目录下\"><a href=\"#在相同目录下\" class=\"headerlink\" title=\"在相同目录下\"></a>在相同目录下</h2><p>我们现在在myproject/目录下</p>\n<p>在同一目录下，我们可以使用’.’来表示当前目录：<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> test.py</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>或者直接import<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> test.py</span><br></pre></td></tr></table></figure></p>\n<p>如果你想使用同目录下某一文件的内容，假设我们test.py内有一对象名为app<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> .test <span class=\"keyword\">import</span> app</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在上级目录中\"><a href=\"#在上级目录中\" class=\"headerlink\" title=\"在上级目录中\"></a>在上级目录中</h2><p>我们现在在folderA下</p>\n<p>对于调用上级目录的内容，我们可以使用’..’来表示返回上一级目录，假设我们现在要调用上一层的test. py<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> .. <span class=\"keyword\">import</span> test.py</span><br></pre></td></tr></table></figure></p>\n<p>如果你想使用上级目录下某一文件的内容，假设我们test.py内有一对象名为app<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> ..test <span class=\"keyword\">import</span> app</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在兄弟目录中\"><a href=\"#在兄弟目录中\" class=\"headerlink\" title=\"在兄弟目录中\"></a>在兄弟目录中</h2><p>现在我们仍然在folderA下</p>\n<p>我们可以看到，folderB是和folderA一样在myproject下面的目录，我们该怎么办呢？先返回上级目录调用，调用方法类似于上级目录下的某一文件.我们现在要调用folderB下的testB.py<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> ..folderB <span class=\"keyword\">import</span> testB</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"init-py是什么\"><a href=\"#init-py是什么\" class=\"headerlink\" title=\"init.py是什么\"></a><strong><strong>init</strong>.py</strong>是什么</h2><p>当一个目录下有<strong><strong>init</strong>.py</strong>时，python将该目录认定为package。我们可以看到myproject/下面有一个<strong>init</strong>.py，这个时候myproject可以被当做package.<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> myproject</span><br></pre></td></tr></table></figure></p>\n<p>而如果没有<strong>init</strong>.py的话，myproject只是文件夹，不可以被调用。<strong>init</strong>.py通常为空，但是也可以放从其他文件import 一些参数，假设我们的<strong>init</strong>.py引入了test.py的app<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> .test <span class=\"keyword\">import</span> app</span><br></pre></td></tr></table></figure></p>\n<p>之后我们就可以直接通过包名来调用它<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> myproject <span class=\"keyword\">import</span> app</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"从顶层调用及子目录调用\"><a href=\"#从顶层调用及子目录调用\" class=\"headerlink\" title=\"从顶层调用及子目录调用\"></a>从顶层调用及子目录调用</h2><p>我们可以使用’.’或者’..’来调用同一级或上一级的模块和对象，但是如果你想跨过多层调用（上上级目录)，你需要从顶层调用,我们当前的根目录是myproject/，对于子目录的调用方法我们通常使用’.’来链接 -&gt; root.level1.level2</p>\n<p>我们现在的位置是folderA,假设我们需要调用folderB的testB.py,我们可以使用<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> myproject.folderB <span class=\"keyword\">import</span> testB</span><br></pre></td></tr></table></figure></p>\n<p>那我们是不是也可以这样呢<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> myproject.folderA <span class=\"keyword\">import</span> testA</span><br></pre></td></tr></table></figure></p>\n<p>很遗憾，是<strong>不能</strong>的。为什么会这样呢？因为仔细观察两个目录你可以发现folderA下并没有<strong>init</strong>.py，这样这个目录就只是文件夹而不是package，这意味着不能被import.</p>\n","site":{"data":{}},"excerpt":"<p>我们来python3在导入不同目录的模块时是怎么做的</p>\n<p>先来看一下我们的Project目录</p>\n<pre><code>|---myproject\n├── __init__.py\n├── settings.py\n├── folderA\n│   └── testA.py\n├── folderB\n│    ├── __init__.py\n│   ├── testB.py\n├── test.py\n</code></pre><h2 id=\"在相同目录下\"><a href=\"#在相同目录下\" class=\"headerlink\" title=\"在相同目录下\"></a>在相同目录下</h2><p>我们现在在myproject/目录下</p>\n<p>在同一目录下，我们可以使用’.’来表示当前目录：<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> test.py</span><br></pre></td></tr></table></figure></p>","more":"<p>或者直接import<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> test.py</span><br></pre></td></tr></table></figure></p>\n<p>如果你想使用同目录下某一文件的内容，假设我们test.py内有一对象名为app<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> .test <span class=\"keyword\">import</span> app</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在上级目录中\"><a href=\"#在上级目录中\" class=\"headerlink\" title=\"在上级目录中\"></a>在上级目录中</h2><p>我们现在在folderA下</p>\n<p>对于调用上级目录的内容，我们可以使用’..’来表示返回上一级目录，假设我们现在要调用上一层的test. py<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> .. <span class=\"keyword\">import</span> test.py</span><br></pre></td></tr></table></figure></p>\n<p>如果你想使用上级目录下某一文件的内容，假设我们test.py内有一对象名为app<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> ..test <span class=\"keyword\">import</span> app</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在兄弟目录中\"><a href=\"#在兄弟目录中\" class=\"headerlink\" title=\"在兄弟目录中\"></a>在兄弟目录中</h2><p>现在我们仍然在folderA下</p>\n<p>我们可以看到，folderB是和folderA一样在myproject下面的目录，我们该怎么办呢？先返回上级目录调用，调用方法类似于上级目录下的某一文件.我们现在要调用folderB下的testB.py<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> ..folderB <span class=\"keyword\">import</span> testB</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"init-py是什么\"><a href=\"#init-py是什么\" class=\"headerlink\" title=\"init.py是什么\"></a><strong><strong>init</strong>.py</strong>是什么</h2><p>当一个目录下有<strong><strong>init</strong>.py</strong>时，python将该目录认定为package。我们可以看到myproject/下面有一个<strong>init</strong>.py，这个时候myproject可以被当做package.<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> myproject</span><br></pre></td></tr></table></figure></p>\n<p>而如果没有<strong>init</strong>.py的话，myproject只是文件夹，不可以被调用。<strong>init</strong>.py通常为空，但是也可以放从其他文件import 一些参数，假设我们的<strong>init</strong>.py引入了test.py的app<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> .test <span class=\"keyword\">import</span> app</span><br></pre></td></tr></table></figure></p>\n<p>之后我们就可以直接通过包名来调用它<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> myproject <span class=\"keyword\">import</span> app</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"从顶层调用及子目录调用\"><a href=\"#从顶层调用及子目录调用\" class=\"headerlink\" title=\"从顶层调用及子目录调用\"></a>从顶层调用及子目录调用</h2><p>我们可以使用’.’或者’..’来调用同一级或上一级的模块和对象，但是如果你想跨过多层调用（上上级目录)，你需要从顶层调用,我们当前的根目录是myproject/，对于子目录的调用方法我们通常使用’.’来链接 -&gt; root.level1.level2</p>\n<p>我们现在的位置是folderA,假设我们需要调用folderB的testB.py,我们可以使用<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> myproject.folderB <span class=\"keyword\">import</span> testB</span><br></pre></td></tr></table></figure></p>\n<p>那我们是不是也可以这样呢<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> myproject.folderA <span class=\"keyword\">import</span> testA</span><br></pre></td></tr></table></figure></p>\n<p>很遗憾，是<strong>不能</strong>的。为什么会这样呢？因为仔细观察两个目录你可以发现folderA下并没有<strong>init</strong>.py，这样这个目录就只是文件夹而不是package，这意味着不能被import.</p>"},{"title":"变得更pythonic(懒)-三元表达式和列表解析式","date":"2016-09-14T16:12:12.000Z","_content":"\t\n也许你只是刚刚开始接触python, 也许你已经走上python的不归路，也许你厌倦了条件循环的换行和缩进。To be pythonic, 你不会错过每一个由繁到简的转变。本文简单介绍了python的三元表达式，列表解析式以及它们的结合用法，轻轻松松使用一行代码解决判断与循环，走上pythonic(懒)之路。\n\n<!--More-->\n\n\n##三元表达式\n在学习python之前你可能已经接触过了三目运算符\n\t\t\n\t判断条件 ？ 为真的结果 : 为假的结果\n\t\npython并没有三目运算符这样的语法，取而代之的是我们的三元表达式\n\n\t(True) if condition else (False)\n\n举个栗子让我们来看看什么是三元表达式\n\n\t```python\n\t>>> a = 5;b = 3\n\t>>> if a > b:\n\t...     c = True\n\t... \n\t>>> c\n\tTrue\n    ```\n    \n使用三元表达式\n\n\t```python\n\t>>> a = 5;b = 3\n\t>>> c = True if a > b else False\n\t>>> c\n\tTrue\n    ```\n或者 \n\n\t```Python\n\t>>> condition =True\n\t>>> print( 1 if condition else 0)\n\t1\n\t```\n同三目运算符一样， 三元表达式不支持复杂的操作。如果三元表达式支持复杂的操作，那么将所有代码挤到一行里并不是一个明智的选择。那些简单的if statement 才是三元表达式的用武之地。\n\t\n\t\n##列表解析式\n\n###什么是列表解析式？\n\n列表解析式就是将任何可迭代的对象转换成列表的工具。你可以在转换过程中添加条件进行过滤，\n\n###for循环与列表解析式\n\n任何列表解析式都可以改写成for循环，因为其本事就是由for循环构成\n\n举个for循环的栗子:\n\n\t```Python\n\t>>> a = []\n\t>>> for each in range(5):\n\t...     a.append(each)\n\t... \n\t>>> a\n\t[0, 1, 2, 3, 4]\n\t```\n如果用了列表解析式，你可以这样写\n\n\ta = [each for each in range(5)]\n\t\n###嵌套\n\n列表解析式支持for循环嵌套，并且在列表操作上比单纯的for循环更加灵活。\n\n\t【【 元素 子列表解析式】主列表解析式】\n\n\n\n假设我们需要创造一个而5x5的棋盘:\n\n\n使用for循环并不是那么轻松简单；\n\n\t```Python\n\t>>> board = []\n\t>>> for row in range(5):\n\t...     board.append([])\n\t...     for col in range(5):\n\t...             board[row].append('+')\n\t>>> board\n\t[['+', '+', '+', '+', '+'], ['+', '+', '+', '+', '+'], ['+', '+', '+', '+', '+'], ['+', '+', '+', '+', '+'], ['+', '+', '+', '+', '+']]\n\t```\n注意，如果不太了解python而为数组但有C的经验的话，很可能会写出下面的代码\n\n\t```Python\n\tfor row in range(5):\n\t\tfor col in range(5):\n\t\t\tboard[row][col] = '+'\n\t```\t\t\n然而这是不对的，python你并不支持通过定点赋值的方法添加新的列表元素，所以代码显得很臃肿。然而此时你已经掌握了列表解析式的嵌套\n\n\t```Python\n\t>>>board = [['+' for col in range(5)] for row in range(5)]\n\t```\n现在你变得更pythonic(懒)了。\n\n\n##条件筛选（综合）\n\n\n如果你想对一个可迭代的对象进行筛选,你就不得不使用for循环来找出每一个子元素并加以判断，大致过程如下：\n\t\n\t```Python\n\tfor elem in list1:\n\t\tif condition == True:\n\t\t\tlist2.append(elem)\n\t```\t\t\n这样你就可以把所有符合判断条件的list1元素重新组合成新的列表list2中去，举个栗子:\n\n\t```Python\n\t>>> secretWord = 'apple' \n\t>>> lettersGuessed = ['e', 'i', 'k', 'p', 'r', 's']\n\t```\n使用for循环来找出secretWord中重合的字母\n\n\t```Python\n\t>>> list2 = []\n\tfor char in secretWord:\n\t\tif char in lettersGuessed:\n\t\t\tlist2.append(char)\n\t>>>list2\n\t['p', 'p', 'e']\n\t```\n\n忘了告诉你，python中的列表解析式支持条件过滤，格式如下:\n\n\t[元素 列表解析式 if条件]\n\t\n有了这个法宝，再回头看我们刚刚的例子\n\n\t```Python\n\t>>> list2 = [each for each in secretWord if each in lettersGuessed]\n\t>>>list2\n\t['p', 'p', 'e']\n\t```\n\n只要一行，轻轻松松。现在你觉得自己又pythonic(懒)了一分。但是我们现在要做一个猜谜游戏，如果sercretWord中字母不在lettersGuessed 中，我们要用'\\_'来表示:('\\_pp_e').然而列表解析式只支持if条件判断并不支持if...else... 好像阻挡了你pythonic(懒)的脚步，但是这是你突然想起了另一样法宝:\n\n**三元表达式**，然后你把代码写成了这样\n\n\t```Python\n\tlist2 = [each for each in secretWord if each in lettersGuessed else '_']\n\t```\n\t\n然后就报错了，python告诉你语法错误。知道了列表解析式只支持if条件而不是if..else, 而事实证明确实如此\n\n\t[元素 列表解析式 if条件]        == **正确**\n\t[元素 列表解析式 if条件else]    == **错误**\n\t\n这是怎么回事，难道三元表达式和列表解析式真的不能双修吗\n\n其实不然，列表解析式挂载的if条件的方式和与三元表达式结合的方式并不一样，前者在后，后者在前:\n\n\t```Python\n\t>>> list2 = [each if each in lettersGuessed else '_' for each in secretWord]\n\t>>> list2\n\t['_', 'p', 'p', '_', 'e']\n\t```\n\n\n\n\n真是pythonic(懒)极了。\n\n在**创建新列表**或函数**return**时，效果极佳。\n\n** -- End -- **\n\t\n","source":"_posts/ternary-expression.md","raw":"---\ntitle: 变得更pythonic(懒)-三元表达式和列表解析式\ndate: 2016-09-15 00:12:12\ncategories: Python\n---\n\t\n也许你只是刚刚开始接触python, 也许你已经走上python的不归路，也许你厌倦了条件循环的换行和缩进。To be pythonic, 你不会错过每一个由繁到简的转变。本文简单介绍了python的三元表达式，列表解析式以及它们的结合用法，轻轻松松使用一行代码解决判断与循环，走上pythonic(懒)之路。\n\n<!--More-->\n\n\n##三元表达式\n在学习python之前你可能已经接触过了三目运算符\n\t\t\n\t判断条件 ？ 为真的结果 : 为假的结果\n\t\npython并没有三目运算符这样的语法，取而代之的是我们的三元表达式\n\n\t(True) if condition else (False)\n\n举个栗子让我们来看看什么是三元表达式\n\n\t```python\n\t>>> a = 5;b = 3\n\t>>> if a > b:\n\t...     c = True\n\t... \n\t>>> c\n\tTrue\n    ```\n    \n使用三元表达式\n\n\t```python\n\t>>> a = 5;b = 3\n\t>>> c = True if a > b else False\n\t>>> c\n\tTrue\n    ```\n或者 \n\n\t```Python\n\t>>> condition =True\n\t>>> print( 1 if condition else 0)\n\t1\n\t```\n同三目运算符一样， 三元表达式不支持复杂的操作。如果三元表达式支持复杂的操作，那么将所有代码挤到一行里并不是一个明智的选择。那些简单的if statement 才是三元表达式的用武之地。\n\t\n\t\n##列表解析式\n\n###什么是列表解析式？\n\n列表解析式就是将任何可迭代的对象转换成列表的工具。你可以在转换过程中添加条件进行过滤，\n\n###for循环与列表解析式\n\n任何列表解析式都可以改写成for循环，因为其本事就是由for循环构成\n\n举个for循环的栗子:\n\n\t```Python\n\t>>> a = []\n\t>>> for each in range(5):\n\t...     a.append(each)\n\t... \n\t>>> a\n\t[0, 1, 2, 3, 4]\n\t```\n如果用了列表解析式，你可以这样写\n\n\ta = [each for each in range(5)]\n\t\n###嵌套\n\n列表解析式支持for循环嵌套，并且在列表操作上比单纯的for循环更加灵活。\n\n\t【【 元素 子列表解析式】主列表解析式】\n\n\n\n假设我们需要创造一个而5x5的棋盘:\n\n\n使用for循环并不是那么轻松简单；\n\n\t```Python\n\t>>> board = []\n\t>>> for row in range(5):\n\t...     board.append([])\n\t...     for col in range(5):\n\t...             board[row].append('+')\n\t>>> board\n\t[['+', '+', '+', '+', '+'], ['+', '+', '+', '+', '+'], ['+', '+', '+', '+', '+'], ['+', '+', '+', '+', '+'], ['+', '+', '+', '+', '+']]\n\t```\n注意，如果不太了解python而为数组但有C的经验的话，很可能会写出下面的代码\n\n\t```Python\n\tfor row in range(5):\n\t\tfor col in range(5):\n\t\t\tboard[row][col] = '+'\n\t```\t\t\n然而这是不对的，python你并不支持通过定点赋值的方法添加新的列表元素，所以代码显得很臃肿。然而此时你已经掌握了列表解析式的嵌套\n\n\t```Python\n\t>>>board = [['+' for col in range(5)] for row in range(5)]\n\t```\n现在你变得更pythonic(懒)了。\n\n\n##条件筛选（综合）\n\n\n如果你想对一个可迭代的对象进行筛选,你就不得不使用for循环来找出每一个子元素并加以判断，大致过程如下：\n\t\n\t```Python\n\tfor elem in list1:\n\t\tif condition == True:\n\t\t\tlist2.append(elem)\n\t```\t\t\n这样你就可以把所有符合判断条件的list1元素重新组合成新的列表list2中去，举个栗子:\n\n\t```Python\n\t>>> secretWord = 'apple' \n\t>>> lettersGuessed = ['e', 'i', 'k', 'p', 'r', 's']\n\t```\n使用for循环来找出secretWord中重合的字母\n\n\t```Python\n\t>>> list2 = []\n\tfor char in secretWord:\n\t\tif char in lettersGuessed:\n\t\t\tlist2.append(char)\n\t>>>list2\n\t['p', 'p', 'e']\n\t```\n\n忘了告诉你，python中的列表解析式支持条件过滤，格式如下:\n\n\t[元素 列表解析式 if条件]\n\t\n有了这个法宝，再回头看我们刚刚的例子\n\n\t```Python\n\t>>> list2 = [each for each in secretWord if each in lettersGuessed]\n\t>>>list2\n\t['p', 'p', 'e']\n\t```\n\n只要一行，轻轻松松。现在你觉得自己又pythonic(懒)了一分。但是我们现在要做一个猜谜游戏，如果sercretWord中字母不在lettersGuessed 中，我们要用'\\_'来表示:('\\_pp_e').然而列表解析式只支持if条件判断并不支持if...else... 好像阻挡了你pythonic(懒)的脚步，但是这是你突然想起了另一样法宝:\n\n**三元表达式**，然后你把代码写成了这样\n\n\t```Python\n\tlist2 = [each for each in secretWord if each in lettersGuessed else '_']\n\t```\n\t\n然后就报错了，python告诉你语法错误。知道了列表解析式只支持if条件而不是if..else, 而事实证明确实如此\n\n\t[元素 列表解析式 if条件]        == **正确**\n\t[元素 列表解析式 if条件else]    == **错误**\n\t\n这是怎么回事，难道三元表达式和列表解析式真的不能双修吗\n\n其实不然，列表解析式挂载的if条件的方式和与三元表达式结合的方式并不一样，前者在后，后者在前:\n\n\t```Python\n\t>>> list2 = [each if each in lettersGuessed else '_' for each in secretWord]\n\t>>> list2\n\t['_', 'p', 'p', '_', 'e']\n\t```\n\n\n\n\n真是pythonic(懒)极了。\n\n在**创建新列表**或函数**return**时，效果极佳。\n\n** -- End -- **\n\t\n","slug":"ternary-expression","published":1,"updated":"2018-06-22T05:38:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiqvlnuv000gglu3oku2p6nx","content":"<p>也许你只是刚刚开始接触python, 也许你已经走上python的不归路，也许你厌倦了条件循环的换行和缩进。To be pythonic, 你不会错过每一个由繁到简的转变。本文简单介绍了python的三元表达式，列表解析式以及它们的结合用法，轻轻松松使用一行代码解决判断与循环，走上pythonic(懒)之路。</p>\n<a id=\"more\"></a>\n<p>##三元表达式<br>在学习python之前你可能已经接触过了三目运算符</p>\n<pre><code>判断条件 ？ 为真的结果 : 为假的结果\n</code></pre><p>python并没有三目运算符这样的语法，取而代之的是我们的三元表达式</p>\n<pre><code>(True) if condition else (False)\n</code></pre><p>举个栗子让我们来看看什么是三元表达式</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">5</span>;b = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">if</span> a &gt; b:</span><br><span class=\"line\"><span class=\"meta\">... </span>    c = <span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>使用三元表达式</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">5</span>;b = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c = <span class=\"keyword\">True</span> <span class=\"keyword\">if</span> a &gt; b <span class=\"keyword\">else</span> <span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>或者 </p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>condition =<span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print( <span class=\"number\">1</span> <span class=\"keyword\">if</span> condition <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>同三目运算符一样， 三元表达式不支持复杂的操作。如果三元表达式支持复杂的操作，那么将所有代码挤到一行里并不是一个明智的选择。那些简单的if statement 才是三元表达式的用武之地。</p>\n<p>##列表解析式</p>\n<p>###什么是列表解析式？</p>\n<p>列表解析式就是将任何可迭代的对象转换成列表的工具。你可以在转换过程中添加条件进行过滤，</p>\n<p>###for循环与列表解析式</p>\n<p>任何列表解析式都可以改写成for循环，因为其本事就是由for循环构成</p>\n<p>举个for循环的栗子:</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = []</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    a.append(each)</span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>如果用了列表解析式，你可以这样写</p>\n<pre><code>a = [each for each in range(5)]\n</code></pre><p>###嵌套</p>\n<p>列表解析式支持for循环嵌套，并且在列表操作上比单纯的for循环更加灵活。</p>\n<pre><code>【【 元素 子列表解析式】主列表解析式】\n</code></pre><p>假设我们需要创造一个而5x5的棋盘:</p>\n<p>使用for循环并不是那么轻松简单；</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>board = []</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    board.append([])</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>            board[row].append(<span class=\"string\">'+'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>board</span><br><span class=\"line\">[[<span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>], [<span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>], [<span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>], [<span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>], [<span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>]]</span><br></pre></td></tr></table></figure>\n</code></pre><p>注意，如果不太了解python而为数组但有C的经验的话，很可能会写出下面的代码</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">\t\t\tboard[row][col] = <span class=\"string\">'+'</span></span><br><span class=\"line\">\t```\t\t</span><br><span class=\"line\">然而这是不对的，python你并不支持通过定点赋值的方法添加新的列表元素，所以代码显得很臃肿。然而此时你已经掌握了列表解析式的嵌套</span><br><span class=\"line\"></span><br><span class=\"line\">\t```Python</span><br><span class=\"line\">\t&gt;&gt;&gt;board = [[<span class=\"string\">'+'</span> <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>)] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>)]</span><br></pre></td></tr></table></figure>\n</code></pre><p>现在你变得更pythonic(懒)了。</p>\n<p>##条件筛选（综合）</p>\n<p>如果你想对一个可迭代的对象进行筛选,你就不得不使用for循环来找出每一个子元素并加以判断，大致过程如下：</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">for</span> elem <span class=\"keyword\">in</span> list1:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> condition == <span class=\"keyword\">True</span>:</span><br><span class=\"line\">\t\t\tlist2.append(elem)</span><br><span class=\"line\">\t```\t\t</span><br><span class=\"line\">这样你就可以把所有符合判断条件的list1元素重新组合成新的列表list2中去，举个栗子:</span><br><span class=\"line\"></span><br><span class=\"line\">\t```Python</span><br><span class=\"line\">\t&gt;&gt;&gt; secretWord = <span class=\"string\">'apple'</span> </span><br><span class=\"line\">\t&gt;&gt;&gt; lettersGuessed = [<span class=\"string\">'e'</span>, <span class=\"string\">'i'</span>, <span class=\"string\">'k'</span>, <span class=\"string\">'p'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'s'</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>使用for循环来找出secretWord中重合的字母</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list2 = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> secretWord:</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> char <span class=\"keyword\">in</span> lettersGuessed:</span><br><span class=\"line\">\t\tlist2.append(char)</span><br><span class=\"line\">&gt;&gt;&gt;list2</span><br><span class=\"line\">[<span class=\"string\">'p'</span>, <span class=\"string\">'p'</span>, <span class=\"string\">'e'</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>忘了告诉你，python中的列表解析式支持条件过滤，格式如下:</p>\n<pre><code>[元素 列表解析式 if条件]\n</code></pre><p>有了这个法宝，再回头看我们刚刚的例子</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list2 = [each <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> secretWord <span class=\"keyword\">if</span> each <span class=\"keyword\">in</span> lettersGuessed]</span><br><span class=\"line\">&gt;&gt;&gt;list2</span><br><span class=\"line\">[<span class=\"string\">'p'</span>, <span class=\"string\">'p'</span>, <span class=\"string\">'e'</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>只要一行，轻轻松松。现在你觉得自己又pythonic(懒)了一分。但是我们现在要做一个猜谜游戏，如果sercretWord中字母不在lettersGuessed 中，我们要用’_‘来表示:(‘_pp_e’).然而列表解析式只支持if条件判断并不支持if…else… 好像阻挡了你pythonic(懒)的脚步，但是这是你突然想起了另一样法宝:</p>\n<p><strong>三元表达式</strong>，然后你把代码写成了这样</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list2 = [each <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> secretWord <span class=\"keyword\">if</span> each <span class=\"keyword\">in</span> lettersGuessed <span class=\"keyword\">else</span> <span class=\"string\">'_'</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>然后就报错了，python告诉你语法错误。知道了列表解析式只支持if条件而不是if..else, 而事实证明确实如此</p>\n<pre><code>[元素 列表解析式 if条件]        == **正确**\n[元素 列表解析式 if条件else]    == **错误**\n</code></pre><p>这是怎么回事，难道三元表达式和列表解析式真的不能双修吗</p>\n<p>其实不然，列表解析式挂载的if条件的方式和与三元表达式结合的方式并不一样，前者在后，后者在前:</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list2 = [each <span class=\"keyword\">if</span> each <span class=\"keyword\">in</span> lettersGuessed <span class=\"keyword\">else</span> <span class=\"string\">'_'</span> <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> secretWord]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list2</span><br><span class=\"line\">[<span class=\"string\">'_'</span>, <span class=\"string\">'p'</span>, <span class=\"string\">'p'</span>, <span class=\"string\">'_'</span>, <span class=\"string\">'e'</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>真是pythonic(懒)极了。</p>\n<p>在<strong>创建新列表</strong>或函数<strong>return</strong>时，效果极佳。</p>\n<p><strong> – End – </strong></p>\n","site":{"data":{}},"excerpt":"<p>也许你只是刚刚开始接触python, 也许你已经走上python的不归路，也许你厌倦了条件循环的换行和缩进。To be pythonic, 你不会错过每一个由繁到简的转变。本文简单介绍了python的三元表达式，列表解析式以及它们的结合用法，轻轻松松使用一行代码解决判断与循环，走上pythonic(懒)之路。</p>","more":"<p>##三元表达式<br>在学习python之前你可能已经接触过了三目运算符</p>\n<pre><code>判断条件 ？ 为真的结果 : 为假的结果\n</code></pre><p>python并没有三目运算符这样的语法，取而代之的是我们的三元表达式</p>\n<pre><code>(True) if condition else (False)\n</code></pre><p>举个栗子让我们来看看什么是三元表达式</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">5</span>;b = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">if</span> a &gt; b:</span><br><span class=\"line\"><span class=\"meta\">... </span>    c = <span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>使用三元表达式</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">5</span>;b = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c = <span class=\"keyword\">True</span> <span class=\"keyword\">if</span> a &gt; b <span class=\"keyword\">else</span> <span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>或者 </p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>condition =<span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print( <span class=\"number\">1</span> <span class=\"keyword\">if</span> condition <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>同三目运算符一样， 三元表达式不支持复杂的操作。如果三元表达式支持复杂的操作，那么将所有代码挤到一行里并不是一个明智的选择。那些简单的if statement 才是三元表达式的用武之地。</p>\n<p>##列表解析式</p>\n<p>###什么是列表解析式？</p>\n<p>列表解析式就是将任何可迭代的对象转换成列表的工具。你可以在转换过程中添加条件进行过滤，</p>\n<p>###for循环与列表解析式</p>\n<p>任何列表解析式都可以改写成for循环，因为其本事就是由for循环构成</p>\n<p>举个for循环的栗子:</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = []</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    a.append(each)</span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>如果用了列表解析式，你可以这样写</p>\n<pre><code>a = [each for each in range(5)]\n</code></pre><p>###嵌套</p>\n<p>列表解析式支持for循环嵌套，并且在列表操作上比单纯的for循环更加灵活。</p>\n<pre><code>【【 元素 子列表解析式】主列表解析式】\n</code></pre><p>假设我们需要创造一个而5x5的棋盘:</p>\n<p>使用for循环并不是那么轻松简单；</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>board = []</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    board.append([])</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>            board[row].append(<span class=\"string\">'+'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>board</span><br><span class=\"line\">[[<span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>], [<span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>], [<span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>], [<span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>], [<span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>]]</span><br></pre></td></tr></table></figure>\n</code></pre><p>注意，如果不太了解python而为数组但有C的经验的话，很可能会写出下面的代码</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">\t\t\tboard[row][col] = <span class=\"string\">'+'</span></span><br><span class=\"line\">\t```\t\t</span><br><span class=\"line\">然而这是不对的，python你并不支持通过定点赋值的方法添加新的列表元素，所以代码显得很臃肿。然而此时你已经掌握了列表解析式的嵌套</span><br><span class=\"line\"></span><br><span class=\"line\">\t```Python</span><br><span class=\"line\">\t&gt;&gt;&gt;board = [[<span class=\"string\">'+'</span> <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>)] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>)]</span><br></pre></td></tr></table></figure>\n</code></pre><p>现在你变得更pythonic(懒)了。</p>\n<p>##条件筛选（综合）</p>\n<p>如果你想对一个可迭代的对象进行筛选,你就不得不使用for循环来找出每一个子元素并加以判断，大致过程如下：</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">for</span> elem <span class=\"keyword\">in</span> list1:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> condition == <span class=\"keyword\">True</span>:</span><br><span class=\"line\">\t\t\tlist2.append(elem)</span><br><span class=\"line\">\t```\t\t</span><br><span class=\"line\">这样你就可以把所有符合判断条件的list1元素重新组合成新的列表list2中去，举个栗子:</span><br><span class=\"line\"></span><br><span class=\"line\">\t```Python</span><br><span class=\"line\">\t&gt;&gt;&gt; secretWord = <span class=\"string\">'apple'</span> </span><br><span class=\"line\">\t&gt;&gt;&gt; lettersGuessed = [<span class=\"string\">'e'</span>, <span class=\"string\">'i'</span>, <span class=\"string\">'k'</span>, <span class=\"string\">'p'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'s'</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>使用for循环来找出secretWord中重合的字母</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list2 = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> secretWord:</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> char <span class=\"keyword\">in</span> lettersGuessed:</span><br><span class=\"line\">\t\tlist2.append(char)</span><br><span class=\"line\">&gt;&gt;&gt;list2</span><br><span class=\"line\">[<span class=\"string\">'p'</span>, <span class=\"string\">'p'</span>, <span class=\"string\">'e'</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>忘了告诉你，python中的列表解析式支持条件过滤，格式如下:</p>\n<pre><code>[元素 列表解析式 if条件]\n</code></pre><p>有了这个法宝，再回头看我们刚刚的例子</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list2 = [each <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> secretWord <span class=\"keyword\">if</span> each <span class=\"keyword\">in</span> lettersGuessed]</span><br><span class=\"line\">&gt;&gt;&gt;list2</span><br><span class=\"line\">[<span class=\"string\">'p'</span>, <span class=\"string\">'p'</span>, <span class=\"string\">'e'</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>只要一行，轻轻松松。现在你觉得自己又pythonic(懒)了一分。但是我们现在要做一个猜谜游戏，如果sercretWord中字母不在lettersGuessed 中，我们要用’_‘来表示:(‘_pp_e’).然而列表解析式只支持if条件判断并不支持if…else… 好像阻挡了你pythonic(懒)的脚步，但是这是你突然想起了另一样法宝:</p>\n<p><strong>三元表达式</strong>，然后你把代码写成了这样</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list2 = [each <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> secretWord <span class=\"keyword\">if</span> each <span class=\"keyword\">in</span> lettersGuessed <span class=\"keyword\">else</span> <span class=\"string\">'_'</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>然后就报错了，python告诉你语法错误。知道了列表解析式只支持if条件而不是if..else, 而事实证明确实如此</p>\n<pre><code>[元素 列表解析式 if条件]        == **正确**\n[元素 列表解析式 if条件else]    == **错误**\n</code></pre><p>这是怎么回事，难道三元表达式和列表解析式真的不能双修吗</p>\n<p>其实不然，列表解析式挂载的if条件的方式和与三元表达式结合的方式并不一样，前者在后，后者在前:</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list2 = [each <span class=\"keyword\">if</span> each <span class=\"keyword\">in</span> lettersGuessed <span class=\"keyword\">else</span> <span class=\"string\">'_'</span> <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> secretWord]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list2</span><br><span class=\"line\">[<span class=\"string\">'_'</span>, <span class=\"string\">'p'</span>, <span class=\"string\">'p'</span>, <span class=\"string\">'_'</span>, <span class=\"string\">'e'</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>真是pythonic(懒)极了。</p>\n<p>在<strong>创建新列表</strong>或函数<strong>return</strong>时，效果极佳。</p>\n<p><strong> – End – </strong></p>"},{"title":"Python爬虫： 带你上车之爬取妹子图","date":"2016-09-27T02:00:37.000Z","_content":"\n\t\n## 简介\n\n30行python轻松爬取成百上千的妹子图到本地。没时间解释了，快上车。\n\n\n### 什么是爬虫？\n\n网络爬虫，顾名思义就是在网上爬来爬去的“虫子”，它能够按照一定规则自动抓取网络数据的脚本。比如说你找到了一个特别棒的网站，上面全是妹子图。而你想把它们存到你的随身硬盘当中。如果你要一张一张保存的话那需要比较持久的耐力，这个时候你就需要通过爬虫来帮你抓取你心心念念的妹子图。\n\n那么如何通过爬虫来完成任务呢？\n\n### 运行机制\n\n其实爬虫的工作流程和人是一样的，都需要经过下面几个步骤：\n\t\n> 使用本机的IP连接到网络 ->使用地址登入网站 ->看到网页内容 ->筛选需要的信息 -> 保存下载 -> 登入新网页 ->重复之前的动作\n\n是不是非常相似？\n\n### 为什么使用python\n\n很多编程语言都可以写爬虫，可我们为什么选择python呢？总的来说就是四个字：**简单够用**：\n\n- Python语法简单，开发效率高\n- Python 有着丰富第三方爬虫工具库(requests,scrapy,BeautifulSoup)\n- 爬虫的速度瓶颈大多是在网络阻塞上，非超大规模爬取很少遇到计算性能瓶颈\n- Python起初被用来开发搜索引擎，所以关于爬虫的资料很多，社区活跃\n\n\n让我们开始吧！\n\n<!--More-->\n\n首先先创建一个后缀为.py的python文件(名字自己想.py)\n\n## 工具准备\n\n由于这次只是一个简单的小项目，我们并不需要使用第三方库，我们需要的只有python3\n\n- Python3 \n- urllib.request\n\t熟悉python2的对urllib库一定不陌生，我们要用的是其中的urlopen方法\n- re(正则表达式)\n\t正则表达式是根据一定规则来匹配相应字符串，从网页中提取我们需要的内容\n- time 设定休眠时间，减慢爬取速度，减少对方服务器的压力\n- gzip 对于那些使用网页压缩技术的网站，我们需要将它解压\n\n来看我们第一段代码，在我们的文件开头导入需要的工具\n\n    ```Python\n\timport urllib.request\n\timport re\n\timport time\n\timport gzip\n    ```\n\n接下来我们就需要使用urllib库来登入网站\n\n## 使用urllib读取网页内容\n\n为了准备这个教程，我不(hou)辞(yan)劳(wu)苦(chi)地找来了[优妹子](http://www.youmzi.com)来作为我们今天要爬的网站。(真的是为了教学)，在下载妹子的图片之前，我们需要先分析通过网站的源代码来找出我们需要的图片链接。可能你没有学过HTML，看不懂网页的源代码，但是没关系，我们要做的事情有一半浏览器替我们做了，剩下的一半就是找!规\n!律!\n\n我们知道爬虫会增加对方服务器的压力，有的时候如果对方发现你使用的爬虫而不是用户的话，就会切断连接导致爬取中断（如果没有断点续传功能就等于失败）, 所以我们需要将我们的爬虫看起来更像用户一样。当然爬虫和反爬虫这里的内容太多这里不会做过多讲解，在这里我们需要给我们的爬虫添加header的信息,因为有些服务器会对请求的header做检查:\n\n    ```Python\n\theader = {'User-Agent':'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'}\n    ```\n\n是不是很多东西很眼熟？对了，我们发送这段请求让服务器知道我们是一个用户在使用Windows NT 6.1(就是win7) 的Firefox浏览器来浏览网页，为了不让代码看起来特别乱，我们先将它保存在一个变量中，\n\n接着我们要把网站使用字符串的形式保存在变量url中：\n\n    ```Python\n\turl = \"http://www.youmzi.com\"\n    ```\n    \n使用urllib.request的Request方法来向对方服务器发送请求,格式为（网址，［参数..])，将我们的header变量作为headers参数传递进去。\n\n    ```Python\n\trequests = urllib.request.Request(url,headers = header)\n    ```\n\n接着使用urlopen方法打开网页(刚才请求返回的结果)\n\n    ```Python\n\topened = urllib.request.urlopen(requests)\n    ```\n\n读取我们的网页内容（源代码）并解码\n\n    ```Python\n\tcontent = opened.read().decode('gbk')\n    ```\n\n这里我们使用read()方法来进行读取并在后面添加decode方法对输出结果进行解码，不同网页使用不同的编码标准，一般来说使用utf8格式，但是我们在源代码的前几行发现写着<meta charset = 'gb2312'>，这是不一样的编码方式。但是当我们使用 decode('gb2312')并不管用。你灵机一动，想到了GBK,这是一种非常常用的中文编码格式，于是就有了上面那行代码\n\n这个时候你再试图print出来content的内容，得到的就是网页源代码，当你使用浏览器的时候，右键点击网页也会出来检查源代码的选项。这就是我们获取的内容，说明你已经成功连接到了网站\n\n但是这一堆乱七八糟的字符让我怎么找到妹子图呢\n\n别着急，我们要进行非常重要的步骤，网页解析\n\n## 使用正则表达式\n\n\n### 正则表达式简介\n\n[正则表达式](http://www.runoob.com/regexp/regexp-syntax.html)是一种使用特定字符来匹配字符串的模式,它可以让我们在不确定内容的情况下进行模糊匹配。\n\n正则表达式的语法内容很多，如果想要了解更多请点击前面的链接或自行搜索。但是本着”一招在手，天下我有“的精神，我们使用经典的“.\\*?\"来进行匹配。你可能猛一看这是什么鬼，这可是我们找到妹子图的关键法宝，其中：\n\n- '.' 代表了任意字符\n- '\\*' 代表了匹配无限次\n- '?' 代表了使用非贪婪模式，尽可能少的进行匹配\n- () 有括号的会被提取，无括号的只会被用来匹配不会提取\n\n举个栗子，在'<fdakdhaf>内容<dakflahf>'这个字符串当中我们只需要匹配开头，结尾，内容两边的标志，并且使用括号标志我们需要提取的内容就可以了。\n\n    ```Html\n\t<.*?>(.*?)<.*?> \n    ```\n    \n变成人话就是\n\n\t<管他是什么>管他是什么我要了<管他是什么>\n\n### 构建我们的表达式\n\n怎么样很简单吧，现在我们就需要对网页源代码进行解析，回到浏览器，右键点击一张妹子图，然后点检查（chrome）／审查元素（Safari）。你会看到一个窗口显示网页的源代码，高亮的部分是所选内容的代码，将鼠标移动到不同的代码上，网页中会用阴影部分表示出你当前代码所展示的内容，我们来右键点击检查一张图片：\n\n    ```Html\n\t<img src=\"http://ymz.qqwmb.com/allimg/c160926/14JY6111Q560-L3G6_lit.jpg\" border=\"0\" width=\"160\" alt=\"美媛馆 [MyGirl] 2016.09.12 VOL.225 xxxxxx\">\n    ```\n\n其中jpg所标记的那个链接就是我们要的链接，但是我们不能只用双引号匹配，因为双引号内包含的内容不只有链接，所以我们尽量多描述一点来让我们的匹配更加精准。\n\n    ```Html\n\t<img src=\"(.*?)\".*?>\n    ```\n\n这样就好了嘛，还没有。img是图片标签，网站上那么多图片，你不能把网站的广告logo什么都抓下来吧，这时候你就需要移动你的鼠标找规律，在保持单个完整性的同时多向外部拓展一层，你匹配的就更准确。比如现在在img标签，外面有个a标签，鼠标放上去也指向图片，a标签外面是li标签，还是指向图片，li外面是div标签，还是..不，这次指向很多图片了，所以我们应该使用图片外面的li标签。我们来看代码\n\n    ```Html\n\t<li><a href=\"http://www.youmzi.com/12255.html\" title=\"尤果网 UGirls  Vol.205 香川颖 日系美女\" target=\"_blank\"><img src=\"http://ymz.qqwmb.com/allimg/c160922/14J54TECK0-c4X8_lit.jpg\" border=\"0\" width=\"160\" alt=\"尤果网 UGirls  Vol.205 香川颖 日系美女\" /></a><p><a href=\"http://www.youmzi.com/12255.html\" title=\"尤果网 UGirls  Vol.205 香川颖 日系美女\" target=\"_blank\"> 尤果网 UGirls  Vol.205 </a> </p></li>\n    ```\n\n头都大了，这什么啊。不要惊慌，我们发现又一个规律：除了img标签外，a,li,p标签都是\n\n    ```Html\n\t<li><a></a><p></p></li>\n    ```\n\n这个样子的，有头有尾。这样以来我们就找到头，尾和我们要的内容，然后把其他的模糊匹配掉，得到了\n\n    ```Html\n\t<li>.*?<img src=\"(.*?)\".*?</li>\n    ```\n\n正则表达式就是这么神奇。\n\n### 调用re模块\n\n有了表达式，我们就需要使用开头导入的re模块来进行解析，首先用re.compile把解析方法存入变量:\n\n\t```Html\n\trepattern = re.compile(r'<li>.*?<img src=\"(.*?)\".*?</li>',re.S)\n\t```\n\n接着使用re.findall来根据方法从源代码提取出来需要的内容\n\n\t```Python\n\tgirls_link = re.findall(repattern,content)\n\t```\n其中repattern是方法，content是我们刚刚得到的源代码，这个时候re.findall会把所有匹配到的内容放到一个列表当中并且储存到girls_link这个变量:\n\n\t[妹子图链接1，妹子图链接2 ,........]\n\n到目前为止，我们已经可以找到这一页中所有妹子图的链接了，接下来我们需要储存到本地。\n\n## 储存到本地\n\n储存的过程就很简单了，由于我们有多个链接，我们需要使用for循环来遍历列表里的所有链接。\n\n    ```Python\n\t#文件名计数器\n\tgirl = 0\n\tfor each in girls_link:\n\t\t#创建文件，文件名从零开始的数字，格式为jpg,写入方法为'wb'二进制写入\n\t\ta = open(str(girl)+'.jpg','wb')\n\t\t#使用urllib访问网页并读取内容\n\t\tb = urllib.request.Request(each,headers =header)\n\t\tc = urllib.request.urlopen(b)\n\t\te = c.read()\n\t\t#将内容写入文件\n\t\ta.write(e)\n\t\tprint(\"No. %d Girl downloaded\"%girl)\n\t\t#计数器+1,进行下一次\n\t\tgirl += 1\n\t\t#暂停一秒钟，人为降低速度\n\t\ttime.sleep(1)\n    ```\n\n这样你就可以发现和你的.py文件一起突然多出了好多图片文件，程序默认把内容保存到当前目录下。注意在上面的循环中我插入了一条print语句，这样一来方便了你日后debug需要防止死循环，二来免得你看到光标不动以为死机了，可以追踪进度。没什么事尽量降低爬取速度，不要浪费对方服务器资源。\n\n## Gzip网页解压\n\n一般来讲，到这里我们的网页内的图片就爬取好了，但是不巧，我们刚好碰到一个具有网页压缩技术的网站。是不是发现下载下来的图片是损坏的？那是因为在爬取过程中我们没有对内容进行解压。\n\nGzip是一种常见的数据压缩工具，通常用来压缩文件，后被引入网页压缩技术当中。很多时候当我们不能从网站上抓到正确的数据时，我们应该检查该网站是否使用了压缩技术，简单的方法有使用站长工具的[Gzip检测](http://tool.chinaz.com/Gzips/)\n\t\n要解压网站，我们需要在开头导入gzip模块\n\n\timport gzip\n\n然后将urlopen返回的内容进行解压，再读取就能获得正常的数据\n\n\n    ```Python\n\tfor each in girls_link:\n\t\ta = open(str(girl)+'.jpg','wb')\n\t\tb = urllib.request.Request(each,headers = {\"Accept-Encoding\": \"gzip\"})\n\t\tc = urllib.request.urlopen(b)\n\t\td = gzip.GzipFile(fileobj = c)\n\t\te = d.read()\n\t\ta.write(e)\n\t\tprint(\"No. %d Girl downloaded\"%girl)\n\t\tgirl += 1\n    ```\n\n\n所以现在它可以称得上是一只爬虫了吗，not yet.\n\n## 网页跳转\n\n不会爬的爬虫不能叫爬虫，爬虫具有一定的网页跳转能力。可以自动地移动到新的页面才能进行大规模地数据爬取。对于点进来看这篇文章的你们，显然一页的图片并不能满足你们嘿嘿嘿嘿嘿。。\n\n我们来看首页，首页只展示了一部分图片，并没有预期中的2,3,4..分页页码出现。但是我们看到有个'更多妹子图'可以点击，点击之后，页面跳转到\n\n\thttp://www.youmzi.com/xg/\n\n完全没有头绪，但是事实上第一页的页码**通常被隐藏**，所以我们需要进入下一页，\n\n\thttp://www.youmzi.com/xg/list_10_2.html\n\n再下一页:\n\n\thttp://www.youmzi.com/xg/list_10_3.html\n\n是不是找到了什么规律？我们试着用这个规律来返回到第一页:\n\n\thttp://www.youmzi.com/xg/list_10_1.html\n\n没错，我们成功返回到了第一页，同时验证了第一页的页码**通常被隐藏**的真理。我们找到了规律，就可以按套路在外面加一个循环，首先先把我们前面的url变量从首页改为\n\n\turl = \"http://www.youmzi.com/xg/list_10_%d.html\"%page\n\npage就是我们的要爬的页面数字，初始值我们设为1，然后可以使用input来设定上限作为循环条件，这里我们使用while循环会更简单\n\n\n    ```Python\n\tpages = int(input(\"Please enter the pages you want: \"))\n\tpage = 1\n\tgirl = 0\n\twhile page <= pages:\n\t\turl = \"http://www.youmzi.com/xg/list_10_%d.html\"%page\n\t\trequests = urllib.request.Request(url,headers =header)\n\t\t.....\n\t\t...\n    ```\n\n要注意的是，刚才在for循环那里设置的girl＝ 0一定要放在while前面，否则爬取图片的时候，第二页会覆盖第一页的内容。\n\n再用函数包装一下，一个简单的抓妹子图的脚本就出来了\n\n## 完整代码\n\n\n    ```Python\n\timport urllib.request\n\timport re\n\timport time\n\timport gzip\n\n\tdef youmeizi():\n\t\theader = {\n\t\t\t'User-Agent':'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'\n\t\t\t}\n\t\tgirl = 0\n\t\tpages = int(input(\"Please enter the pages you want: \"))\n\t\tgirls_basket = []\n\t\tpage = 1\n\t\twhile page <= pages:\n\t\t\turl = \"http://www.youmzi.com/xg/list_10_%d.html\"%page\n\t\t\trequests = urllib.request.Request(url,headers =header)\n\t\t\topened = urllib.request.urlopen(requests)\n\t\t\tcontent= opened.read().decode('gbk')\n\t\t\trepattern = re.compile(r'<li>.*?<img src=\"(.*?)\".*?</li>',re.S)\n\t\t\tgirls_link = re.findall(repattern,content)\n\t\t\tfor each in girls_link:\n\t\t\t\ta = open(str(girl)+'.jpg','wb')\n\t\t\t\tb = urllib.request.Request(each,headers = {\"Accept-Encoding\": \"gzip\"})\n\t\t\t\tc = urllib.request.urlopen(b)\n\t\t\t\td = gzip.GzipFile(fileobj = c)\n\t\t\t\te = d.read()\n\t\t\t\ta.write(e)\n\t\t\t\tprint(\"No. %d Girl downloaded\"%girl)\n\t\t\t\tgirl += 1\n\t\t\t\ttime.sleep(1)\t\n\n\tyoumeizi()\n    ```\n\n\n最后再次重申一下，在练习爬虫的过程当中。尽量要做一个温柔的人，温柔对待服务器的人:\n\n- 在练习爬虫的的时候，爬个几页十几页成功了就行，如果只是练习，没有必要几百页几百页地爬，造成对方服务器资源浪费。\n- 在时间宽松的情况下，尽量添加sleep减少对方服务器压力\n- 需要大规模爬的时候，尽量避开高峰期，在晚上服务器压力小的时候爬取可以避免对方服务器高负载。\n\n况且那么多妹子图，\n\n**看得过来嘛**\n\n","source":"_posts/crawler-1.md","raw":"---\ntitle: Python爬虫： 带你上车之爬取妹子图\ndate: 2016-09-27 10:00:37\ntags:\ncategories: Python\n---\n\n\t\n## 简介\n\n30行python轻松爬取成百上千的妹子图到本地。没时间解释了，快上车。\n\n\n### 什么是爬虫？\n\n网络爬虫，顾名思义就是在网上爬来爬去的“虫子”，它能够按照一定规则自动抓取网络数据的脚本。比如说你找到了一个特别棒的网站，上面全是妹子图。而你想把它们存到你的随身硬盘当中。如果你要一张一张保存的话那需要比较持久的耐力，这个时候你就需要通过爬虫来帮你抓取你心心念念的妹子图。\n\n那么如何通过爬虫来完成任务呢？\n\n### 运行机制\n\n其实爬虫的工作流程和人是一样的，都需要经过下面几个步骤：\n\t\n> 使用本机的IP连接到网络 ->使用地址登入网站 ->看到网页内容 ->筛选需要的信息 -> 保存下载 -> 登入新网页 ->重复之前的动作\n\n是不是非常相似？\n\n### 为什么使用python\n\n很多编程语言都可以写爬虫，可我们为什么选择python呢？总的来说就是四个字：**简单够用**：\n\n- Python语法简单，开发效率高\n- Python 有着丰富第三方爬虫工具库(requests,scrapy,BeautifulSoup)\n- 爬虫的速度瓶颈大多是在网络阻塞上，非超大规模爬取很少遇到计算性能瓶颈\n- Python起初被用来开发搜索引擎，所以关于爬虫的资料很多，社区活跃\n\n\n让我们开始吧！\n\n<!--More-->\n\n首先先创建一个后缀为.py的python文件(名字自己想.py)\n\n## 工具准备\n\n由于这次只是一个简单的小项目，我们并不需要使用第三方库，我们需要的只有python3\n\n- Python3 \n- urllib.request\n\t熟悉python2的对urllib库一定不陌生，我们要用的是其中的urlopen方法\n- re(正则表达式)\n\t正则表达式是根据一定规则来匹配相应字符串，从网页中提取我们需要的内容\n- time 设定休眠时间，减慢爬取速度，减少对方服务器的压力\n- gzip 对于那些使用网页压缩技术的网站，我们需要将它解压\n\n来看我们第一段代码，在我们的文件开头导入需要的工具\n\n    ```Python\n\timport urllib.request\n\timport re\n\timport time\n\timport gzip\n    ```\n\n接下来我们就需要使用urllib库来登入网站\n\n## 使用urllib读取网页内容\n\n为了准备这个教程，我不(hou)辞(yan)劳(wu)苦(chi)地找来了[优妹子](http://www.youmzi.com)来作为我们今天要爬的网站。(真的是为了教学)，在下载妹子的图片之前，我们需要先分析通过网站的源代码来找出我们需要的图片链接。可能你没有学过HTML，看不懂网页的源代码，但是没关系，我们要做的事情有一半浏览器替我们做了，剩下的一半就是找!规\n!律!\n\n我们知道爬虫会增加对方服务器的压力，有的时候如果对方发现你使用的爬虫而不是用户的话，就会切断连接导致爬取中断（如果没有断点续传功能就等于失败）, 所以我们需要将我们的爬虫看起来更像用户一样。当然爬虫和反爬虫这里的内容太多这里不会做过多讲解，在这里我们需要给我们的爬虫添加header的信息,因为有些服务器会对请求的header做检查:\n\n    ```Python\n\theader = {'User-Agent':'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'}\n    ```\n\n是不是很多东西很眼熟？对了，我们发送这段请求让服务器知道我们是一个用户在使用Windows NT 6.1(就是win7) 的Firefox浏览器来浏览网页，为了不让代码看起来特别乱，我们先将它保存在一个变量中，\n\n接着我们要把网站使用字符串的形式保存在变量url中：\n\n    ```Python\n\turl = \"http://www.youmzi.com\"\n    ```\n    \n使用urllib.request的Request方法来向对方服务器发送请求,格式为（网址，［参数..])，将我们的header变量作为headers参数传递进去。\n\n    ```Python\n\trequests = urllib.request.Request(url,headers = header)\n    ```\n\n接着使用urlopen方法打开网页(刚才请求返回的结果)\n\n    ```Python\n\topened = urllib.request.urlopen(requests)\n    ```\n\n读取我们的网页内容（源代码）并解码\n\n    ```Python\n\tcontent = opened.read().decode('gbk')\n    ```\n\n这里我们使用read()方法来进行读取并在后面添加decode方法对输出结果进行解码，不同网页使用不同的编码标准，一般来说使用utf8格式，但是我们在源代码的前几行发现写着<meta charset = 'gb2312'>，这是不一样的编码方式。但是当我们使用 decode('gb2312')并不管用。你灵机一动，想到了GBK,这是一种非常常用的中文编码格式，于是就有了上面那行代码\n\n这个时候你再试图print出来content的内容，得到的就是网页源代码，当你使用浏览器的时候，右键点击网页也会出来检查源代码的选项。这就是我们获取的内容，说明你已经成功连接到了网站\n\n但是这一堆乱七八糟的字符让我怎么找到妹子图呢\n\n别着急，我们要进行非常重要的步骤，网页解析\n\n## 使用正则表达式\n\n\n### 正则表达式简介\n\n[正则表达式](http://www.runoob.com/regexp/regexp-syntax.html)是一种使用特定字符来匹配字符串的模式,它可以让我们在不确定内容的情况下进行模糊匹配。\n\n正则表达式的语法内容很多，如果想要了解更多请点击前面的链接或自行搜索。但是本着”一招在手，天下我有“的精神，我们使用经典的“.\\*?\"来进行匹配。你可能猛一看这是什么鬼，这可是我们找到妹子图的关键法宝，其中：\n\n- '.' 代表了任意字符\n- '\\*' 代表了匹配无限次\n- '?' 代表了使用非贪婪模式，尽可能少的进行匹配\n- () 有括号的会被提取，无括号的只会被用来匹配不会提取\n\n举个栗子，在'<fdakdhaf>内容<dakflahf>'这个字符串当中我们只需要匹配开头，结尾，内容两边的标志，并且使用括号标志我们需要提取的内容就可以了。\n\n    ```Html\n\t<.*?>(.*?)<.*?> \n    ```\n    \n变成人话就是\n\n\t<管他是什么>管他是什么我要了<管他是什么>\n\n### 构建我们的表达式\n\n怎么样很简单吧，现在我们就需要对网页源代码进行解析，回到浏览器，右键点击一张妹子图，然后点检查（chrome）／审查元素（Safari）。你会看到一个窗口显示网页的源代码，高亮的部分是所选内容的代码，将鼠标移动到不同的代码上，网页中会用阴影部分表示出你当前代码所展示的内容，我们来右键点击检查一张图片：\n\n    ```Html\n\t<img src=\"http://ymz.qqwmb.com/allimg/c160926/14JY6111Q560-L3G6_lit.jpg\" border=\"0\" width=\"160\" alt=\"美媛馆 [MyGirl] 2016.09.12 VOL.225 xxxxxx\">\n    ```\n\n其中jpg所标记的那个链接就是我们要的链接，但是我们不能只用双引号匹配，因为双引号内包含的内容不只有链接，所以我们尽量多描述一点来让我们的匹配更加精准。\n\n    ```Html\n\t<img src=\"(.*?)\".*?>\n    ```\n\n这样就好了嘛，还没有。img是图片标签，网站上那么多图片，你不能把网站的广告logo什么都抓下来吧，这时候你就需要移动你的鼠标找规律，在保持单个完整性的同时多向外部拓展一层，你匹配的就更准确。比如现在在img标签，外面有个a标签，鼠标放上去也指向图片，a标签外面是li标签，还是指向图片，li外面是div标签，还是..不，这次指向很多图片了，所以我们应该使用图片外面的li标签。我们来看代码\n\n    ```Html\n\t<li><a href=\"http://www.youmzi.com/12255.html\" title=\"尤果网 UGirls  Vol.205 香川颖 日系美女\" target=\"_blank\"><img src=\"http://ymz.qqwmb.com/allimg/c160922/14J54TECK0-c4X8_lit.jpg\" border=\"0\" width=\"160\" alt=\"尤果网 UGirls  Vol.205 香川颖 日系美女\" /></a><p><a href=\"http://www.youmzi.com/12255.html\" title=\"尤果网 UGirls  Vol.205 香川颖 日系美女\" target=\"_blank\"> 尤果网 UGirls  Vol.205 </a> </p></li>\n    ```\n\n头都大了，这什么啊。不要惊慌，我们发现又一个规律：除了img标签外，a,li,p标签都是\n\n    ```Html\n\t<li><a></a><p></p></li>\n    ```\n\n这个样子的，有头有尾。这样以来我们就找到头，尾和我们要的内容，然后把其他的模糊匹配掉，得到了\n\n    ```Html\n\t<li>.*?<img src=\"(.*?)\".*?</li>\n    ```\n\n正则表达式就是这么神奇。\n\n### 调用re模块\n\n有了表达式，我们就需要使用开头导入的re模块来进行解析，首先用re.compile把解析方法存入变量:\n\n\t```Html\n\trepattern = re.compile(r'<li>.*?<img src=\"(.*?)\".*?</li>',re.S)\n\t```\n\n接着使用re.findall来根据方法从源代码提取出来需要的内容\n\n\t```Python\n\tgirls_link = re.findall(repattern,content)\n\t```\n其中repattern是方法，content是我们刚刚得到的源代码，这个时候re.findall会把所有匹配到的内容放到一个列表当中并且储存到girls_link这个变量:\n\n\t[妹子图链接1，妹子图链接2 ,........]\n\n到目前为止，我们已经可以找到这一页中所有妹子图的链接了，接下来我们需要储存到本地。\n\n## 储存到本地\n\n储存的过程就很简单了，由于我们有多个链接，我们需要使用for循环来遍历列表里的所有链接。\n\n    ```Python\n\t#文件名计数器\n\tgirl = 0\n\tfor each in girls_link:\n\t\t#创建文件，文件名从零开始的数字，格式为jpg,写入方法为'wb'二进制写入\n\t\ta = open(str(girl)+'.jpg','wb')\n\t\t#使用urllib访问网页并读取内容\n\t\tb = urllib.request.Request(each,headers =header)\n\t\tc = urllib.request.urlopen(b)\n\t\te = c.read()\n\t\t#将内容写入文件\n\t\ta.write(e)\n\t\tprint(\"No. %d Girl downloaded\"%girl)\n\t\t#计数器+1,进行下一次\n\t\tgirl += 1\n\t\t#暂停一秒钟，人为降低速度\n\t\ttime.sleep(1)\n    ```\n\n这样你就可以发现和你的.py文件一起突然多出了好多图片文件，程序默认把内容保存到当前目录下。注意在上面的循环中我插入了一条print语句，这样一来方便了你日后debug需要防止死循环，二来免得你看到光标不动以为死机了，可以追踪进度。没什么事尽量降低爬取速度，不要浪费对方服务器资源。\n\n## Gzip网页解压\n\n一般来讲，到这里我们的网页内的图片就爬取好了，但是不巧，我们刚好碰到一个具有网页压缩技术的网站。是不是发现下载下来的图片是损坏的？那是因为在爬取过程中我们没有对内容进行解压。\n\nGzip是一种常见的数据压缩工具，通常用来压缩文件，后被引入网页压缩技术当中。很多时候当我们不能从网站上抓到正确的数据时，我们应该检查该网站是否使用了压缩技术，简单的方法有使用站长工具的[Gzip检测](http://tool.chinaz.com/Gzips/)\n\t\n要解压网站，我们需要在开头导入gzip模块\n\n\timport gzip\n\n然后将urlopen返回的内容进行解压，再读取就能获得正常的数据\n\n\n    ```Python\n\tfor each in girls_link:\n\t\ta = open(str(girl)+'.jpg','wb')\n\t\tb = urllib.request.Request(each,headers = {\"Accept-Encoding\": \"gzip\"})\n\t\tc = urllib.request.urlopen(b)\n\t\td = gzip.GzipFile(fileobj = c)\n\t\te = d.read()\n\t\ta.write(e)\n\t\tprint(\"No. %d Girl downloaded\"%girl)\n\t\tgirl += 1\n    ```\n\n\n所以现在它可以称得上是一只爬虫了吗，not yet.\n\n## 网页跳转\n\n不会爬的爬虫不能叫爬虫，爬虫具有一定的网页跳转能力。可以自动地移动到新的页面才能进行大规模地数据爬取。对于点进来看这篇文章的你们，显然一页的图片并不能满足你们嘿嘿嘿嘿嘿。。\n\n我们来看首页，首页只展示了一部分图片，并没有预期中的2,3,4..分页页码出现。但是我们看到有个'更多妹子图'可以点击，点击之后，页面跳转到\n\n\thttp://www.youmzi.com/xg/\n\n完全没有头绪，但是事实上第一页的页码**通常被隐藏**，所以我们需要进入下一页，\n\n\thttp://www.youmzi.com/xg/list_10_2.html\n\n再下一页:\n\n\thttp://www.youmzi.com/xg/list_10_3.html\n\n是不是找到了什么规律？我们试着用这个规律来返回到第一页:\n\n\thttp://www.youmzi.com/xg/list_10_1.html\n\n没错，我们成功返回到了第一页，同时验证了第一页的页码**通常被隐藏**的真理。我们找到了规律，就可以按套路在外面加一个循环，首先先把我们前面的url变量从首页改为\n\n\turl = \"http://www.youmzi.com/xg/list_10_%d.html\"%page\n\npage就是我们的要爬的页面数字，初始值我们设为1，然后可以使用input来设定上限作为循环条件，这里我们使用while循环会更简单\n\n\n    ```Python\n\tpages = int(input(\"Please enter the pages you want: \"))\n\tpage = 1\n\tgirl = 0\n\twhile page <= pages:\n\t\turl = \"http://www.youmzi.com/xg/list_10_%d.html\"%page\n\t\trequests = urllib.request.Request(url,headers =header)\n\t\t.....\n\t\t...\n    ```\n\n要注意的是，刚才在for循环那里设置的girl＝ 0一定要放在while前面，否则爬取图片的时候，第二页会覆盖第一页的内容。\n\n再用函数包装一下，一个简单的抓妹子图的脚本就出来了\n\n## 完整代码\n\n\n    ```Python\n\timport urllib.request\n\timport re\n\timport time\n\timport gzip\n\n\tdef youmeizi():\n\t\theader = {\n\t\t\t'User-Agent':'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'\n\t\t\t}\n\t\tgirl = 0\n\t\tpages = int(input(\"Please enter the pages you want: \"))\n\t\tgirls_basket = []\n\t\tpage = 1\n\t\twhile page <= pages:\n\t\t\turl = \"http://www.youmzi.com/xg/list_10_%d.html\"%page\n\t\t\trequests = urllib.request.Request(url,headers =header)\n\t\t\topened = urllib.request.urlopen(requests)\n\t\t\tcontent= opened.read().decode('gbk')\n\t\t\trepattern = re.compile(r'<li>.*?<img src=\"(.*?)\".*?</li>',re.S)\n\t\t\tgirls_link = re.findall(repattern,content)\n\t\t\tfor each in girls_link:\n\t\t\t\ta = open(str(girl)+'.jpg','wb')\n\t\t\t\tb = urllib.request.Request(each,headers = {\"Accept-Encoding\": \"gzip\"})\n\t\t\t\tc = urllib.request.urlopen(b)\n\t\t\t\td = gzip.GzipFile(fileobj = c)\n\t\t\t\te = d.read()\n\t\t\t\ta.write(e)\n\t\t\t\tprint(\"No. %d Girl downloaded\"%girl)\n\t\t\t\tgirl += 1\n\t\t\t\ttime.sleep(1)\t\n\n\tyoumeizi()\n    ```\n\n\n最后再次重申一下，在练习爬虫的过程当中。尽量要做一个温柔的人，温柔对待服务器的人:\n\n- 在练习爬虫的的时候，爬个几页十几页成功了就行，如果只是练习，没有必要几百页几百页地爬，造成对方服务器资源浪费。\n- 在时间宽松的情况下，尽量添加sleep减少对方服务器压力\n- 需要大规模爬的时候，尽量避开高峰期，在晚上服务器压力小的时候爬取可以避免对方服务器高负载。\n\n况且那么多妹子图，\n\n**看得过来嘛**\n\n","slug":"crawler-1","published":1,"updated":"2018-06-22T03:08:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiqvlnw9000pglu3vvb8y0p1","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>30行python轻松爬取成百上千的妹子图到本地。没时间解释了，快上车。</p>\n<h3 id=\"什么是爬虫？\"><a href=\"#什么是爬虫？\" class=\"headerlink\" title=\"什么是爬虫？\"></a>什么是爬虫？</h3><p>网络爬虫，顾名思义就是在网上爬来爬去的“虫子”，它能够按照一定规则自动抓取网络数据的脚本。比如说你找到了一个特别棒的网站，上面全是妹子图。而你想把它们存到你的随身硬盘当中。如果你要一张一张保存的话那需要比较持久的耐力，这个时候你就需要通过爬虫来帮你抓取你心心念念的妹子图。</p>\n<p>那么如何通过爬虫来完成任务呢？</p>\n<h3 id=\"运行机制\"><a href=\"#运行机制\" class=\"headerlink\" title=\"运行机制\"></a>运行机制</h3><p>其实爬虫的工作流程和人是一样的，都需要经过下面几个步骤：</p>\n<blockquote>\n<p>使用本机的IP连接到网络 -&gt;使用地址登入网站 -&gt;看到网页内容 -&gt;筛选需要的信息 -&gt; 保存下载 -&gt; 登入新网页 -&gt;重复之前的动作</p>\n</blockquote>\n<p>是不是非常相似？</p>\n<h3 id=\"为什么使用python\"><a href=\"#为什么使用python\" class=\"headerlink\" title=\"为什么使用python\"></a>为什么使用python</h3><p>很多编程语言都可以写爬虫，可我们为什么选择python呢？总的来说就是四个字：<strong>简单够用</strong>：</p>\n<ul>\n<li>Python语法简单，开发效率高</li>\n<li>Python 有着丰富第三方爬虫工具库(requests,scrapy,BeautifulSoup)</li>\n<li>爬虫的速度瓶颈大多是在网络阻塞上，非超大规模爬取很少遇到计算性能瓶颈</li>\n<li>Python起初被用来开发搜索引擎，所以关于爬虫的资料很多，社区活跃</li>\n</ul>\n<p>让我们开始吧！</p>\n<a id=\"more\"></a>\n<p>首先先创建一个后缀为.py的python文件(名字自己想.py)</p>\n<h2 id=\"工具准备\"><a href=\"#工具准备\" class=\"headerlink\" title=\"工具准备\"></a>工具准备</h2><p>由于这次只是一个简单的小项目，我们并不需要使用第三方库，我们需要的只有python3</p>\n<ul>\n<li>Python3 </li>\n<li>urllib.request<br>  熟悉python2的对urllib库一定不陌生，我们要用的是其中的urlopen方法</li>\n<li>re(正则表达式)<br>  正则表达式是根据一定规则来匹配相应字符串，从网页中提取我们需要的内容</li>\n<li>time 设定休眠时间，减慢爬取速度，减少对方服务器的压力</li>\n<li>gzip 对于那些使用网页压缩技术的网站，我们需要将它解压</li>\n</ul>\n<p>来看我们第一段代码，在我们的文件开头导入需要的工具</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> gzip</span><br></pre></td></tr></table></figure>\n</code></pre><p>接下来我们就需要使用urllib库来登入网站</p>\n<h2 id=\"使用urllib读取网页内容\"><a href=\"#使用urllib读取网页内容\" class=\"headerlink\" title=\"使用urllib读取网页内容\"></a>使用urllib读取网页内容</h2><p>为了准备这个教程，我不(hou)辞(yan)劳(wu)苦(chi)地找来了<a href=\"http://www.youmzi.com\" target=\"_blank\" rel=\"noopener\">优妹子</a>来作为我们今天要爬的网站。(真的是为了教学)，在下载妹子的图片之前，我们需要先分析通过网站的源代码来找出我们需要的图片链接。可能你没有学过HTML，看不懂网页的源代码，但是没关系，我们要做的事情有一半浏览器替我们做了，剩下的一半就是找!规<br>!律!</p>\n<p>我们知道爬虫会增加对方服务器的压力，有的时候如果对方发现你使用的爬虫而不是用户的话，就会切断连接导致爬取中断（如果没有断点续传功能就等于失败）, 所以我们需要将我们的爬虫看起来更像用户一样。当然爬虫和反爬虫这里的内容太多这里不会做过多讲解，在这里我们需要给我们的爬虫添加header的信息,因为有些服务器会对请求的header做检查:</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header = &#123;<span class=\"string\">'User-Agent'</span>:<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'</span>&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><p>是不是很多东西很眼熟？对了，我们发送这段请求让服务器知道我们是一个用户在使用Windows NT 6.1(就是win7) 的Firefox浏览器来浏览网页，为了不让代码看起来特别乱，我们先将它保存在一个变量中，</p>\n<p>接着我们要把网站使用字符串的形式保存在变量url中：</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url = <span class=\"string\">\"http://www.youmzi.com\"</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>使用urllib.request的Request方法来向对方服务器发送请求,格式为（网址，［参数..])，将我们的header变量作为headers参数传递进去。</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requests = urllib.request.Request(url,headers = header)</span><br></pre></td></tr></table></figure>\n</code></pre><p>接着使用urlopen方法打开网页(刚才请求返回的结果)</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opened = urllib.request.urlopen(requests)</span><br></pre></td></tr></table></figure>\n</code></pre><p>读取我们的网页内容（源代码）并解码</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">content = opened.read().decode(<span class=\"string\">'gbk'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>这里我们使用read()方法来进行读取并在后面添加decode方法对输出结果进行解码，不同网页使用不同的编码标准，一般来说使用utf8格式，但是我们在源代码的前几行发现写着<meta charset=\"gb2312\">，这是不一样的编码方式。但是当我们使用 decode(‘gb2312’)并不管用。你灵机一动，想到了GBK,这是一种非常常用的中文编码格式，于是就有了上面那行代码</p>\n<p>这个时候你再试图print出来content的内容，得到的就是网页源代码，当你使用浏览器的时候，右键点击网页也会出来检查源代码的选项。这就是我们获取的内容，说明你已经成功连接到了网站</p>\n<p>但是这一堆乱七八糟的字符让我怎么找到妹子图呢</p>\n<p>别着急，我们要进行非常重要的步骤，网页解析</p>\n<h2 id=\"使用正则表达式\"><a href=\"#使用正则表达式\" class=\"headerlink\" title=\"使用正则表达式\"></a>使用正则表达式</h2><h3 id=\"正则表达式简介\"><a href=\"#正则表达式简介\" class=\"headerlink\" title=\"正则表达式简介\"></a>正则表达式简介</h3><p><a href=\"http://www.runoob.com/regexp/regexp-syntax.html\" target=\"_blank\" rel=\"noopener\">正则表达式</a>是一种使用特定字符来匹配字符串的模式,它可以让我们在不确定内容的情况下进行模糊匹配。</p>\n<p>正则表达式的语法内容很多，如果想要了解更多请点击前面的链接或自行搜索。但是本着”一招在手，天下我有“的精神，我们使用经典的“.*?”来进行匹配。你可能猛一看这是什么鬼，这可是我们找到妹子图的关键法宝，其中：</p>\n<ul>\n<li>‘.’ 代表了任意字符</li>\n<li>‘*‘ 代表了匹配无限次</li>\n<li>‘?’ 代表了使用非贪婪模式，尽可能少的进行匹配</li>\n<li>() 有括号的会被提取，无括号的只会被用来匹配不会提取</li>\n</ul>\n<p>举个栗子，在’<fdakdhaf>内容<dakflahf>‘这个字符串当中我们只需要匹配开头，结尾，内容两边的标志，并且使用括号标志我们需要提取的内容就可以了。</dakflahf></fdakdhaf></p>\n<pre><code><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">.*?</span>&gt;</span>(.*?)<span class=\"tag\">&lt;<span class=\"name\">.*?</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>变成人话就是</p>\n<pre><code>&lt;管他是什么&gt;管他是什么我要了&lt;管他是什么&gt;\n</code></pre><h3 id=\"构建我们的表达式\"><a href=\"#构建我们的表达式\" class=\"headerlink\" title=\"构建我们的表达式\"></a>构建我们的表达式</h3><p>怎么样很简单吧，现在我们就需要对网页源代码进行解析，回到浏览器，右键点击一张妹子图，然后点检查（chrome）／审查元素（Safari）。你会看到一个窗口显示网页的源代码，高亮的部分是所选内容的代码，将鼠标移动到不同的代码上，网页中会用阴影部分表示出你当前代码所展示的内容，我们来右键点击检查一张图片：</p>\n<pre><code><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://ymz.qqwmb.com/allimg/c160926/14JY6111Q560-L3G6_lit.jpg\"</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"160\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"美媛馆 [MyGirl] 2016.09.12 VOL.225 xxxxxx\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>其中jpg所标记的那个链接就是我们要的链接，但是我们不能只用双引号匹配，因为双引号内包含的内容不只有链接，所以我们尽量多描述一点来让我们的匹配更加精准。</p>\n<pre><code><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"(.*?)\"</span><span class=\"attr\">.</span>*?&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>这样就好了嘛，还没有。img是图片标签，网站上那么多图片，你不能把网站的广告logo什么都抓下来吧，这时候你就需要移动你的鼠标找规律，在保持单个完整性的同时多向外部拓展一层，你匹配的就更准确。比如现在在img标签，外面有个a标签，鼠标放上去也指向图片，a标签外面是li标签，还是指向图片，li外面是div标签，还是..不，这次指向很多图片了，所以我们应该使用图片外面的li标签。我们来看代码</p>\n<pre><code><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.youmzi.com/12255.html\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"尤果网 UGirls  Vol.205 香川颖 日系美女\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://ymz.qqwmb.com/allimg/c160922/14J54TECK0-c4X8_lit.jpg\"</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"160\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"尤果网 UGirls  Vol.205 香川颖 日系美女\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.youmzi.com/12255.html\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"尤果网 UGirls  Vol.205 香川颖 日系美女\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span> 尤果网 UGirls  Vol.205 <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>头都大了，这什么啊。不要惊慌，我们发现又一个规律：除了img标签外，a,li,p标签都是</p>\n<pre><code><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>这个样子的，有头有尾。这样以来我们就找到头，尾和我们要的内容，然后把其他的模糊匹配掉，得到了</p>\n<pre><code><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li&gt;.*?&lt;img src=\"(.*?)\".*?&lt;/li&gt;</span><br></pre></td></tr></table></figure>\n</code></pre><p>正则表达式就是这么神奇。</p>\n<h3 id=\"调用re模块\"><a href=\"#调用re模块\" class=\"headerlink\" title=\"调用re模块\"></a>调用re模块</h3><p>有了表达式，我们就需要使用开头导入的re模块来进行解析，首先用re.compile把解析方法存入变量:</p>\n<pre><code><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repattern = re.compile(r'&lt;li&gt;.*?&lt;img src=\"(.*?)\".*?&lt;/li&gt;',re.S)</span><br></pre></td></tr></table></figure>\n</code></pre><p>接着使用re.findall来根据方法从源代码提取出来需要的内容</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">girls_link = re.findall(repattern,content)</span><br></pre></td></tr></table></figure>\n</code></pre><p>其中repattern是方法，content是我们刚刚得到的源代码，这个时候re.findall会把所有匹配到的内容放到一个列表当中并且储存到girls_link这个变量:</p>\n<pre><code>[妹子图链接1，妹子图链接2 ,........]\n</code></pre><p>到目前为止，我们已经可以找到这一页中所有妹子图的链接了，接下来我们需要储存到本地。</p>\n<h2 id=\"储存到本地\"><a href=\"#储存到本地\" class=\"headerlink\" title=\"储存到本地\"></a>储存到本地</h2><p>储存的过程就很简单了，由于我们有多个链接，我们需要使用for循环来遍历列表里的所有链接。</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#文件名计数器</span></span><br><span class=\"line\">girl = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> girls_link:</span><br><span class=\"line\">\t<span class=\"comment\">#创建文件，文件名从零开始的数字，格式为jpg,写入方法为'wb'二进制写入</span></span><br><span class=\"line\">\ta = open(str(girl)+<span class=\"string\">'.jpg'</span>,<span class=\"string\">'wb'</span>)</span><br><span class=\"line\">\t<span class=\"comment\">#使用urllib访问网页并读取内容</span></span><br><span class=\"line\">\tb = urllib.request.Request(each,headers =header)</span><br><span class=\"line\">\tc = urllib.request.urlopen(b)</span><br><span class=\"line\">\te = c.read()</span><br><span class=\"line\">\t<span class=\"comment\">#将内容写入文件</span></span><br><span class=\"line\">\ta.write(e)</span><br><span class=\"line\">\tprint(<span class=\"string\">\"No. %d Girl downloaded\"</span>%girl)</span><br><span class=\"line\">\t<span class=\"comment\">#计数器+1,进行下一次</span></span><br><span class=\"line\">\tgirl += <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"comment\">#暂停一秒钟，人为降低速度</span></span><br><span class=\"line\">\ttime.sleep(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>这样你就可以发现和你的.py文件一起突然多出了好多图片文件，程序默认把内容保存到当前目录下。注意在上面的循环中我插入了一条print语句，这样一来方便了你日后debug需要防止死循环，二来免得你看到光标不动以为死机了，可以追踪进度。没什么事尽量降低爬取速度，不要浪费对方服务器资源。</p>\n<h2 id=\"Gzip网页解压\"><a href=\"#Gzip网页解压\" class=\"headerlink\" title=\"Gzip网页解压\"></a>Gzip网页解压</h2><p>一般来讲，到这里我们的网页内的图片就爬取好了，但是不巧，我们刚好碰到一个具有网页压缩技术的网站。是不是发现下载下来的图片是损坏的？那是因为在爬取过程中我们没有对内容进行解压。</p>\n<p>Gzip是一种常见的数据压缩工具，通常用来压缩文件，后被引入网页压缩技术当中。很多时候当我们不能从网站上抓到正确的数据时，我们应该检查该网站是否使用了压缩技术，简单的方法有使用站长工具的<a href=\"http://tool.chinaz.com/Gzips/\" target=\"_blank\" rel=\"noopener\">Gzip检测</a></p>\n<p>要解压网站，我们需要在开头导入gzip模块</p>\n<pre><code>import gzip\n</code></pre><p>然后将urlopen返回的内容进行解压，再读取就能获得正常的数据</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> girls_link:</span><br><span class=\"line\">\ta = open(str(girl)+<span class=\"string\">'.jpg'</span>,<span class=\"string\">'wb'</span>)</span><br><span class=\"line\">\tb = urllib.request.Request(each,headers = &#123;<span class=\"string\">\"Accept-Encoding\"</span>: <span class=\"string\">\"gzip\"</span>&#125;)</span><br><span class=\"line\">\tc = urllib.request.urlopen(b)</span><br><span class=\"line\">\td = gzip.GzipFile(fileobj = c)</span><br><span class=\"line\">\te = d.read()</span><br><span class=\"line\">\ta.write(e)</span><br><span class=\"line\">\tprint(<span class=\"string\">\"No. %d Girl downloaded\"</span>%girl)</span><br><span class=\"line\">\tgirl += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>所以现在它可以称得上是一只爬虫了吗，not yet.</p>\n<h2 id=\"网页跳转\"><a href=\"#网页跳转\" class=\"headerlink\" title=\"网页跳转\"></a>网页跳转</h2><p>不会爬的爬虫不能叫爬虫，爬虫具有一定的网页跳转能力。可以自动地移动到新的页面才能进行大规模地数据爬取。对于点进来看这篇文章的你们，显然一页的图片并不能满足你们嘿嘿嘿嘿嘿。。</p>\n<p>我们来看首页，首页只展示了一部分图片，并没有预期中的2,3,4..分页页码出现。但是我们看到有个’更多妹子图’可以点击，点击之后，页面跳转到</p>\n<pre><code>http://www.youmzi.com/xg/\n</code></pre><p>完全没有头绪，但是事实上第一页的页码<strong>通常被隐藏</strong>，所以我们需要进入下一页，</p>\n<pre><code>http://www.youmzi.com/xg/list_10_2.html\n</code></pre><p>再下一页:</p>\n<pre><code>http://www.youmzi.com/xg/list_10_3.html\n</code></pre><p>是不是找到了什么规律？我们试着用这个规律来返回到第一页:</p>\n<pre><code>http://www.youmzi.com/xg/list_10_1.html\n</code></pre><p>没错，我们成功返回到了第一页，同时验证了第一页的页码<strong>通常被隐藏</strong>的真理。我们找到了规律，就可以按套路在外面加一个循环，首先先把我们前面的url变量从首页改为</p>\n<pre><code>url = &quot;http://www.youmzi.com/xg/list_10_%d.html&quot;%page\n</code></pre><p>page就是我们的要爬的页面数字，初始值我们设为1，然后可以使用input来设定上限作为循环条件，这里我们使用while循环会更简单</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pages = int(input(<span class=\"string\">\"Please enter the pages you want: \"</span>))</span><br><span class=\"line\">page = <span class=\"number\">1</span></span><br><span class=\"line\">girl = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> page &lt;= pages:</span><br><span class=\"line\">\turl = <span class=\"string\">\"http://www.youmzi.com/xg/list_10_%d.html\"</span>%page</span><br><span class=\"line\">\trequests = urllib.request.Request(url,headers =header)</span><br><span class=\"line\">\t.....</span><br><span class=\"line\">\t...</span><br></pre></td></tr></table></figure>\n</code></pre><p>要注意的是，刚才在for循环那里设置的girl＝ 0一定要放在while前面，否则爬取图片的时候，第二页会覆盖第一页的内容。</p>\n<p>再用函数包装一下，一个简单的抓妹子图的脚本就出来了</p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> gzip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">youmeizi</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\theader = &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">'User-Agent'</span>:<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\tgirl = <span class=\"number\">0</span></span><br><span class=\"line\">\tpages = int(input(<span class=\"string\">\"Please enter the pages you want: \"</span>))</span><br><span class=\"line\">\tgirls_basket = []</span><br><span class=\"line\">\tpage = <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> page &lt;= pages:</span><br><span class=\"line\">\t\turl = <span class=\"string\">\"http://www.youmzi.com/xg/list_10_%d.html\"</span>%page</span><br><span class=\"line\">\t\trequests = urllib.request.Request(url,headers =header)</span><br><span class=\"line\">\t\topened = urllib.request.urlopen(requests)</span><br><span class=\"line\">\t\tcontent= opened.read().decode(<span class=\"string\">'gbk'</span>)</span><br><span class=\"line\">\t\trepattern = re.compile(<span class=\"string\">r'&lt;li&gt;.*?&lt;img src=\"(.*?)\".*?&lt;/li&gt;'</span>,re.S)</span><br><span class=\"line\">\t\tgirls_link = re.findall(repattern,content)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> girls_link:</span><br><span class=\"line\">\t\t\ta = open(str(girl)+<span class=\"string\">'.jpg'</span>,<span class=\"string\">'wb'</span>)</span><br><span class=\"line\">\t\t\tb = urllib.request.Request(each,headers = &#123;<span class=\"string\">\"Accept-Encoding\"</span>: <span class=\"string\">\"gzip\"</span>&#125;)</span><br><span class=\"line\">\t\t\tc = urllib.request.urlopen(b)</span><br><span class=\"line\">\t\t\td = gzip.GzipFile(fileobj = c)</span><br><span class=\"line\">\t\t\te = d.read()</span><br><span class=\"line\">\t\t\ta.write(e)</span><br><span class=\"line\">\t\t\tprint(<span class=\"string\">\"No. %d Girl downloaded\"</span>%girl)</span><br><span class=\"line\">\t\t\tgirl += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\ttime.sleep(<span class=\"number\">1</span>)\t</span><br><span class=\"line\"></span><br><span class=\"line\">youmeizi()</span><br></pre></td></tr></table></figure>\n</code></pre><p>最后再次重申一下，在练习爬虫的过程当中。尽量要做一个温柔的人，温柔对待服务器的人:</p>\n<ul>\n<li>在练习爬虫的的时候，爬个几页十几页成功了就行，如果只是练习，没有必要几百页几百页地爬，造成对方服务器资源浪费。</li>\n<li>在时间宽松的情况下，尽量添加sleep减少对方服务器压力</li>\n<li>需要大规模爬的时候，尽量避开高峰期，在晚上服务器压力小的时候爬取可以避免对方服务器高负载。</li>\n</ul>\n<p>况且那么多妹子图，</p>\n<p><strong>看得过来嘛</strong></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>30行python轻松爬取成百上千的妹子图到本地。没时间解释了，快上车。</p>\n<h3 id=\"什么是爬虫？\"><a href=\"#什么是爬虫？\" class=\"headerlink\" title=\"什么是爬虫？\"></a>什么是爬虫？</h3><p>网络爬虫，顾名思义就是在网上爬来爬去的“虫子”，它能够按照一定规则自动抓取网络数据的脚本。比如说你找到了一个特别棒的网站，上面全是妹子图。而你想把它们存到你的随身硬盘当中。如果你要一张一张保存的话那需要比较持久的耐力，这个时候你就需要通过爬虫来帮你抓取你心心念念的妹子图。</p>\n<p>那么如何通过爬虫来完成任务呢？</p>\n<h3 id=\"运行机制\"><a href=\"#运行机制\" class=\"headerlink\" title=\"运行机制\"></a>运行机制</h3><p>其实爬虫的工作流程和人是一样的，都需要经过下面几个步骤：</p>\n<blockquote>\n<p>使用本机的IP连接到网络 -&gt;使用地址登入网站 -&gt;看到网页内容 -&gt;筛选需要的信息 -&gt; 保存下载 -&gt; 登入新网页 -&gt;重复之前的动作</p>\n</blockquote>\n<p>是不是非常相似？</p>\n<h3 id=\"为什么使用python\"><a href=\"#为什么使用python\" class=\"headerlink\" title=\"为什么使用python\"></a>为什么使用python</h3><p>很多编程语言都可以写爬虫，可我们为什么选择python呢？总的来说就是四个字：<strong>简单够用</strong>：</p>\n<ul>\n<li>Python语法简单，开发效率高</li>\n<li>Python 有着丰富第三方爬虫工具库(requests,scrapy,BeautifulSoup)</li>\n<li>爬虫的速度瓶颈大多是在网络阻塞上，非超大规模爬取很少遇到计算性能瓶颈</li>\n<li>Python起初被用来开发搜索引擎，所以关于爬虫的资料很多，社区活跃</li>\n</ul>\n<p>让我们开始吧！</p>","more":"<p>首先先创建一个后缀为.py的python文件(名字自己想.py)</p>\n<h2 id=\"工具准备\"><a href=\"#工具准备\" class=\"headerlink\" title=\"工具准备\"></a>工具准备</h2><p>由于这次只是一个简单的小项目，我们并不需要使用第三方库，我们需要的只有python3</p>\n<ul>\n<li>Python3 </li>\n<li>urllib.request<br>  熟悉python2的对urllib库一定不陌生，我们要用的是其中的urlopen方法</li>\n<li>re(正则表达式)<br>  正则表达式是根据一定规则来匹配相应字符串，从网页中提取我们需要的内容</li>\n<li>time 设定休眠时间，减慢爬取速度，减少对方服务器的压力</li>\n<li>gzip 对于那些使用网页压缩技术的网站，我们需要将它解压</li>\n</ul>\n<p>来看我们第一段代码，在我们的文件开头导入需要的工具</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> gzip</span><br></pre></td></tr></table></figure>\n</code></pre><p>接下来我们就需要使用urllib库来登入网站</p>\n<h2 id=\"使用urllib读取网页内容\"><a href=\"#使用urllib读取网页内容\" class=\"headerlink\" title=\"使用urllib读取网页内容\"></a>使用urllib读取网页内容</h2><p>为了准备这个教程，我不(hou)辞(yan)劳(wu)苦(chi)地找来了<a href=\"http://www.youmzi.com\" target=\"_blank\" rel=\"noopener\">优妹子</a>来作为我们今天要爬的网站。(真的是为了教学)，在下载妹子的图片之前，我们需要先分析通过网站的源代码来找出我们需要的图片链接。可能你没有学过HTML，看不懂网页的源代码，但是没关系，我们要做的事情有一半浏览器替我们做了，剩下的一半就是找!规<br>!律!</p>\n<p>我们知道爬虫会增加对方服务器的压力，有的时候如果对方发现你使用的爬虫而不是用户的话，就会切断连接导致爬取中断（如果没有断点续传功能就等于失败）, 所以我们需要将我们的爬虫看起来更像用户一样。当然爬虫和反爬虫这里的内容太多这里不会做过多讲解，在这里我们需要给我们的爬虫添加header的信息,因为有些服务器会对请求的header做检查:</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header = &#123;<span class=\"string\">'User-Agent'</span>:<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'</span>&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><p>是不是很多东西很眼熟？对了，我们发送这段请求让服务器知道我们是一个用户在使用Windows NT 6.1(就是win7) 的Firefox浏览器来浏览网页，为了不让代码看起来特别乱，我们先将它保存在一个变量中，</p>\n<p>接着我们要把网站使用字符串的形式保存在变量url中：</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url = <span class=\"string\">\"http://www.youmzi.com\"</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>使用urllib.request的Request方法来向对方服务器发送请求,格式为（网址，［参数..])，将我们的header变量作为headers参数传递进去。</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requests = urllib.request.Request(url,headers = header)</span><br></pre></td></tr></table></figure>\n</code></pre><p>接着使用urlopen方法打开网页(刚才请求返回的结果)</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opened = urllib.request.urlopen(requests)</span><br></pre></td></tr></table></figure>\n</code></pre><p>读取我们的网页内容（源代码）并解码</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">content = opened.read().decode(<span class=\"string\">'gbk'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>这里我们使用read()方法来进行读取并在后面添加decode方法对输出结果进行解码，不同网页使用不同的编码标准，一般来说使用utf8格式，但是我们在源代码的前几行发现写着<meta charset=\"gb2312\">，这是不一样的编码方式。但是当我们使用 decode(‘gb2312’)并不管用。你灵机一动，想到了GBK,这是一种非常常用的中文编码格式，于是就有了上面那行代码</p>\n<p>这个时候你再试图print出来content的内容，得到的就是网页源代码，当你使用浏览器的时候，右键点击网页也会出来检查源代码的选项。这就是我们获取的内容，说明你已经成功连接到了网站</p>\n<p>但是这一堆乱七八糟的字符让我怎么找到妹子图呢</p>\n<p>别着急，我们要进行非常重要的步骤，网页解析</p>\n<h2 id=\"使用正则表达式\"><a href=\"#使用正则表达式\" class=\"headerlink\" title=\"使用正则表达式\"></a>使用正则表达式</h2><h3 id=\"正则表达式简介\"><a href=\"#正则表达式简介\" class=\"headerlink\" title=\"正则表达式简介\"></a>正则表达式简介</h3><p><a href=\"http://www.runoob.com/regexp/regexp-syntax.html\" target=\"_blank\" rel=\"noopener\">正则表达式</a>是一种使用特定字符来匹配字符串的模式,它可以让我们在不确定内容的情况下进行模糊匹配。</p>\n<p>正则表达式的语法内容很多，如果想要了解更多请点击前面的链接或自行搜索。但是本着”一招在手，天下我有“的精神，我们使用经典的“.*?”来进行匹配。你可能猛一看这是什么鬼，这可是我们找到妹子图的关键法宝，其中：</p>\n<ul>\n<li>‘.’ 代表了任意字符</li>\n<li>‘*‘ 代表了匹配无限次</li>\n<li>‘?’ 代表了使用非贪婪模式，尽可能少的进行匹配</li>\n<li>() 有括号的会被提取，无括号的只会被用来匹配不会提取</li>\n</ul>\n<p>举个栗子，在’<fdakdhaf>内容<dakflahf>‘这个字符串当中我们只需要匹配开头，结尾，内容两边的标志，并且使用括号标志我们需要提取的内容就可以了。</dakflahf></fdakdhaf></p>\n<pre><code><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">.*?</span>&gt;</span>(.*?)<span class=\"tag\">&lt;<span class=\"name\">.*?</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>变成人话就是</p>\n<pre><code>&lt;管他是什么&gt;管他是什么我要了&lt;管他是什么&gt;\n</code></pre><h3 id=\"构建我们的表达式\"><a href=\"#构建我们的表达式\" class=\"headerlink\" title=\"构建我们的表达式\"></a>构建我们的表达式</h3><p>怎么样很简单吧，现在我们就需要对网页源代码进行解析，回到浏览器，右键点击一张妹子图，然后点检查（chrome）／审查元素（Safari）。你会看到一个窗口显示网页的源代码，高亮的部分是所选内容的代码，将鼠标移动到不同的代码上，网页中会用阴影部分表示出你当前代码所展示的内容，我们来右键点击检查一张图片：</p>\n<pre><code><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://ymz.qqwmb.com/allimg/c160926/14JY6111Q560-L3G6_lit.jpg\"</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"160\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"美媛馆 [MyGirl] 2016.09.12 VOL.225 xxxxxx\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>其中jpg所标记的那个链接就是我们要的链接，但是我们不能只用双引号匹配，因为双引号内包含的内容不只有链接，所以我们尽量多描述一点来让我们的匹配更加精准。</p>\n<pre><code><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"(.*?)\"</span><span class=\"attr\">.</span>*?&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>这样就好了嘛，还没有。img是图片标签，网站上那么多图片，你不能把网站的广告logo什么都抓下来吧，这时候你就需要移动你的鼠标找规律，在保持单个完整性的同时多向外部拓展一层，你匹配的就更准确。比如现在在img标签，外面有个a标签，鼠标放上去也指向图片，a标签外面是li标签，还是指向图片，li外面是div标签，还是..不，这次指向很多图片了，所以我们应该使用图片外面的li标签。我们来看代码</p>\n<pre><code><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.youmzi.com/12255.html\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"尤果网 UGirls  Vol.205 香川颖 日系美女\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://ymz.qqwmb.com/allimg/c160922/14J54TECK0-c4X8_lit.jpg\"</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"160\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"尤果网 UGirls  Vol.205 香川颖 日系美女\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.youmzi.com/12255.html\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"尤果网 UGirls  Vol.205 香川颖 日系美女\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span> 尤果网 UGirls  Vol.205 <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>头都大了，这什么啊。不要惊慌，我们发现又一个规律：除了img标签外，a,li,p标签都是</p>\n<pre><code><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>这个样子的，有头有尾。这样以来我们就找到头，尾和我们要的内容，然后把其他的模糊匹配掉，得到了</p>\n<pre><code><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li&gt;.*?&lt;img src=\"(.*?)\".*?&lt;/li&gt;</span><br></pre></td></tr></table></figure>\n</code></pre><p>正则表达式就是这么神奇。</p>\n<h3 id=\"调用re模块\"><a href=\"#调用re模块\" class=\"headerlink\" title=\"调用re模块\"></a>调用re模块</h3><p>有了表达式，我们就需要使用开头导入的re模块来进行解析，首先用re.compile把解析方法存入变量:</p>\n<pre><code><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repattern = re.compile(r'&lt;li&gt;.*?&lt;img src=\"(.*?)\".*?&lt;/li&gt;',re.S)</span><br></pre></td></tr></table></figure>\n</code></pre><p>接着使用re.findall来根据方法从源代码提取出来需要的内容</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">girls_link = re.findall(repattern,content)</span><br></pre></td></tr></table></figure>\n</code></pre><p>其中repattern是方法，content是我们刚刚得到的源代码，这个时候re.findall会把所有匹配到的内容放到一个列表当中并且储存到girls_link这个变量:</p>\n<pre><code>[妹子图链接1，妹子图链接2 ,........]\n</code></pre><p>到目前为止，我们已经可以找到这一页中所有妹子图的链接了，接下来我们需要储存到本地。</p>\n<h2 id=\"储存到本地\"><a href=\"#储存到本地\" class=\"headerlink\" title=\"储存到本地\"></a>储存到本地</h2><p>储存的过程就很简单了，由于我们有多个链接，我们需要使用for循环来遍历列表里的所有链接。</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#文件名计数器</span></span><br><span class=\"line\">girl = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> girls_link:</span><br><span class=\"line\">\t<span class=\"comment\">#创建文件，文件名从零开始的数字，格式为jpg,写入方法为'wb'二进制写入</span></span><br><span class=\"line\">\ta = open(str(girl)+<span class=\"string\">'.jpg'</span>,<span class=\"string\">'wb'</span>)</span><br><span class=\"line\">\t<span class=\"comment\">#使用urllib访问网页并读取内容</span></span><br><span class=\"line\">\tb = urllib.request.Request(each,headers =header)</span><br><span class=\"line\">\tc = urllib.request.urlopen(b)</span><br><span class=\"line\">\te = c.read()</span><br><span class=\"line\">\t<span class=\"comment\">#将内容写入文件</span></span><br><span class=\"line\">\ta.write(e)</span><br><span class=\"line\">\tprint(<span class=\"string\">\"No. %d Girl downloaded\"</span>%girl)</span><br><span class=\"line\">\t<span class=\"comment\">#计数器+1,进行下一次</span></span><br><span class=\"line\">\tgirl += <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"comment\">#暂停一秒钟，人为降低速度</span></span><br><span class=\"line\">\ttime.sleep(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>这样你就可以发现和你的.py文件一起突然多出了好多图片文件，程序默认把内容保存到当前目录下。注意在上面的循环中我插入了一条print语句，这样一来方便了你日后debug需要防止死循环，二来免得你看到光标不动以为死机了，可以追踪进度。没什么事尽量降低爬取速度，不要浪费对方服务器资源。</p>\n<h2 id=\"Gzip网页解压\"><a href=\"#Gzip网页解压\" class=\"headerlink\" title=\"Gzip网页解压\"></a>Gzip网页解压</h2><p>一般来讲，到这里我们的网页内的图片就爬取好了，但是不巧，我们刚好碰到一个具有网页压缩技术的网站。是不是发现下载下来的图片是损坏的？那是因为在爬取过程中我们没有对内容进行解压。</p>\n<p>Gzip是一种常见的数据压缩工具，通常用来压缩文件，后被引入网页压缩技术当中。很多时候当我们不能从网站上抓到正确的数据时，我们应该检查该网站是否使用了压缩技术，简单的方法有使用站长工具的<a href=\"http://tool.chinaz.com/Gzips/\" target=\"_blank\" rel=\"noopener\">Gzip检测</a></p>\n<p>要解压网站，我们需要在开头导入gzip模块</p>\n<pre><code>import gzip\n</code></pre><p>然后将urlopen返回的内容进行解压，再读取就能获得正常的数据</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> girls_link:</span><br><span class=\"line\">\ta = open(str(girl)+<span class=\"string\">'.jpg'</span>,<span class=\"string\">'wb'</span>)</span><br><span class=\"line\">\tb = urllib.request.Request(each,headers = &#123;<span class=\"string\">\"Accept-Encoding\"</span>: <span class=\"string\">\"gzip\"</span>&#125;)</span><br><span class=\"line\">\tc = urllib.request.urlopen(b)</span><br><span class=\"line\">\td = gzip.GzipFile(fileobj = c)</span><br><span class=\"line\">\te = d.read()</span><br><span class=\"line\">\ta.write(e)</span><br><span class=\"line\">\tprint(<span class=\"string\">\"No. %d Girl downloaded\"</span>%girl)</span><br><span class=\"line\">\tgirl += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>所以现在它可以称得上是一只爬虫了吗，not yet.</p>\n<h2 id=\"网页跳转\"><a href=\"#网页跳转\" class=\"headerlink\" title=\"网页跳转\"></a>网页跳转</h2><p>不会爬的爬虫不能叫爬虫，爬虫具有一定的网页跳转能力。可以自动地移动到新的页面才能进行大规模地数据爬取。对于点进来看这篇文章的你们，显然一页的图片并不能满足你们嘿嘿嘿嘿嘿。。</p>\n<p>我们来看首页，首页只展示了一部分图片，并没有预期中的2,3,4..分页页码出现。但是我们看到有个’更多妹子图’可以点击，点击之后，页面跳转到</p>\n<pre><code>http://www.youmzi.com/xg/\n</code></pre><p>完全没有头绪，但是事实上第一页的页码<strong>通常被隐藏</strong>，所以我们需要进入下一页，</p>\n<pre><code>http://www.youmzi.com/xg/list_10_2.html\n</code></pre><p>再下一页:</p>\n<pre><code>http://www.youmzi.com/xg/list_10_3.html\n</code></pre><p>是不是找到了什么规律？我们试着用这个规律来返回到第一页:</p>\n<pre><code>http://www.youmzi.com/xg/list_10_1.html\n</code></pre><p>没错，我们成功返回到了第一页，同时验证了第一页的页码<strong>通常被隐藏</strong>的真理。我们找到了规律，就可以按套路在外面加一个循环，首先先把我们前面的url变量从首页改为</p>\n<pre><code>url = &quot;http://www.youmzi.com/xg/list_10_%d.html&quot;%page\n</code></pre><p>page就是我们的要爬的页面数字，初始值我们设为1，然后可以使用input来设定上限作为循环条件，这里我们使用while循环会更简单</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pages = int(input(<span class=\"string\">\"Please enter the pages you want: \"</span>))</span><br><span class=\"line\">page = <span class=\"number\">1</span></span><br><span class=\"line\">girl = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> page &lt;= pages:</span><br><span class=\"line\">\turl = <span class=\"string\">\"http://www.youmzi.com/xg/list_10_%d.html\"</span>%page</span><br><span class=\"line\">\trequests = urllib.request.Request(url,headers =header)</span><br><span class=\"line\">\t.....</span><br><span class=\"line\">\t...</span><br></pre></td></tr></table></figure>\n</code></pre><p>要注意的是，刚才在for循环那里设置的girl＝ 0一定要放在while前面，否则爬取图片的时候，第二页会覆盖第一页的内容。</p>\n<p>再用函数包装一下，一个简单的抓妹子图的脚本就出来了</p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> gzip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">youmeizi</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\theader = &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">'User-Agent'</span>:<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\tgirl = <span class=\"number\">0</span></span><br><span class=\"line\">\tpages = int(input(<span class=\"string\">\"Please enter the pages you want: \"</span>))</span><br><span class=\"line\">\tgirls_basket = []</span><br><span class=\"line\">\tpage = <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> page &lt;= pages:</span><br><span class=\"line\">\t\turl = <span class=\"string\">\"http://www.youmzi.com/xg/list_10_%d.html\"</span>%page</span><br><span class=\"line\">\t\trequests = urllib.request.Request(url,headers =header)</span><br><span class=\"line\">\t\topened = urllib.request.urlopen(requests)</span><br><span class=\"line\">\t\tcontent= opened.read().decode(<span class=\"string\">'gbk'</span>)</span><br><span class=\"line\">\t\trepattern = re.compile(<span class=\"string\">r'&lt;li&gt;.*?&lt;img src=\"(.*?)\".*?&lt;/li&gt;'</span>,re.S)</span><br><span class=\"line\">\t\tgirls_link = re.findall(repattern,content)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> girls_link:</span><br><span class=\"line\">\t\t\ta = open(str(girl)+<span class=\"string\">'.jpg'</span>,<span class=\"string\">'wb'</span>)</span><br><span class=\"line\">\t\t\tb = urllib.request.Request(each,headers = &#123;<span class=\"string\">\"Accept-Encoding\"</span>: <span class=\"string\">\"gzip\"</span>&#125;)</span><br><span class=\"line\">\t\t\tc = urllib.request.urlopen(b)</span><br><span class=\"line\">\t\t\td = gzip.GzipFile(fileobj = c)</span><br><span class=\"line\">\t\t\te = d.read()</span><br><span class=\"line\">\t\t\ta.write(e)</span><br><span class=\"line\">\t\t\tprint(<span class=\"string\">\"No. %d Girl downloaded\"</span>%girl)</span><br><span class=\"line\">\t\t\tgirl += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\ttime.sleep(<span class=\"number\">1</span>)\t</span><br><span class=\"line\"></span><br><span class=\"line\">youmeizi()</span><br></pre></td></tr></table></figure>\n</code></pre><p>最后再次重申一下，在练习爬虫的过程当中。尽量要做一个温柔的人，温柔对待服务器的人:</p>\n<ul>\n<li>在练习爬虫的的时候，爬个几页十几页成功了就行，如果只是练习，没有必要几百页几百页地爬，造成对方服务器资源浪费。</li>\n<li>在时间宽松的情况下，尽量添加sleep减少对方服务器压力</li>\n<li>需要大规模爬的时候，尽量避开高峰期，在晚上服务器压力小的时候爬取可以避免对方服务器高负载。</li>\n</ul>\n<p>况且那么多妹子图，</p>\n<p><strong>看得过来嘛</strong></p>"},{"title":"Python爬虫：二层爬虫之爬取整个相册","date":"2016-10-06T02:11:38.000Z","_content":"\n上次读了[这篇文章]()的之后的老司机们可能发现了一个问题，我们爬取的妹子图片怎么**都！是！封！面！**。那是因为我们爬取得的内容是列表页提供的，所以只有封面图片链接。这并不能满足广大爬友的喜好，要来就要来全套。于是我们试图让我们的爬虫,让它能够爬取每个相册并保存没个相册在一个新建的文件夹中。\n\n\n<!--More-->\n\n## 结构与模块分析\n\n还记得上次我们的逻辑顺序是什么吗？\n\n>加载列表页->获取图片地址->下载图片->页面跳转\n\n这次我们是一个两层的爬虫，所以要增加一些步骤\n\n>加载列表页->获取所有相册首页地址（需要初步页面跳转）->判断相册所有页面地址->从地址解析图片地址->创建文件夹并保存->跳转至下一相册\n\n我们来拆开一步一步分析，首先来看我们的工具准备\n\n## 工具准备\n\n\t```Python\n\timport urllib.request\n\timport re\n\timport time\n\timport gzip\n\timport os\n\theader = {      \"Accept-Encoding\": \"gzip\",\n\t\t\t\t\t'User-Agent':'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'}\n\tgirl_entry = []\n\t```\n\n- 和上一次相比我们多了一个os模块，这个是后面创建文件夹所必需的\n- 我们把header变成全局变量，这是因为很多函数都需要调用这个变量。并且我们添加了gzip为可以接受的方式\n- girl_entry 是相册热口链接的集合，每次[worker](7)都会从里面取得一个链接\n\n好了，上车吧。\n\n## 获取所有相册入口地址\n\n和我们上次的爬取过程一样，只不过我们爬取的内容不一样。上一次我们爬取的是图片链接，而这次我们爬取的是相册入口链接。这两者并没有特别大的区别，因为当你点击图片时就可以进入相册，这说明该链接和图片应该在同一个区块内（即你点击的其实是图片和链接的结合）。所以我们只需要更换我们的正则表达式就可以啦，下面这段代码是不是看着很眼熟呢，\n\n\t```Python\n\tdef get_entry_link():\n\t\t\tglobal girl_entry\n\t\t\tpages = int(input(\"Please enter the pages you want:\"))\n\t\t\tpage = 1\n\t\t\twhile page <= pages:\n\t\t\t\t\turl = \"http://www.youmzi.com/xg/list_10_%d.html\"%page\n\t\t\t\t\trequests = urllib.request.Request(url,headers =header)\n\t\t\t\t\topened = urllib.request.urlopen(requests)\n\t\t\t\t\t#UnicodeDecodeError\n\t\t\t\t\tdecompress = gzip.GzipFile(fileobj = opened)\n\t\t\t\t\tcontent= decompress.read().decode('gbk')\n\t\t\t\t\tlist_part_pattern=re.compile(r\"</dl>(.*?)</ul>\",re.S)\n\t\t\t\t\tlist_part = re.findall(list_part_pattern,content)\n\t\t\t\t\trepattern = re.compile(r'<li>.*?<a href=\"(.+?).html\" title=\"(.+?)\".*?<p><a href.*?</li>',re.S)\n\t\t\t\t\tgirl_link_found = re.findall(repattern,list_part[0])\n\t\t\t\t\tfor each in girl_link_found:\n\t\t\t\t\t\t\tgirl_entry.append(each)\n\t\t\t\t\tpage+= 1\n\t```\n尽管大部分内容一样，我们在这里还是做了一些细小的改变。\n\n- 由于这次我们将Gzip压缩的声明添加到了全局的header里面，所以服务器默认会给我们传输压缩后的数据，与上次不一样的是，我们在第10行添加了解压缩的操作过程。\n- 我们不难发现这段代码我们使用了两次正则表达式，因为如果只使用第14行的正则表达式的话，很容易将导航栏的li标签的内容和我们真正需要的内容混在一起，这时候我们需要对网页进行预先切片，先使用12,13行网页中的完整列表切出来再进行二次匹配可以提高精准度。要注意的是我们的list_part输出的内容是正则表达式输出的元组，所以第15行要使用[0]来表示其中的内容\n- 第二个正则表达式提取出来的内容有两个并以元组的方式展现 (一个去掉.html后缀的入口链接,一个标题)。入口链接是用在网页搜索中，标题名称是为我们创建的相册文件夹命名。\n\t\t\t\t\t\n\t\t\t\t\t\n## 获取所有相册页面\n\n当我们满怀欣喜地点击进入相册后，你发现了几个问题：\n\n- 每一个网页只有一张图片,旁边还有温馨提示，“点击图片进行下一页”,**而我们并不能知道这个相册有多少页**。 要不我们一个一个试吧，这样很浪费时间，如果中途出错了的话会影响后面的爬取。\n- 第一页的网址链接和其他的不一样，第一页为/12345.html,而其他的网页/12345_x.html。如果我们像之前一样使用/12345_1.html来代表第一页的话会直接报错\n\n道高一尺魔高一丈，即便是这样我们仍然有办法:\n\n>\t创建一个空列表 -> 先把第一页放进去（解决问题二）-> 使用二分法搜索出尾页（解决问题一）-> 生成所有页面地址并加入列表 -> 返回列表\n\n这就是下面这段代码的整体逻辑结构：\n\n\t```Python\n\tdef series_link(url_base):\n\t\t\tglobal header\n\t\t\tgirl_series = []\n\t\t\tgirl_series.append(url_base+'.html')\n\t\t\tbegin = 2\n\t\t\tend = 100\n\t\t\twhile begin+1 < end:\n\t\t\t\t\tmid = (begin+end)//2\n\t\t\t\t\turl = url_base+'_%d'%mid+'.html'\n\t\t\t\t\ttry:\n\t\t\t\t\t\t\ta = urllib.request.Request(url,headers= header)\n\t\t\t\t\t\t\tb = urllib.request.urlopen(a)\n\t\t\t\t\t\t\t###\n\t\t\t\t\t\t\tbegin = mid\n\t\t\t\t\texcept:\n\t\t\t\t\t\t\tend = mid\n\t\t\tfor each in range(2,begin+1):\n\t\t\t\t\ttmp_url = url_base+'_%d'%each+'.html' \n\t\t\t\t\tgirl_series.append(tmp_url)\n\t\t\treturn girl_series\n\t```\t\t\n- 首先我们要知道的是传入的入口链接并不是一个完整的链接，我们切除掉后缀是为了后面增加后缀时更加方便\n- 第3行 ： 创建一个空列表\n- 第4行 ： 先把第一页放进去（解决问题二）\n- 第5－16行是我们使用二分搜索的部分，由于有页码的页面从第二页开始，所以我们的起点是2，而这个相册基本不可能超过一百页，所以我们使用100作为上限。二分搜索的原理很简单，取起点终点的中间点，如果中间点在列表中，**说明起点到中间点的所有内容都在列表内**,这时我们已经可以排除掉一半了，反过来也是这样。所以我们使用这种方法可以提高效率节省资源。而测试中间点是否有效时使用try...except而不是if..else..因为当中间点使用urlopen方法打开时可能会报错。\n- 第18行：将我们获得的数字添加到base后面生成链接\n- 最后一行返回一个链接集合列表\n\n## 获取图片地址\n\n当然我们的最终目的还是要找到图片地址，有了我们之前的基础，这一步并不难实现。值得注意的是我们的这个函数作为一个图片链接搜索的整体\n\t\n\t获得入口地址 －> 输出所有图片地址\n所以我们引入了上一个函数。图片地址搜寻的方式不是很难，只有一张图片，所以对正则表达式的要求也不是很高\t\n\n\t```Python\n\tdef pic_seeker(entry_link):\n\t\t\tlink_pool = series_link(entry_link)\n\t\t\tpic_links = []\n\t\t\tnum = 0\n\t\t\tfor link in link_pool:\n\t\t\t\t\treq = urllib.request.Request(link,headers =header)\n\t\t\t\t\toped = urllib.request.urlopen(req)\n\t\t\t\t\tdecomp = gzip.GzipFile(fileobj = oped)\n\t\t\t\t\tcont = decomp.read().decode('gbk')\n\t\t\t\t\tpic_pattern = re.compile(r\"<div class=\\\"arpic\\\">.*?<ul>.*?<li>.*?<img src='(.+?)'.*?</li>.*?</ul>\",re.S)\n\t\t\t\t\tpic_link = re.findall(pic_pattern,cont)\n\t\t\t\t\tpic_links.append(pic_link[0])\n\t\t\t\t\tnum+=1\n\t\t\t\t\tprint(pic_link[0],num)\n\t\t\treturn pic_links  \n\t```\n- 第2行引入series_link(entry_link)函数获得相册所有地址\n- 第5－13行遍历所有地址并执行抓取操作\n- 最后返回相册所有图片链接，到了这一步我们获得了我们需要的内容，只剩下下载了\n\n## 保存至本地文件夹\n\n虽然到了简单的最后一步我们仍然不能掉以轻心，因为这里有一个陷阱：有的图片被压缩了，有的并没有被压缩。如果我们直接下载的话会下载到一些损坏的文件，而直接使用gzip会报错，所以我们要使用try..except..。另外我们还需要将我们的妹子图保存在一个文件夹中以免和其他的混在一起，直接上代码\n\n\n\t```Python\n\tdef pic_downloader(pic_link_pool,series_name):\n\t\t\tif os.path.exists(os.path.join(os.path.dirname(__file__),'%s'%series_name)):\n\t\t\t\t\treturn\n\t\t\telse:\n\t\t\t\t\tos.mkdir(os.path.join(os.path.dirname(__file__),'%s'%series_name))\n\t\t\tgirl = 0\n\t\t\tfor link in pic_link_pool:\n\t\t\t\t\tprint('---link')\n\t\t\t\t\ta = open('%s/'%series_name+str(girl)+'.jpg','wb')\n\t\t\t\t\ttry:\n\t\t\t\t\t\t\tb = urllib.request.Request(link,headers = header)\n\t\t\t\t\t\t\tc = urllib.request.urlopen(b)\n\t\t\t\t\t\t\td = gzip.GzipFile(fileobj = c)\n\t\t\t\t\t\t\te = d.read()\n\t\t\t\t\texcept:\n\t\t\t\t\t\t\tb = urllib.request.Request(link,headers = header)\n\t\t\t\t\t\t\tc = urllib.request.urlopen(b)\n\t\t\t\t\t\t\te = c.read()\n\t\t\t\t\ta.write(e)\n\t\t\t\t\tprint(\"No. %d Girl downloaded, - %s\"%(girl,series_name))\n\t\t\t\t\tgirl+=1\n\t\t\t\t\ta.close()                \n\t\t\t\t\ttime.sleep(1)\n\t```\n\n- 第2-5行我们使用了os模块对系统进行一定的操作，判断当前目录下是否有这个文件夹，如果有的话就跳过，没有的话就创建一个新的文件夹。由于我们使用了os模块，在运行我们的程序时**需要管理员权限**才能对系统进行操作。\n- 第10-18行我们默认使用gzip，因为使用urlopen并不能识别是否被压缩而直接下载全部内容\n\n\n## 对相册下载器进行封装\n\n其实有了之前的内容我们就已经可以完成我们的工作了，但是封装这一步并不是画蛇添足因为它的作用是减少代码的重复。这是一个很好的习惯，让一个函数完成一个完整的动作，这样我们在后面开发过程中调用更加方便。这里我们定义了一个worker，它整合了之前的几个函数，所以它可以接受一个入口链接并完成搜索下载的功能。这样做的好处是如果以后使用多线程的时候，每个线程添加一个worker就OK。\n\n\t```Python\n\tdef worker():\n        global girl_entry\n        entry_base = girl_entry.pop(0)\n        pic_link_pool=pic_seeker(entry_base[0])\n        pic_downloader(pic_link_pool,entry_base[1])\n    ```\n要注意的是第2行的pop方法，它的作用是将列表中的元素传递出去并从列表中删除。这个原理有点像枪把子弹发射出去一样，每发射出去一颗子弹弹夹里面便少一颗。\n\n\n## 主函数\n\n主函数逻辑简单，创建一个入口集合，从里面获取链接交给worker工作\n\n\n\t```Python\n\tdef main():\n\t\t\tglobal girl_entry\n\t\t\tget_entry_link()        \n\t\t\twhile girl_entry:\n\t\t\t\tworker()\n\t```\t\t\t\n作为最接近人类语言的编程语言，我打算把上面的python代码直接翻译。\n\n\t```Python\n\t定义 主函数():\n\t\t全局变量（引入） girl_entry \n\t\t（执行) get_entry_link() \n\t\t当 girl_entry(不是空的):\n\t\t\t(反复执行) worker()\n\t```\t\n\n怎么样，是不是有了更深入的了解呢\n\n","source":"_posts/crawler-2.md","raw":"---\ntitle: Python爬虫：二层爬虫之爬取整个相册\ndate: 2016-10-06 10:11:38\ntags:\ncategories: Python\n---\n\n上次读了[这篇文章]()的之后的老司机们可能发现了一个问题，我们爬取的妹子图片怎么**都！是！封！面！**。那是因为我们爬取得的内容是列表页提供的，所以只有封面图片链接。这并不能满足广大爬友的喜好，要来就要来全套。于是我们试图让我们的爬虫,让它能够爬取每个相册并保存没个相册在一个新建的文件夹中。\n\n\n<!--More-->\n\n## 结构与模块分析\n\n还记得上次我们的逻辑顺序是什么吗？\n\n>加载列表页->获取图片地址->下载图片->页面跳转\n\n这次我们是一个两层的爬虫，所以要增加一些步骤\n\n>加载列表页->获取所有相册首页地址（需要初步页面跳转）->判断相册所有页面地址->从地址解析图片地址->创建文件夹并保存->跳转至下一相册\n\n我们来拆开一步一步分析，首先来看我们的工具准备\n\n## 工具准备\n\n\t```Python\n\timport urllib.request\n\timport re\n\timport time\n\timport gzip\n\timport os\n\theader = {      \"Accept-Encoding\": \"gzip\",\n\t\t\t\t\t'User-Agent':'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'}\n\tgirl_entry = []\n\t```\n\n- 和上一次相比我们多了一个os模块，这个是后面创建文件夹所必需的\n- 我们把header变成全局变量，这是因为很多函数都需要调用这个变量。并且我们添加了gzip为可以接受的方式\n- girl_entry 是相册热口链接的集合，每次[worker](7)都会从里面取得一个链接\n\n好了，上车吧。\n\n## 获取所有相册入口地址\n\n和我们上次的爬取过程一样，只不过我们爬取的内容不一样。上一次我们爬取的是图片链接，而这次我们爬取的是相册入口链接。这两者并没有特别大的区别，因为当你点击图片时就可以进入相册，这说明该链接和图片应该在同一个区块内（即你点击的其实是图片和链接的结合）。所以我们只需要更换我们的正则表达式就可以啦，下面这段代码是不是看着很眼熟呢，\n\n\t```Python\n\tdef get_entry_link():\n\t\t\tglobal girl_entry\n\t\t\tpages = int(input(\"Please enter the pages you want:\"))\n\t\t\tpage = 1\n\t\t\twhile page <= pages:\n\t\t\t\t\turl = \"http://www.youmzi.com/xg/list_10_%d.html\"%page\n\t\t\t\t\trequests = urllib.request.Request(url,headers =header)\n\t\t\t\t\topened = urllib.request.urlopen(requests)\n\t\t\t\t\t#UnicodeDecodeError\n\t\t\t\t\tdecompress = gzip.GzipFile(fileobj = opened)\n\t\t\t\t\tcontent= decompress.read().decode('gbk')\n\t\t\t\t\tlist_part_pattern=re.compile(r\"</dl>(.*?)</ul>\",re.S)\n\t\t\t\t\tlist_part = re.findall(list_part_pattern,content)\n\t\t\t\t\trepattern = re.compile(r'<li>.*?<a href=\"(.+?).html\" title=\"(.+?)\".*?<p><a href.*?</li>',re.S)\n\t\t\t\t\tgirl_link_found = re.findall(repattern,list_part[0])\n\t\t\t\t\tfor each in girl_link_found:\n\t\t\t\t\t\t\tgirl_entry.append(each)\n\t\t\t\t\tpage+= 1\n\t```\n尽管大部分内容一样，我们在这里还是做了一些细小的改变。\n\n- 由于这次我们将Gzip压缩的声明添加到了全局的header里面，所以服务器默认会给我们传输压缩后的数据，与上次不一样的是，我们在第10行添加了解压缩的操作过程。\n- 我们不难发现这段代码我们使用了两次正则表达式，因为如果只使用第14行的正则表达式的话，很容易将导航栏的li标签的内容和我们真正需要的内容混在一起，这时候我们需要对网页进行预先切片，先使用12,13行网页中的完整列表切出来再进行二次匹配可以提高精准度。要注意的是我们的list_part输出的内容是正则表达式输出的元组，所以第15行要使用[0]来表示其中的内容\n- 第二个正则表达式提取出来的内容有两个并以元组的方式展现 (一个去掉.html后缀的入口链接,一个标题)。入口链接是用在网页搜索中，标题名称是为我们创建的相册文件夹命名。\n\t\t\t\t\t\n\t\t\t\t\t\n## 获取所有相册页面\n\n当我们满怀欣喜地点击进入相册后，你发现了几个问题：\n\n- 每一个网页只有一张图片,旁边还有温馨提示，“点击图片进行下一页”,**而我们并不能知道这个相册有多少页**。 要不我们一个一个试吧，这样很浪费时间，如果中途出错了的话会影响后面的爬取。\n- 第一页的网址链接和其他的不一样，第一页为/12345.html,而其他的网页/12345_x.html。如果我们像之前一样使用/12345_1.html来代表第一页的话会直接报错\n\n道高一尺魔高一丈，即便是这样我们仍然有办法:\n\n>\t创建一个空列表 -> 先把第一页放进去（解决问题二）-> 使用二分法搜索出尾页（解决问题一）-> 生成所有页面地址并加入列表 -> 返回列表\n\n这就是下面这段代码的整体逻辑结构：\n\n\t```Python\n\tdef series_link(url_base):\n\t\t\tglobal header\n\t\t\tgirl_series = []\n\t\t\tgirl_series.append(url_base+'.html')\n\t\t\tbegin = 2\n\t\t\tend = 100\n\t\t\twhile begin+1 < end:\n\t\t\t\t\tmid = (begin+end)//2\n\t\t\t\t\turl = url_base+'_%d'%mid+'.html'\n\t\t\t\t\ttry:\n\t\t\t\t\t\t\ta = urllib.request.Request(url,headers= header)\n\t\t\t\t\t\t\tb = urllib.request.urlopen(a)\n\t\t\t\t\t\t\t###\n\t\t\t\t\t\t\tbegin = mid\n\t\t\t\t\texcept:\n\t\t\t\t\t\t\tend = mid\n\t\t\tfor each in range(2,begin+1):\n\t\t\t\t\ttmp_url = url_base+'_%d'%each+'.html' \n\t\t\t\t\tgirl_series.append(tmp_url)\n\t\t\treturn girl_series\n\t```\t\t\n- 首先我们要知道的是传入的入口链接并不是一个完整的链接，我们切除掉后缀是为了后面增加后缀时更加方便\n- 第3行 ： 创建一个空列表\n- 第4行 ： 先把第一页放进去（解决问题二）\n- 第5－16行是我们使用二分搜索的部分，由于有页码的页面从第二页开始，所以我们的起点是2，而这个相册基本不可能超过一百页，所以我们使用100作为上限。二分搜索的原理很简单，取起点终点的中间点，如果中间点在列表中，**说明起点到中间点的所有内容都在列表内**,这时我们已经可以排除掉一半了，反过来也是这样。所以我们使用这种方法可以提高效率节省资源。而测试中间点是否有效时使用try...except而不是if..else..因为当中间点使用urlopen方法打开时可能会报错。\n- 第18行：将我们获得的数字添加到base后面生成链接\n- 最后一行返回一个链接集合列表\n\n## 获取图片地址\n\n当然我们的最终目的还是要找到图片地址，有了我们之前的基础，这一步并不难实现。值得注意的是我们的这个函数作为一个图片链接搜索的整体\n\t\n\t获得入口地址 －> 输出所有图片地址\n所以我们引入了上一个函数。图片地址搜寻的方式不是很难，只有一张图片，所以对正则表达式的要求也不是很高\t\n\n\t```Python\n\tdef pic_seeker(entry_link):\n\t\t\tlink_pool = series_link(entry_link)\n\t\t\tpic_links = []\n\t\t\tnum = 0\n\t\t\tfor link in link_pool:\n\t\t\t\t\treq = urllib.request.Request(link,headers =header)\n\t\t\t\t\toped = urllib.request.urlopen(req)\n\t\t\t\t\tdecomp = gzip.GzipFile(fileobj = oped)\n\t\t\t\t\tcont = decomp.read().decode('gbk')\n\t\t\t\t\tpic_pattern = re.compile(r\"<div class=\\\"arpic\\\">.*?<ul>.*?<li>.*?<img src='(.+?)'.*?</li>.*?</ul>\",re.S)\n\t\t\t\t\tpic_link = re.findall(pic_pattern,cont)\n\t\t\t\t\tpic_links.append(pic_link[0])\n\t\t\t\t\tnum+=1\n\t\t\t\t\tprint(pic_link[0],num)\n\t\t\treturn pic_links  \n\t```\n- 第2行引入series_link(entry_link)函数获得相册所有地址\n- 第5－13行遍历所有地址并执行抓取操作\n- 最后返回相册所有图片链接，到了这一步我们获得了我们需要的内容，只剩下下载了\n\n## 保存至本地文件夹\n\n虽然到了简单的最后一步我们仍然不能掉以轻心，因为这里有一个陷阱：有的图片被压缩了，有的并没有被压缩。如果我们直接下载的话会下载到一些损坏的文件，而直接使用gzip会报错，所以我们要使用try..except..。另外我们还需要将我们的妹子图保存在一个文件夹中以免和其他的混在一起，直接上代码\n\n\n\t```Python\n\tdef pic_downloader(pic_link_pool,series_name):\n\t\t\tif os.path.exists(os.path.join(os.path.dirname(__file__),'%s'%series_name)):\n\t\t\t\t\treturn\n\t\t\telse:\n\t\t\t\t\tos.mkdir(os.path.join(os.path.dirname(__file__),'%s'%series_name))\n\t\t\tgirl = 0\n\t\t\tfor link in pic_link_pool:\n\t\t\t\t\tprint('---link')\n\t\t\t\t\ta = open('%s/'%series_name+str(girl)+'.jpg','wb')\n\t\t\t\t\ttry:\n\t\t\t\t\t\t\tb = urllib.request.Request(link,headers = header)\n\t\t\t\t\t\t\tc = urllib.request.urlopen(b)\n\t\t\t\t\t\t\td = gzip.GzipFile(fileobj = c)\n\t\t\t\t\t\t\te = d.read()\n\t\t\t\t\texcept:\n\t\t\t\t\t\t\tb = urllib.request.Request(link,headers = header)\n\t\t\t\t\t\t\tc = urllib.request.urlopen(b)\n\t\t\t\t\t\t\te = c.read()\n\t\t\t\t\ta.write(e)\n\t\t\t\t\tprint(\"No. %d Girl downloaded, - %s\"%(girl,series_name))\n\t\t\t\t\tgirl+=1\n\t\t\t\t\ta.close()                \n\t\t\t\t\ttime.sleep(1)\n\t```\n\n- 第2-5行我们使用了os模块对系统进行一定的操作，判断当前目录下是否有这个文件夹，如果有的话就跳过，没有的话就创建一个新的文件夹。由于我们使用了os模块，在运行我们的程序时**需要管理员权限**才能对系统进行操作。\n- 第10-18行我们默认使用gzip，因为使用urlopen并不能识别是否被压缩而直接下载全部内容\n\n\n## 对相册下载器进行封装\n\n其实有了之前的内容我们就已经可以完成我们的工作了，但是封装这一步并不是画蛇添足因为它的作用是减少代码的重复。这是一个很好的习惯，让一个函数完成一个完整的动作，这样我们在后面开发过程中调用更加方便。这里我们定义了一个worker，它整合了之前的几个函数，所以它可以接受一个入口链接并完成搜索下载的功能。这样做的好处是如果以后使用多线程的时候，每个线程添加一个worker就OK。\n\n\t```Python\n\tdef worker():\n        global girl_entry\n        entry_base = girl_entry.pop(0)\n        pic_link_pool=pic_seeker(entry_base[0])\n        pic_downloader(pic_link_pool,entry_base[1])\n    ```\n要注意的是第2行的pop方法，它的作用是将列表中的元素传递出去并从列表中删除。这个原理有点像枪把子弹发射出去一样，每发射出去一颗子弹弹夹里面便少一颗。\n\n\n## 主函数\n\n主函数逻辑简单，创建一个入口集合，从里面获取链接交给worker工作\n\n\n\t```Python\n\tdef main():\n\t\t\tglobal girl_entry\n\t\t\tget_entry_link()        \n\t\t\twhile girl_entry:\n\t\t\t\tworker()\n\t```\t\t\t\n作为最接近人类语言的编程语言，我打算把上面的python代码直接翻译。\n\n\t```Python\n\t定义 主函数():\n\t\t全局变量（引入） girl_entry \n\t\t（执行) get_entry_link() \n\t\t当 girl_entry(不是空的):\n\t\t\t(反复执行) worker()\n\t```\t\n\n怎么样，是不是有了更深入的了解呢\n\n","slug":"crawler-2","published":1,"updated":"2018-06-22T03:08:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiqvlnwb000rglu3xxko2zs3","content":"<p>上次读了<a href=\"\">这篇文章</a>的之后的老司机们可能发现了一个问题，我们爬取的妹子图片怎么<strong>都！是！封！面！</strong>。那是因为我们爬取得的内容是列表页提供的，所以只有封面图片链接。这并不能满足广大爬友的喜好，要来就要来全套。于是我们试图让我们的爬虫,让它能够爬取每个相册并保存没个相册在一个新建的文件夹中。</p>\n<a id=\"more\"></a>\n<h2 id=\"结构与模块分析\"><a href=\"#结构与模块分析\" class=\"headerlink\" title=\"结构与模块分析\"></a>结构与模块分析</h2><p>还记得上次我们的逻辑顺序是什么吗？</p>\n<blockquote>\n<p>加载列表页-&gt;获取图片地址-&gt;下载图片-&gt;页面跳转</p>\n</blockquote>\n<p>这次我们是一个两层的爬虫，所以要增加一些步骤</p>\n<blockquote>\n<p>加载列表页-&gt;获取所有相册首页地址（需要初步页面跳转）-&gt;判断相册所有页面地址-&gt;从地址解析图片地址-&gt;创建文件夹并保存-&gt;跳转至下一相册</p>\n</blockquote>\n<p>我们来拆开一步一步分析，首先来看我们的工具准备</p>\n<h2 id=\"工具准备\"><a href=\"#工具准备\" class=\"headerlink\" title=\"工具准备\"></a>工具准备</h2><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> gzip</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">header = &#123;      <span class=\"string\">\"Accept-Encoding\"</span>: <span class=\"string\">\"gzip\"</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'User-Agent'</span>:<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'</span>&#125;</span><br><span class=\"line\">girl_entry = []</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>和上一次相比我们多了一个os模块，这个是后面创建文件夹所必需的</li>\n<li>我们把header变成全局变量，这是因为很多函数都需要调用这个变量。并且我们添加了gzip为可以接受的方式</li>\n<li>girl_entry 是相册热口链接的集合，每次<a href=\"7\">worker</a>都会从里面取得一个链接</li>\n</ul>\n<p>好了，上车吧。</p>\n<h2 id=\"获取所有相册入口地址\"><a href=\"#获取所有相册入口地址\" class=\"headerlink\" title=\"获取所有相册入口地址\"></a>获取所有相册入口地址</h2><p>和我们上次的爬取过程一样，只不过我们爬取的内容不一样。上一次我们爬取的是图片链接，而这次我们爬取的是相册入口链接。这两者并没有特别大的区别，因为当你点击图片时就可以进入相册，这说明该链接和图片应该在同一个区块内（即你点击的其实是图片和链接的结合）。所以我们只需要更换我们的正则表达式就可以啦，下面这段代码是不是看着很眼熟呢，</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_entry_link</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">global</span> girl_entry</span><br><span class=\"line\">\t\tpages = int(input(<span class=\"string\">\"Please enter the pages you want:\"</span>))</span><br><span class=\"line\">\t\tpage = <span class=\"number\">1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> page &lt;= pages:</span><br><span class=\"line\">\t\t\t\turl = <span class=\"string\">\"http://www.youmzi.com/xg/list_10_%d.html\"</span>%page</span><br><span class=\"line\">\t\t\t\trequests = urllib.request.Request(url,headers =header)</span><br><span class=\"line\">\t\t\t\topened = urllib.request.urlopen(requests)</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">#UnicodeDecodeError</span></span><br><span class=\"line\">\t\t\t\tdecompress = gzip.GzipFile(fileobj = opened)</span><br><span class=\"line\">\t\t\t\tcontent= decompress.read().decode(<span class=\"string\">'gbk'</span>)</span><br><span class=\"line\">\t\t\t\tlist_part_pattern=re.compile(<span class=\"string\">r\"&lt;/dl&gt;(.*?)&lt;/ul&gt;\"</span>,re.S)</span><br><span class=\"line\">\t\t\t\tlist_part = re.findall(list_part_pattern,content)</span><br><span class=\"line\">\t\t\t\trepattern = re.compile(<span class=\"string\">r'&lt;li&gt;.*?&lt;a href=\"(.+?).html\" title=\"(.+?)\".*?&lt;p&gt;&lt;a href.*?&lt;/li&gt;'</span>,re.S)</span><br><span class=\"line\">\t\t\t\tgirl_link_found = re.findall(repattern,list_part[<span class=\"number\">0</span>])</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> girl_link_found:</span><br><span class=\"line\">\t\t\t\t\t\tgirl_entry.append(each)</span><br><span class=\"line\">\t\t\t\tpage+= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>尽管大部分内容一样，我们在这里还是做了一些细小的改变。</p>\n<ul>\n<li>由于这次我们将Gzip压缩的声明添加到了全局的header里面，所以服务器默认会给我们传输压缩后的数据，与上次不一样的是，我们在第10行添加了解压缩的操作过程。</li>\n<li>我们不难发现这段代码我们使用了两次正则表达式，因为如果只使用第14行的正则表达式的话，很容易将导航栏的li标签的内容和我们真正需要的内容混在一起，这时候我们需要对网页进行预先切片，先使用12,13行网页中的完整列表切出来再进行二次匹配可以提高精准度。要注意的是我们的list_part输出的内容是正则表达式输出的元组，所以第15行要使用[0]来表示其中的内容</li>\n<li>第二个正则表达式提取出来的内容有两个并以元组的方式展现 (一个去掉.html后缀的入口链接,一个标题)。入口链接是用在网页搜索中，标题名称是为我们创建的相册文件夹命名。</li>\n</ul>\n<h2 id=\"获取所有相册页面\"><a href=\"#获取所有相册页面\" class=\"headerlink\" title=\"获取所有相册页面\"></a>获取所有相册页面</h2><p>当我们满怀欣喜地点击进入相册后，你发现了几个问题：</p>\n<ul>\n<li>每一个网页只有一张图片,旁边还有温馨提示，“点击图片进行下一页”,<strong>而我们并不能知道这个相册有多少页</strong>。 要不我们一个一个试吧，这样很浪费时间，如果中途出错了的话会影响后面的爬取。</li>\n<li>第一页的网址链接和其他的不一样，第一页为/12345.html,而其他的网页/12345_x.html。如果我们像之前一样使用/12345_1.html来代表第一页的话会直接报错</li>\n</ul>\n<p>道高一尺魔高一丈，即便是这样我们仍然有办法:</p>\n<blockquote>\n<p>   创建一个空列表 -&gt; 先把第一页放进去（解决问题二）-&gt; 使用二分法搜索出尾页（解决问题一）-&gt; 生成所有页面地址并加入列表 -&gt; 返回列表</p>\n</blockquote>\n<p>这就是下面这段代码的整体逻辑结构：</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">series_link</span><span class=\"params\">(url_base)</span>:</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">global</span> header</span><br><span class=\"line\">\t\t\tgirl_series = []</span><br><span class=\"line\">\t\t\tgirl_series.append(url_base+<span class=\"string\">'.html'</span>)</span><br><span class=\"line\">\t\t\tbegin = <span class=\"number\">2</span></span><br><span class=\"line\">\t\t\tend = <span class=\"number\">100</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> begin+<span class=\"number\">1</span> &lt; end:</span><br><span class=\"line\">\t\t\t\t\tmid = (begin+end)//<span class=\"number\">2</span></span><br><span class=\"line\">\t\t\t\t\turl = url_base+<span class=\"string\">'_%d'</span>%mid+<span class=\"string\">'.html'</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span>:</span><br><span class=\"line\">\t\t\t\t\t\t\ta = urllib.request.Request(url,headers= header)</span><br><span class=\"line\">\t\t\t\t\t\t\tb = urllib.request.urlopen(a)</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">###</span></span><br><span class=\"line\">\t\t\t\t\t\t\tbegin = mid</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">except</span>:</span><br><span class=\"line\">\t\t\t\t\t\t\tend = mid</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>,begin+<span class=\"number\">1</span>):</span><br><span class=\"line\">\t\t\t\t\ttmp_url = url_base+<span class=\"string\">'_%d'</span>%each+<span class=\"string\">'.html'</span> </span><br><span class=\"line\">\t\t\t\t\tgirl_series.append(tmp_url)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> girl_series</span><br><span class=\"line\">\t```\t\t</span><br><span class=\"line\">- 首先我们要知道的是传入的入口链接并不是一个完整的链接，我们切除掉后缀是为了后面增加后缀时更加方便</span><br><span class=\"line\">- 第<span class=\"number\">3</span>行 ： 创建一个空列表</span><br><span class=\"line\">- 第<span class=\"number\">4</span>行 ： 先把第一页放进去（解决问题二）</span><br><span class=\"line\">- 第<span class=\"number\">5</span>－<span class=\"number\">16</span>行是我们使用二分搜索的部分，由于有页码的页面从第二页开始，所以我们的起点是<span class=\"number\">2</span>，而这个相册基本不可能超过一百页，所以我们使用<span class=\"number\">100</span>作为上限。二分搜索的原理很简单，取起点终点的中间点，如果中间点在列表中，**说明起点到中间点的所有内容都在列表内**,这时我们已经可以排除掉一半了，反过来也是这样。所以我们使用这种方法可以提高效率节省资源。而测试中间点是否有效时使用<span class=\"keyword\">try</span>...<span class=\"keyword\">except</span>而不是<span class=\"keyword\">if</span>..<span class=\"keyword\">else</span>..因为当中间点使用urlopen方法打开时可能会报错。</span><br><span class=\"line\">- 第<span class=\"number\">18</span>行：将我们获得的数字添加到base后面生成链接</span><br><span class=\"line\">- 最后一行返回一个链接集合列表</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 获取图片地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">当然我们的最终目的还是要找到图片地址，有了我们之前的基础，这一步并不难实现。值得注意的是我们的这个函数作为一个图片链接搜索的整体</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t获得入口地址 －&gt; 输出所有图片地址</span><br><span class=\"line\">所以我们引入了上一个函数。图片地址搜寻的方式不是很难，只有一张图片，所以对正则表达式的要求也不是很高\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t```Python</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pic_seeker</span><span class=\"params\">(entry_link)</span>:</span></span><br><span class=\"line\">\t\t\tlink_pool = series_link(entry_link)</span><br><span class=\"line\">\t\t\tpic_links = []</span><br><span class=\"line\">\t\t\tnum = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> link <span class=\"keyword\">in</span> link_pool:</span><br><span class=\"line\">\t\t\t\t\treq = urllib.request.Request(link,headers =header)</span><br><span class=\"line\">\t\t\t\t\toped = urllib.request.urlopen(req)</span><br><span class=\"line\">\t\t\t\t\tdecomp = gzip.GzipFile(fileobj = oped)</span><br><span class=\"line\">\t\t\t\t\tcont = decomp.read().decode(<span class=\"string\">'gbk'</span>)</span><br><span class=\"line\">\t\t\t\t\tpic_pattern = re.compile(<span class=\"string\">r\"&lt;div class=\\\"arpic\\\"&gt;.*?&lt;ul&gt;.*?&lt;li&gt;.*?&lt;img src='(.+?)'.*?&lt;/li&gt;.*?&lt;/ul&gt;\"</span>,re.S)</span><br><span class=\"line\">\t\t\t\t\tpic_link = re.findall(pic_pattern,cont)</span><br><span class=\"line\">\t\t\t\t\tpic_links.append(pic_link[<span class=\"number\">0</span>])</span><br><span class=\"line\">\t\t\t\t\tnum+=<span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\t\tprint(pic_link[<span class=\"number\">0</span>],num)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> pic_links</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>第2行引入series_link(entry_link)函数获得相册所有地址</li>\n<li>第5－13行遍历所有地址并执行抓取操作</li>\n<li>最后返回相册所有图片链接，到了这一步我们获得了我们需要的内容，只剩下下载了</li>\n</ul>\n<h2 id=\"保存至本地文件夹\"><a href=\"#保存至本地文件夹\" class=\"headerlink\" title=\"保存至本地文件夹\"></a>保存至本地文件夹</h2><p>虽然到了简单的最后一步我们仍然不能掉以轻心，因为这里有一个陷阱：有的图片被压缩了，有的并没有被压缩。如果我们直接下载的话会下载到一些损坏的文件，而直接使用gzip会报错，所以我们要使用try..except..。另外我们还需要将我们的妹子图保存在一个文件夹中以免和其他的混在一起，直接上代码</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pic_downloader</span><span class=\"params\">(pic_link_pool,series_name)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> os.path.exists(os.path.join(os.path.dirname(__file__),<span class=\"string\">'%s'</span>%series_name)):</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\tos.mkdir(os.path.join(os.path.dirname(__file__),<span class=\"string\">'%s'</span>%series_name))</span><br><span class=\"line\">\t\tgirl = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> link <span class=\"keyword\">in</span> pic_link_pool:</span><br><span class=\"line\">\t\t\t\tprint(<span class=\"string\">'---link'</span>)</span><br><span class=\"line\">\t\t\t\ta = open(<span class=\"string\">'%s/'</span>%series_name+str(girl)+<span class=\"string\">'.jpg'</span>,<span class=\"string\">'wb'</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span>:</span><br><span class=\"line\">\t\t\t\t\t\tb = urllib.request.Request(link,headers = header)</span><br><span class=\"line\">\t\t\t\t\t\tc = urllib.request.urlopen(b)</span><br><span class=\"line\">\t\t\t\t\t\td = gzip.GzipFile(fileobj = c)</span><br><span class=\"line\">\t\t\t\t\t\te = d.read()</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">except</span>:</span><br><span class=\"line\">\t\t\t\t\t\tb = urllib.request.Request(link,headers = header)</span><br><span class=\"line\">\t\t\t\t\t\tc = urllib.request.urlopen(b)</span><br><span class=\"line\">\t\t\t\t\t\te = c.read()</span><br><span class=\"line\">\t\t\t\ta.write(e)</span><br><span class=\"line\">\t\t\t\tprint(<span class=\"string\">\"No. %d Girl downloaded, - %s\"</span>%(girl,series_name))</span><br><span class=\"line\">\t\t\t\tgirl+=<span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\ta.close()                </span><br><span class=\"line\">\t\t\t\ttime.sleep(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>第2-5行我们使用了os模块对系统进行一定的操作，判断当前目录下是否有这个文件夹，如果有的话就跳过，没有的话就创建一个新的文件夹。由于我们使用了os模块，在运行我们的程序时<strong>需要管理员权限</strong>才能对系统进行操作。</li>\n<li>第10-18行我们默认使用gzip，因为使用urlopen并不能识别是否被压缩而直接下载全部内容</li>\n</ul>\n<h2 id=\"对相册下载器进行封装\"><a href=\"#对相册下载器进行封装\" class=\"headerlink\" title=\"对相册下载器进行封装\"></a>对相册下载器进行封装</h2><p>其实有了之前的内容我们就已经可以完成我们的工作了，但是封装这一步并不是画蛇添足因为它的作用是减少代码的重复。这是一个很好的习惯，让一个函数完成一个完整的动作，这样我们在后面开发过程中调用更加方便。这里我们定义了一个worker，它整合了之前的几个函数，所以它可以接受一个入口链接并完成搜索下载的功能。这样做的好处是如果以后使用多线程的时候，每个线程添加一个worker就OK。</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">worker</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">       <span class=\"keyword\">global</span> girl_entry</span><br><span class=\"line\">       entry_base = girl_entry.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">       pic_link_pool=pic_seeker(entry_base[<span class=\"number\">0</span>])</span><br><span class=\"line\">       pic_downloader(pic_link_pool,entry_base[<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n</code></pre><p>要注意的是第2行的pop方法，它的作用是将列表中的元素传递出去并从列表中删除。这个原理有点像枪把子弹发射出去一样，每发射出去一颗子弹弹夹里面便少一颗。</p>\n<h2 id=\"主函数\"><a href=\"#主函数\" class=\"headerlink\" title=\"主函数\"></a>主函数</h2><p>主函数逻辑简单，创建一个入口集合，从里面获取链接交给worker工作</p>\n<pre><code>```Python\ndef main():\n        global girl_entry\n        get_entry_link()        \n        while girl_entry:\n            worker()\n```            \n</code></pre><p>作为最接近人类语言的编程语言，我打算把上面的python代码直接翻译。</p>\n<pre><code>```Python\n定义 主函数():\n    全局变量（引入） girl_entry \n    （执行) get_entry_link() \n    当 girl_entry(不是空的):\n        (反复执行) worker()\n```    \n</code></pre><p>怎么样，是不是有了更深入的了解呢</p>\n","site":{"data":{}},"excerpt":"<p>上次读了<a href=\"\">这篇文章</a>的之后的老司机们可能发现了一个问题，我们爬取的妹子图片怎么<strong>都！是！封！面！</strong>。那是因为我们爬取得的内容是列表页提供的，所以只有封面图片链接。这并不能满足广大爬友的喜好，要来就要来全套。于是我们试图让我们的爬虫,让它能够爬取每个相册并保存没个相册在一个新建的文件夹中。</p>","more":"<h2 id=\"结构与模块分析\"><a href=\"#结构与模块分析\" class=\"headerlink\" title=\"结构与模块分析\"></a>结构与模块分析</h2><p>还记得上次我们的逻辑顺序是什么吗？</p>\n<blockquote>\n<p>加载列表页-&gt;获取图片地址-&gt;下载图片-&gt;页面跳转</p>\n</blockquote>\n<p>这次我们是一个两层的爬虫，所以要增加一些步骤</p>\n<blockquote>\n<p>加载列表页-&gt;获取所有相册首页地址（需要初步页面跳转）-&gt;判断相册所有页面地址-&gt;从地址解析图片地址-&gt;创建文件夹并保存-&gt;跳转至下一相册</p>\n</blockquote>\n<p>我们来拆开一步一步分析，首先来看我们的工具准备</p>\n<h2 id=\"工具准备\"><a href=\"#工具准备\" class=\"headerlink\" title=\"工具准备\"></a>工具准备</h2><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> gzip</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">header = &#123;      <span class=\"string\">\"Accept-Encoding\"</span>: <span class=\"string\">\"gzip\"</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'User-Agent'</span>:<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'</span>&#125;</span><br><span class=\"line\">girl_entry = []</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>和上一次相比我们多了一个os模块，这个是后面创建文件夹所必需的</li>\n<li>我们把header变成全局变量，这是因为很多函数都需要调用这个变量。并且我们添加了gzip为可以接受的方式</li>\n<li>girl_entry 是相册热口链接的集合，每次<a href=\"7\">worker</a>都会从里面取得一个链接</li>\n</ul>\n<p>好了，上车吧。</p>\n<h2 id=\"获取所有相册入口地址\"><a href=\"#获取所有相册入口地址\" class=\"headerlink\" title=\"获取所有相册入口地址\"></a>获取所有相册入口地址</h2><p>和我们上次的爬取过程一样，只不过我们爬取的内容不一样。上一次我们爬取的是图片链接，而这次我们爬取的是相册入口链接。这两者并没有特别大的区别，因为当你点击图片时就可以进入相册，这说明该链接和图片应该在同一个区块内（即你点击的其实是图片和链接的结合）。所以我们只需要更换我们的正则表达式就可以啦，下面这段代码是不是看着很眼熟呢，</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_entry_link</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">global</span> girl_entry</span><br><span class=\"line\">\t\tpages = int(input(<span class=\"string\">\"Please enter the pages you want:\"</span>))</span><br><span class=\"line\">\t\tpage = <span class=\"number\">1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> page &lt;= pages:</span><br><span class=\"line\">\t\t\t\turl = <span class=\"string\">\"http://www.youmzi.com/xg/list_10_%d.html\"</span>%page</span><br><span class=\"line\">\t\t\t\trequests = urllib.request.Request(url,headers =header)</span><br><span class=\"line\">\t\t\t\topened = urllib.request.urlopen(requests)</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">#UnicodeDecodeError</span></span><br><span class=\"line\">\t\t\t\tdecompress = gzip.GzipFile(fileobj = opened)</span><br><span class=\"line\">\t\t\t\tcontent= decompress.read().decode(<span class=\"string\">'gbk'</span>)</span><br><span class=\"line\">\t\t\t\tlist_part_pattern=re.compile(<span class=\"string\">r\"&lt;/dl&gt;(.*?)&lt;/ul&gt;\"</span>,re.S)</span><br><span class=\"line\">\t\t\t\tlist_part = re.findall(list_part_pattern,content)</span><br><span class=\"line\">\t\t\t\trepattern = re.compile(<span class=\"string\">r'&lt;li&gt;.*?&lt;a href=\"(.+?).html\" title=\"(.+?)\".*?&lt;p&gt;&lt;a href.*?&lt;/li&gt;'</span>,re.S)</span><br><span class=\"line\">\t\t\t\tgirl_link_found = re.findall(repattern,list_part[<span class=\"number\">0</span>])</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> girl_link_found:</span><br><span class=\"line\">\t\t\t\t\t\tgirl_entry.append(each)</span><br><span class=\"line\">\t\t\t\tpage+= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>尽管大部分内容一样，我们在这里还是做了一些细小的改变。</p>\n<ul>\n<li>由于这次我们将Gzip压缩的声明添加到了全局的header里面，所以服务器默认会给我们传输压缩后的数据，与上次不一样的是，我们在第10行添加了解压缩的操作过程。</li>\n<li>我们不难发现这段代码我们使用了两次正则表达式，因为如果只使用第14行的正则表达式的话，很容易将导航栏的li标签的内容和我们真正需要的内容混在一起，这时候我们需要对网页进行预先切片，先使用12,13行网页中的完整列表切出来再进行二次匹配可以提高精准度。要注意的是我们的list_part输出的内容是正则表达式输出的元组，所以第15行要使用[0]来表示其中的内容</li>\n<li>第二个正则表达式提取出来的内容有两个并以元组的方式展现 (一个去掉.html后缀的入口链接,一个标题)。入口链接是用在网页搜索中，标题名称是为我们创建的相册文件夹命名。</li>\n</ul>\n<h2 id=\"获取所有相册页面\"><a href=\"#获取所有相册页面\" class=\"headerlink\" title=\"获取所有相册页面\"></a>获取所有相册页面</h2><p>当我们满怀欣喜地点击进入相册后，你发现了几个问题：</p>\n<ul>\n<li>每一个网页只有一张图片,旁边还有温馨提示，“点击图片进行下一页”,<strong>而我们并不能知道这个相册有多少页</strong>。 要不我们一个一个试吧，这样很浪费时间，如果中途出错了的话会影响后面的爬取。</li>\n<li>第一页的网址链接和其他的不一样，第一页为/12345.html,而其他的网页/12345_x.html。如果我们像之前一样使用/12345_1.html来代表第一页的话会直接报错</li>\n</ul>\n<p>道高一尺魔高一丈，即便是这样我们仍然有办法:</p>\n<blockquote>\n<p>   创建一个空列表 -&gt; 先把第一页放进去（解决问题二）-&gt; 使用二分法搜索出尾页（解决问题一）-&gt; 生成所有页面地址并加入列表 -&gt; 返回列表</p>\n</blockquote>\n<p>这就是下面这段代码的整体逻辑结构：</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">series_link</span><span class=\"params\">(url_base)</span>:</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">global</span> header</span><br><span class=\"line\">\t\t\tgirl_series = []</span><br><span class=\"line\">\t\t\tgirl_series.append(url_base+<span class=\"string\">'.html'</span>)</span><br><span class=\"line\">\t\t\tbegin = <span class=\"number\">2</span></span><br><span class=\"line\">\t\t\tend = <span class=\"number\">100</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> begin+<span class=\"number\">1</span> &lt; end:</span><br><span class=\"line\">\t\t\t\t\tmid = (begin+end)//<span class=\"number\">2</span></span><br><span class=\"line\">\t\t\t\t\turl = url_base+<span class=\"string\">'_%d'</span>%mid+<span class=\"string\">'.html'</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span>:</span><br><span class=\"line\">\t\t\t\t\t\t\ta = urllib.request.Request(url,headers= header)</span><br><span class=\"line\">\t\t\t\t\t\t\tb = urllib.request.urlopen(a)</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">###</span></span><br><span class=\"line\">\t\t\t\t\t\t\tbegin = mid</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">except</span>:</span><br><span class=\"line\">\t\t\t\t\t\t\tend = mid</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>,begin+<span class=\"number\">1</span>):</span><br><span class=\"line\">\t\t\t\t\ttmp_url = url_base+<span class=\"string\">'_%d'</span>%each+<span class=\"string\">'.html'</span> </span><br><span class=\"line\">\t\t\t\t\tgirl_series.append(tmp_url)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> girl_series</span><br><span class=\"line\">\t```\t\t</span><br><span class=\"line\">- 首先我们要知道的是传入的入口链接并不是一个完整的链接，我们切除掉后缀是为了后面增加后缀时更加方便</span><br><span class=\"line\">- 第<span class=\"number\">3</span>行 ： 创建一个空列表</span><br><span class=\"line\">- 第<span class=\"number\">4</span>行 ： 先把第一页放进去（解决问题二）</span><br><span class=\"line\">- 第<span class=\"number\">5</span>－<span class=\"number\">16</span>行是我们使用二分搜索的部分，由于有页码的页面从第二页开始，所以我们的起点是<span class=\"number\">2</span>，而这个相册基本不可能超过一百页，所以我们使用<span class=\"number\">100</span>作为上限。二分搜索的原理很简单，取起点终点的中间点，如果中间点在列表中，**说明起点到中间点的所有内容都在列表内**,这时我们已经可以排除掉一半了，反过来也是这样。所以我们使用这种方法可以提高效率节省资源。而测试中间点是否有效时使用<span class=\"keyword\">try</span>...<span class=\"keyword\">except</span>而不是<span class=\"keyword\">if</span>..<span class=\"keyword\">else</span>..因为当中间点使用urlopen方法打开时可能会报错。</span><br><span class=\"line\">- 第<span class=\"number\">18</span>行：将我们获得的数字添加到base后面生成链接</span><br><span class=\"line\">- 最后一行返回一个链接集合列表</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 获取图片地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">当然我们的最终目的还是要找到图片地址，有了我们之前的基础，这一步并不难实现。值得注意的是我们的这个函数作为一个图片链接搜索的整体</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t获得入口地址 －&gt; 输出所有图片地址</span><br><span class=\"line\">所以我们引入了上一个函数。图片地址搜寻的方式不是很难，只有一张图片，所以对正则表达式的要求也不是很高\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t```Python</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pic_seeker</span><span class=\"params\">(entry_link)</span>:</span></span><br><span class=\"line\">\t\t\tlink_pool = series_link(entry_link)</span><br><span class=\"line\">\t\t\tpic_links = []</span><br><span class=\"line\">\t\t\tnum = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> link <span class=\"keyword\">in</span> link_pool:</span><br><span class=\"line\">\t\t\t\t\treq = urllib.request.Request(link,headers =header)</span><br><span class=\"line\">\t\t\t\t\toped = urllib.request.urlopen(req)</span><br><span class=\"line\">\t\t\t\t\tdecomp = gzip.GzipFile(fileobj = oped)</span><br><span class=\"line\">\t\t\t\t\tcont = decomp.read().decode(<span class=\"string\">'gbk'</span>)</span><br><span class=\"line\">\t\t\t\t\tpic_pattern = re.compile(<span class=\"string\">r\"&lt;div class=\\\"arpic\\\"&gt;.*?&lt;ul&gt;.*?&lt;li&gt;.*?&lt;img src='(.+?)'.*?&lt;/li&gt;.*?&lt;/ul&gt;\"</span>,re.S)</span><br><span class=\"line\">\t\t\t\t\tpic_link = re.findall(pic_pattern,cont)</span><br><span class=\"line\">\t\t\t\t\tpic_links.append(pic_link[<span class=\"number\">0</span>])</span><br><span class=\"line\">\t\t\t\t\tnum+=<span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\t\tprint(pic_link[<span class=\"number\">0</span>],num)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> pic_links</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>第2行引入series_link(entry_link)函数获得相册所有地址</li>\n<li>第5－13行遍历所有地址并执行抓取操作</li>\n<li>最后返回相册所有图片链接，到了这一步我们获得了我们需要的内容，只剩下下载了</li>\n</ul>\n<h2 id=\"保存至本地文件夹\"><a href=\"#保存至本地文件夹\" class=\"headerlink\" title=\"保存至本地文件夹\"></a>保存至本地文件夹</h2><p>虽然到了简单的最后一步我们仍然不能掉以轻心，因为这里有一个陷阱：有的图片被压缩了，有的并没有被压缩。如果我们直接下载的话会下载到一些损坏的文件，而直接使用gzip会报错，所以我们要使用try..except..。另外我们还需要将我们的妹子图保存在一个文件夹中以免和其他的混在一起，直接上代码</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pic_downloader</span><span class=\"params\">(pic_link_pool,series_name)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> os.path.exists(os.path.join(os.path.dirname(__file__),<span class=\"string\">'%s'</span>%series_name)):</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\tos.mkdir(os.path.join(os.path.dirname(__file__),<span class=\"string\">'%s'</span>%series_name))</span><br><span class=\"line\">\t\tgirl = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> link <span class=\"keyword\">in</span> pic_link_pool:</span><br><span class=\"line\">\t\t\t\tprint(<span class=\"string\">'---link'</span>)</span><br><span class=\"line\">\t\t\t\ta = open(<span class=\"string\">'%s/'</span>%series_name+str(girl)+<span class=\"string\">'.jpg'</span>,<span class=\"string\">'wb'</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span>:</span><br><span class=\"line\">\t\t\t\t\t\tb = urllib.request.Request(link,headers = header)</span><br><span class=\"line\">\t\t\t\t\t\tc = urllib.request.urlopen(b)</span><br><span class=\"line\">\t\t\t\t\t\td = gzip.GzipFile(fileobj = c)</span><br><span class=\"line\">\t\t\t\t\t\te = d.read()</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">except</span>:</span><br><span class=\"line\">\t\t\t\t\t\tb = urllib.request.Request(link,headers = header)</span><br><span class=\"line\">\t\t\t\t\t\tc = urllib.request.urlopen(b)</span><br><span class=\"line\">\t\t\t\t\t\te = c.read()</span><br><span class=\"line\">\t\t\t\ta.write(e)</span><br><span class=\"line\">\t\t\t\tprint(<span class=\"string\">\"No. %d Girl downloaded, - %s\"</span>%(girl,series_name))</span><br><span class=\"line\">\t\t\t\tgirl+=<span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\ta.close()                </span><br><span class=\"line\">\t\t\t\ttime.sleep(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>第2-5行我们使用了os模块对系统进行一定的操作，判断当前目录下是否有这个文件夹，如果有的话就跳过，没有的话就创建一个新的文件夹。由于我们使用了os模块，在运行我们的程序时<strong>需要管理员权限</strong>才能对系统进行操作。</li>\n<li>第10-18行我们默认使用gzip，因为使用urlopen并不能识别是否被压缩而直接下载全部内容</li>\n</ul>\n<h2 id=\"对相册下载器进行封装\"><a href=\"#对相册下载器进行封装\" class=\"headerlink\" title=\"对相册下载器进行封装\"></a>对相册下载器进行封装</h2><p>其实有了之前的内容我们就已经可以完成我们的工作了，但是封装这一步并不是画蛇添足因为它的作用是减少代码的重复。这是一个很好的习惯，让一个函数完成一个完整的动作，这样我们在后面开发过程中调用更加方便。这里我们定义了一个worker，它整合了之前的几个函数，所以它可以接受一个入口链接并完成搜索下载的功能。这样做的好处是如果以后使用多线程的时候，每个线程添加一个worker就OK。</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">worker</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">       <span class=\"keyword\">global</span> girl_entry</span><br><span class=\"line\">       entry_base = girl_entry.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">       pic_link_pool=pic_seeker(entry_base[<span class=\"number\">0</span>])</span><br><span class=\"line\">       pic_downloader(pic_link_pool,entry_base[<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n</code></pre><p>要注意的是第2行的pop方法，它的作用是将列表中的元素传递出去并从列表中删除。这个原理有点像枪把子弹发射出去一样，每发射出去一颗子弹弹夹里面便少一颗。</p>\n<h2 id=\"主函数\"><a href=\"#主函数\" class=\"headerlink\" title=\"主函数\"></a>主函数</h2><p>主函数逻辑简单，创建一个入口集合，从里面获取链接交给worker工作</p>\n<pre><code>```Python\ndef main():\n        global girl_entry\n        get_entry_link()        \n        while girl_entry:\n            worker()\n```            \n</code></pre><p>作为最接近人类语言的编程语言，我打算把上面的python代码直接翻译。</p>\n<pre><code>```Python\n定义 主函数():\n    全局变量（引入） girl_entry \n    （执行) get_entry_link() \n    当 girl_entry(不是空的):\n        (反复执行) worker()\n```    \n</code></pre><p>怎么样，是不是有了更深入的了解呢</p>"},{"title":"使用Selenium驱动浏览器的爬虫","date":"2017-02-01T03:12:27.000Z","_content":"\n\n我们这次使用[S&P Capital IQ NetAdvantage](www.netadvantage.standardandpoors.com)来查找S&P500中市值超过$50B的公司，并将表单数据爬取下来存入数据库。最后根据自己的需求找到对应的股票。\n\n为了更好地了解整个过程，建议使用python的交互式界面。\n\n<!--More-->\n\n## 使用工具\n\n- Selenium\n- Chrome webdriver\n- mysqlConnector\n- re\n\n\n\n## 使用Selenium驱动浏览器\n\n首先我们在这里先下载Webdriver, Selenium支持很多主流浏览器，如....。我们以Chrome为例，\n\n先初始化一个浏览器实例，\n\n    ```Python\n    >>>driver = webdriver.Chrome()\n    ```\n这时会启动一个新的Chrome浏览器界面，和我们平时的浏览器不同的是，这个新的浏览器是和我们python中的driver之间是可以通信的。当我们对浏览器（或driver实例）进行操作时，对应的driver(或浏览器)会相应改变。\n\n比如我们将网站跳转到www.Google.com：\n\n    ```Python\n    >>>driver.get(\"http://www.google.com\")\n    ```\n我们可以看到浏览器的第一个标签页跳转到了Google.com\n    \n接着我们在浏览器中手动输入www.baidu.com并进入\n\n    ```Python\n    >>>driver.current_url\n    ```\n就可以得到\n\n    ```Python\n    'http://www.baidu.com/'\n    ```\n接着我们进入到NetAdvantage的主页,点击Screener并添加筛选条件，SP500中市值大于$50B的公司。大约有一百个。\n\n![](crawler-4-selenium/search.png)\n    \n好了接着我们就可以使用Python的re库来爬取我们想要的资料了\n\n## re解析网页源码\n\n在抓取我们想要的数据之前我们需要先获得网页的源代码，我们使用driver的page_source方法获得浏览器当前页面源代码。注意和我们之前使用urllib和request库不同的是。由于我们使用浏览器进行加载，我们可以直接获得AJAX及其他各种方法加载过后的内容。为了提高效率，有些网站会有意无意地使用AJAX技术，这使我们之前的爬虫只能获得加载前的网页源码，并不能找到我们需要的数据，从而增加了我们的爬取难度。\n\n先来获取加载后的网页源码\n\n    ```Python\n    >>>source = driver.page_source\n    ```\n接着我们来引入我们的re库\n\n    ```Python\n    >>>import re\n    ```\n来看看我们要抓的数据是什么样子的结构\n\n    ```Html\n    <tr class=\"trowB_na\">\n      <td width=\"20\"  height=\"17\"><input type=\"checkbox\" name=\"displayRow\" value=\"4\"  onclick=\"Toggle(this,'trowB_na')\"></td>\n\t\t    <td  height=\"17\" align=\"left\" ><a  href=/NASApp/NetAdvantage/showPublication.do?dataPosition=4&SPID=5247 >ConocoPhillips</a></td>\n\t\t    <td  height=\"17\" align=\"left\" ><a   >COP</a></td>\n\t\t    <td  height=\"17\" align=\"left\" ><a   >US</a></td>\n\t\t    <td  height=\"17\" align=\"left\" ><a   >Energy</a></td>\n\t\t    <td  height=\"17\" align=\"left\" ><a   >Oil & Gas Exploration & Production</a></td>\n\t\t    <td  height=\"17\" align=\"left\" ><a   >48.760</a></td>\n\t\t    <td  height=\"17\" align=\"left\" ><a   >3 Star</a></td>\n\t\t    <td  height=\"17\" align=\"left\" ><a   >N/A</a></td>\n\t\t    <td  height=\"17\" align=\"left\" ><a   >40.04</a></td>\n\t\t    <td  height=\"17\" align=\"left\" ><a   >2.45</a></td>\n\t\t    <td  height=\"17\" align=\"left\" ><a   >N/A</a></td>\n\t\t    <td  height=\"17\" align=\"left\" ><a   >35.38</a></td>\n    </tr>\n    ```\n猛的一看我们的表单这么复杂，其实很简单。我们来看看都有什么，其中tr标签代表一行，td标签代表一个单元格：\n\n- Company Name，Ticker, \n- Region, \n- S&P Sub-Industry,\n- Last Closing Price,\n- S&P STARS Ranking,\n- S&P Capital IQ Quantitative Recommendation,\n- 1yr Total Return %,\n- 5yr Total Return %,\n- P/E,\n- LTD as % of Total Capital\n\n除第一行\n\n    ```Html\n    <td width=\"20\"  height=\"17\"><input type=\"checkbox\" name=\"displayRow\" value=\"4\"  onclick=\"Toggle(this,'trowB_na')\"></td>\n    ```\n之外，其余的td标签下的内容都是我们需要的数据。所以我们可以把正则表达式写成\n\n    ```Html\n    <tr class=\"trow\\w_na\">.*?\n        <td.*?</td>.*?\n        <td.*?<a.*?>(.+?)</a></td>.*?\n        <td.*?<a.*?>(.+?)</a></td>.*?\n        <td.*?<a.*?>(.+?)</a></td>.*?\n        <td.*?<a.*?>(.+?)</a></td>.*?\n        <td.*?<a.*?>(.+?)</a></td>.*?\n        <td.*?<a.*?>(.+?)</a></td>.*?\n        <td.*?<a.*?>(.+?)</a></td>.*?\n        <td.*?<a.*?>(.+?)</a></td>.*?\n        <td.*?<a.*?>(.+?)</a></td>.*?\n        <td.*?<a.*?>(.+?)</a></td>.*?\n        <td.*?<a.*?>(.+?)</a></td>.*?\n        <td.*?<a.*?>(.+?)</a></td>.*?\n    </tr>\n    ```\n这样我们就可以抓取(.+?)所代表的数据了，而.\\*?为不明确的内容被忽略掉。我们来用re.compile方法构成一个正则表达式的pattern\n\n    ```Python\n    >>>regex = '<tr class=\"trow\\w_na\">.*?<td.*?</td>.*?<td.*?<a.*?>(.+?)</a></td>.*?<td.*?<a.*?>(.+?)</a></td>.*?<td.*?<a.*?>(.+?)</a></td>.*?<td.*?<a.*?>(.+?)</a></td>.*?<td.*?<a.*?>(.+?)</a></td>.*?<td.*?<a.*?>(.+?)</a></td>.*?<td.*?<a.*?>(.+?)</a></td>.*?<td.*?<a.*?>(.+?)</a></td>.*?<td.*?<a.*?>(.+?)</a></td>.*?<td.*?<a.*?>(.+?)</a></td>.*?<td.*?<a.*?>(.+?)</a></td>.*?<td.*?<a.*?>(.+?)</a></td>.*?</tr>'\n    >>>pattern = re.compile(regex,re.S)\n    ```\n    \n接着使用re.findall来使用pattern查找页面源代码source里面所有匹配的内容\n\n    ```Python\n    >>>company_data_list = re.findall(pattern,source)\n    ```\n\n得到的内容如下\n\n    ```Python\n    >>>company_data_list\n    [('Oracle Corp', 'ORCL', 'US', 'Information Technology', 'Systems Software', '40.230', '5 Star', 'N/A', '16.99', '8.59', '19.20'), \n    ('Amazon.com Inc', 'AMZN', 'US', 'Consumer Discretionary', 'Internet &amp; Direct Marketing Retail', '830.380', '4 Star', 'N/A', '43.27', '33.73', '190.00'),\n    ...]\n    ```\n\n好了我们的爬取工作已经完成，接下来我们写入MySQL数据库\n\n### 写入数据库\n\n首先我们可以登入我们的MySQL\n\n    ```Bash\n    $ mysql -u [username] -p [password]\n    ```  \n输入密码后\n\n    ```\n    Welcome to the MySQL monitor.  Commands end with ; or \\g.\n    Your MySQL connection id is 17\n    Server version: 5.7.9 MySQL Community Server (GPL)\n\n    Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.\n\n    Oracle is a registered trademark of Oracle Corporation and/or its\n    affiliates. Other names may be trademarks of their respective\n    owners.\n\n    Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n    mysql> \n    ```\n接着我们要创建一个数据库，名字叫test,字符编码UTF-8\n\n    ```\n    mysql> CREATE DATABASE test charset = 'utf8';\n    ```\n\n接着进入我们的数据库\n\n    ```\n    mysql> USE test;\n    ```\n创建一张表，名字叫sp100，同时包含了表格各列的名称和数据类型，由于我们抓取的内容都是字符串，并且有的内容标示为'N/A'，我们不能使用数字格式，这里使用字符串格式；\n\n    ```SQL\n    create table sp10(\n    Company_Name varchar(50), \n    Ticker varchar(10), \n    Region varchar(10), \n    SP_Sector varchar(30), SP_Sub_Industry varchar(50), \n    Last_Closing_Price varchar(10), \n    Ranking Varchar(15), \n    Capital_IQ_RECOM VARCHAR(10), \n    Return_1yr varchar(10), \n    Return_5yr varchar(10), \n    PE varchar(30), \n    LTD varchar(30)\n    );\n    ```\n接着我们就可以使用python继续写入内容了\n\n首先引入mysql Connector\n\n    ```Python\n    >>>import mysql.connector\n    ```\n\n接着创建一个你的数据库信息变量config\n\n    ```Python\n    config={'host':'127.0.0.1',\n        'user':'你的用户名',\n        'password':密码,\n        'port':3306,\n        'database':'test', #这是你刚刚创建的数据库test\n        'charset':'utf8', #编码'utf8' \n        }\n    ```\n\n然后尝试连接数据库，出错则报错\n\n    ```Python\n    try:\n            cnn = mysql.connector.connect(**config)\n    except mysql.connector.Error as e:\n            print('connnect failed!{}'.format(e))\n    ```\n\n通过连接创建一个控制数据库的光标cursor,它会代替你来对数据库执行操作\n\n    ```Python\n    >>>cursor = cnn.cursor()\n    ```\n\n然后给一个你将要执行的INSERT语句来把我们的变量插入,%s表示要插入的数据\n\n    ```Python\n    >>>insert_statement = 'Insert sp100 (Company_Name,Ticker,Region,SP_Sector,SP_Sub_Industry,Last_Closing_Price,Ranking,Capital_IQ_RECOM,Return_1yr,Return_5yr,PE,LTD) values(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)'\n    ```\n\n使用循环语句和execute方法将我们的100条公司数据依次添加到数据库中,否则会报错\n\n    ```Python\n    >>>for company in company_data_list:\n            try:\n                    cursor.execute(insert_statement,company)\n            except:\n                    print(\"Inserting data error!{}\".format(e))  \n    ```\n\n要注意的是，执行完上面语句后我们的数据库并没有出现数据，因为我们并没有提交修改。这里使用commit方法提交\n\n    ```Python\n    >>>cnn.commit()\n    ```\n\n然后关掉cursor,断开连接\n\n    ```Python\n    >>>cursor.close()\n    >>>cnn.close()\n    ```\n到这里我们就可以看到数据库中的内容了，回到mysql查看，\n\n    \n    mysql> select * from sp100\\G;\n    *************************** 1. row ***************************\n          Company_Name: Oracle Corp\n                Ticker: ORCL\n                Region: US\n             SP_Sector: Information Technology\n       SP_Sub_Industry: Systems Software\n    Last_Closing_Price: 40.230\n               Ranking: 5 Star\n      Capital_IQ_RECOM: N/A\n            Return_1yr: 16.99\n            Return_5yr: 8.59\n                    PE: 19.20\n                   LTD: 43.76\n    *************************** 2. row ***************************\n    \n    ...\n\n最后我们要对这些数据进行简单的处理并按照我们想要的方法分析\n\n## 操作数据库\n\n首先，举个例子（例子非真实情况）：\n\n假设我们要找到将各个公司的1年回报率乘以（1-长期债务率）得到公司在不负债的情况下对应的收益，然后加上它PE的二次方根。大致如下\n\n    Unlevered 1yr return = 1 yr return* (1-LTD%)\n    weighted_index = unlevered return ＋ SQRT(PE)\n    \n最后我们取前5名和后5名\n\n我们来看怎么操作，之前我们讲到我们所有的数据都是字符串，字符串并不能正确地按数字大小排列内容。所以我们要先剔除带有所需数据中带有'N/A'的公司\n\n    mysql> create table sp as  select * from sp100 where PE != 'N/A' and Return_1yr!='N/A' and LTD!='N/A';\n\n这样一来我们就将PE,Return_1yr和LTD下带有‘N/A'的公司剔除了并放入一张新表sp中，接着我们将sp的这三列变成双精度浮点double类型\n\n    mysql> alter table sp change PE PE DOUBLE;\n    mysql> alter table sp change Return_1yr Return_1yr DOUBLE;\n    mysql> alter table sp change LTD LTD DOUBLE;\n    \n接着我们就可用通过select来查询我们需要的内容，我们要求数据库返回两列内容，一个是公司股票代码，另一个是weight.\n\n这里weight=Return_1yr *((100-LTD)/100)+SQRT(PE)，使用as将显示名称修改\n\n查询weight最高的10只股票，'order by weight desc limit 10'表示，将结果按weight降序排列，显示5条\n\n    select ticker,Return_1yr *((100-LTD)/100)+SQRT(PE) as weight from sp order by weight desc limit 5;\n\n结果如下\n\n    +--------+--------------------+\n    | ticker | weight             |\n    +--------+--------------------+\n    | NVDA   |             325.56 |\n    | NFLX   | 189.14999999999998 |\n    | AMZN   |             121.97 |\n    | PCLN   |              51.97 |\n    | ADBE   |              51.89 |\n    +--------+--------------------+\n\n接着是升序排列找到最低的5条\n\n    select ticker,Return_1yr *((100-LTD)/100)+SQRT(PE) as weight from sp order by weight asc limit 5;\n\n结果如下\n\n    +--------+---------------------+\n    | ticker | weight              |\n    +--------+---------------------+\n    | AGN    | -14.370000000000001 |\n    | GILD   |               -5.79 |\n    | CVS    |               -1.08 |\n    | NKE    |  3.3999999999999986 |\n    | PM     |  3.6100000000000003 |\n    +--------+---------------------+\n\n\n\n\n好了，就这样。\n\n\n\n","source":"_posts/crawler-4-selenium.md","raw":"---\ntitle: 使用Selenium驱动浏览器的爬虫\ndate: 2017-02-01 11:12:27\ntags:\ncategories: Python\n---\n\n\n我们这次使用[S&P Capital IQ NetAdvantage](www.netadvantage.standardandpoors.com)来查找S&P500中市值超过$50B的公司，并将表单数据爬取下来存入数据库。最后根据自己的需求找到对应的股票。\n\n为了更好地了解整个过程，建议使用python的交互式界面。\n\n<!--More-->\n\n## 使用工具\n\n- Selenium\n- Chrome webdriver\n- mysqlConnector\n- re\n\n\n\n## 使用Selenium驱动浏览器\n\n首先我们在这里先下载Webdriver, Selenium支持很多主流浏览器，如....。我们以Chrome为例，\n\n先初始化一个浏览器实例，\n\n    ```Python\n    >>>driver = webdriver.Chrome()\n    ```\n这时会启动一个新的Chrome浏览器界面，和我们平时的浏览器不同的是，这个新的浏览器是和我们python中的driver之间是可以通信的。当我们对浏览器（或driver实例）进行操作时，对应的driver(或浏览器)会相应改变。\n\n比如我们将网站跳转到www.Google.com：\n\n    ```Python\n    >>>driver.get(\"http://www.google.com\")\n    ```\n我们可以看到浏览器的第一个标签页跳转到了Google.com\n    \n接着我们在浏览器中手动输入www.baidu.com并进入\n\n    ```Python\n    >>>driver.current_url\n    ```\n就可以得到\n\n    ```Python\n    'http://www.baidu.com/'\n    ```\n接着我们进入到NetAdvantage的主页,点击Screener并添加筛选条件，SP500中市值大于$50B的公司。大约有一百个。\n\n![](crawler-4-selenium/search.png)\n    \n好了接着我们就可以使用Python的re库来爬取我们想要的资料了\n\n## re解析网页源码\n\n在抓取我们想要的数据之前我们需要先获得网页的源代码，我们使用driver的page_source方法获得浏览器当前页面源代码。注意和我们之前使用urllib和request库不同的是。由于我们使用浏览器进行加载，我们可以直接获得AJAX及其他各种方法加载过后的内容。为了提高效率，有些网站会有意无意地使用AJAX技术，这使我们之前的爬虫只能获得加载前的网页源码，并不能找到我们需要的数据，从而增加了我们的爬取难度。\n\n先来获取加载后的网页源码\n\n    ```Python\n    >>>source = driver.page_source\n    ```\n接着我们来引入我们的re库\n\n    ```Python\n    >>>import re\n    ```\n来看看我们要抓的数据是什么样子的结构\n\n    ```Html\n    <tr class=\"trowB_na\">\n      <td width=\"20\"  height=\"17\"><input type=\"checkbox\" name=\"displayRow\" value=\"4\"  onclick=\"Toggle(this,'trowB_na')\"></td>\n\t\t    <td  height=\"17\" align=\"left\" ><a  href=/NASApp/NetAdvantage/showPublication.do?dataPosition=4&SPID=5247 >ConocoPhillips</a></td>\n\t\t    <td  height=\"17\" align=\"left\" ><a   >COP</a></td>\n\t\t    <td  height=\"17\" align=\"left\" ><a   >US</a></td>\n\t\t    <td  height=\"17\" align=\"left\" ><a   >Energy</a></td>\n\t\t    <td  height=\"17\" align=\"left\" ><a   >Oil & Gas Exploration & Production</a></td>\n\t\t    <td  height=\"17\" align=\"left\" ><a   >48.760</a></td>\n\t\t    <td  height=\"17\" align=\"left\" ><a   >3 Star</a></td>\n\t\t    <td  height=\"17\" align=\"left\" ><a   >N/A</a></td>\n\t\t    <td  height=\"17\" align=\"left\" ><a   >40.04</a></td>\n\t\t    <td  height=\"17\" align=\"left\" ><a   >2.45</a></td>\n\t\t    <td  height=\"17\" align=\"left\" ><a   >N/A</a></td>\n\t\t    <td  height=\"17\" align=\"left\" ><a   >35.38</a></td>\n    </tr>\n    ```\n猛的一看我们的表单这么复杂，其实很简单。我们来看看都有什么，其中tr标签代表一行，td标签代表一个单元格：\n\n- Company Name，Ticker, \n- Region, \n- S&P Sub-Industry,\n- Last Closing Price,\n- S&P STARS Ranking,\n- S&P Capital IQ Quantitative Recommendation,\n- 1yr Total Return %,\n- 5yr Total Return %,\n- P/E,\n- LTD as % of Total Capital\n\n除第一行\n\n    ```Html\n    <td width=\"20\"  height=\"17\"><input type=\"checkbox\" name=\"displayRow\" value=\"4\"  onclick=\"Toggle(this,'trowB_na')\"></td>\n    ```\n之外，其余的td标签下的内容都是我们需要的数据。所以我们可以把正则表达式写成\n\n    ```Html\n    <tr class=\"trow\\w_na\">.*?\n        <td.*?</td>.*?\n        <td.*?<a.*?>(.+?)</a></td>.*?\n        <td.*?<a.*?>(.+?)</a></td>.*?\n        <td.*?<a.*?>(.+?)</a></td>.*?\n        <td.*?<a.*?>(.+?)</a></td>.*?\n        <td.*?<a.*?>(.+?)</a></td>.*?\n        <td.*?<a.*?>(.+?)</a></td>.*?\n        <td.*?<a.*?>(.+?)</a></td>.*?\n        <td.*?<a.*?>(.+?)</a></td>.*?\n        <td.*?<a.*?>(.+?)</a></td>.*?\n        <td.*?<a.*?>(.+?)</a></td>.*?\n        <td.*?<a.*?>(.+?)</a></td>.*?\n        <td.*?<a.*?>(.+?)</a></td>.*?\n    </tr>\n    ```\n这样我们就可以抓取(.+?)所代表的数据了，而.\\*?为不明确的内容被忽略掉。我们来用re.compile方法构成一个正则表达式的pattern\n\n    ```Python\n    >>>regex = '<tr class=\"trow\\w_na\">.*?<td.*?</td>.*?<td.*?<a.*?>(.+?)</a></td>.*?<td.*?<a.*?>(.+?)</a></td>.*?<td.*?<a.*?>(.+?)</a></td>.*?<td.*?<a.*?>(.+?)</a></td>.*?<td.*?<a.*?>(.+?)</a></td>.*?<td.*?<a.*?>(.+?)</a></td>.*?<td.*?<a.*?>(.+?)</a></td>.*?<td.*?<a.*?>(.+?)</a></td>.*?<td.*?<a.*?>(.+?)</a></td>.*?<td.*?<a.*?>(.+?)</a></td>.*?<td.*?<a.*?>(.+?)</a></td>.*?<td.*?<a.*?>(.+?)</a></td>.*?</tr>'\n    >>>pattern = re.compile(regex,re.S)\n    ```\n    \n接着使用re.findall来使用pattern查找页面源代码source里面所有匹配的内容\n\n    ```Python\n    >>>company_data_list = re.findall(pattern,source)\n    ```\n\n得到的内容如下\n\n    ```Python\n    >>>company_data_list\n    [('Oracle Corp', 'ORCL', 'US', 'Information Technology', 'Systems Software', '40.230', '5 Star', 'N/A', '16.99', '8.59', '19.20'), \n    ('Amazon.com Inc', 'AMZN', 'US', 'Consumer Discretionary', 'Internet &amp; Direct Marketing Retail', '830.380', '4 Star', 'N/A', '43.27', '33.73', '190.00'),\n    ...]\n    ```\n\n好了我们的爬取工作已经完成，接下来我们写入MySQL数据库\n\n### 写入数据库\n\n首先我们可以登入我们的MySQL\n\n    ```Bash\n    $ mysql -u [username] -p [password]\n    ```  \n输入密码后\n\n    ```\n    Welcome to the MySQL monitor.  Commands end with ; or \\g.\n    Your MySQL connection id is 17\n    Server version: 5.7.9 MySQL Community Server (GPL)\n\n    Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.\n\n    Oracle is a registered trademark of Oracle Corporation and/or its\n    affiliates. Other names may be trademarks of their respective\n    owners.\n\n    Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n    mysql> \n    ```\n接着我们要创建一个数据库，名字叫test,字符编码UTF-8\n\n    ```\n    mysql> CREATE DATABASE test charset = 'utf8';\n    ```\n\n接着进入我们的数据库\n\n    ```\n    mysql> USE test;\n    ```\n创建一张表，名字叫sp100，同时包含了表格各列的名称和数据类型，由于我们抓取的内容都是字符串，并且有的内容标示为'N/A'，我们不能使用数字格式，这里使用字符串格式；\n\n    ```SQL\n    create table sp10(\n    Company_Name varchar(50), \n    Ticker varchar(10), \n    Region varchar(10), \n    SP_Sector varchar(30), SP_Sub_Industry varchar(50), \n    Last_Closing_Price varchar(10), \n    Ranking Varchar(15), \n    Capital_IQ_RECOM VARCHAR(10), \n    Return_1yr varchar(10), \n    Return_5yr varchar(10), \n    PE varchar(30), \n    LTD varchar(30)\n    );\n    ```\n接着我们就可以使用python继续写入内容了\n\n首先引入mysql Connector\n\n    ```Python\n    >>>import mysql.connector\n    ```\n\n接着创建一个你的数据库信息变量config\n\n    ```Python\n    config={'host':'127.0.0.1',\n        'user':'你的用户名',\n        'password':密码,\n        'port':3306,\n        'database':'test', #这是你刚刚创建的数据库test\n        'charset':'utf8', #编码'utf8' \n        }\n    ```\n\n然后尝试连接数据库，出错则报错\n\n    ```Python\n    try:\n            cnn = mysql.connector.connect(**config)\n    except mysql.connector.Error as e:\n            print('connnect failed!{}'.format(e))\n    ```\n\n通过连接创建一个控制数据库的光标cursor,它会代替你来对数据库执行操作\n\n    ```Python\n    >>>cursor = cnn.cursor()\n    ```\n\n然后给一个你将要执行的INSERT语句来把我们的变量插入,%s表示要插入的数据\n\n    ```Python\n    >>>insert_statement = 'Insert sp100 (Company_Name,Ticker,Region,SP_Sector,SP_Sub_Industry,Last_Closing_Price,Ranking,Capital_IQ_RECOM,Return_1yr,Return_5yr,PE,LTD) values(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)'\n    ```\n\n使用循环语句和execute方法将我们的100条公司数据依次添加到数据库中,否则会报错\n\n    ```Python\n    >>>for company in company_data_list:\n            try:\n                    cursor.execute(insert_statement,company)\n            except:\n                    print(\"Inserting data error!{}\".format(e))  \n    ```\n\n要注意的是，执行完上面语句后我们的数据库并没有出现数据，因为我们并没有提交修改。这里使用commit方法提交\n\n    ```Python\n    >>>cnn.commit()\n    ```\n\n然后关掉cursor,断开连接\n\n    ```Python\n    >>>cursor.close()\n    >>>cnn.close()\n    ```\n到这里我们就可以看到数据库中的内容了，回到mysql查看，\n\n    \n    mysql> select * from sp100\\G;\n    *************************** 1. row ***************************\n          Company_Name: Oracle Corp\n                Ticker: ORCL\n                Region: US\n             SP_Sector: Information Technology\n       SP_Sub_Industry: Systems Software\n    Last_Closing_Price: 40.230\n               Ranking: 5 Star\n      Capital_IQ_RECOM: N/A\n            Return_1yr: 16.99\n            Return_5yr: 8.59\n                    PE: 19.20\n                   LTD: 43.76\n    *************************** 2. row ***************************\n    \n    ...\n\n最后我们要对这些数据进行简单的处理并按照我们想要的方法分析\n\n## 操作数据库\n\n首先，举个例子（例子非真实情况）：\n\n假设我们要找到将各个公司的1年回报率乘以（1-长期债务率）得到公司在不负债的情况下对应的收益，然后加上它PE的二次方根。大致如下\n\n    Unlevered 1yr return = 1 yr return* (1-LTD%)\n    weighted_index = unlevered return ＋ SQRT(PE)\n    \n最后我们取前5名和后5名\n\n我们来看怎么操作，之前我们讲到我们所有的数据都是字符串，字符串并不能正确地按数字大小排列内容。所以我们要先剔除带有所需数据中带有'N/A'的公司\n\n    mysql> create table sp as  select * from sp100 where PE != 'N/A' and Return_1yr!='N/A' and LTD!='N/A';\n\n这样一来我们就将PE,Return_1yr和LTD下带有‘N/A'的公司剔除了并放入一张新表sp中，接着我们将sp的这三列变成双精度浮点double类型\n\n    mysql> alter table sp change PE PE DOUBLE;\n    mysql> alter table sp change Return_1yr Return_1yr DOUBLE;\n    mysql> alter table sp change LTD LTD DOUBLE;\n    \n接着我们就可用通过select来查询我们需要的内容，我们要求数据库返回两列内容，一个是公司股票代码，另一个是weight.\n\n这里weight=Return_1yr *((100-LTD)/100)+SQRT(PE)，使用as将显示名称修改\n\n查询weight最高的10只股票，'order by weight desc limit 10'表示，将结果按weight降序排列，显示5条\n\n    select ticker,Return_1yr *((100-LTD)/100)+SQRT(PE) as weight from sp order by weight desc limit 5;\n\n结果如下\n\n    +--------+--------------------+\n    | ticker | weight             |\n    +--------+--------------------+\n    | NVDA   |             325.56 |\n    | NFLX   | 189.14999999999998 |\n    | AMZN   |             121.97 |\n    | PCLN   |              51.97 |\n    | ADBE   |              51.89 |\n    +--------+--------------------+\n\n接着是升序排列找到最低的5条\n\n    select ticker,Return_1yr *((100-LTD)/100)+SQRT(PE) as weight from sp order by weight asc limit 5;\n\n结果如下\n\n    +--------+---------------------+\n    | ticker | weight              |\n    +--------+---------------------+\n    | AGN    | -14.370000000000001 |\n    | GILD   |               -5.79 |\n    | CVS    |               -1.08 |\n    | NKE    |  3.3999999999999986 |\n    | PM     |  3.6100000000000003 |\n    +--------+---------------------+\n\n\n\n\n好了，就这样。\n\n\n\n","slug":"crawler-4-selenium","published":1,"updated":"2018-06-22T06:02:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiqvlnwc000sglu38egnmwlr","content":"<p>我们这次使用<a href=\"www.netadvantage.standardandpoors.com\">S&amp;P Capital IQ NetAdvantage</a>来查找S&amp;P500中市值超过$50B的公司，并将表单数据爬取下来存入数据库。最后根据自己的需求找到对应的股票。</p>\n<p>为了更好地了解整个过程，建议使用python的交互式界面。</p>\n<a id=\"more\"></a>\n<h2 id=\"使用工具\"><a href=\"#使用工具\" class=\"headerlink\" title=\"使用工具\"></a>使用工具</h2><ul>\n<li>Selenium</li>\n<li>Chrome webdriver</li>\n<li>mysqlConnector</li>\n<li>re</li>\n</ul>\n<h2 id=\"使用Selenium驱动浏览器\"><a href=\"#使用Selenium驱动浏览器\" class=\"headerlink\" title=\"使用Selenium驱动浏览器\"></a>使用Selenium驱动浏览器</h2><p>首先我们在这里先下载Webdriver, Selenium支持很多主流浏览器，如….。我们以Chrome为例，</p>\n<p>先初始化一个浏览器实例，</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;driver = webdriver.Chrome()</span><br></pre></td></tr></table></figure>\n</code></pre><p>这时会启动一个新的Chrome浏览器界面，和我们平时的浏览器不同的是，这个新的浏览器是和我们python中的driver之间是可以通信的。当我们对浏览器（或driver实例）进行操作时，对应的driver(或浏览器)会相应改变。</p>\n<p>比如我们将网站跳转到<a href=\"http://www.Google.com：\" target=\"_blank\" rel=\"noopener\">www.Google.com：</a></p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;driver.get(<span class=\"string\">\"http://www.google.com\"</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>我们可以看到浏览器的第一个标签页跳转到了Google.com</p>\n<p>接着我们在浏览器中手动输入<a href=\"http://www.baidu.com并进入\" target=\"_blank\" rel=\"noopener\">www.baidu.com并进入</a></p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;driver.current_url</span><br></pre></td></tr></table></figure>\n</code></pre><p>就可以得到</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'http://www.baidu.com/'</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>接着我们进入到NetAdvantage的主页,点击Screener并添加筛选条件，SP500中市值大于$50B的公司。大约有一百个。</p>\n<p><img src=\"/article/crawler-4-selenium/search.png\" alt=\"\"></p>\n<p>好了接着我们就可以使用Python的re库来爬取我们想要的资料了</p>\n<h2 id=\"re解析网页源码\"><a href=\"#re解析网页源码\" class=\"headerlink\" title=\"re解析网页源码\"></a>re解析网页源码</h2><p>在抓取我们想要的数据之前我们需要先获得网页的源代码，我们使用driver的page_source方法获得浏览器当前页面源代码。注意和我们之前使用urllib和request库不同的是。由于我们使用浏览器进行加载，我们可以直接获得AJAX及其他各种方法加载过后的内容。为了提高效率，有些网站会有意无意地使用AJAX技术，这使我们之前的爬虫只能获得加载前的网页源码，并不能找到我们需要的数据，从而增加了我们的爬取难度。</p>\n<p>先来获取加载后的网页源码</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;source = driver.page_source</span><br></pre></td></tr></table></figure>\n</code></pre><p>接着我们来引入我们的re库</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">import</span> re</span><br></pre></td></tr></table></figure>\n</code></pre><p>来看看我们要抓的数据是什么样子的结构</p>\n<pre><code><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">class</span>=<span class=\"string\">\"trowB_na\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">width</span>=<span class=\"string\">\"20\"</span>  <span class=\"attr\">height</span>=<span class=\"string\">\"17\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"displayRow\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"4\"</span>  <span class=\"attr\">onclick</span>=<span class=\"string\">\"Toggle(this,'trowB_na')\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>  <span class=\"attr\">height</span>=<span class=\"string\">\"17\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span> &gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>  <span class=\"attr\">href</span>=<span class=\"string\">/NASApp/NetAdvantage/showPublication.do?dataPosition</span>=<span class=\"string\">4&amp;SPID</span>=<span class=\"string\">5247</span> &gt;</span>ConocoPhillips<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>  <span class=\"attr\">height</span>=<span class=\"string\">\"17\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span> &gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>   &gt;</span>COP<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>  <span class=\"attr\">height</span>=<span class=\"string\">\"17\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span> &gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>   &gt;</span>US<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>  <span class=\"attr\">height</span>=<span class=\"string\">\"17\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span> &gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>   &gt;</span>Energy<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>  <span class=\"attr\">height</span>=<span class=\"string\">\"17\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span> &gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>   &gt;</span>Oil &amp; Gas Exploration &amp; Production<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>  <span class=\"attr\">height</span>=<span class=\"string\">\"17\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span> &gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>   &gt;</span>48.760<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>  <span class=\"attr\">height</span>=<span class=\"string\">\"17\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span> &gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>   &gt;</span>3 Star<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>  <span class=\"attr\">height</span>=<span class=\"string\">\"17\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span> &gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>   &gt;</span>N/A<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>  <span class=\"attr\">height</span>=<span class=\"string\">\"17\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span> &gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>   &gt;</span>40.04<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>  <span class=\"attr\">height</span>=<span class=\"string\">\"17\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span> &gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>   &gt;</span>2.45<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>  <span class=\"attr\">height</span>=<span class=\"string\">\"17\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span> &gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>   &gt;</span>N/A<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>  <span class=\"attr\">height</span>=<span class=\"string\">\"17\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span> &gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>   &gt;</span>35.38<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>猛的一看我们的表单这么复杂，其实很简单。我们来看看都有什么，其中tr标签代表一行，td标签代表一个单元格：</p>\n<ul>\n<li>Company Name，Ticker, </li>\n<li>Region, </li>\n<li>S&amp;P Sub-Industry,</li>\n<li>Last Closing Price,</li>\n<li>S&amp;P STARS Ranking,</li>\n<li>S&amp;P Capital IQ Quantitative Recommendation,</li>\n<li>1yr Total Return %,</li>\n<li>5yr Total Return %,</li>\n<li>P/E,</li>\n<li>LTD as % of Total Capital</li>\n</ul>\n<p>除第一行</p>\n<pre><code><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">width</span>=<span class=\"string\">\"20\"</span>  <span class=\"attr\">height</span>=<span class=\"string\">\"17\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"displayRow\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"4\"</span>  <span class=\"attr\">onclick</span>=<span class=\"string\">\"Toggle(this,'trowB_na')\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>之外，其余的td标签下的内容都是我们需要的数据。所以我们可以把正则表达式写成</p>\n<pre><code><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">class</span>=<span class=\"string\">\"trow\\w_na\"</span>&gt;</span>.*?</span><br><span class=\"line\">    &lt;td.*?&lt;/td&gt;.*?</span><br><span class=\"line\">    &lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?</span><br><span class=\"line\">    &lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?</span><br><span class=\"line\">    &lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?</span><br><span class=\"line\">    &lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?</span><br><span class=\"line\">    &lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?</span><br><span class=\"line\">    &lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?</span><br><span class=\"line\">    &lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?</span><br><span class=\"line\">    &lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?</span><br><span class=\"line\">    &lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?</span><br><span class=\"line\">    &lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?</span><br><span class=\"line\">    &lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?</span><br><span class=\"line\">    &lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>这样我们就可以抓取(.+?)所代表的数据了，而.*?为不明确的内容被忽略掉。我们来用re.compile方法构成一个正则表达式的pattern</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;regex = <span class=\"string\">'&lt;tr class=\"trow\\w_na\"&gt;.*?&lt;td.*?&lt;/td&gt;.*?&lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?&lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?&lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?&lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?&lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?&lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?&lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?&lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?&lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?&lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?&lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?&lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?&lt;/tr&gt;'</span></span><br><span class=\"line\">&gt;&gt;&gt;pattern = re.compile(regex,re.S)</span><br></pre></td></tr></table></figure>\n</code></pre><p>接着使用re.findall来使用pattern查找页面源代码source里面所有匹配的内容</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;company_data_list = re.findall(pattern,source)</span><br></pre></td></tr></table></figure>\n</code></pre><p>得到的内容如下</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;company_data_list</span><br><span class=\"line\">[(<span class=\"string\">'Oracle Corp'</span>, <span class=\"string\">'ORCL'</span>, <span class=\"string\">'US'</span>, <span class=\"string\">'Information Technology'</span>, <span class=\"string\">'Systems Software'</span>, <span class=\"string\">'40.230'</span>, <span class=\"string\">'5 Star'</span>, <span class=\"string\">'N/A'</span>, <span class=\"string\">'16.99'</span>, <span class=\"string\">'8.59'</span>, <span class=\"string\">'19.20'</span>), </span><br><span class=\"line\">(<span class=\"string\">'Amazon.com Inc'</span>, <span class=\"string\">'AMZN'</span>, <span class=\"string\">'US'</span>, <span class=\"string\">'Consumer Discretionary'</span>, <span class=\"string\">'Internet &amp;amp; Direct Marketing Retail'</span>, <span class=\"string\">'830.380'</span>, <span class=\"string\">'4 Star'</span>, <span class=\"string\">'N/A'</span>, <span class=\"string\">'43.27'</span>, <span class=\"string\">'33.73'</span>, <span class=\"string\">'190.00'</span>),</span><br><span class=\"line\">...]</span><br></pre></td></tr></table></figure>\n</code></pre><p>好了我们的爬取工作已经完成，接下来我们写入MySQL数据库</p>\n<h3 id=\"写入数据库\"><a href=\"#写入数据库\" class=\"headerlink\" title=\"写入数据库\"></a>写入数据库</h3><p>首先我们可以登入我们的MySQL</p>\n<pre><code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    $ mysql -u [username] -p [password]</span><br><span class=\"line\">    ```  </span><br><span class=\"line\">输入密码后</span><br></pre></td></tr></table></figure>\n\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 17\nServer version: 5.7.9 MySQL Community Server (GPL)\n\nCopyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType &apos;help;&apos; or &apos;\\h&apos; for help. Type &apos;\\c&apos; to clear the current input statement.\nmysql&gt; \n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">接着我们要创建一个数据库，名字叫<span class=\"built_in\">test</span>,字符编码UTF-8</span><br></pre></td></tr></table></figure>\n\nmysql&gt; CREATE DATABASE test charset = &apos;utf8&apos;;\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">接着进入我们的数据库</span><br></pre></td></tr></table></figure>\n\nmysql&gt; USE test;\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建一张表，名字叫sp100，同时包含了表格各列的名称和数据类型，由于我们抓取的内容都是字符串，并且有的内容标示为'N/A'，我们不能使用数字格式，这里使用字符串格式；</span><br><span class=\"line\"></span><br><span class=\"line\">    ```SQL</span><br><span class=\"line\">    <span class=\"keyword\">create</span> <span class=\"keyword\">table</span> sp10(</span><br><span class=\"line\">    Company_Name <span class=\"built_in\">varchar</span>(<span class=\"number\">50</span>), </span><br><span class=\"line\">    Ticker <span class=\"built_in\">varchar</span>(<span class=\"number\">10</span>), </span><br><span class=\"line\">    Region <span class=\"built_in\">varchar</span>(<span class=\"number\">10</span>), </span><br><span class=\"line\">    SP_Sector <span class=\"built_in\">varchar</span>(<span class=\"number\">30</span>), SP_Sub_Industry <span class=\"built_in\">varchar</span>(<span class=\"number\">50</span>), </span><br><span class=\"line\">    Last_Closing_Price <span class=\"built_in\">varchar</span>(<span class=\"number\">10</span>), </span><br><span class=\"line\">    Ranking <span class=\"built_in\">Varchar</span>(<span class=\"number\">15</span>), </span><br><span class=\"line\">    Capital_IQ_RECOM <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>), </span><br><span class=\"line\">    Return_1yr <span class=\"built_in\">varchar</span>(<span class=\"number\">10</span>), </span><br><span class=\"line\">    Return_5yr <span class=\"built_in\">varchar</span>(<span class=\"number\">10</span>), </span><br><span class=\"line\">    PE <span class=\"built_in\">varchar</span>(<span class=\"number\">30</span>), </span><br><span class=\"line\">    LTD <span class=\"built_in\">varchar</span>(<span class=\"number\">30</span>)</span><br><span class=\"line\">    );</span><br></pre></td></tr></table></figure>\n</code></pre><p>接着我们就可以使用python继续写入内容了</p>\n<p>首先引入mysql Connector</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">import</span> mysql.connector</span><br></pre></td></tr></table></figure>\n</code></pre><p>接着创建一个你的数据库信息变量config</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config=&#123;<span class=\"string\">'host'</span>:<span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">    <span class=\"string\">'user'</span>:<span class=\"string\">'你的用户名'</span>,</span><br><span class=\"line\">    <span class=\"string\">'password'</span>:密码,</span><br><span class=\"line\">    <span class=\"string\">'port'</span>:<span class=\"number\">3306</span>,</span><br><span class=\"line\">    <span class=\"string\">'database'</span>:<span class=\"string\">'test'</span>, <span class=\"comment\">#这是你刚刚创建的数据库test</span></span><br><span class=\"line\">    <span class=\"string\">'charset'</span>:<span class=\"string\">'utf8'</span>, <span class=\"comment\">#编码'utf8' </span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</code></pre><p>然后尝试连接数据库，出错则报错</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">        cnn = mysql.connector.connect(**config)</span><br><span class=\"line\"><span class=\"keyword\">except</span> mysql.connector.Error <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        print(<span class=\"string\">'connnect failed!&#123;&#125;'</span>.format(e))</span><br></pre></td></tr></table></figure>\n</code></pre><p>通过连接创建一个控制数据库的光标cursor,它会代替你来对数据库执行操作</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;cursor = cnn.cursor()</span><br></pre></td></tr></table></figure>\n</code></pre><p>然后给一个你将要执行的INSERT语句来把我们的变量插入,%s表示要插入的数据</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;insert_statement = <span class=\"string\">'Insert sp100 (Company_Name,Ticker,Region,SP_Sector,SP_Sub_Industry,Last_Closing_Price,Ranking,Capital_IQ_RECOM,Return_1yr,Return_5yr,PE,LTD) values(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)'</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>使用循环语句和execute方法将我们的100条公司数据依次添加到数据库中,否则会报错</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">for</span> company <span class=\"keyword\">in</span> company_data_list:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                cursor.execute(insert_statement,company)</span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                print(<span class=\"string\">\"Inserting data error!&#123;&#125;\"</span>.format(e))</span><br></pre></td></tr></table></figure>\n</code></pre><p>要注意的是，执行完上面语句后我们的数据库并没有出现数据，因为我们并没有提交修改。这里使用commit方法提交</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;cnn.commit()</span><br></pre></td></tr></table></figure>\n</code></pre><p>然后关掉cursor,断开连接</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;cursor.close()</span><br><span class=\"line\">&gt;&gt;&gt;cnn.close()</span><br></pre></td></tr></table></figure>\n</code></pre><p>到这里我们就可以看到数据库中的内容了，回到mysql查看，</p>\n<pre><code>mysql&gt; select * from sp100\\G;\n*************************** 1. row ***************************\n      Company_Name: Oracle Corp\n            Ticker: ORCL\n            Region: US\n         SP_Sector: Information Technology\n   SP_Sub_Industry: Systems Software\nLast_Closing_Price: 40.230\n           Ranking: 5 Star\n  Capital_IQ_RECOM: N/A\n        Return_1yr: 16.99\n        Return_5yr: 8.59\n                PE: 19.20\n               LTD: 43.76\n*************************** 2. row ***************************\n\n...\n</code></pre><p>最后我们要对这些数据进行简单的处理并按照我们想要的方法分析</p>\n<h2 id=\"操作数据库\"><a href=\"#操作数据库\" class=\"headerlink\" title=\"操作数据库\"></a>操作数据库</h2><p>首先，举个例子（例子非真实情况）：</p>\n<p>假设我们要找到将各个公司的1年回报率乘以（1-长期债务率）得到公司在不负债的情况下对应的收益，然后加上它PE的二次方根。大致如下</p>\n<pre><code>Unlevered 1yr return = 1 yr return* (1-LTD%)\nweighted_index = unlevered return ＋ SQRT(PE)\n</code></pre><p>最后我们取前5名和后5名</p>\n<p>我们来看怎么操作，之前我们讲到我们所有的数据都是字符串，字符串并不能正确地按数字大小排列内容。所以我们要先剔除带有所需数据中带有’N/A’的公司</p>\n<pre><code>mysql&gt; create table sp as  select * from sp100 where PE != &apos;N/A&apos; and Return_1yr!=&apos;N/A&apos; and LTD!=&apos;N/A&apos;;\n</code></pre><p>这样一来我们就将PE,Return_1yr和LTD下带有‘N/A’的公司剔除了并放入一张新表sp中，接着我们将sp的这三列变成双精度浮点double类型</p>\n<pre><code>mysql&gt; alter table sp change PE PE DOUBLE;\nmysql&gt; alter table sp change Return_1yr Return_1yr DOUBLE;\nmysql&gt; alter table sp change LTD LTD DOUBLE;\n</code></pre><p>接着我们就可用通过select来查询我们需要的内容，我们要求数据库返回两列内容，一个是公司股票代码，另一个是weight.</p>\n<p>这里weight=Return_1yr *((100-LTD)/100)+SQRT(PE)，使用as将显示名称修改</p>\n<p>查询weight最高的10只股票，’order by weight desc limit 10’表示，将结果按weight降序排列，显示5条</p>\n<pre><code>select ticker,Return_1yr *((100-LTD)/100)+SQRT(PE) as weight from sp order by weight desc limit 5;\n</code></pre><p>结果如下</p>\n<pre><code>+--------+--------------------+\n| ticker | weight             |\n+--------+--------------------+\n| NVDA   |             325.56 |\n| NFLX   | 189.14999999999998 |\n| AMZN   |             121.97 |\n| PCLN   |              51.97 |\n| ADBE   |              51.89 |\n+--------+--------------------+\n</code></pre><p>接着是升序排列找到最低的5条</p>\n<pre><code>select ticker,Return_1yr *((100-LTD)/100)+SQRT(PE) as weight from sp order by weight asc limit 5;\n</code></pre><p>结果如下</p>\n<pre><code>+--------+---------------------+\n| ticker | weight              |\n+--------+---------------------+\n| AGN    | -14.370000000000001 |\n| GILD   |               -5.79 |\n| CVS    |               -1.08 |\n| NKE    |  3.3999999999999986 |\n| PM     |  3.6100000000000003 |\n+--------+---------------------+\n</code></pre><p>好了，就这样。</p>\n","site":{"data":{}},"excerpt":"<p>我们这次使用<a href=\"www.netadvantage.standardandpoors.com\">S&amp;P Capital IQ NetAdvantage</a>来查找S&amp;P500中市值超过$50B的公司，并将表单数据爬取下来存入数据库。最后根据自己的需求找到对应的股票。</p>\n<p>为了更好地了解整个过程，建议使用python的交互式界面。</p>","more":"<h2 id=\"使用工具\"><a href=\"#使用工具\" class=\"headerlink\" title=\"使用工具\"></a>使用工具</h2><ul>\n<li>Selenium</li>\n<li>Chrome webdriver</li>\n<li>mysqlConnector</li>\n<li>re</li>\n</ul>\n<h2 id=\"使用Selenium驱动浏览器\"><a href=\"#使用Selenium驱动浏览器\" class=\"headerlink\" title=\"使用Selenium驱动浏览器\"></a>使用Selenium驱动浏览器</h2><p>首先我们在这里先下载Webdriver, Selenium支持很多主流浏览器，如….。我们以Chrome为例，</p>\n<p>先初始化一个浏览器实例，</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;driver = webdriver.Chrome()</span><br></pre></td></tr></table></figure>\n</code></pre><p>这时会启动一个新的Chrome浏览器界面，和我们平时的浏览器不同的是，这个新的浏览器是和我们python中的driver之间是可以通信的。当我们对浏览器（或driver实例）进行操作时，对应的driver(或浏览器)会相应改变。</p>\n<p>比如我们将网站跳转到<a href=\"http://www.Google.com：\" target=\"_blank\" rel=\"noopener\">www.Google.com：</a></p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;driver.get(<span class=\"string\">\"http://www.google.com\"</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>我们可以看到浏览器的第一个标签页跳转到了Google.com</p>\n<p>接着我们在浏览器中手动输入<a href=\"http://www.baidu.com并进入\" target=\"_blank\" rel=\"noopener\">www.baidu.com并进入</a></p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;driver.current_url</span><br></pre></td></tr></table></figure>\n</code></pre><p>就可以得到</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'http://www.baidu.com/'</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>接着我们进入到NetAdvantage的主页,点击Screener并添加筛选条件，SP500中市值大于$50B的公司。大约有一百个。</p>\n<p><img src=\"/article/crawler-4-selenium/search.png\" alt=\"\"></p>\n<p>好了接着我们就可以使用Python的re库来爬取我们想要的资料了</p>\n<h2 id=\"re解析网页源码\"><a href=\"#re解析网页源码\" class=\"headerlink\" title=\"re解析网页源码\"></a>re解析网页源码</h2><p>在抓取我们想要的数据之前我们需要先获得网页的源代码，我们使用driver的page_source方法获得浏览器当前页面源代码。注意和我们之前使用urllib和request库不同的是。由于我们使用浏览器进行加载，我们可以直接获得AJAX及其他各种方法加载过后的内容。为了提高效率，有些网站会有意无意地使用AJAX技术，这使我们之前的爬虫只能获得加载前的网页源码，并不能找到我们需要的数据，从而增加了我们的爬取难度。</p>\n<p>先来获取加载后的网页源码</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;source = driver.page_source</span><br></pre></td></tr></table></figure>\n</code></pre><p>接着我们来引入我们的re库</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">import</span> re</span><br></pre></td></tr></table></figure>\n</code></pre><p>来看看我们要抓的数据是什么样子的结构</p>\n<pre><code><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">class</span>=<span class=\"string\">\"trowB_na\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">width</span>=<span class=\"string\">\"20\"</span>  <span class=\"attr\">height</span>=<span class=\"string\">\"17\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"displayRow\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"4\"</span>  <span class=\"attr\">onclick</span>=<span class=\"string\">\"Toggle(this,'trowB_na')\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>  <span class=\"attr\">height</span>=<span class=\"string\">\"17\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span> &gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>  <span class=\"attr\">href</span>=<span class=\"string\">/NASApp/NetAdvantage/showPublication.do?dataPosition</span>=<span class=\"string\">4&amp;SPID</span>=<span class=\"string\">5247</span> &gt;</span>ConocoPhillips<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>  <span class=\"attr\">height</span>=<span class=\"string\">\"17\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span> &gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>   &gt;</span>COP<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>  <span class=\"attr\">height</span>=<span class=\"string\">\"17\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span> &gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>   &gt;</span>US<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>  <span class=\"attr\">height</span>=<span class=\"string\">\"17\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span> &gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>   &gt;</span>Energy<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>  <span class=\"attr\">height</span>=<span class=\"string\">\"17\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span> &gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>   &gt;</span>Oil &amp; Gas Exploration &amp; Production<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>  <span class=\"attr\">height</span>=<span class=\"string\">\"17\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span> &gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>   &gt;</span>48.760<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>  <span class=\"attr\">height</span>=<span class=\"string\">\"17\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span> &gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>   &gt;</span>3 Star<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>  <span class=\"attr\">height</span>=<span class=\"string\">\"17\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span> &gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>   &gt;</span>N/A<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>  <span class=\"attr\">height</span>=<span class=\"string\">\"17\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span> &gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>   &gt;</span>40.04<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>  <span class=\"attr\">height</span>=<span class=\"string\">\"17\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span> &gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>   &gt;</span>2.45<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>  <span class=\"attr\">height</span>=<span class=\"string\">\"17\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span> &gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>   &gt;</span>N/A<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>  <span class=\"attr\">height</span>=<span class=\"string\">\"17\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"left\"</span> &gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>   &gt;</span>35.38<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>猛的一看我们的表单这么复杂，其实很简单。我们来看看都有什么，其中tr标签代表一行，td标签代表一个单元格：</p>\n<ul>\n<li>Company Name，Ticker, </li>\n<li>Region, </li>\n<li>S&amp;P Sub-Industry,</li>\n<li>Last Closing Price,</li>\n<li>S&amp;P STARS Ranking,</li>\n<li>S&amp;P Capital IQ Quantitative Recommendation,</li>\n<li>1yr Total Return %,</li>\n<li>5yr Total Return %,</li>\n<li>P/E,</li>\n<li>LTD as % of Total Capital</li>\n</ul>\n<p>除第一行</p>\n<pre><code><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">width</span>=<span class=\"string\">\"20\"</span>  <span class=\"attr\">height</span>=<span class=\"string\">\"17\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"displayRow\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"4\"</span>  <span class=\"attr\">onclick</span>=<span class=\"string\">\"Toggle(this,'trowB_na')\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>之外，其余的td标签下的内容都是我们需要的数据。所以我们可以把正则表达式写成</p>\n<pre><code><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">class</span>=<span class=\"string\">\"trow\\w_na\"</span>&gt;</span>.*?</span><br><span class=\"line\">    &lt;td.*?&lt;/td&gt;.*?</span><br><span class=\"line\">    &lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?</span><br><span class=\"line\">    &lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?</span><br><span class=\"line\">    &lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?</span><br><span class=\"line\">    &lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?</span><br><span class=\"line\">    &lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?</span><br><span class=\"line\">    &lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?</span><br><span class=\"line\">    &lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?</span><br><span class=\"line\">    &lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?</span><br><span class=\"line\">    &lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?</span><br><span class=\"line\">    &lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?</span><br><span class=\"line\">    &lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?</span><br><span class=\"line\">    &lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>这样我们就可以抓取(.+?)所代表的数据了，而.*?为不明确的内容被忽略掉。我们来用re.compile方法构成一个正则表达式的pattern</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;regex = <span class=\"string\">'&lt;tr class=\"trow\\w_na\"&gt;.*?&lt;td.*?&lt;/td&gt;.*?&lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?&lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?&lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?&lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?&lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?&lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?&lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?&lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?&lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?&lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?&lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?&lt;td.*?&lt;a.*?&gt;(.+?)&lt;/a&gt;&lt;/td&gt;.*?&lt;/tr&gt;'</span></span><br><span class=\"line\">&gt;&gt;&gt;pattern = re.compile(regex,re.S)</span><br></pre></td></tr></table></figure>\n</code></pre><p>接着使用re.findall来使用pattern查找页面源代码source里面所有匹配的内容</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;company_data_list = re.findall(pattern,source)</span><br></pre></td></tr></table></figure>\n</code></pre><p>得到的内容如下</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;company_data_list</span><br><span class=\"line\">[(<span class=\"string\">'Oracle Corp'</span>, <span class=\"string\">'ORCL'</span>, <span class=\"string\">'US'</span>, <span class=\"string\">'Information Technology'</span>, <span class=\"string\">'Systems Software'</span>, <span class=\"string\">'40.230'</span>, <span class=\"string\">'5 Star'</span>, <span class=\"string\">'N/A'</span>, <span class=\"string\">'16.99'</span>, <span class=\"string\">'8.59'</span>, <span class=\"string\">'19.20'</span>), </span><br><span class=\"line\">(<span class=\"string\">'Amazon.com Inc'</span>, <span class=\"string\">'AMZN'</span>, <span class=\"string\">'US'</span>, <span class=\"string\">'Consumer Discretionary'</span>, <span class=\"string\">'Internet &amp;amp; Direct Marketing Retail'</span>, <span class=\"string\">'830.380'</span>, <span class=\"string\">'4 Star'</span>, <span class=\"string\">'N/A'</span>, <span class=\"string\">'43.27'</span>, <span class=\"string\">'33.73'</span>, <span class=\"string\">'190.00'</span>),</span><br><span class=\"line\">...]</span><br></pre></td></tr></table></figure>\n</code></pre><p>好了我们的爬取工作已经完成，接下来我们写入MySQL数据库</p>\n<h3 id=\"写入数据库\"><a href=\"#写入数据库\" class=\"headerlink\" title=\"写入数据库\"></a>写入数据库</h3><p>首先我们可以登入我们的MySQL</p>\n<pre><code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    $ mysql -u [username] -p [password]</span><br><span class=\"line\">    ```  </span><br><span class=\"line\">输入密码后</span><br></pre></td></tr></table></figure>\n\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 17\nServer version: 5.7.9 MySQL Community Server (GPL)\n\nCopyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType &apos;help;&apos; or &apos;\\h&apos; for help. Type &apos;\\c&apos; to clear the current input statement.\nmysql&gt; \n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">接着我们要创建一个数据库，名字叫<span class=\"built_in\">test</span>,字符编码UTF-8</span><br></pre></td></tr></table></figure>\n\nmysql&gt; CREATE DATABASE test charset = &apos;utf8&apos;;\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">接着进入我们的数据库</span><br></pre></td></tr></table></figure>\n\nmysql&gt; USE test;\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建一张表，名字叫sp100，同时包含了表格各列的名称和数据类型，由于我们抓取的内容都是字符串，并且有的内容标示为'N/A'，我们不能使用数字格式，这里使用字符串格式；</span><br><span class=\"line\"></span><br><span class=\"line\">    ```SQL</span><br><span class=\"line\">    <span class=\"keyword\">create</span> <span class=\"keyword\">table</span> sp10(</span><br><span class=\"line\">    Company_Name <span class=\"built_in\">varchar</span>(<span class=\"number\">50</span>), </span><br><span class=\"line\">    Ticker <span class=\"built_in\">varchar</span>(<span class=\"number\">10</span>), </span><br><span class=\"line\">    Region <span class=\"built_in\">varchar</span>(<span class=\"number\">10</span>), </span><br><span class=\"line\">    SP_Sector <span class=\"built_in\">varchar</span>(<span class=\"number\">30</span>), SP_Sub_Industry <span class=\"built_in\">varchar</span>(<span class=\"number\">50</span>), </span><br><span class=\"line\">    Last_Closing_Price <span class=\"built_in\">varchar</span>(<span class=\"number\">10</span>), </span><br><span class=\"line\">    Ranking <span class=\"built_in\">Varchar</span>(<span class=\"number\">15</span>), </span><br><span class=\"line\">    Capital_IQ_RECOM <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>), </span><br><span class=\"line\">    Return_1yr <span class=\"built_in\">varchar</span>(<span class=\"number\">10</span>), </span><br><span class=\"line\">    Return_5yr <span class=\"built_in\">varchar</span>(<span class=\"number\">10</span>), </span><br><span class=\"line\">    PE <span class=\"built_in\">varchar</span>(<span class=\"number\">30</span>), </span><br><span class=\"line\">    LTD <span class=\"built_in\">varchar</span>(<span class=\"number\">30</span>)</span><br><span class=\"line\">    );</span><br></pre></td></tr></table></figure>\n</code></pre><p>接着我们就可以使用python继续写入内容了</p>\n<p>首先引入mysql Connector</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">import</span> mysql.connector</span><br></pre></td></tr></table></figure>\n</code></pre><p>接着创建一个你的数据库信息变量config</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config=&#123;<span class=\"string\">'host'</span>:<span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">    <span class=\"string\">'user'</span>:<span class=\"string\">'你的用户名'</span>,</span><br><span class=\"line\">    <span class=\"string\">'password'</span>:密码,</span><br><span class=\"line\">    <span class=\"string\">'port'</span>:<span class=\"number\">3306</span>,</span><br><span class=\"line\">    <span class=\"string\">'database'</span>:<span class=\"string\">'test'</span>, <span class=\"comment\">#这是你刚刚创建的数据库test</span></span><br><span class=\"line\">    <span class=\"string\">'charset'</span>:<span class=\"string\">'utf8'</span>, <span class=\"comment\">#编码'utf8' </span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</code></pre><p>然后尝试连接数据库，出错则报错</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">        cnn = mysql.connector.connect(**config)</span><br><span class=\"line\"><span class=\"keyword\">except</span> mysql.connector.Error <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        print(<span class=\"string\">'connnect failed!&#123;&#125;'</span>.format(e))</span><br></pre></td></tr></table></figure>\n</code></pre><p>通过连接创建一个控制数据库的光标cursor,它会代替你来对数据库执行操作</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;cursor = cnn.cursor()</span><br></pre></td></tr></table></figure>\n</code></pre><p>然后给一个你将要执行的INSERT语句来把我们的变量插入,%s表示要插入的数据</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;insert_statement = <span class=\"string\">'Insert sp100 (Company_Name,Ticker,Region,SP_Sector,SP_Sub_Industry,Last_Closing_Price,Ranking,Capital_IQ_RECOM,Return_1yr,Return_5yr,PE,LTD) values(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)'</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>使用循环语句和execute方法将我们的100条公司数据依次添加到数据库中,否则会报错</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">for</span> company <span class=\"keyword\">in</span> company_data_list:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                cursor.execute(insert_statement,company)</span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                print(<span class=\"string\">\"Inserting data error!&#123;&#125;\"</span>.format(e))</span><br></pre></td></tr></table></figure>\n</code></pre><p>要注意的是，执行完上面语句后我们的数据库并没有出现数据，因为我们并没有提交修改。这里使用commit方法提交</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;cnn.commit()</span><br></pre></td></tr></table></figure>\n</code></pre><p>然后关掉cursor,断开连接</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;cursor.close()</span><br><span class=\"line\">&gt;&gt;&gt;cnn.close()</span><br></pre></td></tr></table></figure>\n</code></pre><p>到这里我们就可以看到数据库中的内容了，回到mysql查看，</p>\n<pre><code>mysql&gt; select * from sp100\\G;\n*************************** 1. row ***************************\n      Company_Name: Oracle Corp\n            Ticker: ORCL\n            Region: US\n         SP_Sector: Information Technology\n   SP_Sub_Industry: Systems Software\nLast_Closing_Price: 40.230\n           Ranking: 5 Star\n  Capital_IQ_RECOM: N/A\n        Return_1yr: 16.99\n        Return_5yr: 8.59\n                PE: 19.20\n               LTD: 43.76\n*************************** 2. row ***************************\n\n...\n</code></pre><p>最后我们要对这些数据进行简单的处理并按照我们想要的方法分析</p>\n<h2 id=\"操作数据库\"><a href=\"#操作数据库\" class=\"headerlink\" title=\"操作数据库\"></a>操作数据库</h2><p>首先，举个例子（例子非真实情况）：</p>\n<p>假设我们要找到将各个公司的1年回报率乘以（1-长期债务率）得到公司在不负债的情况下对应的收益，然后加上它PE的二次方根。大致如下</p>\n<pre><code>Unlevered 1yr return = 1 yr return* (1-LTD%)\nweighted_index = unlevered return ＋ SQRT(PE)\n</code></pre><p>最后我们取前5名和后5名</p>\n<p>我们来看怎么操作，之前我们讲到我们所有的数据都是字符串，字符串并不能正确地按数字大小排列内容。所以我们要先剔除带有所需数据中带有’N/A’的公司</p>\n<pre><code>mysql&gt; create table sp as  select * from sp100 where PE != &apos;N/A&apos; and Return_1yr!=&apos;N/A&apos; and LTD!=&apos;N/A&apos;;\n</code></pre><p>这样一来我们就将PE,Return_1yr和LTD下带有‘N/A’的公司剔除了并放入一张新表sp中，接着我们将sp的这三列变成双精度浮点double类型</p>\n<pre><code>mysql&gt; alter table sp change PE PE DOUBLE;\nmysql&gt; alter table sp change Return_1yr Return_1yr DOUBLE;\nmysql&gt; alter table sp change LTD LTD DOUBLE;\n</code></pre><p>接着我们就可用通过select来查询我们需要的内容，我们要求数据库返回两列内容，一个是公司股票代码，另一个是weight.</p>\n<p>这里weight=Return_1yr *((100-LTD)/100)+SQRT(PE)，使用as将显示名称修改</p>\n<p>查询weight最高的10只股票，’order by weight desc limit 10’表示，将结果按weight降序排列，显示5条</p>\n<pre><code>select ticker,Return_1yr *((100-LTD)/100)+SQRT(PE) as weight from sp order by weight desc limit 5;\n</code></pre><p>结果如下</p>\n<pre><code>+--------+--------------------+\n| ticker | weight             |\n+--------+--------------------+\n| NVDA   |             325.56 |\n| NFLX   | 189.14999999999998 |\n| AMZN   |             121.97 |\n| PCLN   |              51.97 |\n| ADBE   |              51.89 |\n+--------+--------------------+\n</code></pre><p>接着是升序排列找到最低的5条</p>\n<pre><code>select ticker,Return_1yr *((100-LTD)/100)+SQRT(PE) as weight from sp order by weight asc limit 5;\n</code></pre><p>结果如下</p>\n<pre><code>+--------+---------------------+\n| ticker | weight              |\n+--------+---------------------+\n| AGN    | -14.370000000000001 |\n| GILD   |               -5.79 |\n| CVS    |               -1.08 |\n| NKE    |  3.3999999999999986 |\n| PM     |  3.6100000000000003 |\n+--------+---------------------+\n</code></pre><p>好了，就这样。</p>"},{"title":"数据可视化(2)：五种基本图形","date":"2016-11-24T02:52:34.000Z","_content":"\n\n上一次通过一个简单例子学习了图形的基本绘制方法，这次我们通过农企(AMD)的数据来学习五种基本图形的绘制\n\n\n\n## 工具准备\n\n\n- AMD股票数据(Nov 21,2015 - Nov 21,2016),[下载](http://chart.finance.yahoo.com/table.csv?s=AMD&a=10&b=21&c=2015&d=10&e=21&f=2016&g=d&ignore=.csv)\n- S&P500同期指数，[下载](http://chart.finance.yahoo.com/table.csv?s=^GSPC&a=10&b=21&c=2015&d=10&e=21&f=2016&g=d&ignore=.csv)\n- AMD最近四个季度的财报\n- S&P500 同时段（AMD)的指数\n<!--More-->\n- Numpy\n- Matplotlib\n- Python3.x\n\n(数据来源:Yahoo Finance）\n\n首先我们引入工具\n\n\t```Python\n\timport numpy as np\n\timport matplotlib as plt\n\t```\n\n接着使用loadtxt导入文件,我们的文件看上去是这个样子的\n\n\n![](data-visualization-2/data.png)\n......\n\nnumpy可以很快地将现有的csv类型的数据导入\n\n\t```Python\n\tdate,high,low=np.loadtxt('Nov21-1yr.csv',delimiter = ',',converters ={0:bytespdate2num('%Y-%m-%d')},skiprows =1,usecols=(0,2,3),unpack=True)\n\t```\n\n- 导入文件名 Nov21-1yr.csv\n- delimiter 分隔符为','\n- converters 如果有日期需要使用bytespdate2num解析内容，0代表第一列\n- skiprows =1 跳过第一行\n- usecols(0,2,3) 使用1,3,4行，值得注意的是，如果我们只要获取一行，要用元组表示：usecols（x,)\n- unpack 将提取的数据分别放在三个列表里\n\n\n## 散点图\n\n### 简介\n\n>用两组数据构成多个坐标点，考察坐标点的分布，判断两变量之间是否存在某种关联或总结坐标点的分布模式。散点图将序列显示为一组点。值由点在图表中的位置表示。类别由图表中的不同标记表示。散点图通常用于比较跨类别的聚合数据。([百度百科](http://baike.baidu.com/view/1323662.htm))\n\n使用scatter函数,array1（x轴）,array2（y轴)为两组数据\n\n\t```Python\n\tplt.scatter(array1,array2,[parameters,...])\n\t```\n\t\n### 实例\n\n首先我们获得AMD最近一年的最高价格，最低价格，日期\n\n\t```Python\n\tdate,high,low=np.loadtxt('Nov21-1yr.csv',delimiter = ',',converters ={0:bytespdate2num('%Y-%m-%d')},skiprows =1,usecols=(0,2,3),unpack=True)\n\t```\n\n获得每日的价格波动范围,通过numpy读取的数据拥有array的格式，可以对两个同样大小的列表直接进行加减\n\n\tdiff = high -low \n\n接着我们使用scatter函数作散点图\n\n\t```Python\n\tplt.scatter(date,diff,alpha = 0.4)\n\t```\n\n这里的alpha是透明度。添加了透明度属性后，颜色会变淡，而重合的点的颜色会加深，使散点图更加直观\n\n>\\>\\>\\> **plt.show()**\n\n\n![](data-visualization-2/scatter.png)\n\n\n## 折线图\n\n\n### 简介\n\n>折线图是排列在工作表的列或行中的数据可以绘制到折线图中。折线图可以显示随时间（根据常用比例设置）而变化的连续数据，因此非常适用于显示在相等时间间隔下数据的趋势。在折线图中，类别数据沿水平轴均匀分布，所有值数据沿垂直轴均匀分布。([百度百科](http://baike.baidu.com/view/1396532.htm))\n\n使用plot函数,array1（x轴）,array2（y轴)为两组数据\n\n\t```Python\n\tplt.plot(array1,array2,[parameters,...])\n\t```\n如果需要表示日期，使用plot_date\n\n\t```Python\n\tplt.plot_date(date_array1,array2,[parameters,...])\t\n\t```\n\n### 实例1：AMD股票走势\n\n我们这里使用农企一年的股票走势来举例,首先我们先获取收盘价和日期\n\n\n\t```Python\n\tdate,close=np.loadtxt('Nov21-1yr.csv',delimiter = ',',converters = {0:bytespdate2num('%Y-%m-%d')},skiprows =1,usecols=(0,4),unpack=True)\n\t```\n\n接着我们用获得的数据来绘制折线图。正常情况下我们应该使用plot函数。但是由于我们涉及日期，为了更好地展现我们的图标。我们使用plot_date函数\n\n\t```Python\n\tplt.plot_date(date,close,linestyle='-',markersize =2.5,color='#147FB1',label='AMD')\n\t```\n- linestyle： 这里规定折线线段的种类。使用plot_date时，默认为圆点（类似散点图)，所以我们使用'-'代表线段\n- markersize：这是图中每一个圆点的大小，当markersize和线段粗细相同时无法显示\n\n>\\>\\>\\> **plt.show()**\n\n![](data-visualization-2/line.png)\n\n### 实例2:S&P500走势\n\n动手试试用同样的办法来绘制S&P500最近一年(Nov 21,2015 - Nov 21,2016)的走势\n\n![](data-visualization-2/sp500.png)\n\n\n### 比较S&P500与AMD\n\n如果我们直接进行S&P500和农企的比较，会发现农企是一条贴近X轴的线（AMD是个位数，S&P是4位数）。所以在我们需要将S&P500的值缩小比例，具体方法是先求出每日的变化率，然后使用同一起点（AMD第一天的收盘价），根据变化率来模拟走势\n\n这里我们需要两个S&P500的变量:spopen,spclose；和两个之前AMD的变量close,date\n\n首先我们求出每日的变化率，得到一年的变化率列表\n\n\t```Python\n\t#（收盘价-开盘价）/开盘价\n\tspchanges = np.divide(spclose-spopen,spopen)\n\t```\n接着是一个缩小比例的函数,假设第一天的收盘价（指数）作为第二天的开盘价（指数），接收一个起点价格和从该点开始一年的变动\n\n\t```Python\n\tdef sp500_scale_down(start_point,changes):\n\t\tstdsp = []\n\t\tfor each in changes:\n\t\t\tstart_point = start_point*(1+each)\n\t\t\tstdsp.append(start_point)\n\t\treturn np.array(stdsp)\n\t```\n看看我们如何调用这个函数\n\n\t```Python\n\tstdsp = sp500_scale_down(close[-1]/(1+spchanges[-1]),spchanges[::-1])\n\t```\n这时我们获得了一个缩小版的S&P500指数列表stdsp。注意我们这个列表的内容都是从后往前的，即close[0]代表的是Nov 21，2016这一天而不是最靠前的Nov 21，2015.所以我们的第一天其实是列表的最后一个，即close[-1],spchanges同理。 而[::-1]表示反转列表，将其变回正常顺序。\n\n绘制农企和S&P500的走势\n\n\t```Python\n\tplt.plot_date(date,close,linestyle='-',markersize =2.5,color='#147FB1',label='AMD')\n\tplt.plot_date(date,stdsp[::-1],linestyle='-',markersize =2.5,color='#14B158',label='S&P500')\n\t```\n为什么我们的stdsp要在这里反转呢？因为我们之前提到过我们提取的数据是从后往前的，可是，**我们画出来的数据方向不是反的**,这说明plot_date函数接收一个“反”着的列表，而我们的stdsp列表是从前往后推的，我们需要将其反转\n\n绘制图例\n\n\t```Python\n\tplt.legend(loc = 'upper left')\n\t```\n>\\>\\>\\> **plt.show()**\n\n![](data-visualization-2/linecompare.png)\n\n\n## 条形图\n\n### 简介\n\n> 排列在工作表的列或行中的数据可以绘制到条形图中。条形图显示各个项目之间的比较情况。([百度百科](http://baike.baidu.com/item/%E6%9D%A1%E5%BD%A2%E5%9B%BE))\n\n绘制条形图，我们需要bar函数（纵向)或barh函数(横向),x_array代表分布在x轴的点，y_array代表高度\n\n\t```Python\n\tplt.bar(left=x_array,height=y_array,[parameters,...])\n\t```\n### 条形图实例：AMD4个季度营业额\n\n首先我们获取农企最近四个季度的营业额，我们可以到AMD的官网，SEC里EDGAR的10Q或者其他第三方网站（Yahoo Finance)中找到\n\n\t```Python\n\t#单位：'M(百万)'\n\trevenue = [958,832,1207,1307]\n\t```\n接着生成四个条形图的位置列表\n\n\t```Python\n\t#数量4个\n\tN = 4\n\t#生成x轴坐标列表[0,1.5,3.0,4.5]\n\tx = np.arange(N)*1.5\n\t```\n使用bar函数来绘制条形图\n\n\t```Python\n\tplt.bar(left=x,height=revenue,color ='#51ADD8',width=0.5,align='center')\n\t```\n- left 表示条形图在x轴的位置，以条形图左下角的点为坐标点\n- width 表示条形图的宽度\n- height 表示条形图高度\n- align='center' 文字居中\n\n接着使用日期来标记，分别是四个季度出财报（10-Q)的日期,并定位\n\n\t```Python\n\tx_date=['12/26/2015','3/26/2016','6/25/2016','9/24/2016']\n\tx_namepos =np.arange(4)*1.5\n\tplt.xticks(x_namepos,x_date)\n\t```\n>\\>\\>\\> **plt.show()**\n\n![](data-visualization-2/bar.png)\n\n### 条形图（横向）实例\n\n前面我们知道了一个标准的条形图该如何绘制，有的时候我们会想要使用横向的条形图该怎么办，和bar差不多，matplotlib在这里提供了barh函数\n\n\t```Python\n\tplt.barh(left = 0,bottom=y,height=0.5,color ='#51ADD8',width=revenue,align='center')\n\t```\n- bottom 表示条形图在y轴的位置，以条形图左上角的点为坐标点\n- width 横过来表示长度\n- height 竖过来表示宽度\n\n>\\>\\>\\> **plt.show()**\n\n![](data-visualization-2/barh.png)\n\n### 条形图对比实例\n\n除了营业额，我们还可以来看一下两个条形图如何在一起对比，这里我们增加了农企的四个季度净利润\n\n\t```Python\n\t#单位：'M(百万)'\n\tincome = [-102,-109,69,-406]\n\t```\n之前我们设定了两个营业额条形图间距为1.5，添加了净额之后我们预期的结构是这样的\n\n\t```Python\n\t0.5:营业额1\n\t0.5：净额1\n\t0.5:间距\n\t0.5:营业额2\n\t```\n所以绘制净额\n\n\t```Python\n\tplt.bar(left=x+0.5,height=income,color ='#51ADD8',width=0.5,alpha=0.75,align='center',label=\"Net Income\")\n\t```\n- left 在营业额的坐标点增加0.5(营业额width)\n\n添加日期，图例\n\n\t```Python\n\tplt.legend(loc = 'upper left')\n\tx_datepos =np.add(np.arange(4)*1.5,0.25)\n\tx_date=['12/26/2015','3/26/2016','6/25/2016','9/24/2016']\n\tplt.xticks(x_datepos,x_date)\n\t```\n>\\>\\>\\> **plt.show()**\n\n![](data-visualization-2/twobars.png)\n\n## 直方图\n\n### 简介\n\n>直方图(Histogram)又称质量分布图。是一种统计报告图，由一系列高度不等的纵向条纹或线段表示数据分布的情况。 一般用横轴表示数据类型，纵轴表示分布情况。([百科词条](http://baike.baidu.com/item/%E7%9B%B4%E6%96%B9%E5%9B%BE/1103834))\n\n绘制直方图我们使用hist函数,array表示变量集合,bins代表分布数量\n\n\t```Python\n\tplt.hist(array,bins=20,[parameters,...])\n\t```\n###实例：AMD股价变化率正态分布\n\n获取股票价格\n\n\t```Python\n\topen_price,close_price=np.loadtxt('Nov21-1yr.csv',delimiter = ',',skiprows =1,usecols=(1,4),unpack=True)\n\t```\n获取变化率，使用百分比（乘以100）\n\n\t```Python\n\tdiff = ((close_price-open_price)/open_price)*100\n\t```\n绘制直方图，分30个连续的区间，并使用正态分布\n\n\t```Python\n\tplt.hist(diff,bins=30,color='#EA4545',normed=True)\n\t```\n>\\>\\>\\> **plt.show()**\n\n![](data-visualization-2/hist.png)\n\n\n\n \n## 饼图\n\n>扇形统计图是用整个圆表示总数，用圆内各个扇形的大小表示各部分数量占总数的百分数。通过扇形统计图可以很清楚地表示出各部分数量同总数之间的关系。百分数.。　扇形统计图可以清楚地表示各个项目与总数之间的关系。([百科词条](http://baike.baidu.com/subview/1289/1289.htm))\n\n绘制饼图很简单，我们只需要使用pie函数和一组数据即可完成\n\n\t```Python\n\tplt.pie(fracs,[parameters,...])\n\t```\n\n###实例：AMD资产结构\n\n我们先找到农企2016第三季度的财报([10-Q]()),可以从公司官网或者SEC（美国证监会）找到，如下图\n\n![](data-visualization-2/tenQ.png)\n\n找到资产下的子分类，作为标签\n\n\t```Python\n\tlabels = ['Cash','A/R','Inventories','GLOBF','Prepaid','Other Current','Property','Goodwill','Investments','Others']\n\t```\n对应的值为\n\n\t```Python\n\tasset_items = [1258,640,772,13,63,78,161,289,60,282]\n\t```\n如果是common size balance sheet的话，我们以资产总和为100%，每个自分类表示为对应的百分比\n\n\t```Python\n\tfracs = [round(each/sum(asset_items)*100,1) for each in asset_items]\n\t```\n绘制之前添加一组颜色，这组颜色对应每一个板块的颜色，可以自行选择\n\n\t```Python\n\tcolors =['#f26e6e','#6e7ef2','#6ed1f2','#f29d6e','#e1f26e','#b7f26e','#a46ef2','#f2ec6e','#6ef2a3','#51a0aa']\n\t```\n将比例设置为1，使最终效果为圆形\n\n\t```Python\n\tplt.axes(aspect =1)\n\t```\n绘制\n\n\t```Python\n\tplt.pie(fracs,labels = labels,colors = colors,autopct = '%.1f')\n\t```\n- labels 使用我们预设的标签\n- color 使用我们预设的颜色\n- autopct 将数字标记在上面\n\n>\\>\\>\\> **plt.show()**\n\n![](data-visualization-2/unpie.png)\n\n\t\n哇咧！下面的字叠在一起了，没法看了。该怎么办呢？我们可以使用之前学过的箭头来指向特别窄的扇区，但是还有另一种更简单粗暴的办法。\n\n**转个角度**\n\n我们添加初始角度\n\n\t```Python\n\tplt.pie(fracs,labels = labels,colors = colors,autopct = '%.1f',startangle=100)\n\t```\n是不是好多了呢？\n\n![](data-visualization-2/pie.png)\n\n\n## Reference\n\n- [AMD-Yahoo Finance](https://finance.yahoo.com/quote/%5EGSPC?p=%5EGSPC)\n- [S&P500-Yahoo Finance](https://finance.yahoo.com/quote/%5EGSPC?p=%5EGSPC)\n- [AMD 10Q - SEC EDGAR](https://www.sec.gov/cgi-bin/browse-edgar?action=getcompany&CIK=0000002488&type=10&dateb=&owner=exclude&count=40)\n- [百科词条]()\n \n\n\n","source":"_posts/data-visualization-2.md","raw":"---\ntitle: 数据可视化(2)：五种基本图形\ndate: 2016-11-24 10:52:34\ntags:\ncategories: Python数据可视化\n\n---\n\n\n上一次通过一个简单例子学习了图形的基本绘制方法，这次我们通过农企(AMD)的数据来学习五种基本图形的绘制\n\n\n\n## 工具准备\n\n\n- AMD股票数据(Nov 21,2015 - Nov 21,2016),[下载](http://chart.finance.yahoo.com/table.csv?s=AMD&a=10&b=21&c=2015&d=10&e=21&f=2016&g=d&ignore=.csv)\n- S&P500同期指数，[下载](http://chart.finance.yahoo.com/table.csv?s=^GSPC&a=10&b=21&c=2015&d=10&e=21&f=2016&g=d&ignore=.csv)\n- AMD最近四个季度的财报\n- S&P500 同时段（AMD)的指数\n<!--More-->\n- Numpy\n- Matplotlib\n- Python3.x\n\n(数据来源:Yahoo Finance）\n\n首先我们引入工具\n\n\t```Python\n\timport numpy as np\n\timport matplotlib as plt\n\t```\n\n接着使用loadtxt导入文件,我们的文件看上去是这个样子的\n\n\n![](data-visualization-2/data.png)\n......\n\nnumpy可以很快地将现有的csv类型的数据导入\n\n\t```Python\n\tdate,high,low=np.loadtxt('Nov21-1yr.csv',delimiter = ',',converters ={0:bytespdate2num('%Y-%m-%d')},skiprows =1,usecols=(0,2,3),unpack=True)\n\t```\n\n- 导入文件名 Nov21-1yr.csv\n- delimiter 分隔符为','\n- converters 如果有日期需要使用bytespdate2num解析内容，0代表第一列\n- skiprows =1 跳过第一行\n- usecols(0,2,3) 使用1,3,4行，值得注意的是，如果我们只要获取一行，要用元组表示：usecols（x,)\n- unpack 将提取的数据分别放在三个列表里\n\n\n## 散点图\n\n### 简介\n\n>用两组数据构成多个坐标点，考察坐标点的分布，判断两变量之间是否存在某种关联或总结坐标点的分布模式。散点图将序列显示为一组点。值由点在图表中的位置表示。类别由图表中的不同标记表示。散点图通常用于比较跨类别的聚合数据。([百度百科](http://baike.baidu.com/view/1323662.htm))\n\n使用scatter函数,array1（x轴）,array2（y轴)为两组数据\n\n\t```Python\n\tplt.scatter(array1,array2,[parameters,...])\n\t```\n\t\n### 实例\n\n首先我们获得AMD最近一年的最高价格，最低价格，日期\n\n\t```Python\n\tdate,high,low=np.loadtxt('Nov21-1yr.csv',delimiter = ',',converters ={0:bytespdate2num('%Y-%m-%d')},skiprows =1,usecols=(0,2,3),unpack=True)\n\t```\n\n获得每日的价格波动范围,通过numpy读取的数据拥有array的格式，可以对两个同样大小的列表直接进行加减\n\n\tdiff = high -low \n\n接着我们使用scatter函数作散点图\n\n\t```Python\n\tplt.scatter(date,diff,alpha = 0.4)\n\t```\n\n这里的alpha是透明度。添加了透明度属性后，颜色会变淡，而重合的点的颜色会加深，使散点图更加直观\n\n>\\>\\>\\> **plt.show()**\n\n\n![](data-visualization-2/scatter.png)\n\n\n## 折线图\n\n\n### 简介\n\n>折线图是排列在工作表的列或行中的数据可以绘制到折线图中。折线图可以显示随时间（根据常用比例设置）而变化的连续数据，因此非常适用于显示在相等时间间隔下数据的趋势。在折线图中，类别数据沿水平轴均匀分布，所有值数据沿垂直轴均匀分布。([百度百科](http://baike.baidu.com/view/1396532.htm))\n\n使用plot函数,array1（x轴）,array2（y轴)为两组数据\n\n\t```Python\n\tplt.plot(array1,array2,[parameters,...])\n\t```\n如果需要表示日期，使用plot_date\n\n\t```Python\n\tplt.plot_date(date_array1,array2,[parameters,...])\t\n\t```\n\n### 实例1：AMD股票走势\n\n我们这里使用农企一年的股票走势来举例,首先我们先获取收盘价和日期\n\n\n\t```Python\n\tdate,close=np.loadtxt('Nov21-1yr.csv',delimiter = ',',converters = {0:bytespdate2num('%Y-%m-%d')},skiprows =1,usecols=(0,4),unpack=True)\n\t```\n\n接着我们用获得的数据来绘制折线图。正常情况下我们应该使用plot函数。但是由于我们涉及日期，为了更好地展现我们的图标。我们使用plot_date函数\n\n\t```Python\n\tplt.plot_date(date,close,linestyle='-',markersize =2.5,color='#147FB1',label='AMD')\n\t```\n- linestyle： 这里规定折线线段的种类。使用plot_date时，默认为圆点（类似散点图)，所以我们使用'-'代表线段\n- markersize：这是图中每一个圆点的大小，当markersize和线段粗细相同时无法显示\n\n>\\>\\>\\> **plt.show()**\n\n![](data-visualization-2/line.png)\n\n### 实例2:S&P500走势\n\n动手试试用同样的办法来绘制S&P500最近一年(Nov 21,2015 - Nov 21,2016)的走势\n\n![](data-visualization-2/sp500.png)\n\n\n### 比较S&P500与AMD\n\n如果我们直接进行S&P500和农企的比较，会发现农企是一条贴近X轴的线（AMD是个位数，S&P是4位数）。所以在我们需要将S&P500的值缩小比例，具体方法是先求出每日的变化率，然后使用同一起点（AMD第一天的收盘价），根据变化率来模拟走势\n\n这里我们需要两个S&P500的变量:spopen,spclose；和两个之前AMD的变量close,date\n\n首先我们求出每日的变化率，得到一年的变化率列表\n\n\t```Python\n\t#（收盘价-开盘价）/开盘价\n\tspchanges = np.divide(spclose-spopen,spopen)\n\t```\n接着是一个缩小比例的函数,假设第一天的收盘价（指数）作为第二天的开盘价（指数），接收一个起点价格和从该点开始一年的变动\n\n\t```Python\n\tdef sp500_scale_down(start_point,changes):\n\t\tstdsp = []\n\t\tfor each in changes:\n\t\t\tstart_point = start_point*(1+each)\n\t\t\tstdsp.append(start_point)\n\t\treturn np.array(stdsp)\n\t```\n看看我们如何调用这个函数\n\n\t```Python\n\tstdsp = sp500_scale_down(close[-1]/(1+spchanges[-1]),spchanges[::-1])\n\t```\n这时我们获得了一个缩小版的S&P500指数列表stdsp。注意我们这个列表的内容都是从后往前的，即close[0]代表的是Nov 21，2016这一天而不是最靠前的Nov 21，2015.所以我们的第一天其实是列表的最后一个，即close[-1],spchanges同理。 而[::-1]表示反转列表，将其变回正常顺序。\n\n绘制农企和S&P500的走势\n\n\t```Python\n\tplt.plot_date(date,close,linestyle='-',markersize =2.5,color='#147FB1',label='AMD')\n\tplt.plot_date(date,stdsp[::-1],linestyle='-',markersize =2.5,color='#14B158',label='S&P500')\n\t```\n为什么我们的stdsp要在这里反转呢？因为我们之前提到过我们提取的数据是从后往前的，可是，**我们画出来的数据方向不是反的**,这说明plot_date函数接收一个“反”着的列表，而我们的stdsp列表是从前往后推的，我们需要将其反转\n\n绘制图例\n\n\t```Python\n\tplt.legend(loc = 'upper left')\n\t```\n>\\>\\>\\> **plt.show()**\n\n![](data-visualization-2/linecompare.png)\n\n\n## 条形图\n\n### 简介\n\n> 排列在工作表的列或行中的数据可以绘制到条形图中。条形图显示各个项目之间的比较情况。([百度百科](http://baike.baidu.com/item/%E6%9D%A1%E5%BD%A2%E5%9B%BE))\n\n绘制条形图，我们需要bar函数（纵向)或barh函数(横向),x_array代表分布在x轴的点，y_array代表高度\n\n\t```Python\n\tplt.bar(left=x_array,height=y_array,[parameters,...])\n\t```\n### 条形图实例：AMD4个季度营业额\n\n首先我们获取农企最近四个季度的营业额，我们可以到AMD的官网，SEC里EDGAR的10Q或者其他第三方网站（Yahoo Finance)中找到\n\n\t```Python\n\t#单位：'M(百万)'\n\trevenue = [958,832,1207,1307]\n\t```\n接着生成四个条形图的位置列表\n\n\t```Python\n\t#数量4个\n\tN = 4\n\t#生成x轴坐标列表[0,1.5,3.0,4.5]\n\tx = np.arange(N)*1.5\n\t```\n使用bar函数来绘制条形图\n\n\t```Python\n\tplt.bar(left=x,height=revenue,color ='#51ADD8',width=0.5,align='center')\n\t```\n- left 表示条形图在x轴的位置，以条形图左下角的点为坐标点\n- width 表示条形图的宽度\n- height 表示条形图高度\n- align='center' 文字居中\n\n接着使用日期来标记，分别是四个季度出财报（10-Q)的日期,并定位\n\n\t```Python\n\tx_date=['12/26/2015','3/26/2016','6/25/2016','9/24/2016']\n\tx_namepos =np.arange(4)*1.5\n\tplt.xticks(x_namepos,x_date)\n\t```\n>\\>\\>\\> **plt.show()**\n\n![](data-visualization-2/bar.png)\n\n### 条形图（横向）实例\n\n前面我们知道了一个标准的条形图该如何绘制，有的时候我们会想要使用横向的条形图该怎么办，和bar差不多，matplotlib在这里提供了barh函数\n\n\t```Python\n\tplt.barh(left = 0,bottom=y,height=0.5,color ='#51ADD8',width=revenue,align='center')\n\t```\n- bottom 表示条形图在y轴的位置，以条形图左上角的点为坐标点\n- width 横过来表示长度\n- height 竖过来表示宽度\n\n>\\>\\>\\> **plt.show()**\n\n![](data-visualization-2/barh.png)\n\n### 条形图对比实例\n\n除了营业额，我们还可以来看一下两个条形图如何在一起对比，这里我们增加了农企的四个季度净利润\n\n\t```Python\n\t#单位：'M(百万)'\n\tincome = [-102,-109,69,-406]\n\t```\n之前我们设定了两个营业额条形图间距为1.5，添加了净额之后我们预期的结构是这样的\n\n\t```Python\n\t0.5:营业额1\n\t0.5：净额1\n\t0.5:间距\n\t0.5:营业额2\n\t```\n所以绘制净额\n\n\t```Python\n\tplt.bar(left=x+0.5,height=income,color ='#51ADD8',width=0.5,alpha=0.75,align='center',label=\"Net Income\")\n\t```\n- left 在营业额的坐标点增加0.5(营业额width)\n\n添加日期，图例\n\n\t```Python\n\tplt.legend(loc = 'upper left')\n\tx_datepos =np.add(np.arange(4)*1.5,0.25)\n\tx_date=['12/26/2015','3/26/2016','6/25/2016','9/24/2016']\n\tplt.xticks(x_datepos,x_date)\n\t```\n>\\>\\>\\> **plt.show()**\n\n![](data-visualization-2/twobars.png)\n\n## 直方图\n\n### 简介\n\n>直方图(Histogram)又称质量分布图。是一种统计报告图，由一系列高度不等的纵向条纹或线段表示数据分布的情况。 一般用横轴表示数据类型，纵轴表示分布情况。([百科词条](http://baike.baidu.com/item/%E7%9B%B4%E6%96%B9%E5%9B%BE/1103834))\n\n绘制直方图我们使用hist函数,array表示变量集合,bins代表分布数量\n\n\t```Python\n\tplt.hist(array,bins=20,[parameters,...])\n\t```\n###实例：AMD股价变化率正态分布\n\n获取股票价格\n\n\t```Python\n\topen_price,close_price=np.loadtxt('Nov21-1yr.csv',delimiter = ',',skiprows =1,usecols=(1,4),unpack=True)\n\t```\n获取变化率，使用百分比（乘以100）\n\n\t```Python\n\tdiff = ((close_price-open_price)/open_price)*100\n\t```\n绘制直方图，分30个连续的区间，并使用正态分布\n\n\t```Python\n\tplt.hist(diff,bins=30,color='#EA4545',normed=True)\n\t```\n>\\>\\>\\> **plt.show()**\n\n![](data-visualization-2/hist.png)\n\n\n\n \n## 饼图\n\n>扇形统计图是用整个圆表示总数，用圆内各个扇形的大小表示各部分数量占总数的百分数。通过扇形统计图可以很清楚地表示出各部分数量同总数之间的关系。百分数.。　扇形统计图可以清楚地表示各个项目与总数之间的关系。([百科词条](http://baike.baidu.com/subview/1289/1289.htm))\n\n绘制饼图很简单，我们只需要使用pie函数和一组数据即可完成\n\n\t```Python\n\tplt.pie(fracs,[parameters,...])\n\t```\n\n###实例：AMD资产结构\n\n我们先找到农企2016第三季度的财报([10-Q]()),可以从公司官网或者SEC（美国证监会）找到，如下图\n\n![](data-visualization-2/tenQ.png)\n\n找到资产下的子分类，作为标签\n\n\t```Python\n\tlabels = ['Cash','A/R','Inventories','GLOBF','Prepaid','Other Current','Property','Goodwill','Investments','Others']\n\t```\n对应的值为\n\n\t```Python\n\tasset_items = [1258,640,772,13,63,78,161,289,60,282]\n\t```\n如果是common size balance sheet的话，我们以资产总和为100%，每个自分类表示为对应的百分比\n\n\t```Python\n\tfracs = [round(each/sum(asset_items)*100,1) for each in asset_items]\n\t```\n绘制之前添加一组颜色，这组颜色对应每一个板块的颜色，可以自行选择\n\n\t```Python\n\tcolors =['#f26e6e','#6e7ef2','#6ed1f2','#f29d6e','#e1f26e','#b7f26e','#a46ef2','#f2ec6e','#6ef2a3','#51a0aa']\n\t```\n将比例设置为1，使最终效果为圆形\n\n\t```Python\n\tplt.axes(aspect =1)\n\t```\n绘制\n\n\t```Python\n\tplt.pie(fracs,labels = labels,colors = colors,autopct = '%.1f')\n\t```\n- labels 使用我们预设的标签\n- color 使用我们预设的颜色\n- autopct 将数字标记在上面\n\n>\\>\\>\\> **plt.show()**\n\n![](data-visualization-2/unpie.png)\n\n\t\n哇咧！下面的字叠在一起了，没法看了。该怎么办呢？我们可以使用之前学过的箭头来指向特别窄的扇区，但是还有另一种更简单粗暴的办法。\n\n**转个角度**\n\n我们添加初始角度\n\n\t```Python\n\tplt.pie(fracs,labels = labels,colors = colors,autopct = '%.1f',startangle=100)\n\t```\n是不是好多了呢？\n\n![](data-visualization-2/pie.png)\n\n\n## Reference\n\n- [AMD-Yahoo Finance](https://finance.yahoo.com/quote/%5EGSPC?p=%5EGSPC)\n- [S&P500-Yahoo Finance](https://finance.yahoo.com/quote/%5EGSPC?p=%5EGSPC)\n- [AMD 10Q - SEC EDGAR](https://www.sec.gov/cgi-bin/browse-edgar?action=getcompany&CIK=0000002488&type=10&dateb=&owner=exclude&count=40)\n- [百科词条]()\n \n\n\n","slug":"data-visualization-2","published":1,"updated":"2018-06-22T05:51:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiqvlnwd000tglu3lvrizhnq","content":"<p>上一次通过一个简单例子学习了图形的基本绘制方法，这次我们通过农企(AMD)的数据来学习五种基本图形的绘制</p>\n<h2 id=\"工具准备\"><a href=\"#工具准备\" class=\"headerlink\" title=\"工具准备\"></a>工具准备</h2><ul>\n<li>AMD股票数据(Nov 21,2015 - Nov 21,2016),<a href=\"http://chart.finance.yahoo.com/table.csv?s=AMD&amp;a=10&amp;b=21&amp;c=2015&amp;d=10&amp;e=21&amp;f=2016&amp;g=d&amp;ignore=.csv\" target=\"_blank\" rel=\"noopener\">下载</a></li>\n<li>S&amp;P500同期指数，<a href=\"http://chart.finance.yahoo.com/table.csv?s=^GSPC&amp;a=10&amp;b=21&amp;c=2015&amp;d=10&amp;e=21&amp;f=2016&amp;g=d&amp;ignore=.csv\" target=\"_blank\" rel=\"noopener\">下载</a></li>\n<li>AMD最近四个季度的财报</li>\n<li>S&amp;P500 同时段（AMD)的指数<a id=\"more\"></a></li>\n<li>Numpy</li>\n<li>Matplotlib</li>\n<li>Python3.x</li>\n</ul>\n<p>(数据来源:Yahoo Finance）</p>\n<p>首先我们引入工具</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib <span class=\"keyword\">as</span> plt</span><br></pre></td></tr></table></figure>\n</code></pre><p>接着使用loadtxt导入文件,我们的文件看上去是这个样子的</p>\n<p><img src=\"/article/data-visualization-2/data.png\" alt=\"\"><br>……</p>\n<p>numpy可以很快地将现有的csv类型的数据导入</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date,high,low=np.loadtxt(<span class=\"string\">'Nov21-1yr.csv'</span>,delimiter = <span class=\"string\">','</span>,converters =&#123;<span class=\"number\">0</span>:bytespdate2num(<span class=\"string\">'%Y-%m-%d'</span>)&#125;,skiprows =<span class=\"number\">1</span>,usecols=(<span class=\"number\">0</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>),unpack=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>导入文件名 Nov21-1yr.csv</li>\n<li>delimiter 分隔符为’,’</li>\n<li>converters 如果有日期需要使用bytespdate2num解析内容，0代表第一列</li>\n<li>skiprows =1 跳过第一行</li>\n<li>usecols(0,2,3) 使用1,3,4行，值得注意的是，如果我们只要获取一行，要用元组表示：usecols（x,)</li>\n<li>unpack 将提取的数据分别放在三个列表里</li>\n</ul>\n<h2 id=\"散点图\"><a href=\"#散点图\" class=\"headerlink\" title=\"散点图\"></a>散点图</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><blockquote>\n<p>用两组数据构成多个坐标点，考察坐标点的分布，判断两变量之间是否存在某种关联或总结坐标点的分布模式。散点图将序列显示为一组点。值由点在图表中的位置表示。类别由图表中的不同标记表示。散点图通常用于比较跨类别的聚合数据。(<a href=\"http://baike.baidu.com/view/1323662.htm\" target=\"_blank\" rel=\"noopener\">百度百科</a>)</p>\n</blockquote>\n<p>使用scatter函数,array1（x轴）,array2（y轴)为两组数据</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.scatter(array1,array2,[parameters,...])</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>首先我们获得AMD最近一年的最高价格，最低价格，日期</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date,high,low=np.loadtxt(<span class=\"string\">'Nov21-1yr.csv'</span>,delimiter = <span class=\"string\">','</span>,converters =&#123;<span class=\"number\">0</span>:bytespdate2num(<span class=\"string\">'%Y-%m-%d'</span>)&#125;,skiprows =<span class=\"number\">1</span>,usecols=(<span class=\"number\">0</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>),unpack=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>获得每日的价格波动范围,通过numpy读取的数据拥有array的格式，可以对两个同样大小的列表直接进行加减</p>\n<pre><code>diff = high -low \n</code></pre><p>接着我们使用scatter函数作散点图</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.scatter(date,diff,alpha = <span class=\"number\">0.4</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>这里的alpha是透明度。添加了透明度属性后，颜色会变淡，而重合的点的颜色会加深，使散点图更加直观</p>\n<blockquote>\n<p>>>> <strong>plt.show()</strong></p>\n</blockquote>\n<p><img src=\"/article/data-visualization-2/scatter.png\" alt=\"\"></p>\n<h2 id=\"折线图\"><a href=\"#折线图\" class=\"headerlink\" title=\"折线图\"></a>折线图</h2><h3 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h3><blockquote>\n<p>折线图是排列在工作表的列或行中的数据可以绘制到折线图中。折线图可以显示随时间（根据常用比例设置）而变化的连续数据，因此非常适用于显示在相等时间间隔下数据的趋势。在折线图中，类别数据沿水平轴均匀分布，所有值数据沿垂直轴均匀分布。(<a href=\"http://baike.baidu.com/view/1396532.htm\" target=\"_blank\" rel=\"noopener\">百度百科</a>)</p>\n</blockquote>\n<p>使用plot函数,array1（x轴）,array2（y轴)为两组数据</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.plot(array1,array2,[parameters,...])</span><br></pre></td></tr></table></figure>\n</code></pre><p>如果需要表示日期，使用plot_date</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.plot_date(date_array1,array2,[parameters,...])</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"实例1：AMD股票走势\"><a href=\"#实例1：AMD股票走势\" class=\"headerlink\" title=\"实例1：AMD股票走势\"></a>实例1：AMD股票走势</h3><p>我们这里使用农企一年的股票走势来举例,首先我们先获取收盘价和日期</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date,close=np.loadtxt(<span class=\"string\">'Nov21-1yr.csv'</span>,delimiter = <span class=\"string\">','</span>,converters = &#123;<span class=\"number\">0</span>:bytespdate2num(<span class=\"string\">'%Y-%m-%d'</span>)&#125;,skiprows =<span class=\"number\">1</span>,usecols=(<span class=\"number\">0</span>,<span class=\"number\">4</span>),unpack=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>接着我们用获得的数据来绘制折线图。正常情况下我们应该使用plot函数。但是由于我们涉及日期，为了更好地展现我们的图标。我们使用plot_date函数</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.plot_date(date,close,linestyle=<span class=\"string\">'-'</span>,markersize =<span class=\"number\">2.5</span>,color=<span class=\"string\">'#147FB1'</span>,label=<span class=\"string\">'AMD'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>linestyle： 这里规定折线线段的种类。使用plot_date时，默认为圆点（类似散点图)，所以我们使用’-‘代表线段</li>\n<li>markersize：这是图中每一个圆点的大小，当markersize和线段粗细相同时无法显示</li>\n</ul>\n<blockquote>\n<p>>>> <strong>plt.show()</strong></p>\n</blockquote>\n<p><img src=\"/article/data-visualization-2/line.png\" alt=\"\"></p>\n<h3 id=\"实例2-S-amp-P500走势\"><a href=\"#实例2-S-amp-P500走势\" class=\"headerlink\" title=\"实例2:S&amp;P500走势\"></a>实例2:S&amp;P500走势</h3><p>动手试试用同样的办法来绘制S&amp;P500最近一年(Nov 21,2015 - Nov 21,2016)的走势</p>\n<p><img src=\"/article/data-visualization-2/sp500.png\" alt=\"\"></p>\n<h3 id=\"比较S-amp-P500与AMD\"><a href=\"#比较S-amp-P500与AMD\" class=\"headerlink\" title=\"比较S&amp;P500与AMD\"></a>比较S&amp;P500与AMD</h3><p>如果我们直接进行S&amp;P500和农企的比较，会发现农企是一条贴近X轴的线（AMD是个位数，S&amp;P是4位数）。所以在我们需要将S&amp;P500的值缩小比例，具体方法是先求出每日的变化率，然后使用同一起点（AMD第一天的收盘价），根据变化率来模拟走势</p>\n<p>这里我们需要两个S&amp;P500的变量:spopen,spclose；和两个之前AMD的变量close,date</p>\n<p>首先我们求出每日的变化率，得到一年的变化率列表</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#（收盘价-开盘价）/开盘价</span></span><br><span class=\"line\">spchanges = np.divide(spclose-spopen,spopen)</span><br></pre></td></tr></table></figure>\n</code></pre><p>接着是一个缩小比例的函数,假设第一天的收盘价（指数）作为第二天的开盘价（指数），接收一个起点价格和从该点开始一年的变动</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sp500_scale_down</span><span class=\"params\">(start_point,changes)</span>:</span></span><br><span class=\"line\">\tstdsp = []</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> changes:</span><br><span class=\"line\">\t\tstart_point = start_point*(<span class=\"number\">1</span>+each)</span><br><span class=\"line\">\t\tstdsp.append(start_point)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> np.array(stdsp)</span><br></pre></td></tr></table></figure>\n</code></pre><p>看看我们如何调用这个函数</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stdsp = sp500_scale_down(close[<span class=\"number\">-1</span>]/(<span class=\"number\">1</span>+spchanges[<span class=\"number\">-1</span>]),spchanges[::<span class=\"number\">-1</span>])</span><br></pre></td></tr></table></figure>\n</code></pre><p>这时我们获得了一个缩小版的S&amp;P500指数列表stdsp。注意我们这个列表的内容都是从后往前的，即close[0]代表的是Nov 21，2016这一天而不是最靠前的Nov 21，2015.所以我们的第一天其实是列表的最后一个，即close[-1],spchanges同理。 而[::-1]表示反转列表，将其变回正常顺序。</p>\n<p>绘制农企和S&amp;P500的走势</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.plot_date(date,close,linestyle=<span class=\"string\">'-'</span>,markersize =<span class=\"number\">2.5</span>,color=<span class=\"string\">'#147FB1'</span>,label=<span class=\"string\">'AMD'</span>)</span><br><span class=\"line\">plt.plot_date(date,stdsp[::<span class=\"number\">-1</span>],linestyle=<span class=\"string\">'-'</span>,markersize =<span class=\"number\">2.5</span>,color=<span class=\"string\">'#14B158'</span>,label=<span class=\"string\">'S&amp;P500'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>为什么我们的stdsp要在这里反转呢？因为我们之前提到过我们提取的数据是从后往前的，可是，<strong>我们画出来的数据方向不是反的</strong>,这说明plot_date函数接收一个“反”着的列表，而我们的stdsp列表是从前往后推的，我们需要将其反转</p>\n<p>绘制图例</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.legend(loc = <span class=\"string\">'upper left'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><blockquote>\n<p>>>> <strong>plt.show()</strong></p>\n</blockquote>\n<p><img src=\"/article/data-visualization-2/linecompare.png\" alt=\"\"></p>\n<h2 id=\"条形图\"><a href=\"#条形图\" class=\"headerlink\" title=\"条形图\"></a>条形图</h2><h3 id=\"简介-2\"><a href=\"#简介-2\" class=\"headerlink\" title=\"简介\"></a>简介</h3><blockquote>\n<p>排列在工作表的列或行中的数据可以绘制到条形图中。条形图显示各个项目之间的比较情况。(<a href=\"http://baike.baidu.com/item/%E6%9D%A1%E5%BD%A2%E5%9B%BE\" target=\"_blank\" rel=\"noopener\">百度百科</a>)</p>\n</blockquote>\n<p>绘制条形图，我们需要bar函数（纵向)或barh函数(横向),x_array代表分布在x轴的点，y_array代表高度</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.bar(left=x_array,height=y_array,[parameters,...])</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"条形图实例：AMD4个季度营业额\"><a href=\"#条形图实例：AMD4个季度营业额\" class=\"headerlink\" title=\"条形图实例：AMD4个季度营业额\"></a>条形图实例：AMD4个季度营业额</h3><p>首先我们获取农企最近四个季度的营业额，我们可以到AMD的官网，SEC里EDGAR的10Q或者其他第三方网站（Yahoo Finance)中找到</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#单位：'M(百万)'</span></span><br><span class=\"line\">revenue = [<span class=\"number\">958</span>,<span class=\"number\">832</span>,<span class=\"number\">1207</span>,<span class=\"number\">1307</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>接着生成四个条形图的位置列表</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#数量4个</span></span><br><span class=\"line\">N = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\">#生成x轴坐标列表[0,1.5,3.0,4.5]</span></span><br><span class=\"line\">x = np.arange(N)*<span class=\"number\">1.5</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>使用bar函数来绘制条形图</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.bar(left=x,height=revenue,color =<span class=\"string\">'#51ADD8'</span>,width=<span class=\"number\">0.5</span>,align=<span class=\"string\">'center'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>left 表示条形图在x轴的位置，以条形图左下角的点为坐标点</li>\n<li>width 表示条形图的宽度</li>\n<li>height 表示条形图高度</li>\n<li>align=’center’ 文字居中</li>\n</ul>\n<p>接着使用日期来标记，分别是四个季度出财报（10-Q)的日期,并定位</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x_date=[<span class=\"string\">'12/26/2015'</span>,<span class=\"string\">'3/26/2016'</span>,<span class=\"string\">'6/25/2016'</span>,<span class=\"string\">'9/24/2016'</span>]</span><br><span class=\"line\">x_namepos =np.arange(<span class=\"number\">4</span>)*<span class=\"number\">1.5</span></span><br><span class=\"line\">plt.xticks(x_namepos,x_date)</span><br></pre></td></tr></table></figure>\n</code></pre><blockquote>\n<p>>>> <strong>plt.show()</strong></p>\n</blockquote>\n<p><img src=\"/article/data-visualization-2/bar.png\" alt=\"\"></p>\n<h3 id=\"条形图（横向）实例\"><a href=\"#条形图（横向）实例\" class=\"headerlink\" title=\"条形图（横向）实例\"></a>条形图（横向）实例</h3><p>前面我们知道了一个标准的条形图该如何绘制，有的时候我们会想要使用横向的条形图该怎么办，和bar差不多，matplotlib在这里提供了barh函数</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.barh(left = <span class=\"number\">0</span>,bottom=y,height=<span class=\"number\">0.5</span>,color =<span class=\"string\">'#51ADD8'</span>,width=revenue,align=<span class=\"string\">'center'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>bottom 表示条形图在y轴的位置，以条形图左上角的点为坐标点</li>\n<li>width 横过来表示长度</li>\n<li>height 竖过来表示宽度</li>\n</ul>\n<blockquote>\n<p>>>> <strong>plt.show()</strong></p>\n</blockquote>\n<p><img src=\"/article/data-visualization-2/barh.png\" alt=\"\"></p>\n<h3 id=\"条形图对比实例\"><a href=\"#条形图对比实例\" class=\"headerlink\" title=\"条形图对比实例\"></a>条形图对比实例</h3><p>除了营业额，我们还可以来看一下两个条形图如何在一起对比，这里我们增加了农企的四个季度净利润</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#单位：'M(百万)'</span></span><br><span class=\"line\">income = [<span class=\"number\">-102</span>,<span class=\"number\">-109</span>,<span class=\"number\">69</span>,<span class=\"number\">-406</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>之前我们设定了两个营业额条形图间距为1.5，添加了净额之后我们预期的结构是这样的</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0.5</span>:营业额<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">0.5</span>：净额<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">0.5</span>:间距</span><br><span class=\"line\"><span class=\"number\">0.5</span>:营业额<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>所以绘制净额</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.bar(left=x+<span class=\"number\">0.5</span>,height=income,color =<span class=\"string\">'#51ADD8'</span>,width=<span class=\"number\">0.5</span>,alpha=<span class=\"number\">0.75</span>,align=<span class=\"string\">'center'</span>,label=<span class=\"string\">\"Net Income\"</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>left 在营业额的坐标点增加0.5(营业额width)</li>\n</ul>\n<p>添加日期，图例</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.legend(loc = <span class=\"string\">'upper left'</span>)</span><br><span class=\"line\">x_datepos =np.add(np.arange(<span class=\"number\">4</span>)*<span class=\"number\">1.5</span>,<span class=\"number\">0.25</span>)</span><br><span class=\"line\">x_date=[<span class=\"string\">'12/26/2015'</span>,<span class=\"string\">'3/26/2016'</span>,<span class=\"string\">'6/25/2016'</span>,<span class=\"string\">'9/24/2016'</span>]</span><br><span class=\"line\">plt.xticks(x_datepos,x_date)</span><br></pre></td></tr></table></figure>\n</code></pre><blockquote>\n<p>>>> <strong>plt.show()</strong></p>\n</blockquote>\n<p><img src=\"/article/data-visualization-2/twobars.png\" alt=\"\"></p>\n<h2 id=\"直方图\"><a href=\"#直方图\" class=\"headerlink\" title=\"直方图\"></a>直方图</h2><h3 id=\"简介-3\"><a href=\"#简介-3\" class=\"headerlink\" title=\"简介\"></a>简介</h3><blockquote>\n<p>直方图(Histogram)又称质量分布图。是一种统计报告图，由一系列高度不等的纵向条纹或线段表示数据分布的情况。 一般用横轴表示数据类型，纵轴表示分布情况。(<a href=\"http://baike.baidu.com/item/%E7%9B%B4%E6%96%B9%E5%9B%BE/1103834\" target=\"_blank\" rel=\"noopener\">百科词条</a>)</p>\n</blockquote>\n<p>绘制直方图我们使用hist函数,array表示变量集合,bins代表分布数量</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.hist(array,bins=<span class=\"number\">20</span>,[parameters,...])</span><br></pre></td></tr></table></figure>\n</code></pre><p>###实例：AMD股价变化率正态分布</p>\n<p>获取股票价格</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open_price,close_price=np.loadtxt(<span class=\"string\">'Nov21-1yr.csv'</span>,delimiter = <span class=\"string\">','</span>,skiprows =<span class=\"number\">1</span>,usecols=(<span class=\"number\">1</span>,<span class=\"number\">4</span>),unpack=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>获取变化率，使用百分比（乘以100）</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diff = ((close_price-open_price)/open_price)*<span class=\"number\">100</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>绘制直方图，分30个连续的区间，并使用正态分布</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.hist(diff,bins=<span class=\"number\">30</span>,color=<span class=\"string\">'#EA4545'</span>,normed=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><blockquote>\n<p>>>> <strong>plt.show()</strong></p>\n</blockquote>\n<p><img src=\"/article/data-visualization-2/hist.png\" alt=\"\"></p>\n<h2 id=\"饼图\"><a href=\"#饼图\" class=\"headerlink\" title=\"饼图\"></a>饼图</h2><blockquote>\n<p>扇形统计图是用整个圆表示总数，用圆内各个扇形的大小表示各部分数量占总数的百分数。通过扇形统计图可以很清楚地表示出各部分数量同总数之间的关系。百分数.。　扇形统计图可以清楚地表示各个项目与总数之间的关系。(<a href=\"http://baike.baidu.com/subview/1289/1289.htm\" target=\"_blank\" rel=\"noopener\">百科词条</a>)</p>\n</blockquote>\n<p>绘制饼图很简单，我们只需要使用pie函数和一组数据即可完成</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.pie(fracs,[parameters,...])</span><br></pre></td></tr></table></figure>\n</code></pre><p>###实例：AMD资产结构</p>\n<p>我们先找到农企2016第三季度的财报(<a href=\"\">10-Q</a>),可以从公司官网或者SEC（美国证监会）找到，如下图</p>\n<p><img src=\"/article/data-visualization-2/tenQ.png\" alt=\"\"></p>\n<p>找到资产下的子分类，作为标签</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">labels = [<span class=\"string\">'Cash'</span>,<span class=\"string\">'A/R'</span>,<span class=\"string\">'Inventories'</span>,<span class=\"string\">'GLOBF'</span>,<span class=\"string\">'Prepaid'</span>,<span class=\"string\">'Other Current'</span>,<span class=\"string\">'Property'</span>,<span class=\"string\">'Goodwill'</span>,<span class=\"string\">'Investments'</span>,<span class=\"string\">'Others'</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>对应的值为</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">asset_items = [<span class=\"number\">1258</span>,<span class=\"number\">640</span>,<span class=\"number\">772</span>,<span class=\"number\">13</span>,<span class=\"number\">63</span>,<span class=\"number\">78</span>,<span class=\"number\">161</span>,<span class=\"number\">289</span>,<span class=\"number\">60</span>,<span class=\"number\">282</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>如果是common size balance sheet的话，我们以资产总和为100%，每个自分类表示为对应的百分比</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fracs = [round(each/sum(asset_items)*<span class=\"number\">100</span>,<span class=\"number\">1</span>) <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> asset_items]</span><br></pre></td></tr></table></figure>\n</code></pre><p>绘制之前添加一组颜色，这组颜色对应每一个板块的颜色，可以自行选择</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors =[<span class=\"string\">'#f26e6e'</span>,<span class=\"string\">'#6e7ef2'</span>,<span class=\"string\">'#6ed1f2'</span>,<span class=\"string\">'#f29d6e'</span>,<span class=\"string\">'#e1f26e'</span>,<span class=\"string\">'#b7f26e'</span>,<span class=\"string\">'#a46ef2'</span>,<span class=\"string\">'#f2ec6e'</span>,<span class=\"string\">'#6ef2a3'</span>,<span class=\"string\">'#51a0aa'</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>将比例设置为1，使最终效果为圆形</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.axes(aspect =<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>绘制</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.pie(fracs,labels = labels,colors = colors,autopct = <span class=\"string\">'%.1f'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>labels 使用我们预设的标签</li>\n<li>color 使用我们预设的颜色</li>\n<li>autopct 将数字标记在上面</li>\n</ul>\n<blockquote>\n<p>>>> <strong>plt.show()</strong></p>\n</blockquote>\n<p><img src=\"/article/data-visualization-2/unpie.png\" alt=\"\"></p>\n<p>哇咧！下面的字叠在一起了，没法看了。该怎么办呢？我们可以使用之前学过的箭头来指向特别窄的扇区，但是还有另一种更简单粗暴的办法。</p>\n<p><strong>转个角度</strong></p>\n<p>我们添加初始角度</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.pie(fracs,labels = labels,colors = colors,autopct = <span class=\"string\">'%.1f'</span>,startangle=<span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>是不是好多了呢？</p>\n<p><img src=\"/article/data-visualization-2/pie.png\" alt=\"\"></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://finance.yahoo.com/quote/%5EGSPC?p=%5EGSPC\" target=\"_blank\" rel=\"noopener\">AMD-Yahoo Finance</a></li>\n<li><a href=\"https://finance.yahoo.com/quote/%5EGSPC?p=%5EGSPC\" target=\"_blank\" rel=\"noopener\">S&amp;P500-Yahoo Finance</a></li>\n<li><a href=\"https://www.sec.gov/cgi-bin/browse-edgar?action=getcompany&amp;CIK=0000002488&amp;type=10&amp;dateb=&amp;owner=exclude&amp;count=40\" target=\"_blank\" rel=\"noopener\">AMD 10Q - SEC EDGAR</a></li>\n<li><a href=\"\">百科词条</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>上一次通过一个简单例子学习了图形的基本绘制方法，这次我们通过农企(AMD)的数据来学习五种基本图形的绘制</p>\n<h2 id=\"工具准备\"><a href=\"#工具准备\" class=\"headerlink\" title=\"工具准备\"></a>工具准备</h2><ul>\n<li>AMD股票数据(Nov 21,2015 - Nov 21,2016),<a href=\"http://chart.finance.yahoo.com/table.csv?s=AMD&amp;a=10&amp;b=21&amp;c=2015&amp;d=10&amp;e=21&amp;f=2016&amp;g=d&amp;ignore=.csv\" target=\"_blank\" rel=\"noopener\">下载</a></li>\n<li>S&amp;P500同期指数，<a href=\"http://chart.finance.yahoo.com/table.csv?s=^GSPC&amp;a=10&amp;b=21&amp;c=2015&amp;d=10&amp;e=21&amp;f=2016&amp;g=d&amp;ignore=.csv\" target=\"_blank\" rel=\"noopener\">下载</a></li>\n<li>AMD最近四个季度的财报</li>\n<li>S&amp;P500 同时段（AMD)的指数</li></ul>","more":"\n<li>Numpy</li>\n<li>Matplotlib</li>\n<li>Python3.x</li>\n\n<p>(数据来源:Yahoo Finance）</p>\n<p>首先我们引入工具</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib <span class=\"keyword\">as</span> plt</span><br></pre></td></tr></table></figure>\n</code></pre><p>接着使用loadtxt导入文件,我们的文件看上去是这个样子的</p>\n<p><img src=\"/article/data-visualization-2/data.png\" alt=\"\"><br>……</p>\n<p>numpy可以很快地将现有的csv类型的数据导入</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date,high,low=np.loadtxt(<span class=\"string\">'Nov21-1yr.csv'</span>,delimiter = <span class=\"string\">','</span>,converters =&#123;<span class=\"number\">0</span>:bytespdate2num(<span class=\"string\">'%Y-%m-%d'</span>)&#125;,skiprows =<span class=\"number\">1</span>,usecols=(<span class=\"number\">0</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>),unpack=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>导入文件名 Nov21-1yr.csv</li>\n<li>delimiter 分隔符为’,’</li>\n<li>converters 如果有日期需要使用bytespdate2num解析内容，0代表第一列</li>\n<li>skiprows =1 跳过第一行</li>\n<li>usecols(0,2,3) 使用1,3,4行，值得注意的是，如果我们只要获取一行，要用元组表示：usecols（x,)</li>\n<li>unpack 将提取的数据分别放在三个列表里</li>\n</ul>\n<h2 id=\"散点图\"><a href=\"#散点图\" class=\"headerlink\" title=\"散点图\"></a>散点图</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><blockquote>\n<p>用两组数据构成多个坐标点，考察坐标点的分布，判断两变量之间是否存在某种关联或总结坐标点的分布模式。散点图将序列显示为一组点。值由点在图表中的位置表示。类别由图表中的不同标记表示。散点图通常用于比较跨类别的聚合数据。(<a href=\"http://baike.baidu.com/view/1323662.htm\" target=\"_blank\" rel=\"noopener\">百度百科</a>)</p>\n</blockquote>\n<p>使用scatter函数,array1（x轴）,array2（y轴)为两组数据</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.scatter(array1,array2,[parameters,...])</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>首先我们获得AMD最近一年的最高价格，最低价格，日期</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date,high,low=np.loadtxt(<span class=\"string\">'Nov21-1yr.csv'</span>,delimiter = <span class=\"string\">','</span>,converters =&#123;<span class=\"number\">0</span>:bytespdate2num(<span class=\"string\">'%Y-%m-%d'</span>)&#125;,skiprows =<span class=\"number\">1</span>,usecols=(<span class=\"number\">0</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>),unpack=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>获得每日的价格波动范围,通过numpy读取的数据拥有array的格式，可以对两个同样大小的列表直接进行加减</p>\n<pre><code>diff = high -low \n</code></pre><p>接着我们使用scatter函数作散点图</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.scatter(date,diff,alpha = <span class=\"number\">0.4</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>这里的alpha是透明度。添加了透明度属性后，颜色会变淡，而重合的点的颜色会加深，使散点图更加直观</p>\n<blockquote>\n<p>>>> <strong>plt.show()</strong></p>\n</blockquote>\n<p><img src=\"/article/data-visualization-2/scatter.png\" alt=\"\"></p>\n<h2 id=\"折线图\"><a href=\"#折线图\" class=\"headerlink\" title=\"折线图\"></a>折线图</h2><h3 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h3><blockquote>\n<p>折线图是排列在工作表的列或行中的数据可以绘制到折线图中。折线图可以显示随时间（根据常用比例设置）而变化的连续数据，因此非常适用于显示在相等时间间隔下数据的趋势。在折线图中，类别数据沿水平轴均匀分布，所有值数据沿垂直轴均匀分布。(<a href=\"http://baike.baidu.com/view/1396532.htm\" target=\"_blank\" rel=\"noopener\">百度百科</a>)</p>\n</blockquote>\n<p>使用plot函数,array1（x轴）,array2（y轴)为两组数据</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.plot(array1,array2,[parameters,...])</span><br></pre></td></tr></table></figure>\n</code></pre><p>如果需要表示日期，使用plot_date</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.plot_date(date_array1,array2,[parameters,...])</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"实例1：AMD股票走势\"><a href=\"#实例1：AMD股票走势\" class=\"headerlink\" title=\"实例1：AMD股票走势\"></a>实例1：AMD股票走势</h3><p>我们这里使用农企一年的股票走势来举例,首先我们先获取收盘价和日期</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date,close=np.loadtxt(<span class=\"string\">'Nov21-1yr.csv'</span>,delimiter = <span class=\"string\">','</span>,converters = &#123;<span class=\"number\">0</span>:bytespdate2num(<span class=\"string\">'%Y-%m-%d'</span>)&#125;,skiprows =<span class=\"number\">1</span>,usecols=(<span class=\"number\">0</span>,<span class=\"number\">4</span>),unpack=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>接着我们用获得的数据来绘制折线图。正常情况下我们应该使用plot函数。但是由于我们涉及日期，为了更好地展现我们的图标。我们使用plot_date函数</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.plot_date(date,close,linestyle=<span class=\"string\">'-'</span>,markersize =<span class=\"number\">2.5</span>,color=<span class=\"string\">'#147FB1'</span>,label=<span class=\"string\">'AMD'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>linestyle： 这里规定折线线段的种类。使用plot_date时，默认为圆点（类似散点图)，所以我们使用’-‘代表线段</li>\n<li>markersize：这是图中每一个圆点的大小，当markersize和线段粗细相同时无法显示</li>\n</ul>\n<blockquote>\n<p>>>> <strong>plt.show()</strong></p>\n</blockquote>\n<p><img src=\"/article/data-visualization-2/line.png\" alt=\"\"></p>\n<h3 id=\"实例2-S-amp-P500走势\"><a href=\"#实例2-S-amp-P500走势\" class=\"headerlink\" title=\"实例2:S&amp;P500走势\"></a>实例2:S&amp;P500走势</h3><p>动手试试用同样的办法来绘制S&amp;P500最近一年(Nov 21,2015 - Nov 21,2016)的走势</p>\n<p><img src=\"/article/data-visualization-2/sp500.png\" alt=\"\"></p>\n<h3 id=\"比较S-amp-P500与AMD\"><a href=\"#比较S-amp-P500与AMD\" class=\"headerlink\" title=\"比较S&amp;P500与AMD\"></a>比较S&amp;P500与AMD</h3><p>如果我们直接进行S&amp;P500和农企的比较，会发现农企是一条贴近X轴的线（AMD是个位数，S&amp;P是4位数）。所以在我们需要将S&amp;P500的值缩小比例，具体方法是先求出每日的变化率，然后使用同一起点（AMD第一天的收盘价），根据变化率来模拟走势</p>\n<p>这里我们需要两个S&amp;P500的变量:spopen,spclose；和两个之前AMD的变量close,date</p>\n<p>首先我们求出每日的变化率，得到一年的变化率列表</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#（收盘价-开盘价）/开盘价</span></span><br><span class=\"line\">spchanges = np.divide(spclose-spopen,spopen)</span><br></pre></td></tr></table></figure>\n</code></pre><p>接着是一个缩小比例的函数,假设第一天的收盘价（指数）作为第二天的开盘价（指数），接收一个起点价格和从该点开始一年的变动</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sp500_scale_down</span><span class=\"params\">(start_point,changes)</span>:</span></span><br><span class=\"line\">\tstdsp = []</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> changes:</span><br><span class=\"line\">\t\tstart_point = start_point*(<span class=\"number\">1</span>+each)</span><br><span class=\"line\">\t\tstdsp.append(start_point)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> np.array(stdsp)</span><br></pre></td></tr></table></figure>\n</code></pre><p>看看我们如何调用这个函数</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stdsp = sp500_scale_down(close[<span class=\"number\">-1</span>]/(<span class=\"number\">1</span>+spchanges[<span class=\"number\">-1</span>]),spchanges[::<span class=\"number\">-1</span>])</span><br></pre></td></tr></table></figure>\n</code></pre><p>这时我们获得了一个缩小版的S&amp;P500指数列表stdsp。注意我们这个列表的内容都是从后往前的，即close[0]代表的是Nov 21，2016这一天而不是最靠前的Nov 21，2015.所以我们的第一天其实是列表的最后一个，即close[-1],spchanges同理。 而[::-1]表示反转列表，将其变回正常顺序。</p>\n<p>绘制农企和S&amp;P500的走势</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.plot_date(date,close,linestyle=<span class=\"string\">'-'</span>,markersize =<span class=\"number\">2.5</span>,color=<span class=\"string\">'#147FB1'</span>,label=<span class=\"string\">'AMD'</span>)</span><br><span class=\"line\">plt.plot_date(date,stdsp[::<span class=\"number\">-1</span>],linestyle=<span class=\"string\">'-'</span>,markersize =<span class=\"number\">2.5</span>,color=<span class=\"string\">'#14B158'</span>,label=<span class=\"string\">'S&amp;P500'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>为什么我们的stdsp要在这里反转呢？因为我们之前提到过我们提取的数据是从后往前的，可是，<strong>我们画出来的数据方向不是反的</strong>,这说明plot_date函数接收一个“反”着的列表，而我们的stdsp列表是从前往后推的，我们需要将其反转</p>\n<p>绘制图例</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.legend(loc = <span class=\"string\">'upper left'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><blockquote>\n<p>>>> <strong>plt.show()</strong></p>\n</blockquote>\n<p><img src=\"/article/data-visualization-2/linecompare.png\" alt=\"\"></p>\n<h2 id=\"条形图\"><a href=\"#条形图\" class=\"headerlink\" title=\"条形图\"></a>条形图</h2><h3 id=\"简介-2\"><a href=\"#简介-2\" class=\"headerlink\" title=\"简介\"></a>简介</h3><blockquote>\n<p>排列在工作表的列或行中的数据可以绘制到条形图中。条形图显示各个项目之间的比较情况。(<a href=\"http://baike.baidu.com/item/%E6%9D%A1%E5%BD%A2%E5%9B%BE\" target=\"_blank\" rel=\"noopener\">百度百科</a>)</p>\n</blockquote>\n<p>绘制条形图，我们需要bar函数（纵向)或barh函数(横向),x_array代表分布在x轴的点，y_array代表高度</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.bar(left=x_array,height=y_array,[parameters,...])</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"条形图实例：AMD4个季度营业额\"><a href=\"#条形图实例：AMD4个季度营业额\" class=\"headerlink\" title=\"条形图实例：AMD4个季度营业额\"></a>条形图实例：AMD4个季度营业额</h3><p>首先我们获取农企最近四个季度的营业额，我们可以到AMD的官网，SEC里EDGAR的10Q或者其他第三方网站（Yahoo Finance)中找到</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#单位：'M(百万)'</span></span><br><span class=\"line\">revenue = [<span class=\"number\">958</span>,<span class=\"number\">832</span>,<span class=\"number\">1207</span>,<span class=\"number\">1307</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>接着生成四个条形图的位置列表</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#数量4个</span></span><br><span class=\"line\">N = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\">#生成x轴坐标列表[0,1.5,3.0,4.5]</span></span><br><span class=\"line\">x = np.arange(N)*<span class=\"number\">1.5</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>使用bar函数来绘制条形图</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.bar(left=x,height=revenue,color =<span class=\"string\">'#51ADD8'</span>,width=<span class=\"number\">0.5</span>,align=<span class=\"string\">'center'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>left 表示条形图在x轴的位置，以条形图左下角的点为坐标点</li>\n<li>width 表示条形图的宽度</li>\n<li>height 表示条形图高度</li>\n<li>align=’center’ 文字居中</li>\n</ul>\n<p>接着使用日期来标记，分别是四个季度出财报（10-Q)的日期,并定位</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x_date=[<span class=\"string\">'12/26/2015'</span>,<span class=\"string\">'3/26/2016'</span>,<span class=\"string\">'6/25/2016'</span>,<span class=\"string\">'9/24/2016'</span>]</span><br><span class=\"line\">x_namepos =np.arange(<span class=\"number\">4</span>)*<span class=\"number\">1.5</span></span><br><span class=\"line\">plt.xticks(x_namepos,x_date)</span><br></pre></td></tr></table></figure>\n</code></pre><blockquote>\n<p>>>> <strong>plt.show()</strong></p>\n</blockquote>\n<p><img src=\"/article/data-visualization-2/bar.png\" alt=\"\"></p>\n<h3 id=\"条形图（横向）实例\"><a href=\"#条形图（横向）实例\" class=\"headerlink\" title=\"条形图（横向）实例\"></a>条形图（横向）实例</h3><p>前面我们知道了一个标准的条形图该如何绘制，有的时候我们会想要使用横向的条形图该怎么办，和bar差不多，matplotlib在这里提供了barh函数</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.barh(left = <span class=\"number\">0</span>,bottom=y,height=<span class=\"number\">0.5</span>,color =<span class=\"string\">'#51ADD8'</span>,width=revenue,align=<span class=\"string\">'center'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>bottom 表示条形图在y轴的位置，以条形图左上角的点为坐标点</li>\n<li>width 横过来表示长度</li>\n<li>height 竖过来表示宽度</li>\n</ul>\n<blockquote>\n<p>>>> <strong>plt.show()</strong></p>\n</blockquote>\n<p><img src=\"/article/data-visualization-2/barh.png\" alt=\"\"></p>\n<h3 id=\"条形图对比实例\"><a href=\"#条形图对比实例\" class=\"headerlink\" title=\"条形图对比实例\"></a>条形图对比实例</h3><p>除了营业额，我们还可以来看一下两个条形图如何在一起对比，这里我们增加了农企的四个季度净利润</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#单位：'M(百万)'</span></span><br><span class=\"line\">income = [<span class=\"number\">-102</span>,<span class=\"number\">-109</span>,<span class=\"number\">69</span>,<span class=\"number\">-406</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>之前我们设定了两个营业额条形图间距为1.5，添加了净额之后我们预期的结构是这样的</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0.5</span>:营业额<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">0.5</span>：净额<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">0.5</span>:间距</span><br><span class=\"line\"><span class=\"number\">0.5</span>:营业额<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>所以绘制净额</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.bar(left=x+<span class=\"number\">0.5</span>,height=income,color =<span class=\"string\">'#51ADD8'</span>,width=<span class=\"number\">0.5</span>,alpha=<span class=\"number\">0.75</span>,align=<span class=\"string\">'center'</span>,label=<span class=\"string\">\"Net Income\"</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>left 在营业额的坐标点增加0.5(营业额width)</li>\n</ul>\n<p>添加日期，图例</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.legend(loc = <span class=\"string\">'upper left'</span>)</span><br><span class=\"line\">x_datepos =np.add(np.arange(<span class=\"number\">4</span>)*<span class=\"number\">1.5</span>,<span class=\"number\">0.25</span>)</span><br><span class=\"line\">x_date=[<span class=\"string\">'12/26/2015'</span>,<span class=\"string\">'3/26/2016'</span>,<span class=\"string\">'6/25/2016'</span>,<span class=\"string\">'9/24/2016'</span>]</span><br><span class=\"line\">plt.xticks(x_datepos,x_date)</span><br></pre></td></tr></table></figure>\n</code></pre><blockquote>\n<p>>>> <strong>plt.show()</strong></p>\n</blockquote>\n<p><img src=\"/article/data-visualization-2/twobars.png\" alt=\"\"></p>\n<h2 id=\"直方图\"><a href=\"#直方图\" class=\"headerlink\" title=\"直方图\"></a>直方图</h2><h3 id=\"简介-3\"><a href=\"#简介-3\" class=\"headerlink\" title=\"简介\"></a>简介</h3><blockquote>\n<p>直方图(Histogram)又称质量分布图。是一种统计报告图，由一系列高度不等的纵向条纹或线段表示数据分布的情况。 一般用横轴表示数据类型，纵轴表示分布情况。(<a href=\"http://baike.baidu.com/item/%E7%9B%B4%E6%96%B9%E5%9B%BE/1103834\" target=\"_blank\" rel=\"noopener\">百科词条</a>)</p>\n</blockquote>\n<p>绘制直方图我们使用hist函数,array表示变量集合,bins代表分布数量</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.hist(array,bins=<span class=\"number\">20</span>,[parameters,...])</span><br></pre></td></tr></table></figure>\n</code></pre><p>###实例：AMD股价变化率正态分布</p>\n<p>获取股票价格</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open_price,close_price=np.loadtxt(<span class=\"string\">'Nov21-1yr.csv'</span>,delimiter = <span class=\"string\">','</span>,skiprows =<span class=\"number\">1</span>,usecols=(<span class=\"number\">1</span>,<span class=\"number\">4</span>),unpack=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>获取变化率，使用百分比（乘以100）</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diff = ((close_price-open_price)/open_price)*<span class=\"number\">100</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>绘制直方图，分30个连续的区间，并使用正态分布</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.hist(diff,bins=<span class=\"number\">30</span>,color=<span class=\"string\">'#EA4545'</span>,normed=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><blockquote>\n<p>>>> <strong>plt.show()</strong></p>\n</blockquote>\n<p><img src=\"/article/data-visualization-2/hist.png\" alt=\"\"></p>\n<h2 id=\"饼图\"><a href=\"#饼图\" class=\"headerlink\" title=\"饼图\"></a>饼图</h2><blockquote>\n<p>扇形统计图是用整个圆表示总数，用圆内各个扇形的大小表示各部分数量占总数的百分数。通过扇形统计图可以很清楚地表示出各部分数量同总数之间的关系。百分数.。　扇形统计图可以清楚地表示各个项目与总数之间的关系。(<a href=\"http://baike.baidu.com/subview/1289/1289.htm\" target=\"_blank\" rel=\"noopener\">百科词条</a>)</p>\n</blockquote>\n<p>绘制饼图很简单，我们只需要使用pie函数和一组数据即可完成</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.pie(fracs,[parameters,...])</span><br></pre></td></tr></table></figure>\n</code></pre><p>###实例：AMD资产结构</p>\n<p>我们先找到农企2016第三季度的财报(<a href=\"\">10-Q</a>),可以从公司官网或者SEC（美国证监会）找到，如下图</p>\n<p><img src=\"/article/data-visualization-2/tenQ.png\" alt=\"\"></p>\n<p>找到资产下的子分类，作为标签</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">labels = [<span class=\"string\">'Cash'</span>,<span class=\"string\">'A/R'</span>,<span class=\"string\">'Inventories'</span>,<span class=\"string\">'GLOBF'</span>,<span class=\"string\">'Prepaid'</span>,<span class=\"string\">'Other Current'</span>,<span class=\"string\">'Property'</span>,<span class=\"string\">'Goodwill'</span>,<span class=\"string\">'Investments'</span>,<span class=\"string\">'Others'</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>对应的值为</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">asset_items = [<span class=\"number\">1258</span>,<span class=\"number\">640</span>,<span class=\"number\">772</span>,<span class=\"number\">13</span>,<span class=\"number\">63</span>,<span class=\"number\">78</span>,<span class=\"number\">161</span>,<span class=\"number\">289</span>,<span class=\"number\">60</span>,<span class=\"number\">282</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>如果是common size balance sheet的话，我们以资产总和为100%，每个自分类表示为对应的百分比</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fracs = [round(each/sum(asset_items)*<span class=\"number\">100</span>,<span class=\"number\">1</span>) <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> asset_items]</span><br></pre></td></tr></table></figure>\n</code></pre><p>绘制之前添加一组颜色，这组颜色对应每一个板块的颜色，可以自行选择</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors =[<span class=\"string\">'#f26e6e'</span>,<span class=\"string\">'#6e7ef2'</span>,<span class=\"string\">'#6ed1f2'</span>,<span class=\"string\">'#f29d6e'</span>,<span class=\"string\">'#e1f26e'</span>,<span class=\"string\">'#b7f26e'</span>,<span class=\"string\">'#a46ef2'</span>,<span class=\"string\">'#f2ec6e'</span>,<span class=\"string\">'#6ef2a3'</span>,<span class=\"string\">'#51a0aa'</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>将比例设置为1，使最终效果为圆形</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.axes(aspect =<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>绘制</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.pie(fracs,labels = labels,colors = colors,autopct = <span class=\"string\">'%.1f'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>labels 使用我们预设的标签</li>\n<li>color 使用我们预设的颜色</li>\n<li>autopct 将数字标记在上面</li>\n</ul>\n<blockquote>\n<p>>>> <strong>plt.show()</strong></p>\n</blockquote>\n<p><img src=\"/article/data-visualization-2/unpie.png\" alt=\"\"></p>\n<p>哇咧！下面的字叠在一起了，没法看了。该怎么办呢？我们可以使用之前学过的箭头来指向特别窄的扇区，但是还有另一种更简单粗暴的办法。</p>\n<p><strong>转个角度</strong></p>\n<p>我们添加初始角度</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.pie(fracs,labels = labels,colors = colors,autopct = <span class=\"string\">'%.1f'</span>,startangle=<span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>是不是好多了呢？</p>\n<p><img src=\"/article/data-visualization-2/pie.png\" alt=\"\"></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://finance.yahoo.com/quote/%5EGSPC?p=%5EGSPC\" target=\"_blank\" rel=\"noopener\">AMD-Yahoo Finance</a></li>\n<li><a href=\"https://finance.yahoo.com/quote/%5EGSPC?p=%5EGSPC\" target=\"_blank\" rel=\"noopener\">S&amp;P500-Yahoo Finance</a></li>\n<li><a href=\"https://www.sec.gov/cgi-bin/browse-edgar?action=getcompany&amp;CIK=0000002488&amp;type=10&amp;dateb=&amp;owner=exclude&amp;count=40\" target=\"_blank\" rel=\"noopener\">AMD 10Q - SEC EDGAR</a></li>\n<li><a href=\"\">百科词条</a></li>\n</ul>"},{"title":"数据可视化（1）：使用Pylab进行净现值曲线分析","date":"2016-10-25T02:23:17.000Z","_content":"\n<!--Sidebar-->\n\n之前我们学习python的爬虫，在数据科学中，爬虫是获取数据的重要工具。Python的作用并不止步于此，我们还可以通过python进行数据分析。比如我们现在有两个项目\n\n- 项目A： 初始投入1500，之后6年每年获得收益450\n- 项目B： 初始投入1200，到第六年年底一次性获得3000\n\n我们投资需要用的钱是借来的，借来是有利率的，\n\n我们要通过python来对这两项投资进行收益分析(净现值曲线)，通过作图来进行判断，根据利率的变化来选择不同的项目 \n\n\n<!--More-->\n\n\n## 工具准备\n\n作为工业级通用编程语言，python之所以能在数据领域有一席之地，与matplotlib,numpy,Scipy的存在有很大的关系，而我们这次使用的是Pylab,一个类似于matlab的集成平台，它整合了:\n\n- numpy：扩展科学计算程式库，支持高阶纬度阵列，矩阵运算，以及大量函数程式。底层纯C开发，性能极其强悍\n- scipy ：科学计算程式库，主要用于数学计算，与numpy一样，底层纯C开发\n- matplotlib： 标准的绘图库，使用它我们可以绘制精美的图表\n- ipython：\n- jupyter (ipython notebook)：\n\n本文章我们只使用numpy和matplotlib来做基础的绘图操作，后面主要使用matplotlib,使用到了numpy的部分有标注\n\n\timport pylab as plt\n\n## 数据准备\n\n根据之前的项目的细节，我们分别使用两个列表来表示项目资金的流动\n\n\n项目A, 初始投入1500，之后6年每年获得收益450，我们得到\n\n\t```Python\n\tproj_A = [-1500,450,450,450,450,450,450]\n\t```\n项目B, 初始投入1200，到第六年年底一次性获得3000\n\n\t```Python\n\tproj_B = [-1200,0,0,0,0,0,3000]\n\t```\n\t\n\n接下来我们设置利率变化区间\n\n\t```Python\n\tcost_of_capital_rate =[i/100 for i in range(0,21)]\n\t#返回如下列表\n\t[0.0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2]\n\t```\n接下来我们生成利率区间下对应的NPV，刚好numpy为我们提供了npv的函数，格式为npv(利率，现金流量列表)\n\n\t```Python\n\tproj_A_npv = [plt.npv(i,proj_A) for i in cost_of_capital_rate]\n\tproj_B_npv = [plt.npv(i,proj_B) for i in cost_of_capital_rate]\n\t```\n在这里我们使用了[列表解析式]()直接生成，如果这样不习惯我们可以改写成：\n\n\t```Python\n\tproj_A_npv = []\n\tproj_B_npv = []\n\n\tfor i in cost_of_capital:\n\t\tnpv_A = plt.npv(i,proj_A)\n\t\tnpv_B = plt.npv(i,proj_B)\n\t\tproj_A_npv.append()\n\t\tproj_B_npv.append()\n\t```\n我们来看一下proj_A_npv里面是什么：\n\t\n\t```\n\t[1200.0, 1107.9644135606968, 1020.6439008106788, 937.73614974518443, 858.96158553585792, 784.06143027035068, 712.79594670242523, 644.94284689384756, 580.29584878253513, 518.66336560391937, 459.86731475800104, 403.74203418221509, 350.13329558504614, 298.89740503913117, 249.90038244412847, 203.01721226533152, 158.13115874789341, 115.13313951123695, 73.921152054113463, 34.399748257616636, -3.5204475308640326]\n\t```\n这些数字就是与我们之前不同利率相对应的NPV，proj_B_npv也是一样\n\n到这里我们的数据就都准备好了，进入下一步，绘图。\n\t\n\n## 作图\n\n### 新的图表\n\n\t```Python\n\tplt.figure('A / B NPV Profile')\n\t```\n### 重叠与清除\n\n在我们开启了一个新的figure后，我们的所有操作都会叠加到这张图上。比如画了一条曲线后我们可以再添加一条曲线。如果我们不使用清除操作的话，在下次使用该figure时很可能和之前的曲线再次叠加也就是四条曲线。这样干扰了我们正常做图。所以我们每次声明新图表之后最好添加一个清除，日后方便重复使用\n\n\t\n\tplt.clf()\n\n### 绘制图表\n\n\t```Python\n\tplt.plot(cost_of_capital_rate,proj_A_npv,'#92e3d7',label = 'Project A',linewidth = 2.0)\n\tplt.plot(cost_of_capital_rate,proj_B_npv,'#f4ab84',label = 'Project B',linewidth = 2.0)\n\t```\n前面两个分别是横坐标纵坐标的变量，我们使用利率为横坐标，npv为纵坐标，后面的参数分别是\n\n- '#92e3d7' 这一处代表线条的颜色，我们可以使用rgb或者其他的参数，这里使用了hex\n- label = 'Project A' 这里表示该条线在图例中的标签\n- linewidth 线条的粗细\n\n到这里我们就已经完成了图片的绘制。我们可以通过show()方法来显示图片。\n\n![](data-visualization-1/npvprofile1.png)\n\n\n\n## 修改细节\n\n尽管我们已经完成了基本的绘图工作，我们的图还是有一些粗糙，并不能让读者更直观地理解数据，这时我们需要修改细节\n\n### 上限\n\n我们对y轴的上限进行设置，从0-2000，\n\n\t```Python\n\tplt.ylim(0,2000)\n\t```\n2000这个值是怎么来的，很简单，试出来的。在我们之前绘制的片是有刻度和上限的，但是这个刻度和上限有时候并不能够最好地展示我们的折线图，当我们看到这个折线与y轴交汇最高点接近并低于2000时，我们使用2000作为上限可以最好地展示我们的图片\n\n### 刻度\n\n现在我们要修改我们的刻度，默认刻度间距有点大，这时候我们并不能很好地对数据进行判断。\n\n这里我们使用了numpy的arange功能，快速生成一个刻度列表,使用方法是\n\t\n\t```Python\n\tnumpy.arange(起点，终点（不包含），间隔)\n\t>>>plt.arange(0, 2000+1, 400)\n\t生成了以下列表\n\t[0,400,800,1200,1600,2000]\n\t```\n接着我们分别使用yticks,xticks来修改x，y轴坐标\n\n\t```Python\n\tplt.yticks(plt.arange(0, 2000+1, 400))\n\tplt.xticks(plt.arange(0,0.26+0.01,0.02))\n\t```\n\n### 图例\n\n为了让读者更好地分辨两条曲线，我们在这里添加图例\n\n\tplt.legend()\n\t\n如果我们要标记图例的位置为右上方，我们添加参数loc\n\n\tplt.legend(loc = 'upper right')\n\n###标题\n\n最后我们添加标题\n\n\tplt.title('Project A/B NPV Analysis')\n\n\n\n好了，使用show()方法来显示我们的NPV Profile吧\n\n\t plt.show()\n\t \n结果如下：\n\n![](data-visualization-1/npvprofile2.png)\n\n\n## 交点\n\n根据上面的图我们可以看出在交点前后NPV最大的公司是不同的，但是我们并不能够知道这个点所代表的利率是多少，所以我们需要将它在图上进行标记。我们先求出这个点的坐标。什么？求出来还要标吗？是的，因为图上的线是点连接成的，有一定偏差；而且这份图不一定只是自己看的，需要求出坐标画图。\n\n### 交点坐标\n\n在求出交点坐标之前，我们需要知道这个交点背后的意义是什么。在该点的利率下，项目A和项目B的净现值（NPV）是持平的。求出两个项目现金流量的差，然后我们使用这个差求出该点的IRR（IRR是NPV为0时的利率）作为横坐标。最后我们通过该点求出项目A或者B的NPV作为纵坐标。\n\n先对AB求差：\n\n\t```Python\n\ti = 0\n\tintersection = []\n\tfor i in len(proj_A):\n\t\tintersection.append(proj_A[i] - proj_B[i])\n\t\t\n\t#得到[ -300,   450,   450,   450,   450,   450, -2550]\n\t```\n有没有更简单的？有\n\n\t```Python\n\tintersection = [proj_A[i] - proj_B[i] for i in len(proj_A)]\n\t```\n\n有没有更简单更快速的？当然有，这里我们用numpy的array来代替python的list，然后直接进行加减运算，\n\n\t```Python\n\ta= plt.array(proj_A)#将proj_A从list转换到array\n\tb= plt.array(proj_B)\n\t```\n这时候我们可以看到a是这个样子\n\n\t```Python\n\tarray([-1500,   450,   450,   450,   450,   450,   450])\n\t```\n\t\n然后我们只需\n\n\tintersection = a-b\n\t\n就直接得到了我们想要的结果，这么做另一个好处是当我们使用numpy时，速度快了不止一个数量级，具备了大型运算的能力\n\n接下来我们使用numpy的irr和npv函数即可求出x,y坐标\n\n\t```python\n\tintersection_irr = plt.irr(intersection)\n\tintersection_npv =plt.npv(intersection_irr,a)\n\t```\n### 文字标记\n\nmatplotlib提供了annotate函数来帮助我们对图进行标记\n\n\t```Python\n\tplt.annotate(\"intersection = %.4f\"%intersection_irr,xy=(intersection_irr,intersection_npv),xytext=(intersection_irr+0.02,intersection_npv+100),arrowprops=dict(facecolor='black', shrink=0.05))\n\t```\n- 开头的'intersection = %.4f'％intersection_irr 是我们想在图片上显示的内容%.4f'％intersection_irr表示取intersection_irr小数点后四位\n- xy 参数接收交点的横纵坐标，是箭头指向的位置\n- xytext 是文字所处的坐标，注意修改时要考虑刻度\n- arrowprops 是我们箭头的属性，shrink ＝ 0.05表示箭头长度只有95%,保留和文字之间的空隙\n\n\n\n## 结果和分析\n\n好了，这次再来看我们的折线图\n\n![](data-visualization-1/npvprofile3.png)\n\n\n从上图我们可以得出\n\n>**1. A / B 的盈利利率区间，盈利范围**\n\n>**2. 在利率为11.01%时，A/B净现值相等，低于该点B项目收益高，高于该点A项目收益高**\n\n\n\n\n\n这么看着好麻烦，我们为什么要使用python而不是EXCEL这样更方便的工具？\n\n>这次只是一个小的例子。在数据科学中，我们往往需要处理成千上万的数据，如果使用excel的话，性能可能会差强人意或者会很卡（比如五千家公司十年来每天的股票收盘价格。。。另外python可以通过api接口，爬虫或者数据库直接对接从而获取大量数据，非常方便\n\n\n\n## 完整代码\n\n\t```Python\n\timport pylab as plt\n\n\tproj_A = [-1500,450,450,450,450,450,450]\n\tproj_B = [-1200,0,0,0,0,0,3000]\n\n\tcost_of_capital_rate =[i/100 for i in range(0,21)]\n\tproj_A_npv = [plt.npv(i,proj_A) for i in cost_of_capital_rate]\n\tproj_B_npv = [plt.npv(i,proj_B) for i in cost_of_capital_rate]\n\n\tplt.figure('A / B NPV Profile')\n\n\tplt.clf()\n\n\tplt.plot(cost_of_capital_rate,proj_A_npv,'#92e3d7',label = 'Project A',linewidth = 2.0)\n\tplt.plot(cost_of_capital_rate,proj_B_npv,'#f4ab84',label = 'Project B',linewidth = 2.0)\n\n\n\tplt.ylim(0,2000)\n\tplt.yticks(plt.arange(0, 2000+1, 400))\n\tplt.xticks(plt.arange(0,0.24+0.01,0.02))\n\n\t\n\tplt.legend(loc = 'upper right')\n\n\tplt.title('Project A/B NPV Analysis')\n\n\ta= plt.array(proj_A)\n\tb= plt.array(proj_B)\n\tintersection = a-b\n\tintersection_irr = plt.irr(intersection)\n\tintersection_npv =plt.npv(intersection_irr,a)\n\n\tplt.annotate(\"intersection = %.4f\"%intersection_irr,xy=(intersection_irr,intersection_npv),xytext=(intersection_irr+0.02,intersection_npv+100),arrowprops=dict(facecolor='black', shrink=0.05))\n\n\tplt.show()\n\t```","source":"_posts/data-visualization-1.md","raw":"---\ntitle: 数据可视化（1）：使用Pylab进行净现值曲线分析\ndate: 2016-10-25 10:23:17\ntags:\ncategories: 数据可视化\n---\n\n<!--Sidebar-->\n\n之前我们学习python的爬虫，在数据科学中，爬虫是获取数据的重要工具。Python的作用并不止步于此，我们还可以通过python进行数据分析。比如我们现在有两个项目\n\n- 项目A： 初始投入1500，之后6年每年获得收益450\n- 项目B： 初始投入1200，到第六年年底一次性获得3000\n\n我们投资需要用的钱是借来的，借来是有利率的，\n\n我们要通过python来对这两项投资进行收益分析(净现值曲线)，通过作图来进行判断，根据利率的变化来选择不同的项目 \n\n\n<!--More-->\n\n\n## 工具准备\n\n作为工业级通用编程语言，python之所以能在数据领域有一席之地，与matplotlib,numpy,Scipy的存在有很大的关系，而我们这次使用的是Pylab,一个类似于matlab的集成平台，它整合了:\n\n- numpy：扩展科学计算程式库，支持高阶纬度阵列，矩阵运算，以及大量函数程式。底层纯C开发，性能极其强悍\n- scipy ：科学计算程式库，主要用于数学计算，与numpy一样，底层纯C开发\n- matplotlib： 标准的绘图库，使用它我们可以绘制精美的图表\n- ipython：\n- jupyter (ipython notebook)：\n\n本文章我们只使用numpy和matplotlib来做基础的绘图操作，后面主要使用matplotlib,使用到了numpy的部分有标注\n\n\timport pylab as plt\n\n## 数据准备\n\n根据之前的项目的细节，我们分别使用两个列表来表示项目资金的流动\n\n\n项目A, 初始投入1500，之后6年每年获得收益450，我们得到\n\n\t```Python\n\tproj_A = [-1500,450,450,450,450,450,450]\n\t```\n项目B, 初始投入1200，到第六年年底一次性获得3000\n\n\t```Python\n\tproj_B = [-1200,0,0,0,0,0,3000]\n\t```\n\t\n\n接下来我们设置利率变化区间\n\n\t```Python\n\tcost_of_capital_rate =[i/100 for i in range(0,21)]\n\t#返回如下列表\n\t[0.0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2]\n\t```\n接下来我们生成利率区间下对应的NPV，刚好numpy为我们提供了npv的函数，格式为npv(利率，现金流量列表)\n\n\t```Python\n\tproj_A_npv = [plt.npv(i,proj_A) for i in cost_of_capital_rate]\n\tproj_B_npv = [plt.npv(i,proj_B) for i in cost_of_capital_rate]\n\t```\n在这里我们使用了[列表解析式]()直接生成，如果这样不习惯我们可以改写成：\n\n\t```Python\n\tproj_A_npv = []\n\tproj_B_npv = []\n\n\tfor i in cost_of_capital:\n\t\tnpv_A = plt.npv(i,proj_A)\n\t\tnpv_B = plt.npv(i,proj_B)\n\t\tproj_A_npv.append()\n\t\tproj_B_npv.append()\n\t```\n我们来看一下proj_A_npv里面是什么：\n\t\n\t```\n\t[1200.0, 1107.9644135606968, 1020.6439008106788, 937.73614974518443, 858.96158553585792, 784.06143027035068, 712.79594670242523, 644.94284689384756, 580.29584878253513, 518.66336560391937, 459.86731475800104, 403.74203418221509, 350.13329558504614, 298.89740503913117, 249.90038244412847, 203.01721226533152, 158.13115874789341, 115.13313951123695, 73.921152054113463, 34.399748257616636, -3.5204475308640326]\n\t```\n这些数字就是与我们之前不同利率相对应的NPV，proj_B_npv也是一样\n\n到这里我们的数据就都准备好了，进入下一步，绘图。\n\t\n\n## 作图\n\n### 新的图表\n\n\t```Python\n\tplt.figure('A / B NPV Profile')\n\t```\n### 重叠与清除\n\n在我们开启了一个新的figure后，我们的所有操作都会叠加到这张图上。比如画了一条曲线后我们可以再添加一条曲线。如果我们不使用清除操作的话，在下次使用该figure时很可能和之前的曲线再次叠加也就是四条曲线。这样干扰了我们正常做图。所以我们每次声明新图表之后最好添加一个清除，日后方便重复使用\n\n\t\n\tplt.clf()\n\n### 绘制图表\n\n\t```Python\n\tplt.plot(cost_of_capital_rate,proj_A_npv,'#92e3d7',label = 'Project A',linewidth = 2.0)\n\tplt.plot(cost_of_capital_rate,proj_B_npv,'#f4ab84',label = 'Project B',linewidth = 2.0)\n\t```\n前面两个分别是横坐标纵坐标的变量，我们使用利率为横坐标，npv为纵坐标，后面的参数分别是\n\n- '#92e3d7' 这一处代表线条的颜色，我们可以使用rgb或者其他的参数，这里使用了hex\n- label = 'Project A' 这里表示该条线在图例中的标签\n- linewidth 线条的粗细\n\n到这里我们就已经完成了图片的绘制。我们可以通过show()方法来显示图片。\n\n![](data-visualization-1/npvprofile1.png)\n\n\n\n## 修改细节\n\n尽管我们已经完成了基本的绘图工作，我们的图还是有一些粗糙，并不能让读者更直观地理解数据，这时我们需要修改细节\n\n### 上限\n\n我们对y轴的上限进行设置，从0-2000，\n\n\t```Python\n\tplt.ylim(0,2000)\n\t```\n2000这个值是怎么来的，很简单，试出来的。在我们之前绘制的片是有刻度和上限的，但是这个刻度和上限有时候并不能够最好地展示我们的折线图，当我们看到这个折线与y轴交汇最高点接近并低于2000时，我们使用2000作为上限可以最好地展示我们的图片\n\n### 刻度\n\n现在我们要修改我们的刻度，默认刻度间距有点大，这时候我们并不能很好地对数据进行判断。\n\n这里我们使用了numpy的arange功能，快速生成一个刻度列表,使用方法是\n\t\n\t```Python\n\tnumpy.arange(起点，终点（不包含），间隔)\n\t>>>plt.arange(0, 2000+1, 400)\n\t生成了以下列表\n\t[0,400,800,1200,1600,2000]\n\t```\n接着我们分别使用yticks,xticks来修改x，y轴坐标\n\n\t```Python\n\tplt.yticks(plt.arange(0, 2000+1, 400))\n\tplt.xticks(plt.arange(0,0.26+0.01,0.02))\n\t```\n\n### 图例\n\n为了让读者更好地分辨两条曲线，我们在这里添加图例\n\n\tplt.legend()\n\t\n如果我们要标记图例的位置为右上方，我们添加参数loc\n\n\tplt.legend(loc = 'upper right')\n\n###标题\n\n最后我们添加标题\n\n\tplt.title('Project A/B NPV Analysis')\n\n\n\n好了，使用show()方法来显示我们的NPV Profile吧\n\n\t plt.show()\n\t \n结果如下：\n\n![](data-visualization-1/npvprofile2.png)\n\n\n## 交点\n\n根据上面的图我们可以看出在交点前后NPV最大的公司是不同的，但是我们并不能够知道这个点所代表的利率是多少，所以我们需要将它在图上进行标记。我们先求出这个点的坐标。什么？求出来还要标吗？是的，因为图上的线是点连接成的，有一定偏差；而且这份图不一定只是自己看的，需要求出坐标画图。\n\n### 交点坐标\n\n在求出交点坐标之前，我们需要知道这个交点背后的意义是什么。在该点的利率下，项目A和项目B的净现值（NPV）是持平的。求出两个项目现金流量的差，然后我们使用这个差求出该点的IRR（IRR是NPV为0时的利率）作为横坐标。最后我们通过该点求出项目A或者B的NPV作为纵坐标。\n\n先对AB求差：\n\n\t```Python\n\ti = 0\n\tintersection = []\n\tfor i in len(proj_A):\n\t\tintersection.append(proj_A[i] - proj_B[i])\n\t\t\n\t#得到[ -300,   450,   450,   450,   450,   450, -2550]\n\t```\n有没有更简单的？有\n\n\t```Python\n\tintersection = [proj_A[i] - proj_B[i] for i in len(proj_A)]\n\t```\n\n有没有更简单更快速的？当然有，这里我们用numpy的array来代替python的list，然后直接进行加减运算，\n\n\t```Python\n\ta= plt.array(proj_A)#将proj_A从list转换到array\n\tb= plt.array(proj_B)\n\t```\n这时候我们可以看到a是这个样子\n\n\t```Python\n\tarray([-1500,   450,   450,   450,   450,   450,   450])\n\t```\n\t\n然后我们只需\n\n\tintersection = a-b\n\t\n就直接得到了我们想要的结果，这么做另一个好处是当我们使用numpy时，速度快了不止一个数量级，具备了大型运算的能力\n\n接下来我们使用numpy的irr和npv函数即可求出x,y坐标\n\n\t```python\n\tintersection_irr = plt.irr(intersection)\n\tintersection_npv =plt.npv(intersection_irr,a)\n\t```\n### 文字标记\n\nmatplotlib提供了annotate函数来帮助我们对图进行标记\n\n\t```Python\n\tplt.annotate(\"intersection = %.4f\"%intersection_irr,xy=(intersection_irr,intersection_npv),xytext=(intersection_irr+0.02,intersection_npv+100),arrowprops=dict(facecolor='black', shrink=0.05))\n\t```\n- 开头的'intersection = %.4f'％intersection_irr 是我们想在图片上显示的内容%.4f'％intersection_irr表示取intersection_irr小数点后四位\n- xy 参数接收交点的横纵坐标，是箭头指向的位置\n- xytext 是文字所处的坐标，注意修改时要考虑刻度\n- arrowprops 是我们箭头的属性，shrink ＝ 0.05表示箭头长度只有95%,保留和文字之间的空隙\n\n\n\n## 结果和分析\n\n好了，这次再来看我们的折线图\n\n![](data-visualization-1/npvprofile3.png)\n\n\n从上图我们可以得出\n\n>**1. A / B 的盈利利率区间，盈利范围**\n\n>**2. 在利率为11.01%时，A/B净现值相等，低于该点B项目收益高，高于该点A项目收益高**\n\n\n\n\n\n这么看着好麻烦，我们为什么要使用python而不是EXCEL这样更方便的工具？\n\n>这次只是一个小的例子。在数据科学中，我们往往需要处理成千上万的数据，如果使用excel的话，性能可能会差强人意或者会很卡（比如五千家公司十年来每天的股票收盘价格。。。另外python可以通过api接口，爬虫或者数据库直接对接从而获取大量数据，非常方便\n\n\n\n## 完整代码\n\n\t```Python\n\timport pylab as plt\n\n\tproj_A = [-1500,450,450,450,450,450,450]\n\tproj_B = [-1200,0,0,0,0,0,3000]\n\n\tcost_of_capital_rate =[i/100 for i in range(0,21)]\n\tproj_A_npv = [plt.npv(i,proj_A) for i in cost_of_capital_rate]\n\tproj_B_npv = [plt.npv(i,proj_B) for i in cost_of_capital_rate]\n\n\tplt.figure('A / B NPV Profile')\n\n\tplt.clf()\n\n\tplt.plot(cost_of_capital_rate,proj_A_npv,'#92e3d7',label = 'Project A',linewidth = 2.0)\n\tplt.plot(cost_of_capital_rate,proj_B_npv,'#f4ab84',label = 'Project B',linewidth = 2.0)\n\n\n\tplt.ylim(0,2000)\n\tplt.yticks(plt.arange(0, 2000+1, 400))\n\tplt.xticks(plt.arange(0,0.24+0.01,0.02))\n\n\t\n\tplt.legend(loc = 'upper right')\n\n\tplt.title('Project A/B NPV Analysis')\n\n\ta= plt.array(proj_A)\n\tb= plt.array(proj_B)\n\tintersection = a-b\n\tintersection_irr = plt.irr(intersection)\n\tintersection_npv =plt.npv(intersection_irr,a)\n\n\tplt.annotate(\"intersection = %.4f\"%intersection_irr,xy=(intersection_irr,intersection_npv),xytext=(intersection_irr+0.02,intersection_npv+100),arrowprops=dict(facecolor='black', shrink=0.05))\n\n\tplt.show()\n\t```","slug":"data-visualization-1","published":1,"updated":"2018-06-22T05:43:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiqvlnwd000vglu3zcmtjwsp","content":"<!--Sidebar-->\n<p>之前我们学习python的爬虫，在数据科学中，爬虫是获取数据的重要工具。Python的作用并不止步于此，我们还可以通过python进行数据分析。比如我们现在有两个项目</p>\n<ul>\n<li>项目A： 初始投入1500，之后6年每年获得收益450</li>\n<li>项目B： 初始投入1200，到第六年年底一次性获得3000</li>\n</ul>\n<p>我们投资需要用的钱是借来的，借来是有利率的，</p>\n<p>我们要通过python来对这两项投资进行收益分析(净现值曲线)，通过作图来进行判断，根据利率的变化来选择不同的项目 </p>\n<a id=\"more\"></a>\n<h2 id=\"工具准备\"><a href=\"#工具准备\" class=\"headerlink\" title=\"工具准备\"></a>工具准备</h2><p>作为工业级通用编程语言，python之所以能在数据领域有一席之地，与matplotlib,numpy,Scipy的存在有很大的关系，而我们这次使用的是Pylab,一个类似于matlab的集成平台，它整合了:</p>\n<ul>\n<li>numpy：扩展科学计算程式库，支持高阶纬度阵列，矩阵运算，以及大量函数程式。底层纯C开发，性能极其强悍</li>\n<li>scipy ：科学计算程式库，主要用于数学计算，与numpy一样，底层纯C开发</li>\n<li>matplotlib： 标准的绘图库，使用它我们可以绘制精美的图表</li>\n<li>ipython：</li>\n<li>jupyter (ipython notebook)：</li>\n</ul>\n<p>本文章我们只使用numpy和matplotlib来做基础的绘图操作，后面主要使用matplotlib,使用到了numpy的部分有标注</p>\n<pre><code>import pylab as plt\n</code></pre><h2 id=\"数据准备\"><a href=\"#数据准备\" class=\"headerlink\" title=\"数据准备\"></a>数据准备</h2><p>根据之前的项目的细节，我们分别使用两个列表来表示项目资金的流动</p>\n<p>项目A, 初始投入1500，之后6年每年获得收益450，我们得到</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proj_A = [<span class=\"number\">-1500</span>,<span class=\"number\">450</span>,<span class=\"number\">450</span>,<span class=\"number\">450</span>,<span class=\"number\">450</span>,<span class=\"number\">450</span>,<span class=\"number\">450</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>项目B, 初始投入1200，到第六年年底一次性获得3000</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proj_B = [<span class=\"number\">-1200</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">3000</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>接下来我们设置利率变化区间</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cost_of_capital_rate =[i/<span class=\"number\">100</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,<span class=\"number\">21</span>)]</span><br><span class=\"line\"><span class=\"comment\">#返回如下列表</span></span><br><span class=\"line\">[<span class=\"number\">0.0</span>, <span class=\"number\">0.01</span>, <span class=\"number\">0.02</span>, <span class=\"number\">0.03</span>, <span class=\"number\">0.04</span>, <span class=\"number\">0.05</span>, <span class=\"number\">0.06</span>, <span class=\"number\">0.07</span>, <span class=\"number\">0.08</span>, <span class=\"number\">0.09</span>, <span class=\"number\">0.1</span>, <span class=\"number\">0.11</span>, <span class=\"number\">0.12</span>, <span class=\"number\">0.13</span>, <span class=\"number\">0.14</span>, <span class=\"number\">0.15</span>, <span class=\"number\">0.16</span>, <span class=\"number\">0.17</span>, <span class=\"number\">0.18</span>, <span class=\"number\">0.19</span>, <span class=\"number\">0.2</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>接下来我们生成利率区间下对应的NPV，刚好numpy为我们提供了npv的函数，格式为npv(利率，现金流量列表)</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proj_A_npv = [plt.npv(i,proj_A) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> cost_of_capital_rate]</span><br><span class=\"line\">proj_B_npv = [plt.npv(i,proj_B) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> cost_of_capital_rate]</span><br></pre></td></tr></table></figure>\n</code></pre><p>在这里我们使用了<a href=\"\">列表解析式</a>直接生成，如果这样不习惯我们可以改写成：</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proj_A_npv = []</span><br><span class=\"line\">proj_B_npv = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> cost_of_capital:</span><br><span class=\"line\">\tnpv_A = plt.npv(i,proj_A)</span><br><span class=\"line\">\tnpv_B = plt.npv(i,proj_B)</span><br><span class=\"line\">\tproj_A_npv.append()</span><br><span class=\"line\">\tproj_B_npv.append()</span><br></pre></td></tr></table></figure>\n</code></pre><p>我们来看一下proj_A_npv里面是什么：</p>\n<pre><code><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1200.0</span>, <span class=\"number\">1107.9644135606968</span>, <span class=\"number\">1020.6439008106788</span>, <span class=\"number\">937.73614974518443</span>, <span class=\"number\">858.96158553585792</span>, <span class=\"number\">784.06143027035068</span>, <span class=\"number\">712.79594670242523</span>, <span class=\"number\">644.94284689384756</span>, <span class=\"number\">580.29584878253513</span>, <span class=\"number\">518.66336560391937</span>, <span class=\"number\">459.86731475800104</span>, <span class=\"number\">403.74203418221509</span>, <span class=\"number\">350.13329558504614</span>, <span class=\"number\">298.89740503913117</span>, <span class=\"number\">249.90038244412847</span>, <span class=\"number\">203.01721226533152</span>, <span class=\"number\">158.13115874789341</span>, <span class=\"number\">115.13313951123695</span>, <span class=\"number\">73.921152054113463</span>, <span class=\"number\">34.399748257616636</span>, <span class=\"number\">-3.5204475308640326</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>这些数字就是与我们之前不同利率相对应的NPV，proj_B_npv也是一样</p>\n<p>到这里我们的数据就都准备好了，进入下一步，绘图。</p>\n<h2 id=\"作图\"><a href=\"#作图\" class=\"headerlink\" title=\"作图\"></a>作图</h2><h3 id=\"新的图表\"><a href=\"#新的图表\" class=\"headerlink\" title=\"新的图表\"></a>新的图表</h3><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.figure(<span class=\"string\">'A / B NPV Profile'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"重叠与清除\"><a href=\"#重叠与清除\" class=\"headerlink\" title=\"重叠与清除\"></a>重叠与清除</h3><p>在我们开启了一个新的figure后，我们的所有操作都会叠加到这张图上。比如画了一条曲线后我们可以再添加一条曲线。如果我们不使用清除操作的话，在下次使用该figure时很可能和之前的曲线再次叠加也就是四条曲线。这样干扰了我们正常做图。所以我们每次声明新图表之后最好添加一个清除，日后方便重复使用</p>\n<pre><code>plt.clf()\n</code></pre><h3 id=\"绘制图表\"><a href=\"#绘制图表\" class=\"headerlink\" title=\"绘制图表\"></a>绘制图表</h3><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.plot(cost_of_capital_rate,proj_A_npv,<span class=\"string\">'#92e3d7'</span>,label = <span class=\"string\">'Project A'</span>,linewidth = <span class=\"number\">2.0</span>)</span><br><span class=\"line\">plt.plot(cost_of_capital_rate,proj_B_npv,<span class=\"string\">'#f4ab84'</span>,label = <span class=\"string\">'Project B'</span>,linewidth = <span class=\"number\">2.0</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>前面两个分别是横坐标纵坐标的变量，我们使用利率为横坐标，npv为纵坐标，后面的参数分别是</p>\n<ul>\n<li>‘#92e3d7’ 这一处代表线条的颜色，我们可以使用rgb或者其他的参数，这里使用了hex</li>\n<li>label = ‘Project A’ 这里表示该条线在图例中的标签</li>\n<li>linewidth 线条的粗细</li>\n</ul>\n<p>到这里我们就已经完成了图片的绘制。我们可以通过show()方法来显示图片。</p>\n<p><img src=\"/article/data-visualization-1/npvprofile1.png\" alt=\"\"></p>\n<h2 id=\"修改细节\"><a href=\"#修改细节\" class=\"headerlink\" title=\"修改细节\"></a>修改细节</h2><p>尽管我们已经完成了基本的绘图工作，我们的图还是有一些粗糙，并不能让读者更直观地理解数据，这时我们需要修改细节</p>\n<h3 id=\"上限\"><a href=\"#上限\" class=\"headerlink\" title=\"上限\"></a>上限</h3><p>我们对y轴的上限进行设置，从0-2000，</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.ylim(<span class=\"number\">0</span>,<span class=\"number\">2000</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>2000这个值是怎么来的，很简单，试出来的。在我们之前绘制的片是有刻度和上限的，但是这个刻度和上限有时候并不能够最好地展示我们的折线图，当我们看到这个折线与y轴交汇最高点接近并低于2000时，我们使用2000作为上限可以最好地展示我们的图片</p>\n<h3 id=\"刻度\"><a href=\"#刻度\" class=\"headerlink\" title=\"刻度\"></a>刻度</h3><p>现在我们要修改我们的刻度，默认刻度间距有点大，这时候我们并不能很好地对数据进行判断。</p>\n<p>这里我们使用了numpy的arange功能，快速生成一个刻度列表,使用方法是</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numpy.arange(起点，终点（不包含），间隔)</span><br><span class=\"line\">&gt;&gt;&gt;plt.arange(<span class=\"number\">0</span>, <span class=\"number\">2000</span>+<span class=\"number\">1</span>, <span class=\"number\">400</span>)</span><br><span class=\"line\">生成了以下列表</span><br><span class=\"line\">[<span class=\"number\">0</span>,<span class=\"number\">400</span>,<span class=\"number\">800</span>,<span class=\"number\">1200</span>,<span class=\"number\">1600</span>,<span class=\"number\">2000</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>接着我们分别使用yticks,xticks来修改x，y轴坐标</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.yticks(plt.arange(<span class=\"number\">0</span>, <span class=\"number\">2000</span>+<span class=\"number\">1</span>, <span class=\"number\">400</span>))</span><br><span class=\"line\">plt.xticks(plt.arange(<span class=\"number\">0</span>,<span class=\"number\">0.26</span>+<span class=\"number\">0.01</span>,<span class=\"number\">0.02</span>))</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"图例\"><a href=\"#图例\" class=\"headerlink\" title=\"图例\"></a>图例</h3><p>为了让读者更好地分辨两条曲线，我们在这里添加图例</p>\n<pre><code>plt.legend()\n</code></pre><p>如果我们要标记图例的位置为右上方，我们添加参数loc</p>\n<pre><code>plt.legend(loc = &apos;upper right&apos;)\n</code></pre><p>###标题</p>\n<p>最后我们添加标题</p>\n<pre><code>plt.title(&apos;Project A/B NPV Analysis&apos;)\n</code></pre><p>好了，使用show()方法来显示我们的NPV Profile吧</p>\n<pre><code>plt.show()\n</code></pre><p>结果如下：</p>\n<p><img src=\"/article/data-visualization-1/npvprofile2.png\" alt=\"\"></p>\n<h2 id=\"交点\"><a href=\"#交点\" class=\"headerlink\" title=\"交点\"></a>交点</h2><p>根据上面的图我们可以看出在交点前后NPV最大的公司是不同的，但是我们并不能够知道这个点所代表的利率是多少，所以我们需要将它在图上进行标记。我们先求出这个点的坐标。什么？求出来还要标吗？是的，因为图上的线是点连接成的，有一定偏差；而且这份图不一定只是自己看的，需要求出坐标画图。</p>\n<h3 id=\"交点坐标\"><a href=\"#交点坐标\" class=\"headerlink\" title=\"交点坐标\"></a>交点坐标</h3><p>在求出交点坐标之前，我们需要知道这个交点背后的意义是什么。在该点的利率下，项目A和项目B的净现值（NPV）是持平的。求出两个项目现金流量的差，然后我们使用这个差求出该点的IRR（IRR是NPV为0时的利率）作为横坐标。最后我们通过该点求出项目A或者B的NPV作为纵坐标。</p>\n<p>先对AB求差：</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = <span class=\"number\">0</span></span><br><span class=\"line\">intersection = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> len(proj_A):</span><br><span class=\"line\">\tintersection.append(proj_A[i] - proj_B[i])</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">#得到[ -300,   450,   450,   450,   450,   450, -2550]</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>有没有更简单的？有</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intersection = [proj_A[i] - proj_B[i] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> len(proj_A)]</span><br></pre></td></tr></table></figure>\n</code></pre><p>有没有更简单更快速的？当然有，这里我们用numpy的array来代替python的list，然后直接进行加减运算，</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a= plt.array(proj_A)<span class=\"comment\">#将proj_A从list转换到array</span></span><br><span class=\"line\">b= plt.array(proj_B)</span><br></pre></td></tr></table></figure>\n</code></pre><p>这时候我们可以看到a是这个样子</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array([<span class=\"number\">-1500</span>,   <span class=\"number\">450</span>,   <span class=\"number\">450</span>,   <span class=\"number\">450</span>,   <span class=\"number\">450</span>,   <span class=\"number\">450</span>,   <span class=\"number\">450</span>])</span><br></pre></td></tr></table></figure>\n</code></pre><p>然后我们只需</p>\n<pre><code>intersection = a-b\n</code></pre><p>就直接得到了我们想要的结果，这么做另一个好处是当我们使用numpy时，速度快了不止一个数量级，具备了大型运算的能力</p>\n<p>接下来我们使用numpy的irr和npv函数即可求出x,y坐标</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intersection_irr = plt.irr(intersection)</span><br><span class=\"line\">intersection_npv =plt.npv(intersection_irr,a)</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"文字标记\"><a href=\"#文字标记\" class=\"headerlink\" title=\"文字标记\"></a>文字标记</h3><p>matplotlib提供了annotate函数来帮助我们对图进行标记</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.annotate(<span class=\"string\">\"intersection = %.4f\"</span>%intersection_irr,xy=(intersection_irr,intersection_npv),xytext=(intersection_irr+<span class=\"number\">0.02</span>,intersection_npv+<span class=\"number\">100</span>),arrowprops=dict(facecolor=<span class=\"string\">'black'</span>, shrink=<span class=\"number\">0.05</span>))</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>开头的’intersection = %.4f’％intersection_irr 是我们想在图片上显示的内容%.4f’％intersection_irr表示取intersection_irr小数点后四位</li>\n<li>xy 参数接收交点的横纵坐标，是箭头指向的位置</li>\n<li>xytext 是文字所处的坐标，注意修改时要考虑刻度</li>\n<li>arrowprops 是我们箭头的属性，shrink ＝ 0.05表示箭头长度只有95%,保留和文字之间的空隙</li>\n</ul>\n<h2 id=\"结果和分析\"><a href=\"#结果和分析\" class=\"headerlink\" title=\"结果和分析\"></a>结果和分析</h2><p>好了，这次再来看我们的折线图</p>\n<p><img src=\"/article/data-visualization-1/npvprofile3.png\" alt=\"\"></p>\n<p>从上图我们可以得出</p>\n<blockquote>\n<p><strong>1. A / B 的盈利利率区间，盈利范围</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>2. 在利率为11.01%时，A/B净现值相等，低于该点B项目收益高，高于该点A项目收益高</strong></p>\n</blockquote>\n<p>这么看着好麻烦，我们为什么要使用python而不是EXCEL这样更方便的工具？</p>\n<blockquote>\n<p>这次只是一个小的例子。在数据科学中，我们往往需要处理成千上万的数据，如果使用excel的话，性能可能会差强人意或者会很卡（比如五千家公司十年来每天的股票收盘价格。。。另外python可以通过api接口，爬虫或者数据库直接对接从而获取大量数据，非常方便</p>\n</blockquote>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pylab <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">proj_A = [<span class=\"number\">-1500</span>,<span class=\"number\">450</span>,<span class=\"number\">450</span>,<span class=\"number\">450</span>,<span class=\"number\">450</span>,<span class=\"number\">450</span>,<span class=\"number\">450</span>]</span><br><span class=\"line\">proj_B = [<span class=\"number\">-1200</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">3000</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">cost_of_capital_rate =[i/<span class=\"number\">100</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,<span class=\"number\">21</span>)]</span><br><span class=\"line\">proj_A_npv = [plt.npv(i,proj_A) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> cost_of_capital_rate]</span><br><span class=\"line\">proj_B_npv = [plt.npv(i,proj_B) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> cost_of_capital_rate]</span><br><span class=\"line\"></span><br><span class=\"line\">plt.figure(<span class=\"string\">'A / B NPV Profile'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.clf()</span><br><span class=\"line\"></span><br><span class=\"line\">plt.plot(cost_of_capital_rate,proj_A_npv,<span class=\"string\">'#92e3d7'</span>,label = <span class=\"string\">'Project A'</span>,linewidth = <span class=\"number\">2.0</span>)</span><br><span class=\"line\">plt.plot(cost_of_capital_rate,proj_B_npv,<span class=\"string\">'#f4ab84'</span>,label = <span class=\"string\">'Project B'</span>,linewidth = <span class=\"number\">2.0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">plt.ylim(<span class=\"number\">0</span>,<span class=\"number\">2000</span>)</span><br><span class=\"line\">plt.yticks(plt.arange(<span class=\"number\">0</span>, <span class=\"number\">2000</span>+<span class=\"number\">1</span>, <span class=\"number\">400</span>))</span><br><span class=\"line\">plt.xticks(plt.arange(<span class=\"number\">0</span>,<span class=\"number\">0.24</span>+<span class=\"number\">0.01</span>,<span class=\"number\">0.02</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">plt.legend(loc = <span class=\"string\">'upper right'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.title(<span class=\"string\">'Project A/B NPV Analysis'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">a= plt.array(proj_A)</span><br><span class=\"line\">b= plt.array(proj_B)</span><br><span class=\"line\">intersection = a-b</span><br><span class=\"line\">intersection_irr = plt.irr(intersection)</span><br><span class=\"line\">intersection_npv =plt.npv(intersection_irr,a)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.annotate(<span class=\"string\">\"intersection = %.4f\"</span>%intersection_irr,xy=(intersection_irr,intersection_npv),xytext=(intersection_irr+<span class=\"number\">0.02</span>,intersection_npv+<span class=\"number\">100</span>),arrowprops=dict(facecolor=<span class=\"string\">'black'</span>, shrink=<span class=\"number\">0.05</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n</code></pre>","site":{"data":{}},"excerpt":"<!--Sidebar-->\n<p>之前我们学习python的爬虫，在数据科学中，爬虫是获取数据的重要工具。Python的作用并不止步于此，我们还可以通过python进行数据分析。比如我们现在有两个项目</p>\n<ul>\n<li>项目A： 初始投入1500，之后6年每年获得收益450</li>\n<li>项目B： 初始投入1200，到第六年年底一次性获得3000</li>\n</ul>\n<p>我们投资需要用的钱是借来的，借来是有利率的，</p>\n<p>我们要通过python来对这两项投资进行收益分析(净现值曲线)，通过作图来进行判断，根据利率的变化来选择不同的项目 </p>","more":"<h2 id=\"工具准备\"><a href=\"#工具准备\" class=\"headerlink\" title=\"工具准备\"></a>工具准备</h2><p>作为工业级通用编程语言，python之所以能在数据领域有一席之地，与matplotlib,numpy,Scipy的存在有很大的关系，而我们这次使用的是Pylab,一个类似于matlab的集成平台，它整合了:</p>\n<ul>\n<li>numpy：扩展科学计算程式库，支持高阶纬度阵列，矩阵运算，以及大量函数程式。底层纯C开发，性能极其强悍</li>\n<li>scipy ：科学计算程式库，主要用于数学计算，与numpy一样，底层纯C开发</li>\n<li>matplotlib： 标准的绘图库，使用它我们可以绘制精美的图表</li>\n<li>ipython：</li>\n<li>jupyter (ipython notebook)：</li>\n</ul>\n<p>本文章我们只使用numpy和matplotlib来做基础的绘图操作，后面主要使用matplotlib,使用到了numpy的部分有标注</p>\n<pre><code>import pylab as plt\n</code></pre><h2 id=\"数据准备\"><a href=\"#数据准备\" class=\"headerlink\" title=\"数据准备\"></a>数据准备</h2><p>根据之前的项目的细节，我们分别使用两个列表来表示项目资金的流动</p>\n<p>项目A, 初始投入1500，之后6年每年获得收益450，我们得到</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proj_A = [<span class=\"number\">-1500</span>,<span class=\"number\">450</span>,<span class=\"number\">450</span>,<span class=\"number\">450</span>,<span class=\"number\">450</span>,<span class=\"number\">450</span>,<span class=\"number\">450</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>项目B, 初始投入1200，到第六年年底一次性获得3000</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proj_B = [<span class=\"number\">-1200</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">3000</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>接下来我们设置利率变化区间</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cost_of_capital_rate =[i/<span class=\"number\">100</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,<span class=\"number\">21</span>)]</span><br><span class=\"line\"><span class=\"comment\">#返回如下列表</span></span><br><span class=\"line\">[<span class=\"number\">0.0</span>, <span class=\"number\">0.01</span>, <span class=\"number\">0.02</span>, <span class=\"number\">0.03</span>, <span class=\"number\">0.04</span>, <span class=\"number\">0.05</span>, <span class=\"number\">0.06</span>, <span class=\"number\">0.07</span>, <span class=\"number\">0.08</span>, <span class=\"number\">0.09</span>, <span class=\"number\">0.1</span>, <span class=\"number\">0.11</span>, <span class=\"number\">0.12</span>, <span class=\"number\">0.13</span>, <span class=\"number\">0.14</span>, <span class=\"number\">0.15</span>, <span class=\"number\">0.16</span>, <span class=\"number\">0.17</span>, <span class=\"number\">0.18</span>, <span class=\"number\">0.19</span>, <span class=\"number\">0.2</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>接下来我们生成利率区间下对应的NPV，刚好numpy为我们提供了npv的函数，格式为npv(利率，现金流量列表)</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proj_A_npv = [plt.npv(i,proj_A) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> cost_of_capital_rate]</span><br><span class=\"line\">proj_B_npv = [plt.npv(i,proj_B) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> cost_of_capital_rate]</span><br></pre></td></tr></table></figure>\n</code></pre><p>在这里我们使用了<a href=\"\">列表解析式</a>直接生成，如果这样不习惯我们可以改写成：</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proj_A_npv = []</span><br><span class=\"line\">proj_B_npv = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> cost_of_capital:</span><br><span class=\"line\">\tnpv_A = plt.npv(i,proj_A)</span><br><span class=\"line\">\tnpv_B = plt.npv(i,proj_B)</span><br><span class=\"line\">\tproj_A_npv.append()</span><br><span class=\"line\">\tproj_B_npv.append()</span><br></pre></td></tr></table></figure>\n</code></pre><p>我们来看一下proj_A_npv里面是什么：</p>\n<pre><code><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1200.0</span>, <span class=\"number\">1107.9644135606968</span>, <span class=\"number\">1020.6439008106788</span>, <span class=\"number\">937.73614974518443</span>, <span class=\"number\">858.96158553585792</span>, <span class=\"number\">784.06143027035068</span>, <span class=\"number\">712.79594670242523</span>, <span class=\"number\">644.94284689384756</span>, <span class=\"number\">580.29584878253513</span>, <span class=\"number\">518.66336560391937</span>, <span class=\"number\">459.86731475800104</span>, <span class=\"number\">403.74203418221509</span>, <span class=\"number\">350.13329558504614</span>, <span class=\"number\">298.89740503913117</span>, <span class=\"number\">249.90038244412847</span>, <span class=\"number\">203.01721226533152</span>, <span class=\"number\">158.13115874789341</span>, <span class=\"number\">115.13313951123695</span>, <span class=\"number\">73.921152054113463</span>, <span class=\"number\">34.399748257616636</span>, <span class=\"number\">-3.5204475308640326</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>这些数字就是与我们之前不同利率相对应的NPV，proj_B_npv也是一样</p>\n<p>到这里我们的数据就都准备好了，进入下一步，绘图。</p>\n<h2 id=\"作图\"><a href=\"#作图\" class=\"headerlink\" title=\"作图\"></a>作图</h2><h3 id=\"新的图表\"><a href=\"#新的图表\" class=\"headerlink\" title=\"新的图表\"></a>新的图表</h3><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.figure(<span class=\"string\">'A / B NPV Profile'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"重叠与清除\"><a href=\"#重叠与清除\" class=\"headerlink\" title=\"重叠与清除\"></a>重叠与清除</h3><p>在我们开启了一个新的figure后，我们的所有操作都会叠加到这张图上。比如画了一条曲线后我们可以再添加一条曲线。如果我们不使用清除操作的话，在下次使用该figure时很可能和之前的曲线再次叠加也就是四条曲线。这样干扰了我们正常做图。所以我们每次声明新图表之后最好添加一个清除，日后方便重复使用</p>\n<pre><code>plt.clf()\n</code></pre><h3 id=\"绘制图表\"><a href=\"#绘制图表\" class=\"headerlink\" title=\"绘制图表\"></a>绘制图表</h3><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.plot(cost_of_capital_rate,proj_A_npv,<span class=\"string\">'#92e3d7'</span>,label = <span class=\"string\">'Project A'</span>,linewidth = <span class=\"number\">2.0</span>)</span><br><span class=\"line\">plt.plot(cost_of_capital_rate,proj_B_npv,<span class=\"string\">'#f4ab84'</span>,label = <span class=\"string\">'Project B'</span>,linewidth = <span class=\"number\">2.0</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>前面两个分别是横坐标纵坐标的变量，我们使用利率为横坐标，npv为纵坐标，后面的参数分别是</p>\n<ul>\n<li>‘#92e3d7’ 这一处代表线条的颜色，我们可以使用rgb或者其他的参数，这里使用了hex</li>\n<li>label = ‘Project A’ 这里表示该条线在图例中的标签</li>\n<li>linewidth 线条的粗细</li>\n</ul>\n<p>到这里我们就已经完成了图片的绘制。我们可以通过show()方法来显示图片。</p>\n<p><img src=\"/article/data-visualization-1/npvprofile1.png\" alt=\"\"></p>\n<h2 id=\"修改细节\"><a href=\"#修改细节\" class=\"headerlink\" title=\"修改细节\"></a>修改细节</h2><p>尽管我们已经完成了基本的绘图工作，我们的图还是有一些粗糙，并不能让读者更直观地理解数据，这时我们需要修改细节</p>\n<h3 id=\"上限\"><a href=\"#上限\" class=\"headerlink\" title=\"上限\"></a>上限</h3><p>我们对y轴的上限进行设置，从0-2000，</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.ylim(<span class=\"number\">0</span>,<span class=\"number\">2000</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>2000这个值是怎么来的，很简单，试出来的。在我们之前绘制的片是有刻度和上限的，但是这个刻度和上限有时候并不能够最好地展示我们的折线图，当我们看到这个折线与y轴交汇最高点接近并低于2000时，我们使用2000作为上限可以最好地展示我们的图片</p>\n<h3 id=\"刻度\"><a href=\"#刻度\" class=\"headerlink\" title=\"刻度\"></a>刻度</h3><p>现在我们要修改我们的刻度，默认刻度间距有点大，这时候我们并不能很好地对数据进行判断。</p>\n<p>这里我们使用了numpy的arange功能，快速生成一个刻度列表,使用方法是</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numpy.arange(起点，终点（不包含），间隔)</span><br><span class=\"line\">&gt;&gt;&gt;plt.arange(<span class=\"number\">0</span>, <span class=\"number\">2000</span>+<span class=\"number\">1</span>, <span class=\"number\">400</span>)</span><br><span class=\"line\">生成了以下列表</span><br><span class=\"line\">[<span class=\"number\">0</span>,<span class=\"number\">400</span>,<span class=\"number\">800</span>,<span class=\"number\">1200</span>,<span class=\"number\">1600</span>,<span class=\"number\">2000</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>接着我们分别使用yticks,xticks来修改x，y轴坐标</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.yticks(plt.arange(<span class=\"number\">0</span>, <span class=\"number\">2000</span>+<span class=\"number\">1</span>, <span class=\"number\">400</span>))</span><br><span class=\"line\">plt.xticks(plt.arange(<span class=\"number\">0</span>,<span class=\"number\">0.26</span>+<span class=\"number\">0.01</span>,<span class=\"number\">0.02</span>))</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"图例\"><a href=\"#图例\" class=\"headerlink\" title=\"图例\"></a>图例</h3><p>为了让读者更好地分辨两条曲线，我们在这里添加图例</p>\n<pre><code>plt.legend()\n</code></pre><p>如果我们要标记图例的位置为右上方，我们添加参数loc</p>\n<pre><code>plt.legend(loc = &apos;upper right&apos;)\n</code></pre><p>###标题</p>\n<p>最后我们添加标题</p>\n<pre><code>plt.title(&apos;Project A/B NPV Analysis&apos;)\n</code></pre><p>好了，使用show()方法来显示我们的NPV Profile吧</p>\n<pre><code>plt.show()\n</code></pre><p>结果如下：</p>\n<p><img src=\"/article/data-visualization-1/npvprofile2.png\" alt=\"\"></p>\n<h2 id=\"交点\"><a href=\"#交点\" class=\"headerlink\" title=\"交点\"></a>交点</h2><p>根据上面的图我们可以看出在交点前后NPV最大的公司是不同的，但是我们并不能够知道这个点所代表的利率是多少，所以我们需要将它在图上进行标记。我们先求出这个点的坐标。什么？求出来还要标吗？是的，因为图上的线是点连接成的，有一定偏差；而且这份图不一定只是自己看的，需要求出坐标画图。</p>\n<h3 id=\"交点坐标\"><a href=\"#交点坐标\" class=\"headerlink\" title=\"交点坐标\"></a>交点坐标</h3><p>在求出交点坐标之前，我们需要知道这个交点背后的意义是什么。在该点的利率下，项目A和项目B的净现值（NPV）是持平的。求出两个项目现金流量的差，然后我们使用这个差求出该点的IRR（IRR是NPV为0时的利率）作为横坐标。最后我们通过该点求出项目A或者B的NPV作为纵坐标。</p>\n<p>先对AB求差：</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = <span class=\"number\">0</span></span><br><span class=\"line\">intersection = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> len(proj_A):</span><br><span class=\"line\">\tintersection.append(proj_A[i] - proj_B[i])</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">#得到[ -300,   450,   450,   450,   450,   450, -2550]</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>有没有更简单的？有</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intersection = [proj_A[i] - proj_B[i] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> len(proj_A)]</span><br></pre></td></tr></table></figure>\n</code></pre><p>有没有更简单更快速的？当然有，这里我们用numpy的array来代替python的list，然后直接进行加减运算，</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a= plt.array(proj_A)<span class=\"comment\">#将proj_A从list转换到array</span></span><br><span class=\"line\">b= plt.array(proj_B)</span><br></pre></td></tr></table></figure>\n</code></pre><p>这时候我们可以看到a是这个样子</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array([<span class=\"number\">-1500</span>,   <span class=\"number\">450</span>,   <span class=\"number\">450</span>,   <span class=\"number\">450</span>,   <span class=\"number\">450</span>,   <span class=\"number\">450</span>,   <span class=\"number\">450</span>])</span><br></pre></td></tr></table></figure>\n</code></pre><p>然后我们只需</p>\n<pre><code>intersection = a-b\n</code></pre><p>就直接得到了我们想要的结果，这么做另一个好处是当我们使用numpy时，速度快了不止一个数量级，具备了大型运算的能力</p>\n<p>接下来我们使用numpy的irr和npv函数即可求出x,y坐标</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intersection_irr = plt.irr(intersection)</span><br><span class=\"line\">intersection_npv =plt.npv(intersection_irr,a)</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"文字标记\"><a href=\"#文字标记\" class=\"headerlink\" title=\"文字标记\"></a>文字标记</h3><p>matplotlib提供了annotate函数来帮助我们对图进行标记</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.annotate(<span class=\"string\">\"intersection = %.4f\"</span>%intersection_irr,xy=(intersection_irr,intersection_npv),xytext=(intersection_irr+<span class=\"number\">0.02</span>,intersection_npv+<span class=\"number\">100</span>),arrowprops=dict(facecolor=<span class=\"string\">'black'</span>, shrink=<span class=\"number\">0.05</span>))</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>开头的’intersection = %.4f’％intersection_irr 是我们想在图片上显示的内容%.4f’％intersection_irr表示取intersection_irr小数点后四位</li>\n<li>xy 参数接收交点的横纵坐标，是箭头指向的位置</li>\n<li>xytext 是文字所处的坐标，注意修改时要考虑刻度</li>\n<li>arrowprops 是我们箭头的属性，shrink ＝ 0.05表示箭头长度只有95%,保留和文字之间的空隙</li>\n</ul>\n<h2 id=\"结果和分析\"><a href=\"#结果和分析\" class=\"headerlink\" title=\"结果和分析\"></a>结果和分析</h2><p>好了，这次再来看我们的折线图</p>\n<p><img src=\"/article/data-visualization-1/npvprofile3.png\" alt=\"\"></p>\n<p>从上图我们可以得出</p>\n<blockquote>\n<p><strong>1. A / B 的盈利利率区间，盈利范围</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>2. 在利率为11.01%时，A/B净现值相等，低于该点B项目收益高，高于该点A项目收益高</strong></p>\n</blockquote>\n<p>这么看着好麻烦，我们为什么要使用python而不是EXCEL这样更方便的工具？</p>\n<blockquote>\n<p>这次只是一个小的例子。在数据科学中，我们往往需要处理成千上万的数据，如果使用excel的话，性能可能会差强人意或者会很卡（比如五千家公司十年来每天的股票收盘价格。。。另外python可以通过api接口，爬虫或者数据库直接对接从而获取大量数据，非常方便</p>\n</blockquote>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pylab <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">proj_A = [<span class=\"number\">-1500</span>,<span class=\"number\">450</span>,<span class=\"number\">450</span>,<span class=\"number\">450</span>,<span class=\"number\">450</span>,<span class=\"number\">450</span>,<span class=\"number\">450</span>]</span><br><span class=\"line\">proj_B = [<span class=\"number\">-1200</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">3000</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">cost_of_capital_rate =[i/<span class=\"number\">100</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,<span class=\"number\">21</span>)]</span><br><span class=\"line\">proj_A_npv = [plt.npv(i,proj_A) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> cost_of_capital_rate]</span><br><span class=\"line\">proj_B_npv = [plt.npv(i,proj_B) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> cost_of_capital_rate]</span><br><span class=\"line\"></span><br><span class=\"line\">plt.figure(<span class=\"string\">'A / B NPV Profile'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.clf()</span><br><span class=\"line\"></span><br><span class=\"line\">plt.plot(cost_of_capital_rate,proj_A_npv,<span class=\"string\">'#92e3d7'</span>,label = <span class=\"string\">'Project A'</span>,linewidth = <span class=\"number\">2.0</span>)</span><br><span class=\"line\">plt.plot(cost_of_capital_rate,proj_B_npv,<span class=\"string\">'#f4ab84'</span>,label = <span class=\"string\">'Project B'</span>,linewidth = <span class=\"number\">2.0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">plt.ylim(<span class=\"number\">0</span>,<span class=\"number\">2000</span>)</span><br><span class=\"line\">plt.yticks(plt.arange(<span class=\"number\">0</span>, <span class=\"number\">2000</span>+<span class=\"number\">1</span>, <span class=\"number\">400</span>))</span><br><span class=\"line\">plt.xticks(plt.arange(<span class=\"number\">0</span>,<span class=\"number\">0.24</span>+<span class=\"number\">0.01</span>,<span class=\"number\">0.02</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">plt.legend(loc = <span class=\"string\">'upper right'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.title(<span class=\"string\">'Project A/B NPV Analysis'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">a= plt.array(proj_A)</span><br><span class=\"line\">b= plt.array(proj_B)</span><br><span class=\"line\">intersection = a-b</span><br><span class=\"line\">intersection_irr = plt.irr(intersection)</span><br><span class=\"line\">intersection_npv =plt.npv(intersection_irr,a)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.annotate(<span class=\"string\">\"intersection = %.4f\"</span>%intersection_irr,xy=(intersection_irr,intersection_npv),xytext=(intersection_irr+<span class=\"number\">0.02</span>,intersection_npv+<span class=\"number\">100</span>),arrowprops=dict(facecolor=<span class=\"string\">'black'</span>, shrink=<span class=\"number\">0.05</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n</code></pre>"},{"title":"Python金融：投资组合分析 － 使用pandas分析有效边界","date":"2017-02-25T03:16:47.000Z","_content":"\n本实例从获取数据开始讲解如何使用Pandas对股票数据进行简单的投资组合分析，画出有效边界。\n\n<!--More-->\n\n## 数据准备\n\n首先我们打开python解释器，引入我们今天所需要的工具,numpy/Matplotlib/Pandas\n\n\t```Python\n\timport numpy as np \n\timport matplotlib.pyplot as plt \n\timport pandas as pd \n\t```\n接着我们从Yahoo Finance 上面找到需要的股票数据，我们以亚马逊，Netflix,英伟达，Adobe,Priceline这几家比较熟悉的公司为例，它们的标志是\n\n\t```Python\n\ttickers=['AMZN','NFLX','NVDA','ADBE','PCLN']\n\t```\n我们把它们最近一年的股票价格历史数据下载下来，放在解释器运行的目录里，并给他们按Ticker更改名称（AMZN.csv），然后使用pandas.read_csv方法加载\n\n\t```Python\n\tamzn = pd.read_csv('AMZN.csv')\n\tnflx = pd.read_csv('NFLX.csv')\n\tnvda = pd.read_csv('NVDA.csv')\n\tadbe = pd.read_csv('ADBE.csv')\n\tpcln = pd.read_csv('PCLN.csv')\n\t```\n\n由于我们使用pandas进行加载，pandas自身会对数据进行优化操作，所以我们可以看到加载后整齐的输出结果，我们来看下amazon的股价\n\n\t```Python\n\tIn [65]: amzn\n\tOut[65]: \n\t\t\t   Date        Open        High         Low       Close    Volume   Adj Close\n\t0    2017-02-24  844.690002  845.809998  837.750000  845.239990   3676400  845.239990\n\t1    2017-02-23  857.570007  860.859985  848.000000  852.190002   3454600  852.190002\n\t2    2017-02-22  856.950012  858.429993  852.179993  855.609985   2613400  855.609985\n\t3    2017-02-21  848.840027  857.979980  847.250000  856.440002   3490100  856.440002\n\t4    2017-02-17  842.000000  847.270020  840.729980  845.070007   3029800  845.070007\n\t..          ...         ...         ...         ...         ...       ...         ...\n\t249  2016-03-01  556.289978  579.250000  556.000000  579.039978   5038500  579.039978\n\t250  2016-02-29  554.000000  564.809998  552.510010  552.520020   4145400  552.520020\n\t251  2016-02-26  560.119995  562.500000  553.169983  555.229980   4877000  555.229980\n\t252  2016-02-25  555.520020  559.390015  545.289978  555.150024   4525500  555.150024\n\t```\n\n现在我们有了这些数据，但是这些并不都是我们需要的。在这次投资组合分析中，我们需要找到的每日股价涨跌幅：**用当日的收盘价除以前一天的收盘价**，为什么不用开盘价呢？因为有After 和 Pre market交易的存在。所以即使交易所3点后停止交易，很多机构投资者仍然可以通过其他渠道进行交易。由于我们在计算过程中需要使用前一天的收盘价，所以数据上最早的一天的涨幅我们无法计算。下面代码会计算出每家公司股价全年的涨跌幅并将这五个子列表放入同一个列表中\n\n\t```Python\n\troc =[]\n\tfor each in raw_data:\n\t\troc.append((each['Close'].values/np.roll(each['Close'].values,-1)-1)[:-1][::-1]*100)\n\t```\n\n第三行看着有点长，但逻辑很简单\n\n1. each['Close'].values是指each(在循环中指代公司)中的'Close'这一列的值，相当于Excel直接选择某一列，我们可以按顺序得到当日的收盘价\n2. np.rool(each['Close'].values,-1)表示将这个列表向前推一格，即(1,2,3,4)变成(2,3,4,1).这样我们可以得到上一日的收盘价\n3. 将两个数组做一个除法 （1,2,3)/(2,3,1) = (1/2,2/3,3/1)\n4. 最后一行的数据由于没有之前的收盘价，所以用[:-1]删掉。我们之前平移数组顶掉的数字也在这一行，一同删掉。\n5. 用[::-1]将列表反转，从前往后\n6. 由于使用小数，为了便于查看，我们 x 100 变成百分数\n7. append方法将这个处理好的数组放在roc的列表中\n\n\n得到的列表应该是这样的,5个子列表，每个列表252条数据\n\n\t```Python\n\t[[ 0.01440, -0.48808,  4.79982, ..., -0.09691, -0.39971, -0.81555],   \n       [ 0.27505, -1.45585,  5.23498, ...,  0.88359, -0.75073,  0.32918], \n       [-0.65851, -1.01010,  4.43239, ..., -0.27910, -9.27230,  0.96527],\n       [-0.09230, -1.67436,  3.78156, ..., -0.13374, -0.53570,  0.40394],\n       [-0.72344,  0.87222,  2.42727, ...,  0.28780, -0.87665, -0.34448]]\n    ```\n\n由于roc是python的列表，仍不具有numpy array的优势，而且要使用pandas,我们需要以行为单位而不是列为单位，所以我们要以日期为基准获得252行\n我们要先将roc转化为一个二维的的矩阵（数组），然后对其进行翻转（.T表示Transpose，即获得转置矩阵。）\n\n\t```Python\t\t\n\troc = np.array(roc).T\n\t```\n\n下面是转置后的矩阵\n\n\t```Python\n\tIn [67]: roc\n\tOut[67]: \n\tarray([[ 0.01440,  0.27505, -0.65851, -0.09230, -0.72344],\n\t\t   [-0.48808, -1.45585, -1.01010, -1.67436,  0.87222],\n\t\t   [ 4.79982,  5.23498,  4.43239,  3.78156,  2.42727],\n\t\t   ..., \n\t\t   [-0.09691,  0.88359, -0.27910, -0.13374,  0.28780],\n\t\t   [-0.39971, -0.75073, -9.27230, -0.53570, -0.87665],\n\t\t   [-0.81555,  0.32918,  0.96527,  0.40394, -0.34448]])\n\t```\n\n我们现在有252行数据了，需要一个日期来对每一行进行标记方便查看，直接从之前提取的数据中获得。处理方式同涨跌幅类似，去掉最早一天，反转\n\n\t```Python\n\tdates = pd.to_datetime(amzn['Date'][:-1][::-1])\n\t```\n\n然后我们使用pandas 的dataFrame来创建一个新的数据框架,列名称为ticker，行名称为日期\n\n\t```Python\n\trocdf = pd.DataFrame(roc,index=dates,columns=tickers)\n\t#index接受日期列表\n\t#columns接收ticker列表\n\t\n\t                AMZN      NFLX      NVDA      ADBE      PCLN\n\tDate                                                        \n\t2016-02-26  0.014403  0.275047 -0.658511 -0.092296 -0.723440\n\t2016-02-29 -0.488079 -1.455847 -1.010098 -1.674360  0.872216\n\t2016-03-01  4.799818  5.234984  4.432395  3.781563  2.427272\n\t...              ...       ...       ...       ...       ...\n\t2017-02-22 -0.096915  0.883587 -0.279101 -0.133742  0.287795\n\t2017-02-23 -0.399713 -0.750731 -9.272304 -0.535698 -0.876650\n\t2017-02-24 -0.815547  0.329178  0.965271  0.403935 -0.344479\n\t```\n\n\t\n这样我们前期的数据准备工作都基本做好了,接下来我们来看如何将其运用到投资组合分析上。\n\n\n## 两个投资方案\n\n在进行分析前，我们先看我们收集的信息，pandas提供describe()来描述数据的基本信息，包含基本的均值，标准差，最大最小值等\n\n\t```Python\n\tIn [70]: rocdf.describe()\n\tOut[70]: \n\t\t\t\t AMZN        NFLX        NVDA        ADBE        PCLN\n\tcount  252.000000  252.000000  252.000000  252.000000  252.000000\n\tmean     0.177009    0.194823    0.499515    0.134487    0.112379\n\tstd      1.428119    2.451156    2.913356    1.238686    1.460104\n\tmin     -5.137101  -13.126204   -9.272304   -5.726032  -11.369583\n\t25%     -0.556960   -0.831909   -0.678360   -0.488501   -0.512958\n\t50%      0.142906    0.003979    0.275135    0.021979    0.124173\n\t75%      0.867294    1.224020    1.614347    0.724158    0.755365\n\tmax      9.566450   19.028054   29.806706    7.115877    6.606639\n\t```\n我们需要这其中的均值mean\n\n\t```Python\n\texpret = np.array(rocdf.mean())\n\t```\n\n接着，求出方差／协方差的矩阵。(np.dot为矩阵相乘所使用的函数)。\n\n>**方差／协方差的矩阵(S) = （股价涨跌幅矩阵 － 收益率）（转置）＊（股价涨跌幅矩阵 － 收益率）**\n\n\t```Python\n\tvar_covar = np.dot((rocdf.values-expret).T,(rocdf.values-expret))\n\t```\n\n假设我们现在有两种方案，方案x和y,对五个公司股票的持有率分别是（顺序参见ticker）\n\n\t```Python\n\tport_x = [0.2,0.1,0.15,0.35,0.2]\n\tport_y = [0.2,0.3,0.25,0.15,0.1]\n\t```\n\n**现在我们需要一种投资方案，是x和y两种方案的结合，根据x和y所占不同比重来获得风险和收益变化曲线。**\n\n首先我们需要对这两个股票分别进行分析\n\n求出x方案的预期（平均）收益率，该收益率为**各个公司股票收益率与其所占比例的乘积之和**。我们通过矩阵乘法来实现.\n\n\t```Python\n\tx_mean = np.dot(expret,port_x)\n\t```\n\n求出x方案的方差, 等价于X和自身的协方差Covar(X,X)\n\n>**x方案方差  = x方案权重组合（转置）* 方差／协方差的矩阵(S) * x方案权重组合**\n\n\t```Python\n\tx_var = np.dot(np.dot(port_x.T,var_covar),port_x)\n\t```\n\ny方案同理。\n\n接着我们求出x,y的协方差Covar(X,Y).可以和刚才求X方差对比一下看看有何异同\n\n>**x,y协方差  = x方案权重组合（转置）* 方差／协方差的矩阵(S) * y方案权重组合**\n\n\t#!Python\n\txy_covar = np.dot(np.dot(port_x,var_covar),port_y)\n\n还有相关系数\n\n>**相关系数 = x,y协方差/根号下(x方案方差\\*)**\n\n\t```Python\n\txy_corr = xy_covar/np.sqrt(x_var*y_var)\n\t```\n有了这些信息后，我们可以将两个方案按一定比例结合在一起\n\n\n## 投资组合分析\n\n假设我们x方案占30%，\n\n\t```Python\n\tx_in_comb = 0.3\n\t```\n那么y方案占 1-x_in_comb = 0.7\n\n求出新组合的预期（平均）收益，同样是加权平均\n\n\t```Python\n\tcomb_mean = x_mean*x_in_comb+y_mean*(1-x_in_comb)\n\t```\n求出新组合的加权后的方差和标准差(np.sqrt为开平方)\n\n\t```Python\n\tcomb_var = x_in_comb**2*x_var+(1-x_in_comb)**2*y_var+2*x_in_comb*(1-x_in_comb)*xy_covar\n\tcomb_stddev = np.sqrt(comb_var)\n\t```\n至此，我们获得新组合的均值和标准差，分别代表了该组合的收益(Return)和风险(Risk).但是这并不能直观地带给我们什么信息，因为我们所得数据只是基于x方案占30%这一假设之上。我们需要根据一系列假设来获得一系列的收益(Return)和风险(Risk)值并进行分析。这时候我们需要使用np.arange来生成－5到＋5之间的数字（负代表做空，大于1代表使用杠杆），间隔为0.1\n\n\t```Python\n\t#np.arange(最小值，最大值(不包括），间隔)\n\tportfolio=np.arange(-5.0,5.1,0.1)\n\t```\n然后再将刚才我们求新组合的标准差和均值的方法写成函数重复利用\n\n\t```Python\n\tdef table_of_returns(x_in_comb):\t\n\t\tcomb_mean = x_mean*x_in_comb+y_mean*(1-x_in_comb)\n\t\tcomb_var = x_in_comb**2*x_var+(1-x_in_comb)**2*y_var+2*x_in_comb*(1-x_in_comb)*xy_covar\n\t\tcomb_stddev = np.sqrt(comb_var)\n\t\treturn comb_stddev,comb_mean\n\t```\t\n生成-5到+5之间的各种情况，类似于excel的data table,并使用pandas处理为DataFrame形式\n\n\t```Python\n\tresult = np.array([table_of_returns(x) for x in portfolio])\n\tdf = pd.DataFrame(result,index=portfolio,columns=['Risk (stddev)','Return (mean)'])\n\t```\n查看结果\n\n\t```Python\n\tIn [75]: df\n\tOut[75]: \n\t\t  Risk (stddev)  Return (mean)\n\t-5.0      61.351124       0.504043\n\t-4.9      60.489123       0.498965\n\t-4.8      59.628240       0.493887\n\t-4.7      58.768522       0.488809\n\t-4.6      57.910022       0.483731\n\t-4.5      57.052795       0.478653\n\t...             ...            ...\n\t 2.1      18.192939       0.143499\n\t 2.2      18.464156       0.138421\n\t 2.3      18.774621       0.133342\n\t 2.4      19.122421       0.128264\n\t 2.5      19.505559       0.123186\n\t... \n\t```\n## 画出Envelop portfolio曲线图\n\n这次仍然使用我们之前的Matplotlib来做图\n\n\t```Python\n\tplt.figure()\n\tplt.scatter(df['Risk (stddev)'],df['Return (mean)'],alpha = 0.5,color='#51ADD8',label = 'Envelop Portfolio')\n\tplt.legend(loc='best')\n\tplt.title('Return - Risk Envelop')\n\t\n>\t**>>>plt.show()**\n\t```\n\t\n![](efficient-frontier/result.png)\n\n\n图为Envelop Portfolio根据图我们不难看出，\n\n- 即便是在低收益率的情况下，风险反而会增高。\n- 同一个风险值可能会对应两个不同的收益率，我们当然会选择高收益的那一点，所以该曲线下半部分是无效的。而上半部分我们称为有效边界（Efficient Frontier),由美国著名经济学家哈里•马科维茨（Harry Markowitz ）提出\n- 有效边界为当前组合最优结果，超过该边界即各组合之和大于100%(不可行)，低于该边界可行但是不是最有效的\n- 该边界只是当前组合的最优模型，而不是最优组合\n\n那我们有没有更好的组合呢？能不能找到一个在有效边界上的最优点呢？我们下期继续\n\n","source":"_posts/efficient-frontier.md","raw":"---\ntitle: Python金融：投资组合分析 － 使用pandas分析有效边界\ndate: 2017-02-25 11:16:47\ntags:\ncategories: Python金融\n---\n\n本实例从获取数据开始讲解如何使用Pandas对股票数据进行简单的投资组合分析，画出有效边界。\n\n<!--More-->\n\n## 数据准备\n\n首先我们打开python解释器，引入我们今天所需要的工具,numpy/Matplotlib/Pandas\n\n\t```Python\n\timport numpy as np \n\timport matplotlib.pyplot as plt \n\timport pandas as pd \n\t```\n接着我们从Yahoo Finance 上面找到需要的股票数据，我们以亚马逊，Netflix,英伟达，Adobe,Priceline这几家比较熟悉的公司为例，它们的标志是\n\n\t```Python\n\ttickers=['AMZN','NFLX','NVDA','ADBE','PCLN']\n\t```\n我们把它们最近一年的股票价格历史数据下载下来，放在解释器运行的目录里，并给他们按Ticker更改名称（AMZN.csv），然后使用pandas.read_csv方法加载\n\n\t```Python\n\tamzn = pd.read_csv('AMZN.csv')\n\tnflx = pd.read_csv('NFLX.csv')\n\tnvda = pd.read_csv('NVDA.csv')\n\tadbe = pd.read_csv('ADBE.csv')\n\tpcln = pd.read_csv('PCLN.csv')\n\t```\n\n由于我们使用pandas进行加载，pandas自身会对数据进行优化操作，所以我们可以看到加载后整齐的输出结果，我们来看下amazon的股价\n\n\t```Python\n\tIn [65]: amzn\n\tOut[65]: \n\t\t\t   Date        Open        High         Low       Close    Volume   Adj Close\n\t0    2017-02-24  844.690002  845.809998  837.750000  845.239990   3676400  845.239990\n\t1    2017-02-23  857.570007  860.859985  848.000000  852.190002   3454600  852.190002\n\t2    2017-02-22  856.950012  858.429993  852.179993  855.609985   2613400  855.609985\n\t3    2017-02-21  848.840027  857.979980  847.250000  856.440002   3490100  856.440002\n\t4    2017-02-17  842.000000  847.270020  840.729980  845.070007   3029800  845.070007\n\t..          ...         ...         ...         ...         ...       ...         ...\n\t249  2016-03-01  556.289978  579.250000  556.000000  579.039978   5038500  579.039978\n\t250  2016-02-29  554.000000  564.809998  552.510010  552.520020   4145400  552.520020\n\t251  2016-02-26  560.119995  562.500000  553.169983  555.229980   4877000  555.229980\n\t252  2016-02-25  555.520020  559.390015  545.289978  555.150024   4525500  555.150024\n\t```\n\n现在我们有了这些数据，但是这些并不都是我们需要的。在这次投资组合分析中，我们需要找到的每日股价涨跌幅：**用当日的收盘价除以前一天的收盘价**，为什么不用开盘价呢？因为有After 和 Pre market交易的存在。所以即使交易所3点后停止交易，很多机构投资者仍然可以通过其他渠道进行交易。由于我们在计算过程中需要使用前一天的收盘价，所以数据上最早的一天的涨幅我们无法计算。下面代码会计算出每家公司股价全年的涨跌幅并将这五个子列表放入同一个列表中\n\n\t```Python\n\troc =[]\n\tfor each in raw_data:\n\t\troc.append((each['Close'].values/np.roll(each['Close'].values,-1)-1)[:-1][::-1]*100)\n\t```\n\n第三行看着有点长，但逻辑很简单\n\n1. each['Close'].values是指each(在循环中指代公司)中的'Close'这一列的值，相当于Excel直接选择某一列，我们可以按顺序得到当日的收盘价\n2. np.rool(each['Close'].values,-1)表示将这个列表向前推一格，即(1,2,3,4)变成(2,3,4,1).这样我们可以得到上一日的收盘价\n3. 将两个数组做一个除法 （1,2,3)/(2,3,1) = (1/2,2/3,3/1)\n4. 最后一行的数据由于没有之前的收盘价，所以用[:-1]删掉。我们之前平移数组顶掉的数字也在这一行，一同删掉。\n5. 用[::-1]将列表反转，从前往后\n6. 由于使用小数，为了便于查看，我们 x 100 变成百分数\n7. append方法将这个处理好的数组放在roc的列表中\n\n\n得到的列表应该是这样的,5个子列表，每个列表252条数据\n\n\t```Python\n\t[[ 0.01440, -0.48808,  4.79982, ..., -0.09691, -0.39971, -0.81555],   \n       [ 0.27505, -1.45585,  5.23498, ...,  0.88359, -0.75073,  0.32918], \n       [-0.65851, -1.01010,  4.43239, ..., -0.27910, -9.27230,  0.96527],\n       [-0.09230, -1.67436,  3.78156, ..., -0.13374, -0.53570,  0.40394],\n       [-0.72344,  0.87222,  2.42727, ...,  0.28780, -0.87665, -0.34448]]\n    ```\n\n由于roc是python的列表，仍不具有numpy array的优势，而且要使用pandas,我们需要以行为单位而不是列为单位，所以我们要以日期为基准获得252行\n我们要先将roc转化为一个二维的的矩阵（数组），然后对其进行翻转（.T表示Transpose，即获得转置矩阵。）\n\n\t```Python\t\t\n\troc = np.array(roc).T\n\t```\n\n下面是转置后的矩阵\n\n\t```Python\n\tIn [67]: roc\n\tOut[67]: \n\tarray([[ 0.01440,  0.27505, -0.65851, -0.09230, -0.72344],\n\t\t   [-0.48808, -1.45585, -1.01010, -1.67436,  0.87222],\n\t\t   [ 4.79982,  5.23498,  4.43239,  3.78156,  2.42727],\n\t\t   ..., \n\t\t   [-0.09691,  0.88359, -0.27910, -0.13374,  0.28780],\n\t\t   [-0.39971, -0.75073, -9.27230, -0.53570, -0.87665],\n\t\t   [-0.81555,  0.32918,  0.96527,  0.40394, -0.34448]])\n\t```\n\n我们现在有252行数据了，需要一个日期来对每一行进行标记方便查看，直接从之前提取的数据中获得。处理方式同涨跌幅类似，去掉最早一天，反转\n\n\t```Python\n\tdates = pd.to_datetime(amzn['Date'][:-1][::-1])\n\t```\n\n然后我们使用pandas 的dataFrame来创建一个新的数据框架,列名称为ticker，行名称为日期\n\n\t```Python\n\trocdf = pd.DataFrame(roc,index=dates,columns=tickers)\n\t#index接受日期列表\n\t#columns接收ticker列表\n\t\n\t                AMZN      NFLX      NVDA      ADBE      PCLN\n\tDate                                                        \n\t2016-02-26  0.014403  0.275047 -0.658511 -0.092296 -0.723440\n\t2016-02-29 -0.488079 -1.455847 -1.010098 -1.674360  0.872216\n\t2016-03-01  4.799818  5.234984  4.432395  3.781563  2.427272\n\t...              ...       ...       ...       ...       ...\n\t2017-02-22 -0.096915  0.883587 -0.279101 -0.133742  0.287795\n\t2017-02-23 -0.399713 -0.750731 -9.272304 -0.535698 -0.876650\n\t2017-02-24 -0.815547  0.329178  0.965271  0.403935 -0.344479\n\t```\n\n\t\n这样我们前期的数据准备工作都基本做好了,接下来我们来看如何将其运用到投资组合分析上。\n\n\n## 两个投资方案\n\n在进行分析前，我们先看我们收集的信息，pandas提供describe()来描述数据的基本信息，包含基本的均值，标准差，最大最小值等\n\n\t```Python\n\tIn [70]: rocdf.describe()\n\tOut[70]: \n\t\t\t\t AMZN        NFLX        NVDA        ADBE        PCLN\n\tcount  252.000000  252.000000  252.000000  252.000000  252.000000\n\tmean     0.177009    0.194823    0.499515    0.134487    0.112379\n\tstd      1.428119    2.451156    2.913356    1.238686    1.460104\n\tmin     -5.137101  -13.126204   -9.272304   -5.726032  -11.369583\n\t25%     -0.556960   -0.831909   -0.678360   -0.488501   -0.512958\n\t50%      0.142906    0.003979    0.275135    0.021979    0.124173\n\t75%      0.867294    1.224020    1.614347    0.724158    0.755365\n\tmax      9.566450   19.028054   29.806706    7.115877    6.606639\n\t```\n我们需要这其中的均值mean\n\n\t```Python\n\texpret = np.array(rocdf.mean())\n\t```\n\n接着，求出方差／协方差的矩阵。(np.dot为矩阵相乘所使用的函数)。\n\n>**方差／协方差的矩阵(S) = （股价涨跌幅矩阵 － 收益率）（转置）＊（股价涨跌幅矩阵 － 收益率）**\n\n\t```Python\n\tvar_covar = np.dot((rocdf.values-expret).T,(rocdf.values-expret))\n\t```\n\n假设我们现在有两种方案，方案x和y,对五个公司股票的持有率分别是（顺序参见ticker）\n\n\t```Python\n\tport_x = [0.2,0.1,0.15,0.35,0.2]\n\tport_y = [0.2,0.3,0.25,0.15,0.1]\n\t```\n\n**现在我们需要一种投资方案，是x和y两种方案的结合，根据x和y所占不同比重来获得风险和收益变化曲线。**\n\n首先我们需要对这两个股票分别进行分析\n\n求出x方案的预期（平均）收益率，该收益率为**各个公司股票收益率与其所占比例的乘积之和**。我们通过矩阵乘法来实现.\n\n\t```Python\n\tx_mean = np.dot(expret,port_x)\n\t```\n\n求出x方案的方差, 等价于X和自身的协方差Covar(X,X)\n\n>**x方案方差  = x方案权重组合（转置）* 方差／协方差的矩阵(S) * x方案权重组合**\n\n\t```Python\n\tx_var = np.dot(np.dot(port_x.T,var_covar),port_x)\n\t```\n\ny方案同理。\n\n接着我们求出x,y的协方差Covar(X,Y).可以和刚才求X方差对比一下看看有何异同\n\n>**x,y协方差  = x方案权重组合（转置）* 方差／协方差的矩阵(S) * y方案权重组合**\n\n\t#!Python\n\txy_covar = np.dot(np.dot(port_x,var_covar),port_y)\n\n还有相关系数\n\n>**相关系数 = x,y协方差/根号下(x方案方差\\*)**\n\n\t```Python\n\txy_corr = xy_covar/np.sqrt(x_var*y_var)\n\t```\n有了这些信息后，我们可以将两个方案按一定比例结合在一起\n\n\n## 投资组合分析\n\n假设我们x方案占30%，\n\n\t```Python\n\tx_in_comb = 0.3\n\t```\n那么y方案占 1-x_in_comb = 0.7\n\n求出新组合的预期（平均）收益，同样是加权平均\n\n\t```Python\n\tcomb_mean = x_mean*x_in_comb+y_mean*(1-x_in_comb)\n\t```\n求出新组合的加权后的方差和标准差(np.sqrt为开平方)\n\n\t```Python\n\tcomb_var = x_in_comb**2*x_var+(1-x_in_comb)**2*y_var+2*x_in_comb*(1-x_in_comb)*xy_covar\n\tcomb_stddev = np.sqrt(comb_var)\n\t```\n至此，我们获得新组合的均值和标准差，分别代表了该组合的收益(Return)和风险(Risk).但是这并不能直观地带给我们什么信息，因为我们所得数据只是基于x方案占30%这一假设之上。我们需要根据一系列假设来获得一系列的收益(Return)和风险(Risk)值并进行分析。这时候我们需要使用np.arange来生成－5到＋5之间的数字（负代表做空，大于1代表使用杠杆），间隔为0.1\n\n\t```Python\n\t#np.arange(最小值，最大值(不包括），间隔)\n\tportfolio=np.arange(-5.0,5.1,0.1)\n\t```\n然后再将刚才我们求新组合的标准差和均值的方法写成函数重复利用\n\n\t```Python\n\tdef table_of_returns(x_in_comb):\t\n\t\tcomb_mean = x_mean*x_in_comb+y_mean*(1-x_in_comb)\n\t\tcomb_var = x_in_comb**2*x_var+(1-x_in_comb)**2*y_var+2*x_in_comb*(1-x_in_comb)*xy_covar\n\t\tcomb_stddev = np.sqrt(comb_var)\n\t\treturn comb_stddev,comb_mean\n\t```\t\n生成-5到+5之间的各种情况，类似于excel的data table,并使用pandas处理为DataFrame形式\n\n\t```Python\n\tresult = np.array([table_of_returns(x) for x in portfolio])\n\tdf = pd.DataFrame(result,index=portfolio,columns=['Risk (stddev)','Return (mean)'])\n\t```\n查看结果\n\n\t```Python\n\tIn [75]: df\n\tOut[75]: \n\t\t  Risk (stddev)  Return (mean)\n\t-5.0      61.351124       0.504043\n\t-4.9      60.489123       0.498965\n\t-4.8      59.628240       0.493887\n\t-4.7      58.768522       0.488809\n\t-4.6      57.910022       0.483731\n\t-4.5      57.052795       0.478653\n\t...             ...            ...\n\t 2.1      18.192939       0.143499\n\t 2.2      18.464156       0.138421\n\t 2.3      18.774621       0.133342\n\t 2.4      19.122421       0.128264\n\t 2.5      19.505559       0.123186\n\t... \n\t```\n## 画出Envelop portfolio曲线图\n\n这次仍然使用我们之前的Matplotlib来做图\n\n\t```Python\n\tplt.figure()\n\tplt.scatter(df['Risk (stddev)'],df['Return (mean)'],alpha = 0.5,color='#51ADD8',label = 'Envelop Portfolio')\n\tplt.legend(loc='best')\n\tplt.title('Return - Risk Envelop')\n\t\n>\t**>>>plt.show()**\n\t```\n\t\n![](efficient-frontier/result.png)\n\n\n图为Envelop Portfolio根据图我们不难看出，\n\n- 即便是在低收益率的情况下，风险反而会增高。\n- 同一个风险值可能会对应两个不同的收益率，我们当然会选择高收益的那一点，所以该曲线下半部分是无效的。而上半部分我们称为有效边界（Efficient Frontier),由美国著名经济学家哈里•马科维茨（Harry Markowitz ）提出\n- 有效边界为当前组合最优结果，超过该边界即各组合之和大于100%(不可行)，低于该边界可行但是不是最有效的\n- 该边界只是当前组合的最优模型，而不是最优组合\n\n那我们有没有更好的组合呢？能不能找到一个在有效边界上的最优点呢？我们下期继续\n\n","slug":"efficient-frontier","published":1,"updated":"2018-06-22T06:08:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiqvlnwe000yglu3vjguwgu1","content":"<p>本实例从获取数据开始讲解如何使用Pandas对股票数据进行简单的投资组合分析，画出有效边界。</p>\n<a id=\"more\"></a>\n<h2 id=\"数据准备\"><a href=\"#数据准备\" class=\"headerlink\" title=\"数据准备\"></a>数据准备</h2><p>首先我们打开python解释器，引入我们今天所需要的工具,numpy/Matplotlib/Pandas</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np </span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt </span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br></pre></td></tr></table></figure>\n</code></pre><p>接着我们从Yahoo Finance 上面找到需要的股票数据，我们以亚马逊，Netflix,英伟达，Adobe,Priceline这几家比较熟悉的公司为例，它们的标志是</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tickers=[<span class=\"string\">'AMZN'</span>,<span class=\"string\">'NFLX'</span>,<span class=\"string\">'NVDA'</span>,<span class=\"string\">'ADBE'</span>,<span class=\"string\">'PCLN'</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>我们把它们最近一年的股票价格历史数据下载下来，放在解释器运行的目录里，并给他们按Ticker更改名称（AMZN.csv），然后使用pandas.read_csv方法加载</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">amzn = pd.read_csv(<span class=\"string\">'AMZN.csv'</span>)</span><br><span class=\"line\">nflx = pd.read_csv(<span class=\"string\">'NFLX.csv'</span>)</span><br><span class=\"line\">nvda = pd.read_csv(<span class=\"string\">'NVDA.csv'</span>)</span><br><span class=\"line\">adbe = pd.read_csv(<span class=\"string\">'ADBE.csv'</span>)</span><br><span class=\"line\">pcln = pd.read_csv(<span class=\"string\">'PCLN.csv'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>由于我们使用pandas进行加载，pandas自身会对数据进行优化操作，所以我们可以看到加载后整齐的输出结果，我们来看下amazon的股价</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">65</span>]: amzn</span><br><span class=\"line\">Out[<span class=\"number\">65</span>]: </span><br><span class=\"line\">\t\t   Date        Open        High         Low       Close    Volume   Adj Close</span><br><span class=\"line\"><span class=\"number\">0</span>    <span class=\"number\">2017</span><span class=\"number\">-02</span><span class=\"number\">-24</span>  <span class=\"number\">844.690002</span>  <span class=\"number\">845.809998</span>  <span class=\"number\">837.750000</span>  <span class=\"number\">845.239990</span>   <span class=\"number\">3676400</span>  <span class=\"number\">845.239990</span></span><br><span class=\"line\"><span class=\"number\">1</span>    <span class=\"number\">2017</span><span class=\"number\">-02</span><span class=\"number\">-23</span>  <span class=\"number\">857.570007</span>  <span class=\"number\">860.859985</span>  <span class=\"number\">848.000000</span>  <span class=\"number\">852.190002</span>   <span class=\"number\">3454600</span>  <span class=\"number\">852.190002</span></span><br><span class=\"line\"><span class=\"number\">2</span>    <span class=\"number\">2017</span><span class=\"number\">-02</span><span class=\"number\">-22</span>  <span class=\"number\">856.950012</span>  <span class=\"number\">858.429993</span>  <span class=\"number\">852.179993</span>  <span class=\"number\">855.609985</span>   <span class=\"number\">2613400</span>  <span class=\"number\">855.609985</span></span><br><span class=\"line\"><span class=\"number\">3</span>    <span class=\"number\">2017</span><span class=\"number\">-02</span><span class=\"number\">-21</span>  <span class=\"number\">848.840027</span>  <span class=\"number\">857.979980</span>  <span class=\"number\">847.250000</span>  <span class=\"number\">856.440002</span>   <span class=\"number\">3490100</span>  <span class=\"number\">856.440002</span></span><br><span class=\"line\"><span class=\"number\">4</span>    <span class=\"number\">2017</span><span class=\"number\">-02</span><span class=\"number\">-17</span>  <span class=\"number\">842.000000</span>  <span class=\"number\">847.270020</span>  <span class=\"number\">840.729980</span>  <span class=\"number\">845.070007</span>   <span class=\"number\">3029800</span>  <span class=\"number\">845.070007</span></span><br><span class=\"line\">..          ...         ...         ...         ...         ...       ...         ...</span><br><span class=\"line\"><span class=\"number\">249</span>  <span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-01</span>  <span class=\"number\">556.289978</span>  <span class=\"number\">579.250000</span>  <span class=\"number\">556.000000</span>  <span class=\"number\">579.039978</span>   <span class=\"number\">5038500</span>  <span class=\"number\">579.039978</span></span><br><span class=\"line\"><span class=\"number\">250</span>  <span class=\"number\">2016</span><span class=\"number\">-02</span><span class=\"number\">-29</span>  <span class=\"number\">554.000000</span>  <span class=\"number\">564.809998</span>  <span class=\"number\">552.510010</span>  <span class=\"number\">552.520020</span>   <span class=\"number\">4145400</span>  <span class=\"number\">552.520020</span></span><br><span class=\"line\"><span class=\"number\">251</span>  <span class=\"number\">2016</span><span class=\"number\">-02</span><span class=\"number\">-26</span>  <span class=\"number\">560.119995</span>  <span class=\"number\">562.500000</span>  <span class=\"number\">553.169983</span>  <span class=\"number\">555.229980</span>   <span class=\"number\">4877000</span>  <span class=\"number\">555.229980</span></span><br><span class=\"line\"><span class=\"number\">252</span>  <span class=\"number\">2016</span><span class=\"number\">-02</span><span class=\"number\">-25</span>  <span class=\"number\">555.520020</span>  <span class=\"number\">559.390015</span>  <span class=\"number\">545.289978</span>  <span class=\"number\">555.150024</span>   <span class=\"number\">4525500</span>  <span class=\"number\">555.150024</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>现在我们有了这些数据，但是这些并不都是我们需要的。在这次投资组合分析中，我们需要找到的每日股价涨跌幅：<strong>用当日的收盘价除以前一天的收盘价</strong>，为什么不用开盘价呢？因为有After 和 Pre market交易的存在。所以即使交易所3点后停止交易，很多机构投资者仍然可以通过其他渠道进行交易。由于我们在计算过程中需要使用前一天的收盘价，所以数据上最早的一天的涨幅我们无法计算。下面代码会计算出每家公司股价全年的涨跌幅并将这五个子列表放入同一个列表中</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roc =[]</span><br><span class=\"line\"><span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> raw_data:</span><br><span class=\"line\">\troc.append((each[<span class=\"string\">'Close'</span>].values/np.roll(each[<span class=\"string\">'Close'</span>].values,<span class=\"number\">-1</span>)<span class=\"number\">-1</span>)[:<span class=\"number\">-1</span>][::<span class=\"number\">-1</span>]*<span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>第三行看着有点长，但逻辑很简单</p>\n<ol>\n<li>each[‘Close’].values是指each(在循环中指代公司)中的’Close’这一列的值，相当于Excel直接选择某一列，我们可以按顺序得到当日的收盘价</li>\n<li>np.rool(each[‘Close’].values,-1)表示将这个列表向前推一格，即(1,2,3,4)变成(2,3,4,1).这样我们可以得到上一日的收盘价</li>\n<li>将两个数组做一个除法 （1,2,3)/(2,3,1) = (1/2,2/3,3/1)</li>\n<li>最后一行的数据由于没有之前的收盘价，所以用[:-1]删掉。我们之前平移数组顶掉的数字也在这一行，一同删掉。</li>\n<li>用[::-1]将列表反转，从前往后</li>\n<li>由于使用小数，为了便于查看，我们 x 100 变成百分数</li>\n<li>append方法将这个处理好的数组放在roc的列表中</li>\n</ol>\n<p>得到的列表应该是这样的,5个子列表，每个列表252条数据</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[ <span class=\"number\">0.01440</span>, <span class=\"number\">-0.48808</span>,  <span class=\"number\">4.79982</span>, ..., <span class=\"number\">-0.09691</span>, <span class=\"number\">-0.39971</span>, <span class=\"number\">-0.81555</span>],   </span><br><span class=\"line\">      [ <span class=\"number\">0.27505</span>, <span class=\"number\">-1.45585</span>,  <span class=\"number\">5.23498</span>, ...,  <span class=\"number\">0.88359</span>, <span class=\"number\">-0.75073</span>,  <span class=\"number\">0.32918</span>], </span><br><span class=\"line\">      [<span class=\"number\">-0.65851</span>, <span class=\"number\">-1.01010</span>,  <span class=\"number\">4.43239</span>, ..., <span class=\"number\">-0.27910</span>, <span class=\"number\">-9.27230</span>,  <span class=\"number\">0.96527</span>],</span><br><span class=\"line\">      [<span class=\"number\">-0.09230</span>, <span class=\"number\">-1.67436</span>,  <span class=\"number\">3.78156</span>, ..., <span class=\"number\">-0.13374</span>, <span class=\"number\">-0.53570</span>,  <span class=\"number\">0.40394</span>],</span><br><span class=\"line\">      [<span class=\"number\">-0.72344</span>,  <span class=\"number\">0.87222</span>,  <span class=\"number\">2.42727</span>, ...,  <span class=\"number\">0.28780</span>, <span class=\"number\">-0.87665</span>, <span class=\"number\">-0.34448</span>]]</span><br></pre></td></tr></table></figure>\n</code></pre><p>由于roc是python的列表，仍不具有numpy array的优势，而且要使用pandas,我们需要以行为单位而不是列为单位，所以我们要以日期为基准获得252行<br>我们要先将roc转化为一个二维的的矩阵（数组），然后对其进行翻转（.T表示Transpose，即获得转置矩阵。）</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roc = np.array(roc).T</span><br></pre></td></tr></table></figure>\n</code></pre><p>下面是转置后的矩阵</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">67</span>]: roc</span><br><span class=\"line\">Out[<span class=\"number\">67</span>]: </span><br><span class=\"line\">array([[ <span class=\"number\">0.01440</span>,  <span class=\"number\">0.27505</span>, <span class=\"number\">-0.65851</span>, <span class=\"number\">-0.09230</span>, <span class=\"number\">-0.72344</span>],</span><br><span class=\"line\">\t   [<span class=\"number\">-0.48808</span>, <span class=\"number\">-1.45585</span>, <span class=\"number\">-1.01010</span>, <span class=\"number\">-1.67436</span>,  <span class=\"number\">0.87222</span>],</span><br><span class=\"line\">\t   [ <span class=\"number\">4.79982</span>,  <span class=\"number\">5.23498</span>,  <span class=\"number\">4.43239</span>,  <span class=\"number\">3.78156</span>,  <span class=\"number\">2.42727</span>],</span><br><span class=\"line\">\t   ..., </span><br><span class=\"line\">\t   [<span class=\"number\">-0.09691</span>,  <span class=\"number\">0.88359</span>, <span class=\"number\">-0.27910</span>, <span class=\"number\">-0.13374</span>,  <span class=\"number\">0.28780</span>],</span><br><span class=\"line\">\t   [<span class=\"number\">-0.39971</span>, <span class=\"number\">-0.75073</span>, <span class=\"number\">-9.27230</span>, <span class=\"number\">-0.53570</span>, <span class=\"number\">-0.87665</span>],</span><br><span class=\"line\">\t   [<span class=\"number\">-0.81555</span>,  <span class=\"number\">0.32918</span>,  <span class=\"number\">0.96527</span>,  <span class=\"number\">0.40394</span>, <span class=\"number\">-0.34448</span>]])</span><br></pre></td></tr></table></figure>\n</code></pre><p>我们现在有252行数据了，需要一个日期来对每一行进行标记方便查看，直接从之前提取的数据中获得。处理方式同涨跌幅类似，去掉最早一天，反转</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dates = pd.to_datetime(amzn[<span class=\"string\">'Date'</span>][:<span class=\"number\">-1</span>][::<span class=\"number\">-1</span>])</span><br></pre></td></tr></table></figure>\n</code></pre><p>然后我们使用pandas 的dataFrame来创建一个新的数据框架,列名称为ticker，行名称为日期</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rocdf = pd.DataFrame(roc,index=dates,columns=tickers)</span><br><span class=\"line\"><span class=\"comment\">#index接受日期列表</span></span><br><span class=\"line\"><span class=\"comment\">#columns接收ticker列表</span></span><br><span class=\"line\"></span><br><span class=\"line\">                AMZN      NFLX      NVDA      ADBE      PCLN</span><br><span class=\"line\">Date                                                        </span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-02</span><span class=\"number\">-26</span>  <span class=\"number\">0.014403</span>  <span class=\"number\">0.275047</span> <span class=\"number\">-0.658511</span> <span class=\"number\">-0.092296</span> <span class=\"number\">-0.723440</span></span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-02</span><span class=\"number\">-29</span> <span class=\"number\">-0.488079</span> <span class=\"number\">-1.455847</span> <span class=\"number\">-1.010098</span> <span class=\"number\">-1.674360</span>  <span class=\"number\">0.872216</span></span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-01</span>  <span class=\"number\">4.799818</span>  <span class=\"number\">5.234984</span>  <span class=\"number\">4.432395</span>  <span class=\"number\">3.781563</span>  <span class=\"number\">2.427272</span></span><br><span class=\"line\"><span class=\"meta\">... </span>             ...       ...       ...       ...       ...</span><br><span class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-02</span><span class=\"number\">-22</span> <span class=\"number\">-0.096915</span>  <span class=\"number\">0.883587</span> <span class=\"number\">-0.279101</span> <span class=\"number\">-0.133742</span>  <span class=\"number\">0.287795</span></span><br><span class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-02</span><span class=\"number\">-23</span> <span class=\"number\">-0.399713</span> <span class=\"number\">-0.750731</span> <span class=\"number\">-9.272304</span> <span class=\"number\">-0.535698</span> <span class=\"number\">-0.876650</span></span><br><span class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-02</span><span class=\"number\">-24</span> <span class=\"number\">-0.815547</span>  <span class=\"number\">0.329178</span>  <span class=\"number\">0.965271</span>  <span class=\"number\">0.403935</span> <span class=\"number\">-0.344479</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>这样我们前期的数据准备工作都基本做好了,接下来我们来看如何将其运用到投资组合分析上。</p>\n<h2 id=\"两个投资方案\"><a href=\"#两个投资方案\" class=\"headerlink\" title=\"两个投资方案\"></a>两个投资方案</h2><p>在进行分析前，我们先看我们收集的信息，pandas提供describe()来描述数据的基本信息，包含基本的均值，标准差，最大最小值等</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">70</span>]: rocdf.describe()</span><br><span class=\"line\">Out[<span class=\"number\">70</span>]: </span><br><span class=\"line\">\t\t\t AMZN        NFLX        NVDA        ADBE        PCLN</span><br><span class=\"line\">count  <span class=\"number\">252.000000</span>  <span class=\"number\">252.000000</span>  <span class=\"number\">252.000000</span>  <span class=\"number\">252.000000</span>  <span class=\"number\">252.000000</span></span><br><span class=\"line\">mean     <span class=\"number\">0.177009</span>    <span class=\"number\">0.194823</span>    <span class=\"number\">0.499515</span>    <span class=\"number\">0.134487</span>    <span class=\"number\">0.112379</span></span><br><span class=\"line\">std      <span class=\"number\">1.428119</span>    <span class=\"number\">2.451156</span>    <span class=\"number\">2.913356</span>    <span class=\"number\">1.238686</span>    <span class=\"number\">1.460104</span></span><br><span class=\"line\">min     <span class=\"number\">-5.137101</span>  <span class=\"number\">-13.126204</span>   <span class=\"number\">-9.272304</span>   <span class=\"number\">-5.726032</span>  <span class=\"number\">-11.369583</span></span><br><span class=\"line\"><span class=\"number\">25</span>%     <span class=\"number\">-0.556960</span>   <span class=\"number\">-0.831909</span>   <span class=\"number\">-0.678360</span>   <span class=\"number\">-0.488501</span>   <span class=\"number\">-0.512958</span></span><br><span class=\"line\"><span class=\"number\">50</span>%      <span class=\"number\">0.142906</span>    <span class=\"number\">0.003979</span>    <span class=\"number\">0.275135</span>    <span class=\"number\">0.021979</span>    <span class=\"number\">0.124173</span></span><br><span class=\"line\"><span class=\"number\">75</span>%      <span class=\"number\">0.867294</span>    <span class=\"number\">1.224020</span>    <span class=\"number\">1.614347</span>    <span class=\"number\">0.724158</span>    <span class=\"number\">0.755365</span></span><br><span class=\"line\">max      <span class=\"number\">9.566450</span>   <span class=\"number\">19.028054</span>   <span class=\"number\">29.806706</span>    <span class=\"number\">7.115877</span>    <span class=\"number\">6.606639</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>我们需要这其中的均值mean</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expret = np.array(rocdf.mean())</span><br></pre></td></tr></table></figure>\n</code></pre><p>接着，求出方差／协方差的矩阵。(np.dot为矩阵相乘所使用的函数)。</p>\n<blockquote>\n<p><strong>方差／协方差的矩阵(S) = （股价涨跌幅矩阵 － 收益率）（转置）＊（股价涨跌幅矩阵 － 收益率）</strong></p>\n</blockquote>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var_covar = np.dot((rocdf.values-expret).T,(rocdf.values-expret))</span><br></pre></td></tr></table></figure>\n</code></pre><p>假设我们现在有两种方案，方案x和y,对五个公司股票的持有率分别是（顺序参见ticker）</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port_x = [<span class=\"number\">0.2</span>,<span class=\"number\">0.1</span>,<span class=\"number\">0.15</span>,<span class=\"number\">0.35</span>,<span class=\"number\">0.2</span>]</span><br><span class=\"line\">port_y = [<span class=\"number\">0.2</span>,<span class=\"number\">0.3</span>,<span class=\"number\">0.25</span>,<span class=\"number\">0.15</span>,<span class=\"number\">0.1</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p><strong>现在我们需要一种投资方案，是x和y两种方案的结合，根据x和y所占不同比重来获得风险和收益变化曲线。</strong></p>\n<p>首先我们需要对这两个股票分别进行分析</p>\n<p>求出x方案的预期（平均）收益率，该收益率为<strong>各个公司股票收益率与其所占比例的乘积之和</strong>。我们通过矩阵乘法来实现.</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x_mean = np.dot(expret,port_x)</span><br></pre></td></tr></table></figure>\n</code></pre><p>求出x方案的方差, 等价于X和自身的协方差Covar(X,X)</p>\n<blockquote>\n<p><strong>x方案方差  = x方案权重组合（转置）<em> 方差／协方差的矩阵(S) </em> x方案权重组合</strong></p>\n</blockquote>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x_var = np.dot(np.dot(port_x.T,var_covar),port_x)</span><br></pre></td></tr></table></figure>\n</code></pre><p>y方案同理。</p>\n<p>接着我们求出x,y的协方差Covar(X,Y).可以和刚才求X方差对比一下看看有何异同</p>\n<blockquote>\n<p><strong>x,y协方差  = x方案权重组合（转置）<em> 方差／协方差的矩阵(S) </em> y方案权重组合</strong></p>\n</blockquote>\n<pre><code>#!Python\nxy_covar = np.dot(np.dot(port_x,var_covar),port_y)\n</code></pre><p>还有相关系数</p>\n<blockquote>\n<p><strong>相关系数 = x,y协方差/根号下(x方案方差*)</strong></p>\n</blockquote>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xy_corr = xy_covar/np.sqrt(x_var*y_var)</span><br></pre></td></tr></table></figure>\n</code></pre><p>有了这些信息后，我们可以将两个方案按一定比例结合在一起</p>\n<h2 id=\"投资组合分析\"><a href=\"#投资组合分析\" class=\"headerlink\" title=\"投资组合分析\"></a>投资组合分析</h2><p>假设我们x方案占30%，</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x_in_comb = <span class=\"number\">0.3</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>那么y方案占 1-x_in_comb = 0.7</p>\n<p>求出新组合的预期（平均）收益，同样是加权平均</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comb_mean = x_mean*x_in_comb+y_mean*(<span class=\"number\">1</span>-x_in_comb)</span><br></pre></td></tr></table></figure>\n</code></pre><p>求出新组合的加权后的方差和标准差(np.sqrt为开平方)</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comb_var = x_in_comb**<span class=\"number\">2</span>*x_var+(<span class=\"number\">1</span>-x_in_comb)**<span class=\"number\">2</span>*y_var+<span class=\"number\">2</span>*x_in_comb*(<span class=\"number\">1</span>-x_in_comb)*xy_covar</span><br><span class=\"line\">comb_stddev = np.sqrt(comb_var)</span><br></pre></td></tr></table></figure>\n</code></pre><p>至此，我们获得新组合的均值和标准差，分别代表了该组合的收益(Return)和风险(Risk).但是这并不能直观地带给我们什么信息，因为我们所得数据只是基于x方案占30%这一假设之上。我们需要根据一系列假设来获得一系列的收益(Return)和风险(Risk)值并进行分析。这时候我们需要使用np.arange来生成－5到＋5之间的数字（负代表做空，大于1代表使用杠杆），间隔为0.1</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#np.arange(最小值，最大值(不包括），间隔)</span></span><br><span class=\"line\">portfolio=np.arange(<span class=\"number\">-5.0</span>,<span class=\"number\">5.1</span>,<span class=\"number\">0.1</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>然后再将刚才我们求新组合的标准差和均值的方法写成函数重复利用</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">table_of_returns</span><span class=\"params\">(x_in_comb)</span>:</span>\t</span><br><span class=\"line\">\t\tcomb_mean = x_mean*x_in_comb+y_mean*(<span class=\"number\">1</span>-x_in_comb)</span><br><span class=\"line\">\t\tcomb_var = x_in_comb**<span class=\"number\">2</span>*x_var+(<span class=\"number\">1</span>-x_in_comb)**<span class=\"number\">2</span>*y_var+<span class=\"number\">2</span>*x_in_comb*(<span class=\"number\">1</span>-x_in_comb)*xy_covar</span><br><span class=\"line\">\t\tcomb_stddev = np.sqrt(comb_var)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> comb_stddev,comb_mean</span><br><span class=\"line\">\t```\t</span><br><span class=\"line\">生成<span class=\"number\">-5</span>到+<span class=\"number\">5</span>之间的各种情况，类似于excel的data table,并使用pandas处理为DataFrame形式</span><br><span class=\"line\"></span><br><span class=\"line\">\t```Python</span><br><span class=\"line\">\tresult = np.array([table_of_returns(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> portfolio])</span><br><span class=\"line\">\tdf = pd.DataFrame(result,index=portfolio,columns=[<span class=\"string\">'Risk (stddev)'</span>,<span class=\"string\">'Return (mean)'</span>])</span><br></pre></td></tr></table></figure>\n</code></pre><p>查看结果</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">75</span>]: df</span><br><span class=\"line\">Out[<span class=\"number\">75</span>]: </span><br><span class=\"line\">\t  Risk (stddev)  Return (mean)</span><br><span class=\"line\"><span class=\"number\">-5.0</span>      <span class=\"number\">61.351124</span>       <span class=\"number\">0.504043</span></span><br><span class=\"line\"><span class=\"number\">-4.9</span>      <span class=\"number\">60.489123</span>       <span class=\"number\">0.498965</span></span><br><span class=\"line\"><span class=\"number\">-4.8</span>      <span class=\"number\">59.628240</span>       <span class=\"number\">0.493887</span></span><br><span class=\"line\"><span class=\"number\">-4.7</span>      <span class=\"number\">58.768522</span>       <span class=\"number\">0.488809</span></span><br><span class=\"line\"><span class=\"number\">-4.6</span>      <span class=\"number\">57.910022</span>       <span class=\"number\">0.483731</span></span><br><span class=\"line\"><span class=\"number\">-4.5</span>      <span class=\"number\">57.052795</span>       <span class=\"number\">0.478653</span></span><br><span class=\"line\"><span class=\"meta\">... </span>            ...            ...</span><br><span class=\"line\"> <span class=\"number\">2.1</span>      <span class=\"number\">18.192939</span>       <span class=\"number\">0.143499</span></span><br><span class=\"line\"> <span class=\"number\">2.2</span>      <span class=\"number\">18.464156</span>       <span class=\"number\">0.138421</span></span><br><span class=\"line\"> <span class=\"number\">2.3</span>      <span class=\"number\">18.774621</span>       <span class=\"number\">0.133342</span></span><br><span class=\"line\"> <span class=\"number\">2.4</span>      <span class=\"number\">19.122421</span>       <span class=\"number\">0.128264</span></span><br><span class=\"line\"> <span class=\"number\">2.5</span>      <span class=\"number\">19.505559</span>       <span class=\"number\">0.123186</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</code></pre><h2 id=\"画出Envelop-portfolio曲线图\"><a href=\"#画出Envelop-portfolio曲线图\" class=\"headerlink\" title=\"画出Envelop portfolio曲线图\"></a>画出Envelop portfolio曲线图</h2><p>这次仍然使用我们之前的Matplotlib来做图</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tplt.figure()</span><br><span class=\"line\">\tplt.scatter(df[<span class=\"string\">'Risk (stddev)'</span>],df[<span class=\"string\">'Return (mean)'</span>],alpha = <span class=\"number\">0.5</span>,color=<span class=\"string\">'#51ADD8'</span>,label = <span class=\"string\">'Envelop Portfolio'</span>)</span><br><span class=\"line\">\tplt.legend(loc=<span class=\"string\">'best'</span>)</span><br><span class=\"line\">\tplt.title(<span class=\"string\">'Return - Risk Envelop'</span>)</span><br><span class=\"line\">\t</span><br><span class=\"line\">&gt;\t**&gt;&gt;&gt;plt.show()**</span><br></pre></td></tr></table></figure>\n</code></pre><p><img src=\"/article/efficient-frontier/result.png\" alt=\"\"></p>\n<p>图为Envelop Portfolio根据图我们不难看出，</p>\n<ul>\n<li>即便是在低收益率的情况下，风险反而会增高。</li>\n<li>同一个风险值可能会对应两个不同的收益率，我们当然会选择高收益的那一点，所以该曲线下半部分是无效的。而上半部分我们称为有效边界（Efficient Frontier),由美国著名经济学家哈里•马科维茨（Harry Markowitz ）提出</li>\n<li>有效边界为当前组合最优结果，超过该边界即各组合之和大于100%(不可行)，低于该边界可行但是不是最有效的</li>\n<li>该边界只是当前组合的最优模型，而不是最优组合</li>\n</ul>\n<p>那我们有没有更好的组合呢？能不能找到一个在有效边界上的最优点呢？我们下期继续</p>\n","site":{"data":{}},"excerpt":"<p>本实例从获取数据开始讲解如何使用Pandas对股票数据进行简单的投资组合分析，画出有效边界。</p>","more":"<h2 id=\"数据准备\"><a href=\"#数据准备\" class=\"headerlink\" title=\"数据准备\"></a>数据准备</h2><p>首先我们打开python解释器，引入我们今天所需要的工具,numpy/Matplotlib/Pandas</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np </span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt </span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br></pre></td></tr></table></figure>\n</code></pre><p>接着我们从Yahoo Finance 上面找到需要的股票数据，我们以亚马逊，Netflix,英伟达，Adobe,Priceline这几家比较熟悉的公司为例，它们的标志是</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tickers=[<span class=\"string\">'AMZN'</span>,<span class=\"string\">'NFLX'</span>,<span class=\"string\">'NVDA'</span>,<span class=\"string\">'ADBE'</span>,<span class=\"string\">'PCLN'</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p>我们把它们最近一年的股票价格历史数据下载下来，放在解释器运行的目录里，并给他们按Ticker更改名称（AMZN.csv），然后使用pandas.read_csv方法加载</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">amzn = pd.read_csv(<span class=\"string\">'AMZN.csv'</span>)</span><br><span class=\"line\">nflx = pd.read_csv(<span class=\"string\">'NFLX.csv'</span>)</span><br><span class=\"line\">nvda = pd.read_csv(<span class=\"string\">'NVDA.csv'</span>)</span><br><span class=\"line\">adbe = pd.read_csv(<span class=\"string\">'ADBE.csv'</span>)</span><br><span class=\"line\">pcln = pd.read_csv(<span class=\"string\">'PCLN.csv'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>由于我们使用pandas进行加载，pandas自身会对数据进行优化操作，所以我们可以看到加载后整齐的输出结果，我们来看下amazon的股价</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">65</span>]: amzn</span><br><span class=\"line\">Out[<span class=\"number\">65</span>]: </span><br><span class=\"line\">\t\t   Date        Open        High         Low       Close    Volume   Adj Close</span><br><span class=\"line\"><span class=\"number\">0</span>    <span class=\"number\">2017</span><span class=\"number\">-02</span><span class=\"number\">-24</span>  <span class=\"number\">844.690002</span>  <span class=\"number\">845.809998</span>  <span class=\"number\">837.750000</span>  <span class=\"number\">845.239990</span>   <span class=\"number\">3676400</span>  <span class=\"number\">845.239990</span></span><br><span class=\"line\"><span class=\"number\">1</span>    <span class=\"number\">2017</span><span class=\"number\">-02</span><span class=\"number\">-23</span>  <span class=\"number\">857.570007</span>  <span class=\"number\">860.859985</span>  <span class=\"number\">848.000000</span>  <span class=\"number\">852.190002</span>   <span class=\"number\">3454600</span>  <span class=\"number\">852.190002</span></span><br><span class=\"line\"><span class=\"number\">2</span>    <span class=\"number\">2017</span><span class=\"number\">-02</span><span class=\"number\">-22</span>  <span class=\"number\">856.950012</span>  <span class=\"number\">858.429993</span>  <span class=\"number\">852.179993</span>  <span class=\"number\">855.609985</span>   <span class=\"number\">2613400</span>  <span class=\"number\">855.609985</span></span><br><span class=\"line\"><span class=\"number\">3</span>    <span class=\"number\">2017</span><span class=\"number\">-02</span><span class=\"number\">-21</span>  <span class=\"number\">848.840027</span>  <span class=\"number\">857.979980</span>  <span class=\"number\">847.250000</span>  <span class=\"number\">856.440002</span>   <span class=\"number\">3490100</span>  <span class=\"number\">856.440002</span></span><br><span class=\"line\"><span class=\"number\">4</span>    <span class=\"number\">2017</span><span class=\"number\">-02</span><span class=\"number\">-17</span>  <span class=\"number\">842.000000</span>  <span class=\"number\">847.270020</span>  <span class=\"number\">840.729980</span>  <span class=\"number\">845.070007</span>   <span class=\"number\">3029800</span>  <span class=\"number\">845.070007</span></span><br><span class=\"line\">..          ...         ...         ...         ...         ...       ...         ...</span><br><span class=\"line\"><span class=\"number\">249</span>  <span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-01</span>  <span class=\"number\">556.289978</span>  <span class=\"number\">579.250000</span>  <span class=\"number\">556.000000</span>  <span class=\"number\">579.039978</span>   <span class=\"number\">5038500</span>  <span class=\"number\">579.039978</span></span><br><span class=\"line\"><span class=\"number\">250</span>  <span class=\"number\">2016</span><span class=\"number\">-02</span><span class=\"number\">-29</span>  <span class=\"number\">554.000000</span>  <span class=\"number\">564.809998</span>  <span class=\"number\">552.510010</span>  <span class=\"number\">552.520020</span>   <span class=\"number\">4145400</span>  <span class=\"number\">552.520020</span></span><br><span class=\"line\"><span class=\"number\">251</span>  <span class=\"number\">2016</span><span class=\"number\">-02</span><span class=\"number\">-26</span>  <span class=\"number\">560.119995</span>  <span class=\"number\">562.500000</span>  <span class=\"number\">553.169983</span>  <span class=\"number\">555.229980</span>   <span class=\"number\">4877000</span>  <span class=\"number\">555.229980</span></span><br><span class=\"line\"><span class=\"number\">252</span>  <span class=\"number\">2016</span><span class=\"number\">-02</span><span class=\"number\">-25</span>  <span class=\"number\">555.520020</span>  <span class=\"number\">559.390015</span>  <span class=\"number\">545.289978</span>  <span class=\"number\">555.150024</span>   <span class=\"number\">4525500</span>  <span class=\"number\">555.150024</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>现在我们有了这些数据，但是这些并不都是我们需要的。在这次投资组合分析中，我们需要找到的每日股价涨跌幅：<strong>用当日的收盘价除以前一天的收盘价</strong>，为什么不用开盘价呢？因为有After 和 Pre market交易的存在。所以即使交易所3点后停止交易，很多机构投资者仍然可以通过其他渠道进行交易。由于我们在计算过程中需要使用前一天的收盘价，所以数据上最早的一天的涨幅我们无法计算。下面代码会计算出每家公司股价全年的涨跌幅并将这五个子列表放入同一个列表中</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roc =[]</span><br><span class=\"line\"><span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> raw_data:</span><br><span class=\"line\">\troc.append((each[<span class=\"string\">'Close'</span>].values/np.roll(each[<span class=\"string\">'Close'</span>].values,<span class=\"number\">-1</span>)<span class=\"number\">-1</span>)[:<span class=\"number\">-1</span>][::<span class=\"number\">-1</span>]*<span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>第三行看着有点长，但逻辑很简单</p>\n<ol>\n<li>each[‘Close’].values是指each(在循环中指代公司)中的’Close’这一列的值，相当于Excel直接选择某一列，我们可以按顺序得到当日的收盘价</li>\n<li>np.rool(each[‘Close’].values,-1)表示将这个列表向前推一格，即(1,2,3,4)变成(2,3,4,1).这样我们可以得到上一日的收盘价</li>\n<li>将两个数组做一个除法 （1,2,3)/(2,3,1) = (1/2,2/3,3/1)</li>\n<li>最后一行的数据由于没有之前的收盘价，所以用[:-1]删掉。我们之前平移数组顶掉的数字也在这一行，一同删掉。</li>\n<li>用[::-1]将列表反转，从前往后</li>\n<li>由于使用小数，为了便于查看，我们 x 100 变成百分数</li>\n<li>append方法将这个处理好的数组放在roc的列表中</li>\n</ol>\n<p>得到的列表应该是这样的,5个子列表，每个列表252条数据</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[ <span class=\"number\">0.01440</span>, <span class=\"number\">-0.48808</span>,  <span class=\"number\">4.79982</span>, ..., <span class=\"number\">-0.09691</span>, <span class=\"number\">-0.39971</span>, <span class=\"number\">-0.81555</span>],   </span><br><span class=\"line\">      [ <span class=\"number\">0.27505</span>, <span class=\"number\">-1.45585</span>,  <span class=\"number\">5.23498</span>, ...,  <span class=\"number\">0.88359</span>, <span class=\"number\">-0.75073</span>,  <span class=\"number\">0.32918</span>], </span><br><span class=\"line\">      [<span class=\"number\">-0.65851</span>, <span class=\"number\">-1.01010</span>,  <span class=\"number\">4.43239</span>, ..., <span class=\"number\">-0.27910</span>, <span class=\"number\">-9.27230</span>,  <span class=\"number\">0.96527</span>],</span><br><span class=\"line\">      [<span class=\"number\">-0.09230</span>, <span class=\"number\">-1.67436</span>,  <span class=\"number\">3.78156</span>, ..., <span class=\"number\">-0.13374</span>, <span class=\"number\">-0.53570</span>,  <span class=\"number\">0.40394</span>],</span><br><span class=\"line\">      [<span class=\"number\">-0.72344</span>,  <span class=\"number\">0.87222</span>,  <span class=\"number\">2.42727</span>, ...,  <span class=\"number\">0.28780</span>, <span class=\"number\">-0.87665</span>, <span class=\"number\">-0.34448</span>]]</span><br></pre></td></tr></table></figure>\n</code></pre><p>由于roc是python的列表，仍不具有numpy array的优势，而且要使用pandas,我们需要以行为单位而不是列为单位，所以我们要以日期为基准获得252行<br>我们要先将roc转化为一个二维的的矩阵（数组），然后对其进行翻转（.T表示Transpose，即获得转置矩阵。）</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roc = np.array(roc).T</span><br></pre></td></tr></table></figure>\n</code></pre><p>下面是转置后的矩阵</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">67</span>]: roc</span><br><span class=\"line\">Out[<span class=\"number\">67</span>]: </span><br><span class=\"line\">array([[ <span class=\"number\">0.01440</span>,  <span class=\"number\">0.27505</span>, <span class=\"number\">-0.65851</span>, <span class=\"number\">-0.09230</span>, <span class=\"number\">-0.72344</span>],</span><br><span class=\"line\">\t   [<span class=\"number\">-0.48808</span>, <span class=\"number\">-1.45585</span>, <span class=\"number\">-1.01010</span>, <span class=\"number\">-1.67436</span>,  <span class=\"number\">0.87222</span>],</span><br><span class=\"line\">\t   [ <span class=\"number\">4.79982</span>,  <span class=\"number\">5.23498</span>,  <span class=\"number\">4.43239</span>,  <span class=\"number\">3.78156</span>,  <span class=\"number\">2.42727</span>],</span><br><span class=\"line\">\t   ..., </span><br><span class=\"line\">\t   [<span class=\"number\">-0.09691</span>,  <span class=\"number\">0.88359</span>, <span class=\"number\">-0.27910</span>, <span class=\"number\">-0.13374</span>,  <span class=\"number\">0.28780</span>],</span><br><span class=\"line\">\t   [<span class=\"number\">-0.39971</span>, <span class=\"number\">-0.75073</span>, <span class=\"number\">-9.27230</span>, <span class=\"number\">-0.53570</span>, <span class=\"number\">-0.87665</span>],</span><br><span class=\"line\">\t   [<span class=\"number\">-0.81555</span>,  <span class=\"number\">0.32918</span>,  <span class=\"number\">0.96527</span>,  <span class=\"number\">0.40394</span>, <span class=\"number\">-0.34448</span>]])</span><br></pre></td></tr></table></figure>\n</code></pre><p>我们现在有252行数据了，需要一个日期来对每一行进行标记方便查看，直接从之前提取的数据中获得。处理方式同涨跌幅类似，去掉最早一天，反转</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dates = pd.to_datetime(amzn[<span class=\"string\">'Date'</span>][:<span class=\"number\">-1</span>][::<span class=\"number\">-1</span>])</span><br></pre></td></tr></table></figure>\n</code></pre><p>然后我们使用pandas 的dataFrame来创建一个新的数据框架,列名称为ticker，行名称为日期</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rocdf = pd.DataFrame(roc,index=dates,columns=tickers)</span><br><span class=\"line\"><span class=\"comment\">#index接受日期列表</span></span><br><span class=\"line\"><span class=\"comment\">#columns接收ticker列表</span></span><br><span class=\"line\"></span><br><span class=\"line\">                AMZN      NFLX      NVDA      ADBE      PCLN</span><br><span class=\"line\">Date                                                        </span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-02</span><span class=\"number\">-26</span>  <span class=\"number\">0.014403</span>  <span class=\"number\">0.275047</span> <span class=\"number\">-0.658511</span> <span class=\"number\">-0.092296</span> <span class=\"number\">-0.723440</span></span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-02</span><span class=\"number\">-29</span> <span class=\"number\">-0.488079</span> <span class=\"number\">-1.455847</span> <span class=\"number\">-1.010098</span> <span class=\"number\">-1.674360</span>  <span class=\"number\">0.872216</span></span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-01</span>  <span class=\"number\">4.799818</span>  <span class=\"number\">5.234984</span>  <span class=\"number\">4.432395</span>  <span class=\"number\">3.781563</span>  <span class=\"number\">2.427272</span></span><br><span class=\"line\"><span class=\"meta\">... </span>             ...       ...       ...       ...       ...</span><br><span class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-02</span><span class=\"number\">-22</span> <span class=\"number\">-0.096915</span>  <span class=\"number\">0.883587</span> <span class=\"number\">-0.279101</span> <span class=\"number\">-0.133742</span>  <span class=\"number\">0.287795</span></span><br><span class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-02</span><span class=\"number\">-23</span> <span class=\"number\">-0.399713</span> <span class=\"number\">-0.750731</span> <span class=\"number\">-9.272304</span> <span class=\"number\">-0.535698</span> <span class=\"number\">-0.876650</span></span><br><span class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-02</span><span class=\"number\">-24</span> <span class=\"number\">-0.815547</span>  <span class=\"number\">0.329178</span>  <span class=\"number\">0.965271</span>  <span class=\"number\">0.403935</span> <span class=\"number\">-0.344479</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>这样我们前期的数据准备工作都基本做好了,接下来我们来看如何将其运用到投资组合分析上。</p>\n<h2 id=\"两个投资方案\"><a href=\"#两个投资方案\" class=\"headerlink\" title=\"两个投资方案\"></a>两个投资方案</h2><p>在进行分析前，我们先看我们收集的信息，pandas提供describe()来描述数据的基本信息，包含基本的均值，标准差，最大最小值等</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">70</span>]: rocdf.describe()</span><br><span class=\"line\">Out[<span class=\"number\">70</span>]: </span><br><span class=\"line\">\t\t\t AMZN        NFLX        NVDA        ADBE        PCLN</span><br><span class=\"line\">count  <span class=\"number\">252.000000</span>  <span class=\"number\">252.000000</span>  <span class=\"number\">252.000000</span>  <span class=\"number\">252.000000</span>  <span class=\"number\">252.000000</span></span><br><span class=\"line\">mean     <span class=\"number\">0.177009</span>    <span class=\"number\">0.194823</span>    <span class=\"number\">0.499515</span>    <span class=\"number\">0.134487</span>    <span class=\"number\">0.112379</span></span><br><span class=\"line\">std      <span class=\"number\">1.428119</span>    <span class=\"number\">2.451156</span>    <span class=\"number\">2.913356</span>    <span class=\"number\">1.238686</span>    <span class=\"number\">1.460104</span></span><br><span class=\"line\">min     <span class=\"number\">-5.137101</span>  <span class=\"number\">-13.126204</span>   <span class=\"number\">-9.272304</span>   <span class=\"number\">-5.726032</span>  <span class=\"number\">-11.369583</span></span><br><span class=\"line\"><span class=\"number\">25</span>%     <span class=\"number\">-0.556960</span>   <span class=\"number\">-0.831909</span>   <span class=\"number\">-0.678360</span>   <span class=\"number\">-0.488501</span>   <span class=\"number\">-0.512958</span></span><br><span class=\"line\"><span class=\"number\">50</span>%      <span class=\"number\">0.142906</span>    <span class=\"number\">0.003979</span>    <span class=\"number\">0.275135</span>    <span class=\"number\">0.021979</span>    <span class=\"number\">0.124173</span></span><br><span class=\"line\"><span class=\"number\">75</span>%      <span class=\"number\">0.867294</span>    <span class=\"number\">1.224020</span>    <span class=\"number\">1.614347</span>    <span class=\"number\">0.724158</span>    <span class=\"number\">0.755365</span></span><br><span class=\"line\">max      <span class=\"number\">9.566450</span>   <span class=\"number\">19.028054</span>   <span class=\"number\">29.806706</span>    <span class=\"number\">7.115877</span>    <span class=\"number\">6.606639</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>我们需要这其中的均值mean</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expret = np.array(rocdf.mean())</span><br></pre></td></tr></table></figure>\n</code></pre><p>接着，求出方差／协方差的矩阵。(np.dot为矩阵相乘所使用的函数)。</p>\n<blockquote>\n<p><strong>方差／协方差的矩阵(S) = （股价涨跌幅矩阵 － 收益率）（转置）＊（股价涨跌幅矩阵 － 收益率）</strong></p>\n</blockquote>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var_covar = np.dot((rocdf.values-expret).T,(rocdf.values-expret))</span><br></pre></td></tr></table></figure>\n</code></pre><p>假设我们现在有两种方案，方案x和y,对五个公司股票的持有率分别是（顺序参见ticker）</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port_x = [<span class=\"number\">0.2</span>,<span class=\"number\">0.1</span>,<span class=\"number\">0.15</span>,<span class=\"number\">0.35</span>,<span class=\"number\">0.2</span>]</span><br><span class=\"line\">port_y = [<span class=\"number\">0.2</span>,<span class=\"number\">0.3</span>,<span class=\"number\">0.25</span>,<span class=\"number\">0.15</span>,<span class=\"number\">0.1</span>]</span><br></pre></td></tr></table></figure>\n</code></pre><p><strong>现在我们需要一种投资方案，是x和y两种方案的结合，根据x和y所占不同比重来获得风险和收益变化曲线。</strong></p>\n<p>首先我们需要对这两个股票分别进行分析</p>\n<p>求出x方案的预期（平均）收益率，该收益率为<strong>各个公司股票收益率与其所占比例的乘积之和</strong>。我们通过矩阵乘法来实现.</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x_mean = np.dot(expret,port_x)</span><br></pre></td></tr></table></figure>\n</code></pre><p>求出x方案的方差, 等价于X和自身的协方差Covar(X,X)</p>\n<blockquote>\n<p><strong>x方案方差  = x方案权重组合（转置）<em> 方差／协方差的矩阵(S) </em> x方案权重组合</strong></p>\n</blockquote>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x_var = np.dot(np.dot(port_x.T,var_covar),port_x)</span><br></pre></td></tr></table></figure>\n</code></pre><p>y方案同理。</p>\n<p>接着我们求出x,y的协方差Covar(X,Y).可以和刚才求X方差对比一下看看有何异同</p>\n<blockquote>\n<p><strong>x,y协方差  = x方案权重组合（转置）<em> 方差／协方差的矩阵(S) </em> y方案权重组合</strong></p>\n</blockquote>\n<pre><code>#!Python\nxy_covar = np.dot(np.dot(port_x,var_covar),port_y)\n</code></pre><p>还有相关系数</p>\n<blockquote>\n<p><strong>相关系数 = x,y协方差/根号下(x方案方差*)</strong></p>\n</blockquote>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xy_corr = xy_covar/np.sqrt(x_var*y_var)</span><br></pre></td></tr></table></figure>\n</code></pre><p>有了这些信息后，我们可以将两个方案按一定比例结合在一起</p>\n<h2 id=\"投资组合分析\"><a href=\"#投资组合分析\" class=\"headerlink\" title=\"投资组合分析\"></a>投资组合分析</h2><p>假设我们x方案占30%，</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x_in_comb = <span class=\"number\">0.3</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>那么y方案占 1-x_in_comb = 0.7</p>\n<p>求出新组合的预期（平均）收益，同样是加权平均</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comb_mean = x_mean*x_in_comb+y_mean*(<span class=\"number\">1</span>-x_in_comb)</span><br></pre></td></tr></table></figure>\n</code></pre><p>求出新组合的加权后的方差和标准差(np.sqrt为开平方)</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comb_var = x_in_comb**<span class=\"number\">2</span>*x_var+(<span class=\"number\">1</span>-x_in_comb)**<span class=\"number\">2</span>*y_var+<span class=\"number\">2</span>*x_in_comb*(<span class=\"number\">1</span>-x_in_comb)*xy_covar</span><br><span class=\"line\">comb_stddev = np.sqrt(comb_var)</span><br></pre></td></tr></table></figure>\n</code></pre><p>至此，我们获得新组合的均值和标准差，分别代表了该组合的收益(Return)和风险(Risk).但是这并不能直观地带给我们什么信息，因为我们所得数据只是基于x方案占30%这一假设之上。我们需要根据一系列假设来获得一系列的收益(Return)和风险(Risk)值并进行分析。这时候我们需要使用np.arange来生成－5到＋5之间的数字（负代表做空，大于1代表使用杠杆），间隔为0.1</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#np.arange(最小值，最大值(不包括），间隔)</span></span><br><span class=\"line\">portfolio=np.arange(<span class=\"number\">-5.0</span>,<span class=\"number\">5.1</span>,<span class=\"number\">0.1</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>然后再将刚才我们求新组合的标准差和均值的方法写成函数重复利用</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">table_of_returns</span><span class=\"params\">(x_in_comb)</span>:</span>\t</span><br><span class=\"line\">\t\tcomb_mean = x_mean*x_in_comb+y_mean*(<span class=\"number\">1</span>-x_in_comb)</span><br><span class=\"line\">\t\tcomb_var = x_in_comb**<span class=\"number\">2</span>*x_var+(<span class=\"number\">1</span>-x_in_comb)**<span class=\"number\">2</span>*y_var+<span class=\"number\">2</span>*x_in_comb*(<span class=\"number\">1</span>-x_in_comb)*xy_covar</span><br><span class=\"line\">\t\tcomb_stddev = np.sqrt(comb_var)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> comb_stddev,comb_mean</span><br><span class=\"line\">\t```\t</span><br><span class=\"line\">生成<span class=\"number\">-5</span>到+<span class=\"number\">5</span>之间的各种情况，类似于excel的data table,并使用pandas处理为DataFrame形式</span><br><span class=\"line\"></span><br><span class=\"line\">\t```Python</span><br><span class=\"line\">\tresult = np.array([table_of_returns(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> portfolio])</span><br><span class=\"line\">\tdf = pd.DataFrame(result,index=portfolio,columns=[<span class=\"string\">'Risk (stddev)'</span>,<span class=\"string\">'Return (mean)'</span>])</span><br></pre></td></tr></table></figure>\n</code></pre><p>查看结果</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">75</span>]: df</span><br><span class=\"line\">Out[<span class=\"number\">75</span>]: </span><br><span class=\"line\">\t  Risk (stddev)  Return (mean)</span><br><span class=\"line\"><span class=\"number\">-5.0</span>      <span class=\"number\">61.351124</span>       <span class=\"number\">0.504043</span></span><br><span class=\"line\"><span class=\"number\">-4.9</span>      <span class=\"number\">60.489123</span>       <span class=\"number\">0.498965</span></span><br><span class=\"line\"><span class=\"number\">-4.8</span>      <span class=\"number\">59.628240</span>       <span class=\"number\">0.493887</span></span><br><span class=\"line\"><span class=\"number\">-4.7</span>      <span class=\"number\">58.768522</span>       <span class=\"number\">0.488809</span></span><br><span class=\"line\"><span class=\"number\">-4.6</span>      <span class=\"number\">57.910022</span>       <span class=\"number\">0.483731</span></span><br><span class=\"line\"><span class=\"number\">-4.5</span>      <span class=\"number\">57.052795</span>       <span class=\"number\">0.478653</span></span><br><span class=\"line\"><span class=\"meta\">... </span>            ...            ...</span><br><span class=\"line\"> <span class=\"number\">2.1</span>      <span class=\"number\">18.192939</span>       <span class=\"number\">0.143499</span></span><br><span class=\"line\"> <span class=\"number\">2.2</span>      <span class=\"number\">18.464156</span>       <span class=\"number\">0.138421</span></span><br><span class=\"line\"> <span class=\"number\">2.3</span>      <span class=\"number\">18.774621</span>       <span class=\"number\">0.133342</span></span><br><span class=\"line\"> <span class=\"number\">2.4</span>      <span class=\"number\">19.122421</span>       <span class=\"number\">0.128264</span></span><br><span class=\"line\"> <span class=\"number\">2.5</span>      <span class=\"number\">19.505559</span>       <span class=\"number\">0.123186</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</code></pre><h2 id=\"画出Envelop-portfolio曲线图\"><a href=\"#画出Envelop-portfolio曲线图\" class=\"headerlink\" title=\"画出Envelop portfolio曲线图\"></a>画出Envelop portfolio曲线图</h2><p>这次仍然使用我们之前的Matplotlib来做图</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tplt.figure()</span><br><span class=\"line\">\tplt.scatter(df[<span class=\"string\">'Risk (stddev)'</span>],df[<span class=\"string\">'Return (mean)'</span>],alpha = <span class=\"number\">0.5</span>,color=<span class=\"string\">'#51ADD8'</span>,label = <span class=\"string\">'Envelop Portfolio'</span>)</span><br><span class=\"line\">\tplt.legend(loc=<span class=\"string\">'best'</span>)</span><br><span class=\"line\">\tplt.title(<span class=\"string\">'Return - Risk Envelop'</span>)</span><br><span class=\"line\">\t</span><br><span class=\"line\">&gt;\t**&gt;&gt;&gt;plt.show()**</span><br></pre></td></tr></table></figure>\n</code></pre><p><img src=\"/article/efficient-frontier/result.png\" alt=\"\"></p>\n<p>图为Envelop Portfolio根据图我们不难看出，</p>\n<ul>\n<li>即便是在低收益率的情况下，风险反而会增高。</li>\n<li>同一个风险值可能会对应两个不同的收益率，我们当然会选择高收益的那一点，所以该曲线下半部分是无效的。而上半部分我们称为有效边界（Efficient Frontier),由美国著名经济学家哈里•马科维茨（Harry Markowitz ）提出</li>\n<li>有效边界为当前组合最优结果，超过该边界即各组合之和大于100%(不可行)，低于该边界可行但是不是最有效的</li>\n<li>该边界只是当前组合的最优模型，而不是最优组合</li>\n</ul>\n<p>那我们有没有更好的组合呢？能不能找到一个在有效边界上的最优点呢？我们下期继续</p>"},{"title":"使用Flask搭建个人静态博客","date":"2016-08-31T16:01:17.000Z","_content":"\n\n这篇文章教你如何一步一步地使用搭建自己的博客。由于Flask是一个动态网页的Web框架，所以关于Flask搭建静态博客的文章少之又少。（这是Flask的神奇之处，动态静态网页都支持，日后转换时可省去不必要的麻烦)。本系列以[Steven loria]()的Flask[静态博客实例]()为基础并加以改进，增添了一些更加有用的功能并详细介绍\n\n搭建一个Flask静态博客，你需要:\n\n- Python3 （Steven loria采用python2.x)\n- Flask\n- Frozen-Flask\n- Flask-Flatpages\n- Pygments(可选，用于代码语法高亮)\n- Github 或 Coding\n\n首先来看我们的目录结构:\n\n## 博客应用的目录结构\n \n    | ---project\n    │    |---blog\n    │    │    ├── __init__.py\n    │    │    ├── settings.py\n    │    │    ├── views.py\n    │    │    ├── templates\n    │    │    │   ├── base.html\n    │    │    │\t  ├── page.html\n    │    │    │   └── posts.html\n    │    │    ├── static\n    │    │    │\t  ├── home.css\n    │    │    │   └── home.js\n    │    │--- posts\n    │    │    ├── pages\n    │    │    │   ├── firstpost\n    │    │    │   │   ├── index.html\n    │    │    ├── posts.html\n    │    │    ├── index.html\n    │    ├── app.py\n    │    ├── freezer.py \n\n<!--More-->\n\n### 根目录project \n\n在这个目录中project是我们的根目录,根目录包含了:\n\n- blog: 项目主要内容文件夹，包含了模板，样式，和文章文本\n- posts: 我们运行生成器（冻结器）后生成的文件\n- app.py: 使用Flask动态加载网页\n- freezer.py 冻结器，生成静态网站\n\n### blog - 生成器应用\n\n作为整个项目最主要的一环，blog包含以下内容:\n\n- static: 包含了css、js、图片等静态网页所需的文件\n- templates: 包含了网页的基础模板和子网页模板\n- __init__.py: 应用初始化文件\n- settings.py: 配置文件\n- views.py: 视图文件，为我们的网站配置了路由\n\n\n## __init__.py初始化我们的应用\n \n#### 了解__init__.py基本用法，请自行搜索或移步[这里]()。\n\n首先我们需要导入Flask,FlatPages和Frozen-Flask的模块:\n\n    ```Python\n    from flask import Flask\n    from flask_flatpages import FlatPages\n    from flask_frozen import Freezer\n    ```\n\n初始化Flask(app是初始化后的Flask实例):\n\n    ```Python\n    app = Flask(__name__)\n    ```\n\n加载配置文件:\n\n    app.config.from_pyfile('settings.py')\n    \n以创建的Flask实例app为参数初始化Flatpages,Freezer(Frozen-Flask),在这里我们可以看到app是作为参数的，所以表示Flatpages,Freezer只对被传入的app有效果:\n    \n    ```Python\n    articles = FlatPages(app)\n    freezer = Freezer(app)\n    ```\n\n调用我们的视图文件views\n\n    ```Python\n    from blog import views\n    ```\n\n**最后**在这里我们调用了blog文件夹下的视图脚本views，由于这里是循环调用(__init__.py -> 调用views ->调用__init__.py),所以在调用views之前必须先把所有内容初始化好，否则当views调用__init__.py时找不到实例会报错。\n\n下面是__init__.py完整代码\n\n    ```Python\n    from flask import Flask\n    from flask_flatpages import FlatPages\n    from flask_frozen import Freezer\n\n    #init the flask\n    app = Flask(__name__)\n\n    #load the settings from .py file\n    app.config.from_pyfile('settings.py')\n    #initialize the article pages\n    articles = FlatPages(app) #FlatPages use 'app' as arguments\n    #initialize the freezer\n    freezer = Freezer(app)\n    ```\n    \n## 配置文件settings.py\n\n配置文件是我们设置整个博客程序的核心部分,它设置了我们搜索文档的路径，生成文件的位置，使用的扩展样式，调试模式是否生效等。\n\n由于我们要对路径进行修改，我们必须使用os模块来调用并修改参数的**绝对路径**\n\n    import os\n\n并开启调试模式\n\n    REPO_NAME = \"test\"\n    DEBUG = True\n\n\n    APP_DIR = os.path.dirname(os.path.abspath(__file__))\n\n编写一个返回上一级目录的函数，参数为路径\n\n    ```Python\n    def parent_dir(path):\n        return os.path.abspath(os.path.join(path,os.pardir))\n    ```    \n你要将生成的文件放在根目录下的posts文件夹里面，使用FREEZER_DESTINATION来配置生成路径。\n\n    PROJECT_ROOT = parent_dir(APP_DIR)+'/posts'\n    FREEZER_DESTINATION = PROJECT_ROOT\n\n将FREEZER_REMOVE_EXTRA_FILES设为False,否则它会在生成文件后清除项目中的其它文件(脚本白写了)..\n\n    FREEZER_REMOVE_EXTRA_FILES = False\n\n使用[CodeHilite]()作为[markdown语法高亮]()的插件，\n\n    FLATPAGES_MARKDOWN_EXTENSIONS = ['codehilite']\n    \n设置你的博客文档所在位置，设在/project/blog/pages/目录下:\n\n    FLATPAGES_ROOT = os.path.join(APP_DIR,'pages')\n    #FLATPAGES_ROOT = APP_DIR+'/pages' \n    \n设博客文档所使用的格式为'.md'(Markdown)\n\n    FLATPAGES_EXTENSION ='.md'\n    \n代码示例:\n\n    #!python\n    import os\n\n    REPO_NAME = \"what-is-this\"\n    DEBUG = True\n\n\n    APP_DIR = os.path.dirname(os.path.abspath(__file__))\n\n    def parent_dir(path):\n        return os.path.abspath(os.path.join(path,os.pardir))\n\n    PROJECT_ROOT = parent_dir(APP_DIR)+'/posts'\n    FREEZER_DESTINATION = PROJECT_ROOT\n\n\n    FREEZER_REMOVE_EXTRA_FILES = False\n\n\n    FLATPAGES_MARKDOWN_EXTENSIONS = ['codehilite']\n    FLATPAGES_ROOT = os.path.join(APP_DIR,'pages')\n    #FLATPAGES_ROOT = APP_DIR+'/pages' \n    FLATPAGES_EXTENSION ='.md'\n\n\n## views文件(路由)\n\n从我们的blog包（__init__.py）里面引入初始化的实例\n\n    from blog import app,articles\n\n引入flask的模版调用函数[render_template]()\n\n    from flask import render_template \n\n### 主页\n\n为我们的根目录设置网页,\n\n    @app.route('/')\n    def index():\n        return render_template('index.html')\n以上代码的内容是将生成的index.html配置到'/'根目录下，这将是你未来的主页，在网站上就是http://你的网站名.com所显示的页面.        \n\n### 文章列表页\n\n    @app.route('/posts.html')\n\n    def posts():\n        posts = [article for article in articles if 'date' in article.meta]\n\n        #sort posts by date,descending\n\n其中这一句将以date为关键字来识别文档，没有date的文档不会被识别:\n\n        posts = [article for article in articles if 'date' in article.meta]\n        \n可以写成:\n\n        posts=[]\n        for article in articles:\n            if 'date' in article.meta:\n                posts.append(article)\n                \n然后将我们的文章列表按照关键字-日期(key = lambda page:page.meta['date']),来进行降序排列(sorted是升序，‘reverse = True’ 使之改为降序)\n\n        sorted_posts = sorted(posts,reverse = True,key = lambda page:page.meta['date'])\n        \n然后调用posts.html模板，将模板中pages以我们获得的文章集合填充\n        return render_template('posts.html',pages = sorted_posts)\n\n### 文章页\n\n设置文章的路由，由于文章的路由是变量，每一篇文章都有不同的地址，所以我们使用\\<path:path>以文章名作为文章地址，但是这样会使得生成的文章页和static,posts.html，index.html混在一起，很不美观。所以我们在前面加了一个/article，使得这些文章页都存在/article文件夹下，当你的博客有了自己的域名后，文章页应该像这样: http://www.xxxxxxx.com/article/firstpost\n\n    @app.route('/article/<path:path>/')\n接着我们定义一个调用文章页模板的函数\n    \n    def page(path):\n是否返回404错误:\n\n        article = articles.get_or_404(path)\n\n返回文章页，每篇提取的文章都将会作为文章页模板的填充，然后生成新的文章页\n\n        return render_template('article.html',page=article)\n\n完整代码如下:\n\n    #for view parts, we need 3 things:templates,flask,flatpages\n    from flask import render_template #for using render_template\n    #from __init__.py import app ('flask'), articles ('flatpages')\n    from app import app,articles\n\n\n    #set the articlelist route\n    @app.route('/')\n    def index():\n        return render_template('index.html')\n    @app.route('/posts.html')\n    def posts():\n        #posts = [article for article in articles if 'date' in article.meta]\n        posts=[]\n        for article in articles:\n            if 'date' in article.meta:\n                posts.append(article)\n\n        #sort posts by date,descending\n\n        sorted_posts = sorted(posts,reverse = True,key = lambda page:page.meta['date'])#Because of key is date, so in .md file date cannot be write in wrong format like Date\n        #pages may related to template index.html\n\n        return render_template('posts.html',pages = sorted_posts)\n\n\n\n    #where does path come from\n    @app.route('/article/<path:path>/')\n    def page(path):\n        #path is the filename of a page,https://github.com/ChenghaoQ/ChenghaoQ.git without the file extension\n        #e.g.\"first-post\n        article = articles.get_or_404(path)\n        \n        #page may related to the template referal\n        #article is the data we extracted by python,and now we need to use template, in template, the name is page->\\{\\{ page.meta.title }}\n        #So page = article\n        return render_template('article.html',page=article)\n\n\n##博客文档格式及模板\n\n先看我们的文档格式例子:\n\n    #!markdown\n    title: Bacon Ipsum\n    date: 2013-07-14 12:00:00\n\n    Bacon ipsum dolor sit amet ball tip tongue pancetta jowl sirloin rump. Chuck tail pork cow, fatback jerky hamburger pancetta leberkas pig .\n\n    [Read more](http://baconipsum.com/)\n\n\n### Markdown和YAML\n\n- Markdown:一种标记型语言，通过简单的字符将文本文档识别为html，以空白行开始，每个一个空白行都会生成一个p标签的段落\n- YAML是一個可讀性高，用來表達資料序列的格式。在我们文档的格式中，title:和date: 都被YAML提取生成dict,然后在模板里使用\\{\\{page.meta.title}}和\\{\\{page.meta.date}}调用，YAML通过冒号':'识别，不可有空白行间隔，否则会被markdown识别为段落\n\n\n### 模板简单语法\n\nJinja支持和python类似的条件语句和循环语句。\n\nif语句:\n\n> {% if name %}\n> {% else %}\n> {% endif %}\n\n上面的代码表示\n\nfor循环:\n\n{% for page in posts %}\n    \\{\\{page}}\n{% endfor %}\n\n###模板与Markdown，YAML的关系\n\n还记不记得在我们的视图文件views里面，关于文章页的路由模板调用\n\n    return render_template('article.html',page=article)\n    \n这里article是我们使用Flatpage读出来的文档内容，而page则是该内容在模板里对应的名称，于是在模板里，我们使用:\n\n- \\{\\{page.meta.title}} 表示标题\n- \\{\\{page.meta.date}} 表示日期\n- \\{\\{page}} 表示文章正文部分\n\n\n\n## 代码高亮\n\nMarkdown默认使用四个空格或者一个制表符的缩进来表示代码部分，由于使用codehilite,我们不可以用3个'\\`'（反引号）来申明代码语言，但我们可以使用':::'三个冒号来声明\n\n>:::python\n>from blog import app\n\n效果如下\n\n    :::python\n    from blog import app\n    \n然后你可以对你文章中类名为codehilite的div块设置你喜爱的css样式.\n\n\n## 添加博客首页摘要功能\n\n\n目前很多静态博客都支持博客首页的文章摘要功能，Flask没有内置此功能。但是这并不难实现，因为Flask使用的Jinja模板有过滤器功能，我们可以向Flask实例注册一个自定义摘要过滤器:\n\n向Flask实例app注册一个名为excerpt的过滤器，但是我们需要先引入app.\n\n    from blog import app\n    \n注册:\n\n    @app.template_filter('excerpt')\n    \nexcerpt过滤器调用的函数，使用python来对文章进行切片:\n\n    def excerpt_spliter(article):\n        sep='<!--More-->'\n        if sep in article:\n            pass\n        else:\n            sep = '\\n'\n        return Markup(pygmented_markdown(article.split(sep,1)[0]))\n\n由于单独提取并切片后的内容只是普通文本，并不是Markdown，所以我们需要使用markdown里的markdown函数重新将其生成为HTML格式\n\n    from markdown import markdown\n    \n但是如果我们想要使用pygments来高亮语法，我们需要使用flask-Flatpages内带有Codehilite扩展的Markdown\n\n    from flask_flatpages import pygmented_markdown\n    \n完整代码如下\n\n\n    from markupsafe import Markup\n    from flask_flatpages import pygmented_markdown\n\n    @app.template_filter('excerpt')\n    def excerpt_spliter(article):\n        sep='<!--More-->'\n        if sep in article:\n            pass\n        else:\n            sep = '\\n'\n        return Markup(pygmented_markdown(article.split(sep,1)[0]))\n        \n\n\n\n## 冻结器\n\n冻结器非常简单，引入blog包然后使用Freezer加载即可\n\n    import blog\n    if __name__ =='__main__':\n        blog.freezer.freeze()\n","source":"_posts/flask-blog.md","raw":"---\ntitle: 使用Flask搭建个人静态博客\ndate: 2016-09-01 00:01:17\ncategories: Flask\n---\n\n\n这篇文章教你如何一步一步地使用搭建自己的博客。由于Flask是一个动态网页的Web框架，所以关于Flask搭建静态博客的文章少之又少。（这是Flask的神奇之处，动态静态网页都支持，日后转换时可省去不必要的麻烦)。本系列以[Steven loria]()的Flask[静态博客实例]()为基础并加以改进，增添了一些更加有用的功能并详细介绍\n\n搭建一个Flask静态博客，你需要:\n\n- Python3 （Steven loria采用python2.x)\n- Flask\n- Frozen-Flask\n- Flask-Flatpages\n- Pygments(可选，用于代码语法高亮)\n- Github 或 Coding\n\n首先来看我们的目录结构:\n\n## 博客应用的目录结构\n \n    | ---project\n    │    |---blog\n    │    │    ├── __init__.py\n    │    │    ├── settings.py\n    │    │    ├── views.py\n    │    │    ├── templates\n    │    │    │   ├── base.html\n    │    │    │\t  ├── page.html\n    │    │    │   └── posts.html\n    │    │    ├── static\n    │    │    │\t  ├── home.css\n    │    │    │   └── home.js\n    │    │--- posts\n    │    │    ├── pages\n    │    │    │   ├── firstpost\n    │    │    │   │   ├── index.html\n    │    │    ├── posts.html\n    │    │    ├── index.html\n    │    ├── app.py\n    │    ├── freezer.py \n\n<!--More-->\n\n### 根目录project \n\n在这个目录中project是我们的根目录,根目录包含了:\n\n- blog: 项目主要内容文件夹，包含了模板，样式，和文章文本\n- posts: 我们运行生成器（冻结器）后生成的文件\n- app.py: 使用Flask动态加载网页\n- freezer.py 冻结器，生成静态网站\n\n### blog - 生成器应用\n\n作为整个项目最主要的一环，blog包含以下内容:\n\n- static: 包含了css、js、图片等静态网页所需的文件\n- templates: 包含了网页的基础模板和子网页模板\n- __init__.py: 应用初始化文件\n- settings.py: 配置文件\n- views.py: 视图文件，为我们的网站配置了路由\n\n\n## __init__.py初始化我们的应用\n \n#### 了解__init__.py基本用法，请自行搜索或移步[这里]()。\n\n首先我们需要导入Flask,FlatPages和Frozen-Flask的模块:\n\n    ```Python\n    from flask import Flask\n    from flask_flatpages import FlatPages\n    from flask_frozen import Freezer\n    ```\n\n初始化Flask(app是初始化后的Flask实例):\n\n    ```Python\n    app = Flask(__name__)\n    ```\n\n加载配置文件:\n\n    app.config.from_pyfile('settings.py')\n    \n以创建的Flask实例app为参数初始化Flatpages,Freezer(Frozen-Flask),在这里我们可以看到app是作为参数的，所以表示Flatpages,Freezer只对被传入的app有效果:\n    \n    ```Python\n    articles = FlatPages(app)\n    freezer = Freezer(app)\n    ```\n\n调用我们的视图文件views\n\n    ```Python\n    from blog import views\n    ```\n\n**最后**在这里我们调用了blog文件夹下的视图脚本views，由于这里是循环调用(__init__.py -> 调用views ->调用__init__.py),所以在调用views之前必须先把所有内容初始化好，否则当views调用__init__.py时找不到实例会报错。\n\n下面是__init__.py完整代码\n\n    ```Python\n    from flask import Flask\n    from flask_flatpages import FlatPages\n    from flask_frozen import Freezer\n\n    #init the flask\n    app = Flask(__name__)\n\n    #load the settings from .py file\n    app.config.from_pyfile('settings.py')\n    #initialize the article pages\n    articles = FlatPages(app) #FlatPages use 'app' as arguments\n    #initialize the freezer\n    freezer = Freezer(app)\n    ```\n    \n## 配置文件settings.py\n\n配置文件是我们设置整个博客程序的核心部分,它设置了我们搜索文档的路径，生成文件的位置，使用的扩展样式，调试模式是否生效等。\n\n由于我们要对路径进行修改，我们必须使用os模块来调用并修改参数的**绝对路径**\n\n    import os\n\n并开启调试模式\n\n    REPO_NAME = \"test\"\n    DEBUG = True\n\n\n    APP_DIR = os.path.dirname(os.path.abspath(__file__))\n\n编写一个返回上一级目录的函数，参数为路径\n\n    ```Python\n    def parent_dir(path):\n        return os.path.abspath(os.path.join(path,os.pardir))\n    ```    \n你要将生成的文件放在根目录下的posts文件夹里面，使用FREEZER_DESTINATION来配置生成路径。\n\n    PROJECT_ROOT = parent_dir(APP_DIR)+'/posts'\n    FREEZER_DESTINATION = PROJECT_ROOT\n\n将FREEZER_REMOVE_EXTRA_FILES设为False,否则它会在生成文件后清除项目中的其它文件(脚本白写了)..\n\n    FREEZER_REMOVE_EXTRA_FILES = False\n\n使用[CodeHilite]()作为[markdown语法高亮]()的插件，\n\n    FLATPAGES_MARKDOWN_EXTENSIONS = ['codehilite']\n    \n设置你的博客文档所在位置，设在/project/blog/pages/目录下:\n\n    FLATPAGES_ROOT = os.path.join(APP_DIR,'pages')\n    #FLATPAGES_ROOT = APP_DIR+'/pages' \n    \n设博客文档所使用的格式为'.md'(Markdown)\n\n    FLATPAGES_EXTENSION ='.md'\n    \n代码示例:\n\n    #!python\n    import os\n\n    REPO_NAME = \"what-is-this\"\n    DEBUG = True\n\n\n    APP_DIR = os.path.dirname(os.path.abspath(__file__))\n\n    def parent_dir(path):\n        return os.path.abspath(os.path.join(path,os.pardir))\n\n    PROJECT_ROOT = parent_dir(APP_DIR)+'/posts'\n    FREEZER_DESTINATION = PROJECT_ROOT\n\n\n    FREEZER_REMOVE_EXTRA_FILES = False\n\n\n    FLATPAGES_MARKDOWN_EXTENSIONS = ['codehilite']\n    FLATPAGES_ROOT = os.path.join(APP_DIR,'pages')\n    #FLATPAGES_ROOT = APP_DIR+'/pages' \n    FLATPAGES_EXTENSION ='.md'\n\n\n## views文件(路由)\n\n从我们的blog包（__init__.py）里面引入初始化的实例\n\n    from blog import app,articles\n\n引入flask的模版调用函数[render_template]()\n\n    from flask import render_template \n\n### 主页\n\n为我们的根目录设置网页,\n\n    @app.route('/')\n    def index():\n        return render_template('index.html')\n以上代码的内容是将生成的index.html配置到'/'根目录下，这将是你未来的主页，在网站上就是http://你的网站名.com所显示的页面.        \n\n### 文章列表页\n\n    @app.route('/posts.html')\n\n    def posts():\n        posts = [article for article in articles if 'date' in article.meta]\n\n        #sort posts by date,descending\n\n其中这一句将以date为关键字来识别文档，没有date的文档不会被识别:\n\n        posts = [article for article in articles if 'date' in article.meta]\n        \n可以写成:\n\n        posts=[]\n        for article in articles:\n            if 'date' in article.meta:\n                posts.append(article)\n                \n然后将我们的文章列表按照关键字-日期(key = lambda page:page.meta['date']),来进行降序排列(sorted是升序，‘reverse = True’ 使之改为降序)\n\n        sorted_posts = sorted(posts,reverse = True,key = lambda page:page.meta['date'])\n        \n然后调用posts.html模板，将模板中pages以我们获得的文章集合填充\n        return render_template('posts.html',pages = sorted_posts)\n\n### 文章页\n\n设置文章的路由，由于文章的路由是变量，每一篇文章都有不同的地址，所以我们使用\\<path:path>以文章名作为文章地址，但是这样会使得生成的文章页和static,posts.html，index.html混在一起，很不美观。所以我们在前面加了一个/article，使得这些文章页都存在/article文件夹下，当你的博客有了自己的域名后，文章页应该像这样: http://www.xxxxxxx.com/article/firstpost\n\n    @app.route('/article/<path:path>/')\n接着我们定义一个调用文章页模板的函数\n    \n    def page(path):\n是否返回404错误:\n\n        article = articles.get_or_404(path)\n\n返回文章页，每篇提取的文章都将会作为文章页模板的填充，然后生成新的文章页\n\n        return render_template('article.html',page=article)\n\n完整代码如下:\n\n    #for view parts, we need 3 things:templates,flask,flatpages\n    from flask import render_template #for using render_template\n    #from __init__.py import app ('flask'), articles ('flatpages')\n    from app import app,articles\n\n\n    #set the articlelist route\n    @app.route('/')\n    def index():\n        return render_template('index.html')\n    @app.route('/posts.html')\n    def posts():\n        #posts = [article for article in articles if 'date' in article.meta]\n        posts=[]\n        for article in articles:\n            if 'date' in article.meta:\n                posts.append(article)\n\n        #sort posts by date,descending\n\n        sorted_posts = sorted(posts,reverse = True,key = lambda page:page.meta['date'])#Because of key is date, so in .md file date cannot be write in wrong format like Date\n        #pages may related to template index.html\n\n        return render_template('posts.html',pages = sorted_posts)\n\n\n\n    #where does path come from\n    @app.route('/article/<path:path>/')\n    def page(path):\n        #path is the filename of a page,https://github.com/ChenghaoQ/ChenghaoQ.git without the file extension\n        #e.g.\"first-post\n        article = articles.get_or_404(path)\n        \n        #page may related to the template referal\n        #article is the data we extracted by python,and now we need to use template, in template, the name is page->\\{\\{ page.meta.title }}\n        #So page = article\n        return render_template('article.html',page=article)\n\n\n##博客文档格式及模板\n\n先看我们的文档格式例子:\n\n    #!markdown\n    title: Bacon Ipsum\n    date: 2013-07-14 12:00:00\n\n    Bacon ipsum dolor sit amet ball tip tongue pancetta jowl sirloin rump. Chuck tail pork cow, fatback jerky hamburger pancetta leberkas pig .\n\n    [Read more](http://baconipsum.com/)\n\n\n### Markdown和YAML\n\n- Markdown:一种标记型语言，通过简单的字符将文本文档识别为html，以空白行开始，每个一个空白行都会生成一个p标签的段落\n- YAML是一個可讀性高，用來表達資料序列的格式。在我们文档的格式中，title:和date: 都被YAML提取生成dict,然后在模板里使用\\{\\{page.meta.title}}和\\{\\{page.meta.date}}调用，YAML通过冒号':'识别，不可有空白行间隔，否则会被markdown识别为段落\n\n\n### 模板简单语法\n\nJinja支持和python类似的条件语句和循环语句。\n\nif语句:\n\n> {% if name %}\n> {% else %}\n> {% endif %}\n\n上面的代码表示\n\nfor循环:\n\n{% for page in posts %}\n    \\{\\{page}}\n{% endfor %}\n\n###模板与Markdown，YAML的关系\n\n还记不记得在我们的视图文件views里面，关于文章页的路由模板调用\n\n    return render_template('article.html',page=article)\n    \n这里article是我们使用Flatpage读出来的文档内容，而page则是该内容在模板里对应的名称，于是在模板里，我们使用:\n\n- \\{\\{page.meta.title}} 表示标题\n- \\{\\{page.meta.date}} 表示日期\n- \\{\\{page}} 表示文章正文部分\n\n\n\n## 代码高亮\n\nMarkdown默认使用四个空格或者一个制表符的缩进来表示代码部分，由于使用codehilite,我们不可以用3个'\\`'（反引号）来申明代码语言，但我们可以使用':::'三个冒号来声明\n\n>:::python\n>from blog import app\n\n效果如下\n\n    :::python\n    from blog import app\n    \n然后你可以对你文章中类名为codehilite的div块设置你喜爱的css样式.\n\n\n## 添加博客首页摘要功能\n\n\n目前很多静态博客都支持博客首页的文章摘要功能，Flask没有内置此功能。但是这并不难实现，因为Flask使用的Jinja模板有过滤器功能，我们可以向Flask实例注册一个自定义摘要过滤器:\n\n向Flask实例app注册一个名为excerpt的过滤器，但是我们需要先引入app.\n\n    from blog import app\n    \n注册:\n\n    @app.template_filter('excerpt')\n    \nexcerpt过滤器调用的函数，使用python来对文章进行切片:\n\n    def excerpt_spliter(article):\n        sep='<!--More-->'\n        if sep in article:\n            pass\n        else:\n            sep = '\\n'\n        return Markup(pygmented_markdown(article.split(sep,1)[0]))\n\n由于单独提取并切片后的内容只是普通文本，并不是Markdown，所以我们需要使用markdown里的markdown函数重新将其生成为HTML格式\n\n    from markdown import markdown\n    \n但是如果我们想要使用pygments来高亮语法，我们需要使用flask-Flatpages内带有Codehilite扩展的Markdown\n\n    from flask_flatpages import pygmented_markdown\n    \n完整代码如下\n\n\n    from markupsafe import Markup\n    from flask_flatpages import pygmented_markdown\n\n    @app.template_filter('excerpt')\n    def excerpt_spliter(article):\n        sep='<!--More-->'\n        if sep in article:\n            pass\n        else:\n            sep = '\\n'\n        return Markup(pygmented_markdown(article.split(sep,1)[0]))\n        \n\n\n\n## 冻结器\n\n冻结器非常简单，引入blog包然后使用Freezer加载即可\n\n    import blog\n    if __name__ =='__main__':\n        blog.freezer.freeze()\n","slug":"flask-blog","published":1,"updated":"2018-06-22T05:38:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiqvlnwg0010glu3yl7uarti","content":"<p>这篇文章教你如何一步一步地使用搭建自己的博客。由于Flask是一个动态网页的Web框架，所以关于Flask搭建静态博客的文章少之又少。（这是Flask的神奇之处，动态静态网页都支持，日后转换时可省去不必要的麻烦)。本系列以<a href=\"\">Steven loria</a>的Flask<a href=\"\">静态博客实例</a>为基础并加以改进，增添了一些更加有用的功能并详细介绍</p>\n<p>搭建一个Flask静态博客，你需要:</p>\n<ul>\n<li>Python3 （Steven loria采用python2.x)</li>\n<li>Flask</li>\n<li>Frozen-Flask</li>\n<li>Flask-Flatpages</li>\n<li>Pygments(可选，用于代码语法高亮)</li>\n<li>Github 或 Coding</li>\n</ul>\n<p>首先来看我们的目录结构:</p>\n<h2 id=\"博客应用的目录结构\"><a href=\"#博客应用的目录结构\" class=\"headerlink\" title=\"博客应用的目录结构\"></a>博客应用的目录结构</h2><pre><code>| ---project\n│    |---blog\n│    │    ├── __init__.py\n│    │    ├── settings.py\n│    │    ├── views.py\n│    │    ├── templates\n│    │    │   ├── base.html\n│    │    │      ├── page.html\n│    │    │   └── posts.html\n│    │    ├── static\n│    │    │      ├── home.css\n│    │    │   └── home.js\n│    │--- posts\n│    │    ├── pages\n│    │    │   ├── firstpost\n│    │    │   │   ├── index.html\n│    │    ├── posts.html\n│    │    ├── index.html\n│    ├── app.py\n│    ├── freezer.py \n</code></pre><a id=\"more\"></a>\n<h3 id=\"根目录project\"><a href=\"#根目录project\" class=\"headerlink\" title=\"根目录project\"></a>根目录project</h3><p>在这个目录中project是我们的根目录,根目录包含了:</p>\n<ul>\n<li>blog: 项目主要内容文件夹，包含了模板，样式，和文章文本</li>\n<li>posts: 我们运行生成器（冻结器）后生成的文件</li>\n<li>app.py: 使用Flask动态加载网页</li>\n<li>freezer.py 冻结器，生成静态网站</li>\n</ul>\n<h3 id=\"blog-生成器应用\"><a href=\"#blog-生成器应用\" class=\"headerlink\" title=\"blog - 生成器应用\"></a>blog - 生成器应用</h3><p>作为整个项目最主要的一环，blog包含以下内容:</p>\n<ul>\n<li>static: 包含了css、js、图片等静态网页所需的文件</li>\n<li>templates: 包含了网页的基础模板和子网页模板</li>\n<li><strong>init</strong>.py: 应用初始化文件</li>\n<li>settings.py: 配置文件</li>\n<li>views.py: 视图文件，为我们的网站配置了路由</li>\n</ul>\n<h2 id=\"init-py初始化我们的应用\"><a href=\"#init-py初始化我们的应用\" class=\"headerlink\" title=\"init.py初始化我们的应用\"></a><strong>init</strong>.py初始化我们的应用</h2><h4 id=\"了解init-py基本用法，请自行搜索或移步这里。\"><a href=\"#了解init-py基本用法，请自行搜索或移步这里。\" class=\"headerlink\" title=\"了解init.py基本用法，请自行搜索或移步这里。\"></a>了解<strong>init</strong>.py基本用法，请自行搜索或移步<a href=\"\">这里</a>。</h4><p>首先我们需要导入Flask,FlatPages和Frozen-Flask的模块:</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_flatpages <span class=\"keyword\">import</span> FlatPages</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_frozen <span class=\"keyword\">import</span> Freezer</span><br></pre></td></tr></table></figure>\n</code></pre><p>初始化Flask(app是初始化后的Flask实例):</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app = Flask(__name__)</span><br></pre></td></tr></table></figure>\n</code></pre><p>加载配置文件:</p>\n<pre><code>app.config.from_pyfile(&apos;settings.py&apos;)\n</code></pre><p>以创建的Flask实例app为参数初始化Flatpages,Freezer(Frozen-Flask),在这里我们可以看到app是作为参数的，所以表示Flatpages,Freezer只对被传入的app有效果:</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">articles = FlatPages(app)</span><br><span class=\"line\">freezer = Freezer(app)</span><br></pre></td></tr></table></figure>\n</code></pre><p>调用我们的视图文件views</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> blog <span class=\"keyword\">import</span> views</span><br></pre></td></tr></table></figure>\n</code></pre><p><strong>最后</strong>在这里我们调用了blog文件夹下的视图脚本views，由于这里是循环调用(<strong>init</strong>.py -&gt; 调用views -&gt;调用<strong>init</strong>.py),所以在调用views之前必须先把所有内容初始化好，否则当views调用<strong>init</strong>.py时找不到实例会报错。</p>\n<p>下面是<strong>init</strong>.py完整代码</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_flatpages <span class=\"keyword\">import</span> FlatPages</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_frozen <span class=\"keyword\">import</span> Freezer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#init the flask</span></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#load the settings from .py file</span></span><br><span class=\"line\">app.config.from_pyfile(<span class=\"string\">'settings.py'</span>)</span><br><span class=\"line\"><span class=\"comment\">#initialize the article pages</span></span><br><span class=\"line\">articles = FlatPages(app) <span class=\"comment\">#FlatPages use 'app' as arguments</span></span><br><span class=\"line\"><span class=\"comment\">#initialize the freezer</span></span><br><span class=\"line\">freezer = Freezer(app)</span><br></pre></td></tr></table></figure>\n</code></pre><h2 id=\"配置文件settings-py\"><a href=\"#配置文件settings-py\" class=\"headerlink\" title=\"配置文件settings.py\"></a>配置文件settings.py</h2><p>配置文件是我们设置整个博客程序的核心部分,它设置了我们搜索文档的路径，生成文件的位置，使用的扩展样式，调试模式是否生效等。</p>\n<p>由于我们要对路径进行修改，我们必须使用os模块来调用并修改参数的<strong>绝对路径</strong></p>\n<pre><code>import os\n</code></pre><p>并开启调试模式</p>\n<pre><code>REPO_NAME = &quot;test&quot;\nDEBUG = True\n\n\nAPP_DIR = os.path.dirname(os.path.abspath(__file__))\n</code></pre><p>编写一个返回上一级目录的函数，参数为路径</p>\n<pre><code>```Python\ndef parent_dir(path):\n    return os.path.abspath(os.path.join(path,os.pardir))\n```    \n</code></pre><p>你要将生成的文件放在根目录下的posts文件夹里面，使用FREEZER_DESTINATION来配置生成路径。</p>\n<pre><code>PROJECT_ROOT = parent_dir(APP_DIR)+&apos;/posts&apos;\nFREEZER_DESTINATION = PROJECT_ROOT\n</code></pre><p>将FREEZER_REMOVE_EXTRA_FILES设为False,否则它会在生成文件后清除项目中的其它文件(脚本白写了)..</p>\n<pre><code>FREEZER_REMOVE_EXTRA_FILES = False\n</code></pre><p>使用<a href=\"\">CodeHilite</a>作为<a href=\"\">markdown语法高亮</a>的插件，</p>\n<pre><code>FLATPAGES_MARKDOWN_EXTENSIONS = [&apos;codehilite&apos;]\n</code></pre><p>设置你的博客文档所在位置，设在/project/blog/pages/目录下:</p>\n<pre><code>FLATPAGES_ROOT = os.path.join(APP_DIR,&apos;pages&apos;)\n#FLATPAGES_ROOT = APP_DIR+&apos;/pages&apos; \n</code></pre><p>设博客文档所使用的格式为’.md’(Markdown)</p>\n<pre><code>FLATPAGES_EXTENSION =&apos;.md&apos;\n</code></pre><p>代码示例:</p>\n<pre><code>#!python\nimport os\n\nREPO_NAME = &quot;what-is-this&quot;\nDEBUG = True\n\n\nAPP_DIR = os.path.dirname(os.path.abspath(__file__))\n\ndef parent_dir(path):\n    return os.path.abspath(os.path.join(path,os.pardir))\n\nPROJECT_ROOT = parent_dir(APP_DIR)+&apos;/posts&apos;\nFREEZER_DESTINATION = PROJECT_ROOT\n\n\nFREEZER_REMOVE_EXTRA_FILES = False\n\n\nFLATPAGES_MARKDOWN_EXTENSIONS = [&apos;codehilite&apos;]\nFLATPAGES_ROOT = os.path.join(APP_DIR,&apos;pages&apos;)\n#FLATPAGES_ROOT = APP_DIR+&apos;/pages&apos; \nFLATPAGES_EXTENSION =&apos;.md&apos;\n</code></pre><h2 id=\"views文件-路由\"><a href=\"#views文件-路由\" class=\"headerlink\" title=\"views文件(路由)\"></a>views文件(路由)</h2><p>从我们的blog包（<strong>init</strong>.py）里面引入初始化的实例</p>\n<pre><code>from blog import app,articles\n</code></pre><p>引入flask的模版调用函数<a href=\"\">render_template</a></p>\n<pre><code>from flask import render_template \n</code></pre><h3 id=\"主页\"><a href=\"#主页\" class=\"headerlink\" title=\"主页\"></a>主页</h3><p>为我们的根目录设置网页,</p>\n<pre><code>@app.route(&apos;/&apos;)\ndef index():\n    return render_template(&apos;index.html&apos;)\n</code></pre><p>以上代码的内容是将生成的index.html配置到’/‘根目录下，这将是你未来的主页，在网站上就是http://你的网站名.com所显示的页面.        </p>\n<h3 id=\"文章列表页\"><a href=\"#文章列表页\" class=\"headerlink\" title=\"文章列表页\"></a>文章列表页</h3><pre><code>@app.route(&apos;/posts.html&apos;)\n\ndef posts():\n    posts = [article for article in articles if &apos;date&apos; in article.meta]\n\n    #sort posts by date,descending\n</code></pre><p>其中这一句将以date为关键字来识别文档，没有date的文档不会被识别:</p>\n<pre><code>posts = [article for article in articles if &apos;date&apos; in article.meta]\n</code></pre><p>可以写成:</p>\n<pre><code>posts=[]\nfor article in articles:\n    if &apos;date&apos; in article.meta:\n        posts.append(article)\n</code></pre><p>然后将我们的文章列表按照关键字-日期(key = lambda page:page.meta[‘date’]),来进行降序排列(sorted是升序，‘reverse = True’ 使之改为降序)</p>\n<pre><code>sorted_posts = sorted(posts,reverse = True,key = lambda page:page.meta[&apos;date&apos;])\n</code></pre><p>然后调用posts.html模板，将模板中pages以我们获得的文章集合填充<br>        return render_template(‘posts.html’,pages = sorted_posts)</p>\n<h3 id=\"文章页\"><a href=\"#文章页\" class=\"headerlink\" title=\"文章页\"></a>文章页</h3><p>设置文章的路由，由于文章的路由是变量，每一篇文章都有不同的地址，所以我们使用\\<a href=\"path:path\" target=\"_blank\" rel=\"noopener\">path:path</a>以文章名作为文章地址，但是这样会使得生成的文章页和static,posts.html，index.html混在一起，很不美观。所以我们在前面加了一个/article，使得这些文章页都存在/article文件夹下，当你的博客有了自己的域名后，文章页应该像这样: <a href=\"http://www.xxxxxxx.com/article/firstpost\" target=\"_blank\" rel=\"noopener\">http://www.xxxxxxx.com/article/firstpost</a></p>\n<pre><code>@app.route(&apos;/article/&lt;path:path&gt;/&apos;)\n</code></pre><p>接着我们定义一个调用文章页模板的函数</p>\n<pre><code>def page(path):\n</code></pre><p>是否返回404错误:</p>\n<pre><code>article = articles.get_or_404(path)\n</code></pre><p>返回文章页，每篇提取的文章都将会作为文章页模板的填充，然后生成新的文章页</p>\n<pre><code>return render_template(&apos;article.html&apos;,page=article)\n</code></pre><p>完整代码如下:</p>\n<pre><code>#for view parts, we need 3 things:templates,flask,flatpages\nfrom flask import render_template #for using render_template\n#from __init__.py import app (&apos;flask&apos;), articles (&apos;flatpages&apos;)\nfrom app import app,articles\n\n\n#set the articlelist route\n@app.route(&apos;/&apos;)\ndef index():\n    return render_template(&apos;index.html&apos;)\n@app.route(&apos;/posts.html&apos;)\ndef posts():\n    #posts = [article for article in articles if &apos;date&apos; in article.meta]\n    posts=[]\n    for article in articles:\n        if &apos;date&apos; in article.meta:\n            posts.append(article)\n\n    #sort posts by date,descending\n\n    sorted_posts = sorted(posts,reverse = True,key = lambda page:page.meta[&apos;date&apos;])#Because of key is date, so in .md file date cannot be write in wrong format like Date\n    #pages may related to template index.html\n\n    return render_template(&apos;posts.html&apos;,pages = sorted_posts)\n\n\n\n#where does path come from\n@app.route(&apos;/article/&lt;path:path&gt;/&apos;)\ndef page(path):\n    #path is the filename of a page,https://github.com/ChenghaoQ/ChenghaoQ.git without the file extension\n    #e.g.&quot;first-post\n    article = articles.get_or_404(path)\n\n    #page may related to the template referal\n    #article is the data we extracted by python,and now we need to use template, in template, the name is page-&gt;\\{\\{ page.meta.title }}\n    #So page = article\n    return render_template(&apos;article.html&apos;,page=article)\n</code></pre><p>##博客文档格式及模板</p>\n<p>先看我们的文档格式例子:</p>\n<pre><code>#!markdown\ntitle: Bacon Ipsum\ndate: 2013-07-14 12:00:00\n\nBacon ipsum dolor sit amet ball tip tongue pancetta jowl sirloin rump. Chuck tail pork cow, fatback jerky hamburger pancetta leberkas pig .\n\n[Read more](http://baconipsum.com/)\n</code></pre><h3 id=\"Markdown和YAML\"><a href=\"#Markdown和YAML\" class=\"headerlink\" title=\"Markdown和YAML\"></a>Markdown和YAML</h3><ul>\n<li>Markdown:一种标记型语言，通过简单的字符将文本文档识别为html，以空白行开始，每个一个空白行都会生成一个p标签的段落</li>\n<li>YAML是一個可讀性高，用來表達資料序列的格式。在我们文档的格式中，title:和date: 都被YAML提取生成dict,然后在模板里使用和调用，YAML通过冒号’:’识别，不可有空白行间隔，否则会被markdown识别为段落</li>\n</ul>\n<h3 id=\"模板简单语法\"><a href=\"#模板简单语法\" class=\"headerlink\" title=\"模板简单语法\"></a>模板简单语法</h3><p>Jinja支持和python类似的条件语句和循环语句。</p>\n<p>if语句:</p>\n<blockquote>\n\n> \n</blockquote>\n<p>上面的代码表示</p>\n<p>for循环:</p>\n\n<p>###模板与Markdown，YAML的关系</p>\n<p>还记不记得在我们的视图文件views里面，关于文章页的路由模板调用</p>\n<pre><code>return render_template(&apos;article.html&apos;,page=article)\n</code></pre><p>这里article是我们使用Flatpage读出来的文档内容，而page则是该内容在模板里对应的名称，于是在模板里，我们使用:</p>\n<ul>\n<li> 表示标题</li>\n<li> 表示日期</li>\n<li> 表示文章正文部分</li>\n</ul>\n<h2 id=\"代码高亮\"><a href=\"#代码高亮\" class=\"headerlink\" title=\"代码高亮\"></a>代码高亮</h2><p>Markdown默认使用四个空格或者一个制表符的缩进来表示代码部分，由于使用codehilite,我们不可以用3个’`‘（反引号）来申明代码语言，但我们可以使用’:::’三个冒号来声明</p>\n<blockquote>\n<p>:::python<br>from blog import app</p>\n</blockquote>\n<p>效果如下</p>\n<pre><code>:::python\nfrom blog import app\n</code></pre><p>然后你可以对你文章中类名为codehilite的div块设置你喜爱的css样式.</p>\n<h2 id=\"添加博客首页摘要功能\"><a href=\"#添加博客首页摘要功能\" class=\"headerlink\" title=\"添加博客首页摘要功能\"></a>添加博客首页摘要功能</h2><p>目前很多静态博客都支持博客首页的文章摘要功能，Flask没有内置此功能。但是这并不难实现，因为Flask使用的Jinja模板有过滤器功能，我们可以向Flask实例注册一个自定义摘要过滤器:</p>\n<p>向Flask实例app注册一个名为excerpt的过滤器，但是我们需要先引入app.</p>\n<pre><code>from blog import app\n</code></pre><p>注册:</p>\n<pre><code>@app.template_filter(&apos;excerpt&apos;)\n</code></pre><p>excerpt过滤器调用的函数，使用python来对文章进行切片:</p>\n<pre><code>def excerpt_spliter(article):\n    sep=&apos;&lt;!--More--&gt;&apos;\n    if sep in article:\n        pass\n    else:\n        sep = &apos;\\n&apos;\n    return Markup(pygmented_markdown(article.split(sep,1)[0]))\n</code></pre><p>由于单独提取并切片后的内容只是普通文本，并不是Markdown，所以我们需要使用markdown里的markdown函数重新将其生成为HTML格式</p>\n<pre><code>from markdown import markdown\n</code></pre><p>但是如果我们想要使用pygments来高亮语法，我们需要使用flask-Flatpages内带有Codehilite扩展的Markdown</p>\n<pre><code>from flask_flatpages import pygmented_markdown\n</code></pre><p>完整代码如下</p>\n<pre><code>from markupsafe import Markup\nfrom flask_flatpages import pygmented_markdown\n\n@app.template_filter(&apos;excerpt&apos;)\ndef excerpt_spliter(article):\n    sep=&apos;&lt;!--More--&gt;&apos;\n    if sep in article:\n        pass\n    else:\n        sep = &apos;\\n&apos;\n    return Markup(pygmented_markdown(article.split(sep,1)[0]))\n</code></pre><h2 id=\"冻结器\"><a href=\"#冻结器\" class=\"headerlink\" title=\"冻结器\"></a>冻结器</h2><p>冻结器非常简单，引入blog包然后使用Freezer加载即可</p>\n<pre><code>import blog\nif __name__ ==&apos;__main__&apos;:\n    blog.freezer.freeze()\n</code></pre>","site":{"data":{}},"excerpt":"<p>这篇文章教你如何一步一步地使用搭建自己的博客。由于Flask是一个动态网页的Web框架，所以关于Flask搭建静态博客的文章少之又少。（这是Flask的神奇之处，动态静态网页都支持，日后转换时可省去不必要的麻烦)。本系列以<a href=\"\">Steven loria</a>的Flask<a href=\"\">静态博客实例</a>为基础并加以改进，增添了一些更加有用的功能并详细介绍</p>\n<p>搭建一个Flask静态博客，你需要:</p>\n<ul>\n<li>Python3 （Steven loria采用python2.x)</li>\n<li>Flask</li>\n<li>Frozen-Flask</li>\n<li>Flask-Flatpages</li>\n<li>Pygments(可选，用于代码语法高亮)</li>\n<li>Github 或 Coding</li>\n</ul>\n<p>首先来看我们的目录结构:</p>\n<h2 id=\"博客应用的目录结构\"><a href=\"#博客应用的目录结构\" class=\"headerlink\" title=\"博客应用的目录结构\"></a>博客应用的目录结构</h2><pre><code>| ---project\n│    |---blog\n│    │    ├── __init__.py\n│    │    ├── settings.py\n│    │    ├── views.py\n│    │    ├── templates\n│    │    │   ├── base.html\n│    │    │      ├── page.html\n│    │    │   └── posts.html\n│    │    ├── static\n│    │    │      ├── home.css\n│    │    │   └── home.js\n│    │--- posts\n│    │    ├── pages\n│    │    │   ├── firstpost\n│    │    │   │   ├── index.html\n│    │    ├── posts.html\n│    │    ├── index.html\n│    ├── app.py\n│    ├── freezer.py \n</code></pre>","more":"<h3 id=\"根目录project\"><a href=\"#根目录project\" class=\"headerlink\" title=\"根目录project\"></a>根目录project</h3><p>在这个目录中project是我们的根目录,根目录包含了:</p>\n<ul>\n<li>blog: 项目主要内容文件夹，包含了模板，样式，和文章文本</li>\n<li>posts: 我们运行生成器（冻结器）后生成的文件</li>\n<li>app.py: 使用Flask动态加载网页</li>\n<li>freezer.py 冻结器，生成静态网站</li>\n</ul>\n<h3 id=\"blog-生成器应用\"><a href=\"#blog-生成器应用\" class=\"headerlink\" title=\"blog - 生成器应用\"></a>blog - 生成器应用</h3><p>作为整个项目最主要的一环，blog包含以下内容:</p>\n<ul>\n<li>static: 包含了css、js、图片等静态网页所需的文件</li>\n<li>templates: 包含了网页的基础模板和子网页模板</li>\n<li><strong>init</strong>.py: 应用初始化文件</li>\n<li>settings.py: 配置文件</li>\n<li>views.py: 视图文件，为我们的网站配置了路由</li>\n</ul>\n<h2 id=\"init-py初始化我们的应用\"><a href=\"#init-py初始化我们的应用\" class=\"headerlink\" title=\"init.py初始化我们的应用\"></a><strong>init</strong>.py初始化我们的应用</h2><h4 id=\"了解init-py基本用法，请自行搜索或移步这里。\"><a href=\"#了解init-py基本用法，请自行搜索或移步这里。\" class=\"headerlink\" title=\"了解init.py基本用法，请自行搜索或移步这里。\"></a>了解<strong>init</strong>.py基本用法，请自行搜索或移步<a href=\"\">这里</a>。</h4><p>首先我们需要导入Flask,FlatPages和Frozen-Flask的模块:</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_flatpages <span class=\"keyword\">import</span> FlatPages</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_frozen <span class=\"keyword\">import</span> Freezer</span><br></pre></td></tr></table></figure>\n</code></pre><p>初始化Flask(app是初始化后的Flask实例):</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app = Flask(__name__)</span><br></pre></td></tr></table></figure>\n</code></pre><p>加载配置文件:</p>\n<pre><code>app.config.from_pyfile(&apos;settings.py&apos;)\n</code></pre><p>以创建的Flask实例app为参数初始化Flatpages,Freezer(Frozen-Flask),在这里我们可以看到app是作为参数的，所以表示Flatpages,Freezer只对被传入的app有效果:</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">articles = FlatPages(app)</span><br><span class=\"line\">freezer = Freezer(app)</span><br></pre></td></tr></table></figure>\n</code></pre><p>调用我们的视图文件views</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> blog <span class=\"keyword\">import</span> views</span><br></pre></td></tr></table></figure>\n</code></pre><p><strong>最后</strong>在这里我们调用了blog文件夹下的视图脚本views，由于这里是循环调用(<strong>init</strong>.py -&gt; 调用views -&gt;调用<strong>init</strong>.py),所以在调用views之前必须先把所有内容初始化好，否则当views调用<strong>init</strong>.py时找不到实例会报错。</p>\n<p>下面是<strong>init</strong>.py完整代码</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_flatpages <span class=\"keyword\">import</span> FlatPages</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_frozen <span class=\"keyword\">import</span> Freezer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#init the flask</span></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#load the settings from .py file</span></span><br><span class=\"line\">app.config.from_pyfile(<span class=\"string\">'settings.py'</span>)</span><br><span class=\"line\"><span class=\"comment\">#initialize the article pages</span></span><br><span class=\"line\">articles = FlatPages(app) <span class=\"comment\">#FlatPages use 'app' as arguments</span></span><br><span class=\"line\"><span class=\"comment\">#initialize the freezer</span></span><br><span class=\"line\">freezer = Freezer(app)</span><br></pre></td></tr></table></figure>\n</code></pre><h2 id=\"配置文件settings-py\"><a href=\"#配置文件settings-py\" class=\"headerlink\" title=\"配置文件settings.py\"></a>配置文件settings.py</h2><p>配置文件是我们设置整个博客程序的核心部分,它设置了我们搜索文档的路径，生成文件的位置，使用的扩展样式，调试模式是否生效等。</p>\n<p>由于我们要对路径进行修改，我们必须使用os模块来调用并修改参数的<strong>绝对路径</strong></p>\n<pre><code>import os\n</code></pre><p>并开启调试模式</p>\n<pre><code>REPO_NAME = &quot;test&quot;\nDEBUG = True\n\n\nAPP_DIR = os.path.dirname(os.path.abspath(__file__))\n</code></pre><p>编写一个返回上一级目录的函数，参数为路径</p>\n<pre><code>```Python\ndef parent_dir(path):\n    return os.path.abspath(os.path.join(path,os.pardir))\n```    \n</code></pre><p>你要将生成的文件放在根目录下的posts文件夹里面，使用FREEZER_DESTINATION来配置生成路径。</p>\n<pre><code>PROJECT_ROOT = parent_dir(APP_DIR)+&apos;/posts&apos;\nFREEZER_DESTINATION = PROJECT_ROOT\n</code></pre><p>将FREEZER_REMOVE_EXTRA_FILES设为False,否则它会在生成文件后清除项目中的其它文件(脚本白写了)..</p>\n<pre><code>FREEZER_REMOVE_EXTRA_FILES = False\n</code></pre><p>使用<a href=\"\">CodeHilite</a>作为<a href=\"\">markdown语法高亮</a>的插件，</p>\n<pre><code>FLATPAGES_MARKDOWN_EXTENSIONS = [&apos;codehilite&apos;]\n</code></pre><p>设置你的博客文档所在位置，设在/project/blog/pages/目录下:</p>\n<pre><code>FLATPAGES_ROOT = os.path.join(APP_DIR,&apos;pages&apos;)\n#FLATPAGES_ROOT = APP_DIR+&apos;/pages&apos; \n</code></pre><p>设博客文档所使用的格式为’.md’(Markdown)</p>\n<pre><code>FLATPAGES_EXTENSION =&apos;.md&apos;\n</code></pre><p>代码示例:</p>\n<pre><code>#!python\nimport os\n\nREPO_NAME = &quot;what-is-this&quot;\nDEBUG = True\n\n\nAPP_DIR = os.path.dirname(os.path.abspath(__file__))\n\ndef parent_dir(path):\n    return os.path.abspath(os.path.join(path,os.pardir))\n\nPROJECT_ROOT = parent_dir(APP_DIR)+&apos;/posts&apos;\nFREEZER_DESTINATION = PROJECT_ROOT\n\n\nFREEZER_REMOVE_EXTRA_FILES = False\n\n\nFLATPAGES_MARKDOWN_EXTENSIONS = [&apos;codehilite&apos;]\nFLATPAGES_ROOT = os.path.join(APP_DIR,&apos;pages&apos;)\n#FLATPAGES_ROOT = APP_DIR+&apos;/pages&apos; \nFLATPAGES_EXTENSION =&apos;.md&apos;\n</code></pre><h2 id=\"views文件-路由\"><a href=\"#views文件-路由\" class=\"headerlink\" title=\"views文件(路由)\"></a>views文件(路由)</h2><p>从我们的blog包（<strong>init</strong>.py）里面引入初始化的实例</p>\n<pre><code>from blog import app,articles\n</code></pre><p>引入flask的模版调用函数<a href=\"\">render_template</a></p>\n<pre><code>from flask import render_template \n</code></pre><h3 id=\"主页\"><a href=\"#主页\" class=\"headerlink\" title=\"主页\"></a>主页</h3><p>为我们的根目录设置网页,</p>\n<pre><code>@app.route(&apos;/&apos;)\ndef index():\n    return render_template(&apos;index.html&apos;)\n</code></pre><p>以上代码的内容是将生成的index.html配置到’/‘根目录下，这将是你未来的主页，在网站上就是http://你的网站名.com所显示的页面.        </p>\n<h3 id=\"文章列表页\"><a href=\"#文章列表页\" class=\"headerlink\" title=\"文章列表页\"></a>文章列表页</h3><pre><code>@app.route(&apos;/posts.html&apos;)\n\ndef posts():\n    posts = [article for article in articles if &apos;date&apos; in article.meta]\n\n    #sort posts by date,descending\n</code></pre><p>其中这一句将以date为关键字来识别文档，没有date的文档不会被识别:</p>\n<pre><code>posts = [article for article in articles if &apos;date&apos; in article.meta]\n</code></pre><p>可以写成:</p>\n<pre><code>posts=[]\nfor article in articles:\n    if &apos;date&apos; in article.meta:\n        posts.append(article)\n</code></pre><p>然后将我们的文章列表按照关键字-日期(key = lambda page:page.meta[‘date’]),来进行降序排列(sorted是升序，‘reverse = True’ 使之改为降序)</p>\n<pre><code>sorted_posts = sorted(posts,reverse = True,key = lambda page:page.meta[&apos;date&apos;])\n</code></pre><p>然后调用posts.html模板，将模板中pages以我们获得的文章集合填充<br>        return render_template(‘posts.html’,pages = sorted_posts)</p>\n<h3 id=\"文章页\"><a href=\"#文章页\" class=\"headerlink\" title=\"文章页\"></a>文章页</h3><p>设置文章的路由，由于文章的路由是变量，每一篇文章都有不同的地址，所以我们使用\\<a href=\"path:path\" target=\"_blank\" rel=\"noopener\">path:path</a>以文章名作为文章地址，但是这样会使得生成的文章页和static,posts.html，index.html混在一起，很不美观。所以我们在前面加了一个/article，使得这些文章页都存在/article文件夹下，当你的博客有了自己的域名后，文章页应该像这样: <a href=\"http://www.xxxxxxx.com/article/firstpost\" target=\"_blank\" rel=\"noopener\">http://www.xxxxxxx.com/article/firstpost</a></p>\n<pre><code>@app.route(&apos;/article/&lt;path:path&gt;/&apos;)\n</code></pre><p>接着我们定义一个调用文章页模板的函数</p>\n<pre><code>def page(path):\n</code></pre><p>是否返回404错误:</p>\n<pre><code>article = articles.get_or_404(path)\n</code></pre><p>返回文章页，每篇提取的文章都将会作为文章页模板的填充，然后生成新的文章页</p>\n<pre><code>return render_template(&apos;article.html&apos;,page=article)\n</code></pre><p>完整代码如下:</p>\n<pre><code>#for view parts, we need 3 things:templates,flask,flatpages\nfrom flask import render_template #for using render_template\n#from __init__.py import app (&apos;flask&apos;), articles (&apos;flatpages&apos;)\nfrom app import app,articles\n\n\n#set the articlelist route\n@app.route(&apos;/&apos;)\ndef index():\n    return render_template(&apos;index.html&apos;)\n@app.route(&apos;/posts.html&apos;)\ndef posts():\n    #posts = [article for article in articles if &apos;date&apos; in article.meta]\n    posts=[]\n    for article in articles:\n        if &apos;date&apos; in article.meta:\n            posts.append(article)\n\n    #sort posts by date,descending\n\n    sorted_posts = sorted(posts,reverse = True,key = lambda page:page.meta[&apos;date&apos;])#Because of key is date, so in .md file date cannot be write in wrong format like Date\n    #pages may related to template index.html\n\n    return render_template(&apos;posts.html&apos;,pages = sorted_posts)\n\n\n\n#where does path come from\n@app.route(&apos;/article/&lt;path:path&gt;/&apos;)\ndef page(path):\n    #path is the filename of a page,https://github.com/ChenghaoQ/ChenghaoQ.git without the file extension\n    #e.g.&quot;first-post\n    article = articles.get_or_404(path)\n\n    #page may related to the template referal\n    #article is the data we extracted by python,and now we need to use template, in template, the name is page-&gt;\\{\\{ page.meta.title }}\n    #So page = article\n    return render_template(&apos;article.html&apos;,page=article)\n</code></pre><p>##博客文档格式及模板</p>\n<p>先看我们的文档格式例子:</p>\n<pre><code>#!markdown\ntitle: Bacon Ipsum\ndate: 2013-07-14 12:00:00\n\nBacon ipsum dolor sit amet ball tip tongue pancetta jowl sirloin rump. Chuck tail pork cow, fatback jerky hamburger pancetta leberkas pig .\n\n[Read more](http://baconipsum.com/)\n</code></pre><h3 id=\"Markdown和YAML\"><a href=\"#Markdown和YAML\" class=\"headerlink\" title=\"Markdown和YAML\"></a>Markdown和YAML</h3><ul>\n<li>Markdown:一种标记型语言，通过简单的字符将文本文档识别为html，以空白行开始，每个一个空白行都会生成一个p标签的段落</li>\n<li>YAML是一個可讀性高，用來表達資料序列的格式。在我们文档的格式中，title:和date: 都被YAML提取生成dict,然后在模板里使用和调用，YAML通过冒号’:’识别，不可有空白行间隔，否则会被markdown识别为段落</li>\n</ul>\n<h3 id=\"模板简单语法\"><a href=\"#模板简单语法\" class=\"headerlink\" title=\"模板简单语法\"></a>模板简单语法</h3><p>Jinja支持和python类似的条件语句和循环语句。</p>\n<p>if语句:</p>\n<blockquote>\n\n> \n</blockquote>\n<p>上面的代码表示</p>\n<p>for循环:</p>\n\n<p>###模板与Markdown，YAML的关系</p>\n<p>还记不记得在我们的视图文件views里面，关于文章页的路由模板调用</p>\n<pre><code>return render_template(&apos;article.html&apos;,page=article)\n</code></pre><p>这里article是我们使用Flatpage读出来的文档内容，而page则是该内容在模板里对应的名称，于是在模板里，我们使用:</p>\n<ul>\n<li> 表示标题</li>\n<li> 表示日期</li>\n<li> 表示文章正文部分</li>\n</ul>\n<h2 id=\"代码高亮\"><a href=\"#代码高亮\" class=\"headerlink\" title=\"代码高亮\"></a>代码高亮</h2><p>Markdown默认使用四个空格或者一个制表符的缩进来表示代码部分，由于使用codehilite,我们不可以用3个’`‘（反引号）来申明代码语言，但我们可以使用’:::’三个冒号来声明</p>\n<blockquote>\n<p>:::python<br>from blog import app</p>\n</blockquote>\n<p>效果如下</p>\n<pre><code>:::python\nfrom blog import app\n</code></pre><p>然后你可以对你文章中类名为codehilite的div块设置你喜爱的css样式.</p>\n<h2 id=\"添加博客首页摘要功能\"><a href=\"#添加博客首页摘要功能\" class=\"headerlink\" title=\"添加博客首页摘要功能\"></a>添加博客首页摘要功能</h2><p>目前很多静态博客都支持博客首页的文章摘要功能，Flask没有内置此功能。但是这并不难实现，因为Flask使用的Jinja模板有过滤器功能，我们可以向Flask实例注册一个自定义摘要过滤器:</p>\n<p>向Flask实例app注册一个名为excerpt的过滤器，但是我们需要先引入app.</p>\n<pre><code>from blog import app\n</code></pre><p>注册:</p>\n<pre><code>@app.template_filter(&apos;excerpt&apos;)\n</code></pre><p>excerpt过滤器调用的函数，使用python来对文章进行切片:</p>\n<pre><code>def excerpt_spliter(article):\n    sep=&apos;&lt;!--More--&gt;&apos;\n    if sep in article:\n        pass\n    else:\n        sep = &apos;\\n&apos;\n    return Markup(pygmented_markdown(article.split(sep,1)[0]))\n</code></pre><p>由于单独提取并切片后的内容只是普通文本，并不是Markdown，所以我们需要使用markdown里的markdown函数重新将其生成为HTML格式</p>\n<pre><code>from markdown import markdown\n</code></pre><p>但是如果我们想要使用pygments来高亮语法，我们需要使用flask-Flatpages内带有Codehilite扩展的Markdown</p>\n<pre><code>from flask_flatpages import pygmented_markdown\n</code></pre><p>完整代码如下</p>\n<pre><code>from markupsafe import Markup\nfrom flask_flatpages import pygmented_markdown\n\n@app.template_filter(&apos;excerpt&apos;)\ndef excerpt_spliter(article):\n    sep=&apos;&lt;!--More--&gt;&apos;\n    if sep in article:\n        pass\n    else:\n        sep = &apos;\\n&apos;\n    return Markup(pygmented_markdown(article.split(sep,1)[0]))\n</code></pre><h2 id=\"冻结器\"><a href=\"#冻结器\" class=\"headerlink\" title=\"冻结器\"></a>冻结器</h2><p>冻结器非常简单，引入blog包然后使用Freezer加载即可</p>\n<pre><code>import blog\nif __name__ ==&apos;__main__&apos;:\n    blog.freezer.freeze()\n</code></pre>"},{"title":"Flask-FlatPages 使用手册","date":"2016-08-23T03:23:38.000Z","_content":"\n\nFlask-FlatPages是Flask应用的一个小工具，规则基于YAML和Markdown，实现了文本文档和模板的结合。用户可以通过编写‘.md’（默认）文本文档即可轻松生成网页。在与Frozen-Flask配合使用是可以更轻松地实现资源管理。\n\n（翻译自官方文档，英文版请点击[这里](https://pythonhosted.org/Flask-FlatPages/))。\n\n##<a name='1'>什么是Flask FlatPages</a>\nFlask-FlatPages 为你的[Flask](http://flask.pocoo.org/)应用提供了一系列的网页，这些网页基于文本文档(flat text files)而不是关系型数据库。\n\n- BSD licensed\n- 最新的文档在[python.org](https://pythonhosted.org/Flask-FlatPages/)\n- 源码，问题和访问请求在[Github](https://github.com/SimonSapin/Flask-FlatPages/)\n- 发行在[PyPI](https://pypi.python.org/pypi/Flask-FlatPages)\n\n<!--More-->\n\n## 安装\n\n通过其中一个以下的命令来安装本扩展\n\n    $ easy_install Flask-FlatPages\n\n如果你安装了pip\n\n    $ pip install Flask-FlatPages\n\n或者你可以通过Github获得[源代码](https://github.com/SimonSapin/Flask-FlatPages)\n\n## 配置\n\n首先你需要初始化一个**FlatPages**对象\n    from flask import Flask\n    from flask_flatpages import FlatPages\n\n    app = Flask(__name__)#初始化Flask对象\n    app.config.from_pyfile('mysettings.cfg')#引入配置文件\n    pages = FlatPages(app)通过Flask对象创建Flask实例\n\n同时你也可以稍后再通过**init_app()**引入Flask对象\n\n    #!python\n    pages = FlatPages()\n\n    def create_app(config='mysettings.cfg'):\n\tapp = Flask(__name__)\n\tapp.config.from_pyfile(config)\n\tpages.init_app(app)\n\treturn app\n\n以下为Flask-FlatPages配置选项，它们都不是必选的。\n\n\tFLATPAGES_ROOT\n\t\t查找page文件的目录，相对路径为应用根目录，同static/templates文件夹在一起，默认是pages\n\n\tFLATPAGES_EXTENSION\n\t\t查找的文件的扩展名，FLATPAGES_ROOT下无后缀文件都会被忽略。默认为.html\n\n\tFLATPAGES_ENCODING\n\t\tpage文件编码，默认为utf-8\n\n\tFLATPAGES_HTML_RENDERER\n\n\tFLAT_PAGES_MARKDOWN_EXTENSIONS\n\t\t一个列表的有着默认HTML渲染器的Markdown扩展。默认为['codehilite']\n\n\tFLAT_PAGES_AUTO_RELOAD\n\t\t是否进行页面重载。默认为只在DEBUG模式下使用。详情见[Laziness and caching]()\n\n## 使用说明\n\n当第一次使用（详见[Laziness and chaching]() 了解更多), 该扩展从文件系统加载所有的pages:一个**Page**实例是被创建在FLATPAGES_ROOT下面的后缀为FLATPAGES_EXTENSION.\n\n每一个实例都和它的路劲相关联: 通过'/'划分开的相对于pages的根目录的路径（不包含扩展).例如，一个位于C:\\myapp 有着默认设置的app实例。它的绝对路径是C:\\myapp\\pages\\lorem\\ipsum.html 但是它的路径是lorem/ipsum.\n\n每一个文件都是由[YAML](http://www.yaml.org/)映射的元数据，空白行和内容首页。\n\n    title: Hello   //page.meta.title 或者 page.meta['title']\n    published: 2010-12-22 ////page.meta.published 或者 page.meta['published']\n    \n    Hello. *World*!\n    \n    Lorem ipsum dolor sit amet,...\n\n文章主体格式默认使用[Markdown](http://daringfireball.net/projects/markdown/)， 如果使用了的话[Pygments](http://pygments.org/)也是默认选项，但是主要还是根据FLATPAGES_HTML_RENDERER里设置的值来决定。\n\n使用Pygments,你需要单独进行样式声明。你可以使用[pygments_style_defs():]()\n\n    #!python\n    @app.route('/pygments.css')\n    def pygments_css():\n        return pygments_style_defs('tango'), 200, {'Content-Type': 'text/css'}\n        \n同时在模板里面：\n\n    <link rel=\"stylesheet\" href=\"\\{\\{ url_for('pygments_css') }}\">\n\n## 使用定制Markdown扩展\n\n默认情况下，Flask-FlatPages 通过[Markdown](http://daringfireball.net/projects/markdown/)和[Pygments](http://pygments.org/)来渲染文章主体。这也意味着将 ['codehilite']扩展列表传给markdown.markdown函数。\n\n但某些时间你需要定制文件，比如说使用其他扩展或禁用默认方法，这些可以通过传递特殊配置参数来实现。\n\n    FLATPAGES_MARKDOWN_EXTENSIONS = ['codehilite', 'headerid']\n    \n或者禁用默认配置\n\n    FLATPAGES_MARKDOWN_EXTENSIONS = []\n    \n## 偷懒和缓存\n\n[FlatPages](https://pythonhosted.org/Flask-FlatPages/) 不会接触到文件系统直到需要的时候，但是如果它读取数据时，它会从磁盘一次性读取完毕。\n\n然后，pages 不会被再次加载 除非你明确地要求它使用[FlatPages.reload()]().或通过配置接受的新请求。（详见FLATPAGES_AUTO_RELOAD.)\n\n这个设计是在适配[Frozen-Flask](https://pythonhosted.org/Frozen-Flask/)(Flask生成静态网页的工具)时使用，但是即便你不用他还是可以正常工作：你修改了代码并且已经重启了生产服务器，你只需要修改页面内容就好了。同样的，在版本控制系统下这依然有效。\n\n但是如果你有很多网页并且加载时间很长，你可以让它在初始化过程中强制加载，当第一个请求被使用。\n\n    #!python\n    pages = FlatPages(app)\n    pages.get('foo') # Force loading now. foo.html may not even exist.\n\n每次全部都加载看起来很浪费，但是这种影响可以通过缓存来减轻：如果文件的修改时间并没有变化，它不会被再次重复加载，之前的Page实例也会被重复利用。\n\n同样地，YAML和Markdown的解析也是偷懒的和被缓存的：用不到的时候就不加载，没更改过就不会重复加载。\n\n\n## API\n\nclass flask_flatpages.FlatPages(app=None)\n\n> 一个page实例集合\n\n> 范例：\n\n    #!python\n    pages = FlatPages(app)\n\n    @app.route('/')\n    def index():\n\n        //Articles are pages with a publication date\n        articles = (p for p in pages if 'published' in p.meta)\n        // Show the 10 most recent articles, most recent first.\n        latest = sorted(articles, reverse=True,key=lambda p: p.meta['published'])\n        return render_template('articles.html', articles=latest[:10])\n\n    @app.route('/<path:path>/')\n    def page(path):\n\n        page = pages.get_or_404(path)\n        template = page.meta.get('template', 'flatpage.html')\n        return render_template(template, page=page)\n\n\n>   **__iter__()**\n        对所有Page实例进行迭代\n        \n>   **get(path, default=None)**\n        返回路径下的Page实例，如果没有则返回默认(default)\n        \n>   **get_or_404(path)**\n        返回路径下的Page实例，或者raise一个Flask's的404 Error如果没有\n\n>   **init_app(app)**\n        \n>   **reload()**\n        统统忘记吧（Forget all pages）.\n        所有的Page都会被重新加载\n\nclass flask_faltpages.**Page**\n\n>   单一的类来储存所有必要的关于flatpage的信息\n\n>   主要目的是通过html_renderer函数来渲染页面内容\n\n>   需要先定义一个hello.html 页面\n\n\n    # hello.html\n    title: Hello\n    published: 2010-12-22\n\n    Hello, *World*!\n\n    Lorem ipsum dolor sit amet, …\n    \n以上为test.md \n\n    #!python\n    >>> page = pages.get('hello')\n    >>> page.meta # PyYAML converts YYYY-MM-DD to a date object\n    {'title': u'Hello', 'published': datetime.date(2010, 12, 22)}\n    >>> page['title']\n    u'Hello'\n    >>> page.body\n    u'Hello, *World*!\\n\\nLorem ipsum dolor sit amet, \\u2026'\n    >>> page.html\n    u'<p>Hello, <em>World</em>!</p>\\n<p>Lorem ipsum dolor sit amet, \\u2026</p>'\n\n\n>   **__getitem__(name)**\n        使用元数据的快捷方式\n        \n>   **__html__()**\n        在模板中,\\{\\{ page }}等同于\\{\\{ page.html|safe }}.\n\n>   **html**\n        网页内容，被渲染器渲染\n>   **meta**\n        一个在页头被YAML解析的元数据的词典\n\n>   **path**= None\n        path就是pages实例获得的地方，在pages.get(path)\n        \nflask_flatpages.pygmented_markdown(text, flatpages=None)\n\n- 将markdown 文本变成HTML \n- 使用[CodeHilite](http://freewisdom.org/projects/python-markdown/CodeHilite)扩展当[Pygments](http://pygments.org/)一起使用.但是如果[Pygments](http://pygments.org/)不可以使用，就把“codehilite”从扩展列表移除。\n- 如果你需要其他的扩展，请在设置列表里面配置 FLATPAGES_MARKDOWN_EXTENSIONS.之后整个的FlatPages实例都会作为第二个参数被传递到FLATPAGES_HTML_RENDERER.\n\nflask_flatpages.pygments_style_defs(style='default')\n- Returns: [CodeHilite](http://freewisdom.org/projects/python-markdown/CodeHilite)Markdown插件的CSS定义\n- 参数： style - Pygments [style](http://pygments.org/docs/styles/) 样式\n- 只有当[Pygments](http://pygments.org/)可用的时候\n\n\n\n","source":"_posts/flask-flatpages-manual.md","raw":"---\ntitle: Flask-FlatPages 使用手册\ndate: 2016-08-23 11:23:38\ncategories: Flask\n---\n\n\nFlask-FlatPages是Flask应用的一个小工具，规则基于YAML和Markdown，实现了文本文档和模板的结合。用户可以通过编写‘.md’（默认）文本文档即可轻松生成网页。在与Frozen-Flask配合使用是可以更轻松地实现资源管理。\n\n（翻译自官方文档，英文版请点击[这里](https://pythonhosted.org/Flask-FlatPages/))。\n\n##<a name='1'>什么是Flask FlatPages</a>\nFlask-FlatPages 为你的[Flask](http://flask.pocoo.org/)应用提供了一系列的网页，这些网页基于文本文档(flat text files)而不是关系型数据库。\n\n- BSD licensed\n- 最新的文档在[python.org](https://pythonhosted.org/Flask-FlatPages/)\n- 源码，问题和访问请求在[Github](https://github.com/SimonSapin/Flask-FlatPages/)\n- 发行在[PyPI](https://pypi.python.org/pypi/Flask-FlatPages)\n\n<!--More-->\n\n## 安装\n\n通过其中一个以下的命令来安装本扩展\n\n    $ easy_install Flask-FlatPages\n\n如果你安装了pip\n\n    $ pip install Flask-FlatPages\n\n或者你可以通过Github获得[源代码](https://github.com/SimonSapin/Flask-FlatPages)\n\n## 配置\n\n首先你需要初始化一个**FlatPages**对象\n    from flask import Flask\n    from flask_flatpages import FlatPages\n\n    app = Flask(__name__)#初始化Flask对象\n    app.config.from_pyfile('mysettings.cfg')#引入配置文件\n    pages = FlatPages(app)通过Flask对象创建Flask实例\n\n同时你也可以稍后再通过**init_app()**引入Flask对象\n\n    #!python\n    pages = FlatPages()\n\n    def create_app(config='mysettings.cfg'):\n\tapp = Flask(__name__)\n\tapp.config.from_pyfile(config)\n\tpages.init_app(app)\n\treturn app\n\n以下为Flask-FlatPages配置选项，它们都不是必选的。\n\n\tFLATPAGES_ROOT\n\t\t查找page文件的目录，相对路径为应用根目录，同static/templates文件夹在一起，默认是pages\n\n\tFLATPAGES_EXTENSION\n\t\t查找的文件的扩展名，FLATPAGES_ROOT下无后缀文件都会被忽略。默认为.html\n\n\tFLATPAGES_ENCODING\n\t\tpage文件编码，默认为utf-8\n\n\tFLATPAGES_HTML_RENDERER\n\n\tFLAT_PAGES_MARKDOWN_EXTENSIONS\n\t\t一个列表的有着默认HTML渲染器的Markdown扩展。默认为['codehilite']\n\n\tFLAT_PAGES_AUTO_RELOAD\n\t\t是否进行页面重载。默认为只在DEBUG模式下使用。详情见[Laziness and caching]()\n\n## 使用说明\n\n当第一次使用（详见[Laziness and chaching]() 了解更多), 该扩展从文件系统加载所有的pages:一个**Page**实例是被创建在FLATPAGES_ROOT下面的后缀为FLATPAGES_EXTENSION.\n\n每一个实例都和它的路劲相关联: 通过'/'划分开的相对于pages的根目录的路径（不包含扩展).例如，一个位于C:\\myapp 有着默认设置的app实例。它的绝对路径是C:\\myapp\\pages\\lorem\\ipsum.html 但是它的路径是lorem/ipsum.\n\n每一个文件都是由[YAML](http://www.yaml.org/)映射的元数据，空白行和内容首页。\n\n    title: Hello   //page.meta.title 或者 page.meta['title']\n    published: 2010-12-22 ////page.meta.published 或者 page.meta['published']\n    \n    Hello. *World*!\n    \n    Lorem ipsum dolor sit amet,...\n\n文章主体格式默认使用[Markdown](http://daringfireball.net/projects/markdown/)， 如果使用了的话[Pygments](http://pygments.org/)也是默认选项，但是主要还是根据FLATPAGES_HTML_RENDERER里设置的值来决定。\n\n使用Pygments,你需要单独进行样式声明。你可以使用[pygments_style_defs():]()\n\n    #!python\n    @app.route('/pygments.css')\n    def pygments_css():\n        return pygments_style_defs('tango'), 200, {'Content-Type': 'text/css'}\n        \n同时在模板里面：\n\n    <link rel=\"stylesheet\" href=\"\\{\\{ url_for('pygments_css') }}\">\n\n## 使用定制Markdown扩展\n\n默认情况下，Flask-FlatPages 通过[Markdown](http://daringfireball.net/projects/markdown/)和[Pygments](http://pygments.org/)来渲染文章主体。这也意味着将 ['codehilite']扩展列表传给markdown.markdown函数。\n\n但某些时间你需要定制文件，比如说使用其他扩展或禁用默认方法，这些可以通过传递特殊配置参数来实现。\n\n    FLATPAGES_MARKDOWN_EXTENSIONS = ['codehilite', 'headerid']\n    \n或者禁用默认配置\n\n    FLATPAGES_MARKDOWN_EXTENSIONS = []\n    \n## 偷懒和缓存\n\n[FlatPages](https://pythonhosted.org/Flask-FlatPages/) 不会接触到文件系统直到需要的时候，但是如果它读取数据时，它会从磁盘一次性读取完毕。\n\n然后，pages 不会被再次加载 除非你明确地要求它使用[FlatPages.reload()]().或通过配置接受的新请求。（详见FLATPAGES_AUTO_RELOAD.)\n\n这个设计是在适配[Frozen-Flask](https://pythonhosted.org/Frozen-Flask/)(Flask生成静态网页的工具)时使用，但是即便你不用他还是可以正常工作：你修改了代码并且已经重启了生产服务器，你只需要修改页面内容就好了。同样的，在版本控制系统下这依然有效。\n\n但是如果你有很多网页并且加载时间很长，你可以让它在初始化过程中强制加载，当第一个请求被使用。\n\n    #!python\n    pages = FlatPages(app)\n    pages.get('foo') # Force loading now. foo.html may not even exist.\n\n每次全部都加载看起来很浪费，但是这种影响可以通过缓存来减轻：如果文件的修改时间并没有变化，它不会被再次重复加载，之前的Page实例也会被重复利用。\n\n同样地，YAML和Markdown的解析也是偷懒的和被缓存的：用不到的时候就不加载，没更改过就不会重复加载。\n\n\n## API\n\nclass flask_flatpages.FlatPages(app=None)\n\n> 一个page实例集合\n\n> 范例：\n\n    #!python\n    pages = FlatPages(app)\n\n    @app.route('/')\n    def index():\n\n        //Articles are pages with a publication date\n        articles = (p for p in pages if 'published' in p.meta)\n        // Show the 10 most recent articles, most recent first.\n        latest = sorted(articles, reverse=True,key=lambda p: p.meta['published'])\n        return render_template('articles.html', articles=latest[:10])\n\n    @app.route('/<path:path>/')\n    def page(path):\n\n        page = pages.get_or_404(path)\n        template = page.meta.get('template', 'flatpage.html')\n        return render_template(template, page=page)\n\n\n>   **__iter__()**\n        对所有Page实例进行迭代\n        \n>   **get(path, default=None)**\n        返回路径下的Page实例，如果没有则返回默认(default)\n        \n>   **get_or_404(path)**\n        返回路径下的Page实例，或者raise一个Flask's的404 Error如果没有\n\n>   **init_app(app)**\n        \n>   **reload()**\n        统统忘记吧（Forget all pages）.\n        所有的Page都会被重新加载\n\nclass flask_faltpages.**Page**\n\n>   单一的类来储存所有必要的关于flatpage的信息\n\n>   主要目的是通过html_renderer函数来渲染页面内容\n\n>   需要先定义一个hello.html 页面\n\n\n    # hello.html\n    title: Hello\n    published: 2010-12-22\n\n    Hello, *World*!\n\n    Lorem ipsum dolor sit amet, …\n    \n以上为test.md \n\n    #!python\n    >>> page = pages.get('hello')\n    >>> page.meta # PyYAML converts YYYY-MM-DD to a date object\n    {'title': u'Hello', 'published': datetime.date(2010, 12, 22)}\n    >>> page['title']\n    u'Hello'\n    >>> page.body\n    u'Hello, *World*!\\n\\nLorem ipsum dolor sit amet, \\u2026'\n    >>> page.html\n    u'<p>Hello, <em>World</em>!</p>\\n<p>Lorem ipsum dolor sit amet, \\u2026</p>'\n\n\n>   **__getitem__(name)**\n        使用元数据的快捷方式\n        \n>   **__html__()**\n        在模板中,\\{\\{ page }}等同于\\{\\{ page.html|safe }}.\n\n>   **html**\n        网页内容，被渲染器渲染\n>   **meta**\n        一个在页头被YAML解析的元数据的词典\n\n>   **path**= None\n        path就是pages实例获得的地方，在pages.get(path)\n        \nflask_flatpages.pygmented_markdown(text, flatpages=None)\n\n- 将markdown 文本变成HTML \n- 使用[CodeHilite](http://freewisdom.org/projects/python-markdown/CodeHilite)扩展当[Pygments](http://pygments.org/)一起使用.但是如果[Pygments](http://pygments.org/)不可以使用，就把“codehilite”从扩展列表移除。\n- 如果你需要其他的扩展，请在设置列表里面配置 FLATPAGES_MARKDOWN_EXTENSIONS.之后整个的FlatPages实例都会作为第二个参数被传递到FLATPAGES_HTML_RENDERER.\n\nflask_flatpages.pygments_style_defs(style='default')\n- Returns: [CodeHilite](http://freewisdom.org/projects/python-markdown/CodeHilite)Markdown插件的CSS定义\n- 参数： style - Pygments [style](http://pygments.org/docs/styles/) 样式\n- 只有当[Pygments](http://pygments.org/)可用的时候\n\n\n\n","slug":"flask-flatpages-manual","published":1,"updated":"2018-05-31T01:57:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiqvlnwh0011glu3gdgcakh5","content":"<p>Flask-FlatPages是Flask应用的一个小工具，规则基于YAML和Markdown，实现了文本文档和模板的结合。用户可以通过编写‘.md’（默认）文本文档即可轻松生成网页。在与Frozen-Flask配合使用是可以更轻松地实现资源管理。</p>\n<p>（翻译自官方文档，英文版请点击<a href=\"https://pythonhosted.org/Flask-FlatPages/\" target=\"_blank\" rel=\"noopener\">这里</a>)。</p>\n<p>##<a name=\"1\">什么是Flask FlatPages</a><br>Flask-FlatPages 为你的<a href=\"http://flask.pocoo.org/\" target=\"_blank\" rel=\"noopener\">Flask</a>应用提供了一系列的网页，这些网页基于文本文档(flat text files)而不是关系型数据库。</p>\n<ul>\n<li>BSD licensed</li>\n<li>最新的文档在<a href=\"https://pythonhosted.org/Flask-FlatPages/\" target=\"_blank\" rel=\"noopener\">python.org</a></li>\n<li>源码，问题和访问请求在<a href=\"https://github.com/SimonSapin/Flask-FlatPages/\" target=\"_blank\" rel=\"noopener\">Github</a></li>\n<li>发行在<a href=\"https://pypi.python.org/pypi/Flask-FlatPages\" target=\"_blank\" rel=\"noopener\">PyPI</a></li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>通过其中一个以下的命令来安装本扩展</p>\n<pre><code>$ easy_install Flask-FlatPages\n</code></pre><p>如果你安装了pip</p>\n<pre><code>$ pip install Flask-FlatPages\n</code></pre><p>或者你可以通过Github获得<a href=\"https://github.com/SimonSapin/Flask-FlatPages\" target=\"_blank\" rel=\"noopener\">源代码</a></p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>首先你需要初始化一个<strong>FlatPages</strong>对象<br>    from flask import Flask<br>    from flask_flatpages import FlatPages</p>\n<pre><code>app = Flask(__name__)#初始化Flask对象\napp.config.from_pyfile(&apos;mysettings.cfg&apos;)#引入配置文件\npages = FlatPages(app)通过Flask对象创建Flask实例\n</code></pre><p>同时你也可以稍后再通过<strong>init_app()</strong>引入Flask对象</p>\n<pre><code>#!python\npages = FlatPages()\n\ndef create_app(config=&apos;mysettings.cfg&apos;):\napp = Flask(__name__)\napp.config.from_pyfile(config)\npages.init_app(app)\nreturn app\n</code></pre><p>以下为Flask-FlatPages配置选项，它们都不是必选的。</p>\n<pre><code>FLATPAGES_ROOT\n    查找page文件的目录，相对路径为应用根目录，同static/templates文件夹在一起，默认是pages\n\nFLATPAGES_EXTENSION\n    查找的文件的扩展名，FLATPAGES_ROOT下无后缀文件都会被忽略。默认为.html\n\nFLATPAGES_ENCODING\n    page文件编码，默认为utf-8\n\nFLATPAGES_HTML_RENDERER\n\nFLAT_PAGES_MARKDOWN_EXTENSIONS\n    一个列表的有着默认HTML渲染器的Markdown扩展。默认为[&apos;codehilite&apos;]\n\nFLAT_PAGES_AUTO_RELOAD\n    是否进行页面重载。默认为只在DEBUG模式下使用。详情见[Laziness and caching]()\n</code></pre><h2 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h2><p>当第一次使用（详见<a href=\"\">Laziness and chaching</a> 了解更多), 该扩展从文件系统加载所有的pages:一个<strong>Page</strong>实例是被创建在FLATPAGES_ROOT下面的后缀为FLATPAGES_EXTENSION.</p>\n<p>每一个实例都和它的路劲相关联: 通过’/‘划分开的相对于pages的根目录的路径（不包含扩展).例如，一个位于C:\\myapp 有着默认设置的app实例。它的绝对路径是C:\\myapp\\pages\\lorem\\ipsum.html 但是它的路径是lorem/ipsum.</p>\n<p>每一个文件都是由<a href=\"http://www.yaml.org/\" target=\"_blank\" rel=\"noopener\">YAML</a>映射的元数据，空白行和内容首页。</p>\n<pre><code>title: Hello   //page.meta.title 或者 page.meta[&apos;title&apos;]\npublished: 2010-12-22 ////page.meta.published 或者 page.meta[&apos;published&apos;]\n\nHello. *World*!\n\nLorem ipsum dolor sit amet,...\n</code></pre><p>文章主体格式默认使用<a href=\"http://daringfireball.net/projects/markdown/\" target=\"_blank\" rel=\"noopener\">Markdown</a>， 如果使用了的话<a href=\"http://pygments.org/\" target=\"_blank\" rel=\"noopener\">Pygments</a>也是默认选项，但是主要还是根据FLATPAGES_HTML_RENDERER里设置的值来决定。</p>\n<p>使用Pygments,你需要单独进行样式声明。你可以使用<a href=\"\">pygments_style_defs():</a></p>\n<pre><code>#!python\n@app.route(&apos;/pygments.css&apos;)\ndef pygments_css():\n    return pygments_style_defs(&apos;tango&apos;), 200, {&apos;Content-Type&apos;: &apos;text/css&apos;}\n</code></pre><p>同时在模板里面：</p>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;\\{\\{ url_for(&apos;pygments_css&apos;) }}&quot;&gt;\n</code></pre><h2 id=\"使用定制Markdown扩展\"><a href=\"#使用定制Markdown扩展\" class=\"headerlink\" title=\"使用定制Markdown扩展\"></a>使用定制Markdown扩展</h2><p>默认情况下，Flask-FlatPages 通过<a href=\"http://daringfireball.net/projects/markdown/\" target=\"_blank\" rel=\"noopener\">Markdown</a>和<a href=\"http://pygments.org/\" target=\"_blank\" rel=\"noopener\">Pygments</a>来渲染文章主体。这也意味着将 [‘codehilite’]扩展列表传给markdown.markdown函数。</p>\n<p>但某些时间你需要定制文件，比如说使用其他扩展或禁用默认方法，这些可以通过传递特殊配置参数来实现。</p>\n<pre><code>FLATPAGES_MARKDOWN_EXTENSIONS = [&apos;codehilite&apos;, &apos;headerid&apos;]\n</code></pre><p>或者禁用默认配置</p>\n<pre><code>FLATPAGES_MARKDOWN_EXTENSIONS = []\n</code></pre><h2 id=\"偷懒和缓存\"><a href=\"#偷懒和缓存\" class=\"headerlink\" title=\"偷懒和缓存\"></a>偷懒和缓存</h2><p><a href=\"https://pythonhosted.org/Flask-FlatPages/\" target=\"_blank\" rel=\"noopener\">FlatPages</a> 不会接触到文件系统直到需要的时候，但是如果它读取数据时，它会从磁盘一次性读取完毕。</p>\n<p>然后，pages 不会被再次加载 除非你明确地要求它使用<a href=\"\">FlatPages.reload()</a>.或通过配置接受的新请求。（详见FLATPAGES_AUTO_RELOAD.)</p>\n<p>这个设计是在适配<a href=\"https://pythonhosted.org/Frozen-Flask/\" target=\"_blank\" rel=\"noopener\">Frozen-Flask</a>(Flask生成静态网页的工具)时使用，但是即便你不用他还是可以正常工作：你修改了代码并且已经重启了生产服务器，你只需要修改页面内容就好了。同样的，在版本控制系统下这依然有效。</p>\n<p>但是如果你有很多网页并且加载时间很长，你可以让它在初始化过程中强制加载，当第一个请求被使用。</p>\n<pre><code>#!python\npages = FlatPages(app)\npages.get(&apos;foo&apos;) # Force loading now. foo.html may not even exist.\n</code></pre><p>每次全部都加载看起来很浪费，但是这种影响可以通过缓存来减轻：如果文件的修改时间并没有变化，它不会被再次重复加载，之前的Page实例也会被重复利用。</p>\n<p>同样地，YAML和Markdown的解析也是偷懒的和被缓存的：用不到的时候就不加载，没更改过就不会重复加载。</p>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><p>class flask_flatpages.FlatPages(app=None)</p>\n<blockquote>\n<p>一个page实例集合</p>\n</blockquote>\n<blockquote>\n<p>范例：</p>\n</blockquote>\n<pre><code>#!python\npages = FlatPages(app)\n\n@app.route(&apos;/&apos;)\ndef index():\n\n    //Articles are pages with a publication date\n    articles = (p for p in pages if &apos;published&apos; in p.meta)\n    // Show the 10 most recent articles, most recent first.\n    latest = sorted(articles, reverse=True,key=lambda p: p.meta[&apos;published&apos;])\n    return render_template(&apos;articles.html&apos;, articles=latest[:10])\n\n@app.route(&apos;/&lt;path:path&gt;/&apos;)\ndef page(path):\n\n    page = pages.get_or_404(path)\n    template = page.meta.get(&apos;template&apos;, &apos;flatpage.html&apos;)\n    return render_template(template, page=page)\n</code></pre><blockquote>\n<p>  <strong><strong>iter</strong>()</strong><br>        对所有Page实例进行迭代</p>\n</blockquote>\n<blockquote>\n<p>  <strong>get(path, default=None)</strong><br>        返回路径下的Page实例，如果没有则返回默认(default)</p>\n</blockquote>\n<blockquote>\n<p>  <strong>get_or_404(path)</strong><br>        返回路径下的Page实例，或者raise一个Flask’s的404 Error如果没有</p>\n</blockquote>\n<blockquote>\n<p>  <strong>init_app(app)</strong></p>\n</blockquote>\n<blockquote>\n<p>  <strong>reload()</strong><br>        统统忘记吧（Forget all pages）.<br>        所有的Page都会被重新加载</p>\n</blockquote>\n<p>class flask_faltpages.<strong>Page</strong></p>\n<blockquote>\n<p>  单一的类来储存所有必要的关于flatpage的信息</p>\n</blockquote>\n<blockquote>\n<p>  主要目的是通过html_renderer函数来渲染页面内容</p>\n</blockquote>\n<blockquote>\n<p>  需要先定义一个hello.html 页面</p>\n</blockquote>\n<pre><code># hello.html\ntitle: Hello\npublished: 2010-12-22\n\nHello, *World*!\n\nLorem ipsum dolor sit amet, …\n</code></pre><p>以上为test.md </p>\n<pre><code>#!python\n&gt;&gt;&gt; page = pages.get(&apos;hello&apos;)\n&gt;&gt;&gt; page.meta # PyYAML converts YYYY-MM-DD to a date object\n{&apos;title&apos;: u&apos;Hello&apos;, &apos;published&apos;: datetime.date(2010, 12, 22)}\n&gt;&gt;&gt; page[&apos;title&apos;]\nu&apos;Hello&apos;\n&gt;&gt;&gt; page.body\nu&apos;Hello, *World*!\\n\\nLorem ipsum dolor sit amet, \\u2026&apos;\n&gt;&gt;&gt; page.html\nu&apos;&lt;p&gt;Hello, &lt;em&gt;World&lt;/em&gt;!&lt;/p&gt;\\n&lt;p&gt;Lorem ipsum dolor sit amet, \\u2026&lt;/p&gt;&apos;\n</code></pre><blockquote>\n<p>  <strong><strong>getitem</strong>(name)</strong><br>        使用元数据的快捷方式</p>\n</blockquote>\n<blockquote>\n<p>  <strong><strong>html</strong>()</strong><br>        在模板中,等同于.</p>\n</blockquote>\n<blockquote>\n<p>  <strong>html</strong><br>        网页内容，被渲染器渲染<br>  <strong>meta</strong><br>        一个在页头被YAML解析的元数据的词典</p>\n</blockquote>\n<blockquote>\n<p>  <strong>path</strong>= None<br>        path就是pages实例获得的地方，在pages.get(path)</p>\n</blockquote>\n<p>flask_flatpages.pygmented_markdown(text, flatpages=None)</p>\n<ul>\n<li>将markdown 文本变成HTML </li>\n<li>使用<a href=\"http://freewisdom.org/projects/python-markdown/CodeHilite\" target=\"_blank\" rel=\"noopener\">CodeHilite</a>扩展当<a href=\"http://pygments.org/\" target=\"_blank\" rel=\"noopener\">Pygments</a>一起使用.但是如果<a href=\"http://pygments.org/\" target=\"_blank\" rel=\"noopener\">Pygments</a>不可以使用，就把“codehilite”从扩展列表移除。</li>\n<li>如果你需要其他的扩展，请在设置列表里面配置 FLATPAGES_MARKDOWN_EXTENSIONS.之后整个的FlatPages实例都会作为第二个参数被传递到FLATPAGES_HTML_RENDERER.</li>\n</ul>\n<p>flask_flatpages.pygments_style_defs(style=’default’)</p>\n<ul>\n<li>Returns: <a href=\"http://freewisdom.org/projects/python-markdown/CodeHilite\" target=\"_blank\" rel=\"noopener\">CodeHilite</a>Markdown插件的CSS定义</li>\n<li>参数： style - Pygments <a href=\"http://pygments.org/docs/styles/\" target=\"_blank\" rel=\"noopener\">style</a> 样式</li>\n<li>只有当<a href=\"http://pygments.org/\" target=\"_blank\" rel=\"noopener\">Pygments</a>可用的时候</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Flask-FlatPages是Flask应用的一个小工具，规则基于YAML和Markdown，实现了文本文档和模板的结合。用户可以通过编写‘.md’（默认）文本文档即可轻松生成网页。在与Frozen-Flask配合使用是可以更轻松地实现资源管理。</p>\n<p>（翻译自官方文档，英文版请点击<a href=\"https://pythonhosted.org/Flask-FlatPages/\" target=\"_blank\" rel=\"noopener\">这里</a>)。</p>\n<p>##<a name=\"1\">什么是Flask FlatPages</a><br>Flask-FlatPages 为你的<a href=\"http://flask.pocoo.org/\" target=\"_blank\" rel=\"noopener\">Flask</a>应用提供了一系列的网页，这些网页基于文本文档(flat text files)而不是关系型数据库。</p>\n<ul>\n<li>BSD licensed</li>\n<li>最新的文档在<a href=\"https://pythonhosted.org/Flask-FlatPages/\" target=\"_blank\" rel=\"noopener\">python.org</a></li>\n<li>源码，问题和访问请求在<a href=\"https://github.com/SimonSapin/Flask-FlatPages/\" target=\"_blank\" rel=\"noopener\">Github</a></li>\n<li>发行在<a href=\"https://pypi.python.org/pypi/Flask-FlatPages\" target=\"_blank\" rel=\"noopener\">PyPI</a></li>\n</ul>","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>通过其中一个以下的命令来安装本扩展</p>\n<pre><code>$ easy_install Flask-FlatPages\n</code></pre><p>如果你安装了pip</p>\n<pre><code>$ pip install Flask-FlatPages\n</code></pre><p>或者你可以通过Github获得<a href=\"https://github.com/SimonSapin/Flask-FlatPages\" target=\"_blank\" rel=\"noopener\">源代码</a></p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>首先你需要初始化一个<strong>FlatPages</strong>对象<br>    from flask import Flask<br>    from flask_flatpages import FlatPages</p>\n<pre><code>app = Flask(__name__)#初始化Flask对象\napp.config.from_pyfile(&apos;mysettings.cfg&apos;)#引入配置文件\npages = FlatPages(app)通过Flask对象创建Flask实例\n</code></pre><p>同时你也可以稍后再通过<strong>init_app()</strong>引入Flask对象</p>\n<pre><code>#!python\npages = FlatPages()\n\ndef create_app(config=&apos;mysettings.cfg&apos;):\napp = Flask(__name__)\napp.config.from_pyfile(config)\npages.init_app(app)\nreturn app\n</code></pre><p>以下为Flask-FlatPages配置选项，它们都不是必选的。</p>\n<pre><code>FLATPAGES_ROOT\n    查找page文件的目录，相对路径为应用根目录，同static/templates文件夹在一起，默认是pages\n\nFLATPAGES_EXTENSION\n    查找的文件的扩展名，FLATPAGES_ROOT下无后缀文件都会被忽略。默认为.html\n\nFLATPAGES_ENCODING\n    page文件编码，默认为utf-8\n\nFLATPAGES_HTML_RENDERER\n\nFLAT_PAGES_MARKDOWN_EXTENSIONS\n    一个列表的有着默认HTML渲染器的Markdown扩展。默认为[&apos;codehilite&apos;]\n\nFLAT_PAGES_AUTO_RELOAD\n    是否进行页面重载。默认为只在DEBUG模式下使用。详情见[Laziness and caching]()\n</code></pre><h2 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h2><p>当第一次使用（详见<a href=\"\">Laziness and chaching</a> 了解更多), 该扩展从文件系统加载所有的pages:一个<strong>Page</strong>实例是被创建在FLATPAGES_ROOT下面的后缀为FLATPAGES_EXTENSION.</p>\n<p>每一个实例都和它的路劲相关联: 通过’/‘划分开的相对于pages的根目录的路径（不包含扩展).例如，一个位于C:\\myapp 有着默认设置的app实例。它的绝对路径是C:\\myapp\\pages\\lorem\\ipsum.html 但是它的路径是lorem/ipsum.</p>\n<p>每一个文件都是由<a href=\"http://www.yaml.org/\" target=\"_blank\" rel=\"noopener\">YAML</a>映射的元数据，空白行和内容首页。</p>\n<pre><code>title: Hello   //page.meta.title 或者 page.meta[&apos;title&apos;]\npublished: 2010-12-22 ////page.meta.published 或者 page.meta[&apos;published&apos;]\n\nHello. *World*!\n\nLorem ipsum dolor sit amet,...\n</code></pre><p>文章主体格式默认使用<a href=\"http://daringfireball.net/projects/markdown/\" target=\"_blank\" rel=\"noopener\">Markdown</a>， 如果使用了的话<a href=\"http://pygments.org/\" target=\"_blank\" rel=\"noopener\">Pygments</a>也是默认选项，但是主要还是根据FLATPAGES_HTML_RENDERER里设置的值来决定。</p>\n<p>使用Pygments,你需要单独进行样式声明。你可以使用<a href=\"\">pygments_style_defs():</a></p>\n<pre><code>#!python\n@app.route(&apos;/pygments.css&apos;)\ndef pygments_css():\n    return pygments_style_defs(&apos;tango&apos;), 200, {&apos;Content-Type&apos;: &apos;text/css&apos;}\n</code></pre><p>同时在模板里面：</p>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;\\{\\{ url_for(&apos;pygments_css&apos;) }}&quot;&gt;\n</code></pre><h2 id=\"使用定制Markdown扩展\"><a href=\"#使用定制Markdown扩展\" class=\"headerlink\" title=\"使用定制Markdown扩展\"></a>使用定制Markdown扩展</h2><p>默认情况下，Flask-FlatPages 通过<a href=\"http://daringfireball.net/projects/markdown/\" target=\"_blank\" rel=\"noopener\">Markdown</a>和<a href=\"http://pygments.org/\" target=\"_blank\" rel=\"noopener\">Pygments</a>来渲染文章主体。这也意味着将 [‘codehilite’]扩展列表传给markdown.markdown函数。</p>\n<p>但某些时间你需要定制文件，比如说使用其他扩展或禁用默认方法，这些可以通过传递特殊配置参数来实现。</p>\n<pre><code>FLATPAGES_MARKDOWN_EXTENSIONS = [&apos;codehilite&apos;, &apos;headerid&apos;]\n</code></pre><p>或者禁用默认配置</p>\n<pre><code>FLATPAGES_MARKDOWN_EXTENSIONS = []\n</code></pre><h2 id=\"偷懒和缓存\"><a href=\"#偷懒和缓存\" class=\"headerlink\" title=\"偷懒和缓存\"></a>偷懒和缓存</h2><p><a href=\"https://pythonhosted.org/Flask-FlatPages/\" target=\"_blank\" rel=\"noopener\">FlatPages</a> 不会接触到文件系统直到需要的时候，但是如果它读取数据时，它会从磁盘一次性读取完毕。</p>\n<p>然后，pages 不会被再次加载 除非你明确地要求它使用<a href=\"\">FlatPages.reload()</a>.或通过配置接受的新请求。（详见FLATPAGES_AUTO_RELOAD.)</p>\n<p>这个设计是在适配<a href=\"https://pythonhosted.org/Frozen-Flask/\" target=\"_blank\" rel=\"noopener\">Frozen-Flask</a>(Flask生成静态网页的工具)时使用，但是即便你不用他还是可以正常工作：你修改了代码并且已经重启了生产服务器，你只需要修改页面内容就好了。同样的，在版本控制系统下这依然有效。</p>\n<p>但是如果你有很多网页并且加载时间很长，你可以让它在初始化过程中强制加载，当第一个请求被使用。</p>\n<pre><code>#!python\npages = FlatPages(app)\npages.get(&apos;foo&apos;) # Force loading now. foo.html may not even exist.\n</code></pre><p>每次全部都加载看起来很浪费，但是这种影响可以通过缓存来减轻：如果文件的修改时间并没有变化，它不会被再次重复加载，之前的Page实例也会被重复利用。</p>\n<p>同样地，YAML和Markdown的解析也是偷懒的和被缓存的：用不到的时候就不加载，没更改过就不会重复加载。</p>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><p>class flask_flatpages.FlatPages(app=None)</p>\n<blockquote>\n<p>一个page实例集合</p>\n</blockquote>\n<blockquote>\n<p>范例：</p>\n</blockquote>\n<pre><code>#!python\npages = FlatPages(app)\n\n@app.route(&apos;/&apos;)\ndef index():\n\n    //Articles are pages with a publication date\n    articles = (p for p in pages if &apos;published&apos; in p.meta)\n    // Show the 10 most recent articles, most recent first.\n    latest = sorted(articles, reverse=True,key=lambda p: p.meta[&apos;published&apos;])\n    return render_template(&apos;articles.html&apos;, articles=latest[:10])\n\n@app.route(&apos;/&lt;path:path&gt;/&apos;)\ndef page(path):\n\n    page = pages.get_or_404(path)\n    template = page.meta.get(&apos;template&apos;, &apos;flatpage.html&apos;)\n    return render_template(template, page=page)\n</code></pre><blockquote>\n<p>  <strong><strong>iter</strong>()</strong><br>        对所有Page实例进行迭代</p>\n</blockquote>\n<blockquote>\n<p>  <strong>get(path, default=None)</strong><br>        返回路径下的Page实例，如果没有则返回默认(default)</p>\n</blockquote>\n<blockquote>\n<p>  <strong>get_or_404(path)</strong><br>        返回路径下的Page实例，或者raise一个Flask’s的404 Error如果没有</p>\n</blockquote>\n<blockquote>\n<p>  <strong>init_app(app)</strong></p>\n</blockquote>\n<blockquote>\n<p>  <strong>reload()</strong><br>        统统忘记吧（Forget all pages）.<br>        所有的Page都会被重新加载</p>\n</blockquote>\n<p>class flask_faltpages.<strong>Page</strong></p>\n<blockquote>\n<p>  单一的类来储存所有必要的关于flatpage的信息</p>\n</blockquote>\n<blockquote>\n<p>  主要目的是通过html_renderer函数来渲染页面内容</p>\n</blockquote>\n<blockquote>\n<p>  需要先定义一个hello.html 页面</p>\n</blockquote>\n<pre><code># hello.html\ntitle: Hello\npublished: 2010-12-22\n\nHello, *World*!\n\nLorem ipsum dolor sit amet, …\n</code></pre><p>以上为test.md </p>\n<pre><code>#!python\n&gt;&gt;&gt; page = pages.get(&apos;hello&apos;)\n&gt;&gt;&gt; page.meta # PyYAML converts YYYY-MM-DD to a date object\n{&apos;title&apos;: u&apos;Hello&apos;, &apos;published&apos;: datetime.date(2010, 12, 22)}\n&gt;&gt;&gt; page[&apos;title&apos;]\nu&apos;Hello&apos;\n&gt;&gt;&gt; page.body\nu&apos;Hello, *World*!\\n\\nLorem ipsum dolor sit amet, \\u2026&apos;\n&gt;&gt;&gt; page.html\nu&apos;&lt;p&gt;Hello, &lt;em&gt;World&lt;/em&gt;!&lt;/p&gt;\\n&lt;p&gt;Lorem ipsum dolor sit amet, \\u2026&lt;/p&gt;&apos;\n</code></pre><blockquote>\n<p>  <strong><strong>getitem</strong>(name)</strong><br>        使用元数据的快捷方式</p>\n</blockquote>\n<blockquote>\n<p>  <strong><strong>html</strong>()</strong><br>        在模板中,等同于.</p>\n</blockquote>\n<blockquote>\n<p>  <strong>html</strong><br>        网页内容，被渲染器渲染<br>  <strong>meta</strong><br>        一个在页头被YAML解析的元数据的词典</p>\n</blockquote>\n<blockquote>\n<p>  <strong>path</strong>= None<br>        path就是pages实例获得的地方，在pages.get(path)</p>\n</blockquote>\n<p>flask_flatpages.pygmented_markdown(text, flatpages=None)</p>\n<ul>\n<li>将markdown 文本变成HTML </li>\n<li>使用<a href=\"http://freewisdom.org/projects/python-markdown/CodeHilite\" target=\"_blank\" rel=\"noopener\">CodeHilite</a>扩展当<a href=\"http://pygments.org/\" target=\"_blank\" rel=\"noopener\">Pygments</a>一起使用.但是如果<a href=\"http://pygments.org/\" target=\"_blank\" rel=\"noopener\">Pygments</a>不可以使用，就把“codehilite”从扩展列表移除。</li>\n<li>如果你需要其他的扩展，请在设置列表里面配置 FLATPAGES_MARKDOWN_EXTENSIONS.之后整个的FlatPages实例都会作为第二个参数被传递到FLATPAGES_HTML_RENDERER.</li>\n</ul>\n<p>flask_flatpages.pygments_style_defs(style=’default’)</p>\n<ul>\n<li>Returns: <a href=\"http://freewisdom.org/projects/python-markdown/CodeHilite\" target=\"_blank\" rel=\"noopener\">CodeHilite</a>Markdown插件的CSS定义</li>\n<li>参数： style - Pygments <a href=\"http://pygments.org/docs/styles/\" target=\"_blank\" rel=\"noopener\">style</a> 样式</li>\n<li>只有当<a href=\"http://pygments.org/\" target=\"_blank\" rel=\"noopener\">Pygments</a>可用的时候</li>\n</ul>"},{"title":"Frozen-Flask说明","date":"2016-08-15T03:36:50.000Z","_content":"\nFrozen-Flask（原名Flask-Static)是一个基于[Flask]()的Static(静态)网页生成器。它可以轻松地冻结你现在已有的Flask项目，生成一系列的静态网页（例如：静态博客),然后直接搭载在HTTP服务器上而不需要安装其他的软件。相对于动态网页，Frozen-Flask生成的网站更易于托管，比如Github-Pages或Coding-Pages上面。同时当你的网站足够庞大以至于静态网页不能满足你的需求时，与其他静态网页生成器相比，基于Flask的Frozen-Flask可以让你的网站更快捷地迁移到动态的Flask上面。本文带你进一步了解这个神奇的工具。\n\n（翻译自官方文档，英文版请点击[这里](http://pythonhosted.org/Frozen-Flask/#flask_frozen.relative_url_for)\n\n## 安装 \n\n通过以下其中一个安装本扩展\n\n    $ easy_install Frozen-Flask\n    \n<!--More-->\n    \n如果你安装了pip组件\n\n    $ pip install Frozen-Flask\n    \n或者你可以从Github获得[源代码](https://github.com/SimonSapin/Frozen-Flask)\n\n## 上下文 \n\n这篇文档假设你已经有一个工作中的[Flask](http://flask.pocoo.org/)应用。你可以通过开发服务器运行测试\n\n\n    from myapplication import app\n    app.run(debug=True)\n\nFrozen-Flask用于部署：取代了安装python, WSGI服务器和Flask，你可以使用Frozen-Flask 来冻结你的应用并且可以只部署静态HTML文件在你的服务器上。\n\n\n## 开始吧 \n\n创建一个[冻结器]()实例和你的app对象放在一起，然后调用它的[freeze()]()方法。将其放入一个freeze.py的脚本文件(名字无所谓其实)\n\n\n    #!python\n    from flask_frozen import Freezer\n    from myapplication import app\n\n    freezer = Freezer(app)\n\n    if __name__ == '__main__':\n        freezer.freeze()\n\n\n这样会在你的static和templates目录旁边创建一个build文件夹，里面放着创建出来的静态文件。\n\n\n\n    Note\n\n    Frozen-Flask considers it “owns” its build directory. By default, it will silently overwrite files in that directory, and remove those it did not create.\n\n    The [configuration]() allows you to change the destination directory, or control what files are removed if at all.\n\n\nThis build will be most likely be partial since Frozen-Flask can only guess so much about your application.\n\n## 寻找URL地址\n\nFrozen-Flask 通过在WSGI层模拟请求并且写出返回信息给相应的文件。所以它需要知道在你的应用里面都有哪些URL链接。\n\n下列URLs可以被自动找到\n- 被你的Flask应用或者它的[蓝图](http://flask.pocoo.org/docs/0.11/blueprints/)控制的静态文件\n- 没有变量的URL地址，如果它们接受GET方法\n- 0.6版新功能: 通过[flask.url_for()](http://flask.pocoo.org/docs/0.11/api/#flask.url_for)请求的地址\n\n这意味着如果你的应用在URL地址（没有参数）有索引页并且其他所有的相关页面可以通过那个地址递归调用url_for()找到，那么Frozen-Flask就可以全部自动地找到。\n\n否则，你需要编写URL生成器\n\n## URL生成器 \n\n让我们假设你的应用看上去像这样\n\n    #!python\n    @app.route('/')\n    def products_list():\n        return render_template('index.html', products=models.Product.all())\n\n    @app.route('/product_<int:product_id>/')\n    def product_details():\n        product = models.Product.get_or_404(id=product_id)\n        return render_template('product.html', product=product)\n\n\n\n如果因为某些原因，一些生产出来的页面不会被链接（或者它们不是通过url_for()调用）, Frozen-Flask 不会找到它们。\n\n\n为了告诉Frozen-Flask这些网页，在调用[freeze()]()之前写一个URL生成器并且将它放在[Freezer]()实例里面\n\n    #!python\n    @freezer.register_generator\n    def product_details():\n        for product in models.Product.all():\n            yield {'product_id': product.id}\n\n\n\nFrozen-Flask 会调用url_for(endpoint,**values),来找到URL地址，endpoint是生成器函数的名字，values是被生成器调用的每一个dict字典\n\n\n你可以指定一个不同的endpoint通过一个(endpoint,values)元组而不仅仅是values，或者你可以通过传递url_for 并且单单产生URLs字符串\n\n另外，生成器函数不需要使用[Python generators](https://docs.python.org/3/glossary.html#term-generator)来使用yield，它们可以是可以被调用的 并且返回可迭代的对象\n \n下面的例子都是一样的\n\n    #!python\n    @freezer.register_generator\n    def product_details():  # endpoint defaults to the function name\n        # `values` dicts\n        yield {'product_id': '1'}\n        yield {'product_id': '2'}\n\n    @freezer.register_generator\n    def product_url_generator():  # Some other function name\n        # `(endpoint, values)` tuples\n        yield 'product_details', {'product_id': '1'}\n        yield 'product_details', {'product_id': '2'}\n\n    @freezer.register_generator\n    def product_url_generator():\n        # URLs as strings\n        yield '/product_1/'\n        yield '/product_2/'\n\n    @freezer.register_generator\n    def product_url_generator():\n        # Return a list. (Any iterable type will do.)\n        return [\n            '/product_1/',\n            # Mixing forms works too.\n            ('product_details', {'product_id': '2'}),\n        ]\n    \n\n\n\n多次生成一个URL是Ok的，Frozen-Flask会只创建一次。给不同的函数起同样的名字并不是一个好的习惯，但是这里仍然可以使用，因为它们只被装饰器调用。你可能有一个模块for views，另一个模块for freezer 和 URL generator, 所以相同的名字不是问题。\n\n\n\n\n## 测试URL生成器 \n\nFrozen Flask 背后的点子是你[**可以直接使用Flask**](#2)来开发并测试你的应用。况且在部署在服务器之前，非常有必要来测试你的URL生成器，以免有内容丢失。\n\n你可以在浏览器打开新生成的静态HTML文件，但是链接可能不能使用。FREEZER_RELATIVE_URLS[设置]()可以修复这个问题，但是添加一个可见的index.html到链接。或者使用[run()]方法来使用生成的网页来大件一个HTTP服务器。这样一来你就可以在上传之前确认是否工作正常：\n\n    #!python\n    if __name__ == '__main__':\n        freezer.run(debug)\n\n\n[Freeze.run()]()在服务前冻结你的应用并且当重载器kicks in.但是reloader只会查看Python的文件，而不是模板或静态文件。因为这样，你可能想要只用[Freeze.run()]()来测试URL生成器，其他情况照常使用[app.run()](http://flask.pocoo.org/docs/0.11/api/#flask.Flask.run)\n\n[**Flask-Script**](http://flask-script.readthedocs.io/en/latest/)may come in handy here.\n\n## 配置 \n\nFrozen-Flask可以通过Flask的[配置系统](http://flask.pocoo.org/docs/0.11/config/)。下列是可用配置属性。\n\nFREEZER_BASE_URL\n>你的App应该呗安装到的地址。这个会影响[flask.url_for()]()的输出结果：absolute URLS(with_external = True) 或者如果你的应用不在你的域名根目录下。默认是'http://localhost/'.\n\nFREEZER_RELATIVE_URLS\n>如果被设置为True，Frozen-Flask 会patch Jinja的环境，url_for()会返回相对路径的URLs.默认为False.除非你明确使用[relative_url_for()]()，python的代码是不会被影响的。\n\nFREEZER_DEFAULT_MIMETYPE\n>如果不能根据文件扩展名来决定MIME类型时MIME的默认类型。如果你在使用Apache Web Server. 这应该会与Apache配置里的默认DefaultType的值对应。默认是application/octet-stream.（0.7版更新)\n\nFREEZER_IGNORE_MIMETYPE_WARNINGS\n>如果被设置为True,当服务器返回的MIME类型和文件名扩展衍生出的MIME类型不同，Frozen-Flask不会显示Warning.默认是False。（0.8版更新)\n\nFREEZER_DESTINATION\n>到生成的静态网站的目录的路径。默认在build文件夹，static/templates文件夹旁边。\n\nFREEZER_REMOVE_EXTRA_FILES\n>默认为True,Frozen-Flask将会把目标文件夹里面不是这次build的出来的文件删除。（就是删除原来的程序）。这是为了清除上次冻结器产生的文件，而这些文件已经不再需要了。将此项设置为False等同于设置FREEZER_DESTINATION_IGNORE为['*'].\n\nFREEZER_DESTINATION_IGNORE\n>一个（默认为空的）列表的fnmatch patterns.目标路径内符合pattern的文件或文件夹不会被移除，即便是FREEZER_REMOVE_EXTRA_FILES 为True。就像 .gitignore文件一样，作用于整个路径如果它有一个/，而且作用于每一个被/分隔的部分,否则，比如，这会被设置成['.git*']如果默认是一个git仓库。\n\nFREEZER_STATIC_IGNORE\n>一个（默认为空的）列表的fnmatch patterns，文件通过发送_static_文件that match any of the patterns are not coppied to the build directory. As in .gitignore files, patterns apply to the whole path if they contain a slash /, to each slash-separated part otherwise. For example, this could be set to ['*.scss'] to stop all SASS files from being frozen.\n\nFREEZER_IGNORE_404_NOT_FOUND\n>如果设置为True（默认False），Frozen-Flask不会在遇到404错误返回时停止你的应用。在这种情况下，会有一个警告会被显示并且会使用你的404错误处理器或Flask默认设置来生成一个404错误网页。这项功能在你开发过程中网页链接到还没有写的网页时很有用。（0.12版更新）\n\n## 文件名和MIME类型 \n\n对于每一个URL，Frozen-Flask模拟一个请求并且将内容保存在FREEZER_DESTINATION 下的文件夹内。文件名字是根据URL地址来定的。URL有一个尾斜杠来表示一个文件夹名，内容存放于该文件夹下index.html下.\n\n被从URL里面移除的查询字符串用来建立文件名字。例如/lorem/?page=ipsum被保存为lorem/index.html. URL只有在它们的查询字符串相同时不同。它们应该返回相同的结果，否则，行为会被当做未定义行为。\n\n另外，扩展检查了文件扩展名是否与Content-Type HTTP response header提供的MIME类型相匹配，Content-Type是一个静态web服务器可能会传送不是你期望的内容，这样Frozen-flask回发出警告\n\n比如，下列的views 都是错的\n\n    #!python\n    @app.route('/lipsum')\n    def lipsum():\n        return '<p>Lorem ipsum, ...</p>'\n\n    @app.route('/style.css')\n    def compressed_css():\n        return '/* ... */'\n作为结果Flask的Content-Type是text/html; charset=utf-8,但是Frozen-Flask和大多说web服务器通过文件名得到的MIME类型是application/octet-stream 和 text/css\n\n上述代码可以这样通过添加URL的尾斜杠或者添加Content-Type\n\n    #!python\n    # Saved as `lipsum/index.html` matches the 'text/html' MIME type.\n    @app.route('/lipsum/')\n    def lipsum():\n        return '<p>Lorem ipsum, ...</p>'\n\n    @app.route('/style.css')\n    def compressed_css():\n        return '/* ... */', 200, {'Content-Type': 'text/css; charset=utf-8'}\n\n你也可以通过[配置](#6)来禁用。\n\n\n## 字符编码 \n\nFlask内部使用Unicode，默认是UTF8来进行I/O操作.它会把一个MIME类型和编码方式发送到正确的Content-Type header。Frozen-Flask会尝试通过文件扩展名[保存MIME类型](#7)，但是它不能保护编码元数据。你可能需要添加正确的<meta>标签到你的HTML。\n\n对于URL，Flask的默认也是UTF8编码，所以你的web服务器会得到URL-encoded UTF-8 HTTP 请求。由你来转换这些到你的文件系统默认编码。Frozen-Flask总是使用Unicode描写文件名。\n\n##<a name='9'>API \n\nclass flask_frozen.Freezer(app=None, with_static_files=True,with_no_argument_rules=True, log_url_for=True)\n\n>    **参数**：\n        - app(Flask实例):你的应用程序或者None如果你使用了init_app()\n        - with_static_files (boolean)是否自动为静态文件生成Url地址\n        -with_no_argument_rules (boolean)是否对那些没有参数的log_url_for (boolean)URL规则去自动生成URL\n        -log_url_for (boolean)： 是否去log调用你的appmakes to url_for()并且通过它来生成URLs。\n        \n>    **all_urls()**\n        运行所有的生成器并生成相关与app根目录的URL地址对测试URL生成器非常有帮助\n        \n    Note:\n    This does not generate any page, so URLs that are normally generated from url_for() calls will not be included here.   \n\n>**freeze()**\n    清除目标目录并通过生成器建立所有地址\n    \n>**init_app(app)**\n    允许在Freezer初始化后注册一个app\n    参数： app： 你的Flask应用\n    \n>**register_generator(function)**\n    注册一个函数为URL生成器\n    这个函数应该返回一个可迭代的URL路径或者(endpoint, values) 元组 to be used as url_for(endpoint, **values).\n    \n>**root**\n    Frozen-Flask写入文件的绝对路径：resolved value for the FREEZER_DESTINATION [configuration]().\n    \n>**run（＊＊options)**\n    和serve()一样但是需要先冻结（调用freeze())\n    \nflask_frozen.walk_directory(root, ignore=())\n    递归逐层进入根目录并且生成用'/'分割的相对路径。\n    之前被用来执行静态文件的URL生成器\n    参数：ignore: 一列fnmatch样式,用法类似.gitignore,\t patterns that contains a slash are matched against the whole path, others against individual slash-separated parts.\n\nflask_frozen.relative_url_for(endpoint, **values)\n    类似于[url_for()]()，但是在可能的情况下返回相关的URL\n    \n    绝对URL(with _external=True or to a different subdomain)是不变的，但是/foo/bar 变成../bar,依赖于\n    当前请求的上下文路径(This, of course, requires a Flask request context.)\n    \n    URLs 否则也会以 '/'结束来加载index.html。 也正因为如此，这个函数只可以和Frozen-Flask一起用，不可以在app.run()(Flask)或其他的WSGI服务器上使用。\n    \n如果FREEZER_RELATIVE_URLS[配置](#6)是True，frozen-Flask会自动修补应用程序的Jinja环境来让模板中的url_for变成这个函数。\n\n\n\n","source":"_posts/frozen-flask-manual.md","raw":"---\ntitle: Frozen-Flask说明\ndate: 2016-08-15 11:36:50\ncategories: Flask\n---\n\nFrozen-Flask（原名Flask-Static)是一个基于[Flask]()的Static(静态)网页生成器。它可以轻松地冻结你现在已有的Flask项目，生成一系列的静态网页（例如：静态博客),然后直接搭载在HTTP服务器上而不需要安装其他的软件。相对于动态网页，Frozen-Flask生成的网站更易于托管，比如Github-Pages或Coding-Pages上面。同时当你的网站足够庞大以至于静态网页不能满足你的需求时，与其他静态网页生成器相比，基于Flask的Frozen-Flask可以让你的网站更快捷地迁移到动态的Flask上面。本文带你进一步了解这个神奇的工具。\n\n（翻译自官方文档，英文版请点击[这里](http://pythonhosted.org/Frozen-Flask/#flask_frozen.relative_url_for)\n\n## 安装 \n\n通过以下其中一个安装本扩展\n\n    $ easy_install Frozen-Flask\n    \n<!--More-->\n    \n如果你安装了pip组件\n\n    $ pip install Frozen-Flask\n    \n或者你可以从Github获得[源代码](https://github.com/SimonSapin/Frozen-Flask)\n\n## 上下文 \n\n这篇文档假设你已经有一个工作中的[Flask](http://flask.pocoo.org/)应用。你可以通过开发服务器运行测试\n\n\n    from myapplication import app\n    app.run(debug=True)\n\nFrozen-Flask用于部署：取代了安装python, WSGI服务器和Flask，你可以使用Frozen-Flask 来冻结你的应用并且可以只部署静态HTML文件在你的服务器上。\n\n\n## 开始吧 \n\n创建一个[冻结器]()实例和你的app对象放在一起，然后调用它的[freeze()]()方法。将其放入一个freeze.py的脚本文件(名字无所谓其实)\n\n\n    #!python\n    from flask_frozen import Freezer\n    from myapplication import app\n\n    freezer = Freezer(app)\n\n    if __name__ == '__main__':\n        freezer.freeze()\n\n\n这样会在你的static和templates目录旁边创建一个build文件夹，里面放着创建出来的静态文件。\n\n\n\n    Note\n\n    Frozen-Flask considers it “owns” its build directory. By default, it will silently overwrite files in that directory, and remove those it did not create.\n\n    The [configuration]() allows you to change the destination directory, or control what files are removed if at all.\n\n\nThis build will be most likely be partial since Frozen-Flask can only guess so much about your application.\n\n## 寻找URL地址\n\nFrozen-Flask 通过在WSGI层模拟请求并且写出返回信息给相应的文件。所以它需要知道在你的应用里面都有哪些URL链接。\n\n下列URLs可以被自动找到\n- 被你的Flask应用或者它的[蓝图](http://flask.pocoo.org/docs/0.11/blueprints/)控制的静态文件\n- 没有变量的URL地址，如果它们接受GET方法\n- 0.6版新功能: 通过[flask.url_for()](http://flask.pocoo.org/docs/0.11/api/#flask.url_for)请求的地址\n\n这意味着如果你的应用在URL地址（没有参数）有索引页并且其他所有的相关页面可以通过那个地址递归调用url_for()找到，那么Frozen-Flask就可以全部自动地找到。\n\n否则，你需要编写URL生成器\n\n## URL生成器 \n\n让我们假设你的应用看上去像这样\n\n    #!python\n    @app.route('/')\n    def products_list():\n        return render_template('index.html', products=models.Product.all())\n\n    @app.route('/product_<int:product_id>/')\n    def product_details():\n        product = models.Product.get_or_404(id=product_id)\n        return render_template('product.html', product=product)\n\n\n\n如果因为某些原因，一些生产出来的页面不会被链接（或者它们不是通过url_for()调用）, Frozen-Flask 不会找到它们。\n\n\n为了告诉Frozen-Flask这些网页，在调用[freeze()]()之前写一个URL生成器并且将它放在[Freezer]()实例里面\n\n    #!python\n    @freezer.register_generator\n    def product_details():\n        for product in models.Product.all():\n            yield {'product_id': product.id}\n\n\n\nFrozen-Flask 会调用url_for(endpoint,**values),来找到URL地址，endpoint是生成器函数的名字，values是被生成器调用的每一个dict字典\n\n\n你可以指定一个不同的endpoint通过一个(endpoint,values)元组而不仅仅是values，或者你可以通过传递url_for 并且单单产生URLs字符串\n\n另外，生成器函数不需要使用[Python generators](https://docs.python.org/3/glossary.html#term-generator)来使用yield，它们可以是可以被调用的 并且返回可迭代的对象\n \n下面的例子都是一样的\n\n    #!python\n    @freezer.register_generator\n    def product_details():  # endpoint defaults to the function name\n        # `values` dicts\n        yield {'product_id': '1'}\n        yield {'product_id': '2'}\n\n    @freezer.register_generator\n    def product_url_generator():  # Some other function name\n        # `(endpoint, values)` tuples\n        yield 'product_details', {'product_id': '1'}\n        yield 'product_details', {'product_id': '2'}\n\n    @freezer.register_generator\n    def product_url_generator():\n        # URLs as strings\n        yield '/product_1/'\n        yield '/product_2/'\n\n    @freezer.register_generator\n    def product_url_generator():\n        # Return a list. (Any iterable type will do.)\n        return [\n            '/product_1/',\n            # Mixing forms works too.\n            ('product_details', {'product_id': '2'}),\n        ]\n    \n\n\n\n多次生成一个URL是Ok的，Frozen-Flask会只创建一次。给不同的函数起同样的名字并不是一个好的习惯，但是这里仍然可以使用，因为它们只被装饰器调用。你可能有一个模块for views，另一个模块for freezer 和 URL generator, 所以相同的名字不是问题。\n\n\n\n\n## 测试URL生成器 \n\nFrozen Flask 背后的点子是你[**可以直接使用Flask**](#2)来开发并测试你的应用。况且在部署在服务器之前，非常有必要来测试你的URL生成器，以免有内容丢失。\n\n你可以在浏览器打开新生成的静态HTML文件，但是链接可能不能使用。FREEZER_RELATIVE_URLS[设置]()可以修复这个问题，但是添加一个可见的index.html到链接。或者使用[run()]方法来使用生成的网页来大件一个HTTP服务器。这样一来你就可以在上传之前确认是否工作正常：\n\n    #!python\n    if __name__ == '__main__':\n        freezer.run(debug)\n\n\n[Freeze.run()]()在服务前冻结你的应用并且当重载器kicks in.但是reloader只会查看Python的文件，而不是模板或静态文件。因为这样，你可能想要只用[Freeze.run()]()来测试URL生成器，其他情况照常使用[app.run()](http://flask.pocoo.org/docs/0.11/api/#flask.Flask.run)\n\n[**Flask-Script**](http://flask-script.readthedocs.io/en/latest/)may come in handy here.\n\n## 配置 \n\nFrozen-Flask可以通过Flask的[配置系统](http://flask.pocoo.org/docs/0.11/config/)。下列是可用配置属性。\n\nFREEZER_BASE_URL\n>你的App应该呗安装到的地址。这个会影响[flask.url_for()]()的输出结果：absolute URLS(with_external = True) 或者如果你的应用不在你的域名根目录下。默认是'http://localhost/'.\n\nFREEZER_RELATIVE_URLS\n>如果被设置为True，Frozen-Flask 会patch Jinja的环境，url_for()会返回相对路径的URLs.默认为False.除非你明确使用[relative_url_for()]()，python的代码是不会被影响的。\n\nFREEZER_DEFAULT_MIMETYPE\n>如果不能根据文件扩展名来决定MIME类型时MIME的默认类型。如果你在使用Apache Web Server. 这应该会与Apache配置里的默认DefaultType的值对应。默认是application/octet-stream.（0.7版更新)\n\nFREEZER_IGNORE_MIMETYPE_WARNINGS\n>如果被设置为True,当服务器返回的MIME类型和文件名扩展衍生出的MIME类型不同，Frozen-Flask不会显示Warning.默认是False。（0.8版更新)\n\nFREEZER_DESTINATION\n>到生成的静态网站的目录的路径。默认在build文件夹，static/templates文件夹旁边。\n\nFREEZER_REMOVE_EXTRA_FILES\n>默认为True,Frozen-Flask将会把目标文件夹里面不是这次build的出来的文件删除。（就是删除原来的程序）。这是为了清除上次冻结器产生的文件，而这些文件已经不再需要了。将此项设置为False等同于设置FREEZER_DESTINATION_IGNORE为['*'].\n\nFREEZER_DESTINATION_IGNORE\n>一个（默认为空的）列表的fnmatch patterns.目标路径内符合pattern的文件或文件夹不会被移除，即便是FREEZER_REMOVE_EXTRA_FILES 为True。就像 .gitignore文件一样，作用于整个路径如果它有一个/，而且作用于每一个被/分隔的部分,否则，比如，这会被设置成['.git*']如果默认是一个git仓库。\n\nFREEZER_STATIC_IGNORE\n>一个（默认为空的）列表的fnmatch patterns，文件通过发送_static_文件that match any of the patterns are not coppied to the build directory. As in .gitignore files, patterns apply to the whole path if they contain a slash /, to each slash-separated part otherwise. For example, this could be set to ['*.scss'] to stop all SASS files from being frozen.\n\nFREEZER_IGNORE_404_NOT_FOUND\n>如果设置为True（默认False），Frozen-Flask不会在遇到404错误返回时停止你的应用。在这种情况下，会有一个警告会被显示并且会使用你的404错误处理器或Flask默认设置来生成一个404错误网页。这项功能在你开发过程中网页链接到还没有写的网页时很有用。（0.12版更新）\n\n## 文件名和MIME类型 \n\n对于每一个URL，Frozen-Flask模拟一个请求并且将内容保存在FREEZER_DESTINATION 下的文件夹内。文件名字是根据URL地址来定的。URL有一个尾斜杠来表示一个文件夹名，内容存放于该文件夹下index.html下.\n\n被从URL里面移除的查询字符串用来建立文件名字。例如/lorem/?page=ipsum被保存为lorem/index.html. URL只有在它们的查询字符串相同时不同。它们应该返回相同的结果，否则，行为会被当做未定义行为。\n\n另外，扩展检查了文件扩展名是否与Content-Type HTTP response header提供的MIME类型相匹配，Content-Type是一个静态web服务器可能会传送不是你期望的内容，这样Frozen-flask回发出警告\n\n比如，下列的views 都是错的\n\n    #!python\n    @app.route('/lipsum')\n    def lipsum():\n        return '<p>Lorem ipsum, ...</p>'\n\n    @app.route('/style.css')\n    def compressed_css():\n        return '/* ... */'\n作为结果Flask的Content-Type是text/html; charset=utf-8,但是Frozen-Flask和大多说web服务器通过文件名得到的MIME类型是application/octet-stream 和 text/css\n\n上述代码可以这样通过添加URL的尾斜杠或者添加Content-Type\n\n    #!python\n    # Saved as `lipsum/index.html` matches the 'text/html' MIME type.\n    @app.route('/lipsum/')\n    def lipsum():\n        return '<p>Lorem ipsum, ...</p>'\n\n    @app.route('/style.css')\n    def compressed_css():\n        return '/* ... */', 200, {'Content-Type': 'text/css; charset=utf-8'}\n\n你也可以通过[配置](#6)来禁用。\n\n\n## 字符编码 \n\nFlask内部使用Unicode，默认是UTF8来进行I/O操作.它会把一个MIME类型和编码方式发送到正确的Content-Type header。Frozen-Flask会尝试通过文件扩展名[保存MIME类型](#7)，但是它不能保护编码元数据。你可能需要添加正确的<meta>标签到你的HTML。\n\n对于URL，Flask的默认也是UTF8编码，所以你的web服务器会得到URL-encoded UTF-8 HTTP 请求。由你来转换这些到你的文件系统默认编码。Frozen-Flask总是使用Unicode描写文件名。\n\n##<a name='9'>API \n\nclass flask_frozen.Freezer(app=None, with_static_files=True,with_no_argument_rules=True, log_url_for=True)\n\n>    **参数**：\n        - app(Flask实例):你的应用程序或者None如果你使用了init_app()\n        - with_static_files (boolean)是否自动为静态文件生成Url地址\n        -with_no_argument_rules (boolean)是否对那些没有参数的log_url_for (boolean)URL规则去自动生成URL\n        -log_url_for (boolean)： 是否去log调用你的appmakes to url_for()并且通过它来生成URLs。\n        \n>    **all_urls()**\n        运行所有的生成器并生成相关与app根目录的URL地址对测试URL生成器非常有帮助\n        \n    Note:\n    This does not generate any page, so URLs that are normally generated from url_for() calls will not be included here.   \n\n>**freeze()**\n    清除目标目录并通过生成器建立所有地址\n    \n>**init_app(app)**\n    允许在Freezer初始化后注册一个app\n    参数： app： 你的Flask应用\n    \n>**register_generator(function)**\n    注册一个函数为URL生成器\n    这个函数应该返回一个可迭代的URL路径或者(endpoint, values) 元组 to be used as url_for(endpoint, **values).\n    \n>**root**\n    Frozen-Flask写入文件的绝对路径：resolved value for the FREEZER_DESTINATION [configuration]().\n    \n>**run（＊＊options)**\n    和serve()一样但是需要先冻结（调用freeze())\n    \nflask_frozen.walk_directory(root, ignore=())\n    递归逐层进入根目录并且生成用'/'分割的相对路径。\n    之前被用来执行静态文件的URL生成器\n    参数：ignore: 一列fnmatch样式,用法类似.gitignore,\t patterns that contains a slash are matched against the whole path, others against individual slash-separated parts.\n\nflask_frozen.relative_url_for(endpoint, **values)\n    类似于[url_for()]()，但是在可能的情况下返回相关的URL\n    \n    绝对URL(with _external=True or to a different subdomain)是不变的，但是/foo/bar 变成../bar,依赖于\n    当前请求的上下文路径(This, of course, requires a Flask request context.)\n    \n    URLs 否则也会以 '/'结束来加载index.html。 也正因为如此，这个函数只可以和Frozen-Flask一起用，不可以在app.run()(Flask)或其他的WSGI服务器上使用。\n    \n如果FREEZER_RELATIVE_URLS[配置](#6)是True，frozen-Flask会自动修补应用程序的Jinja环境来让模板中的url_for变成这个函数。\n\n\n\n","slug":"frozen-flask-manual","published":1,"updated":"2018-05-31T01:57:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiqvlnwi0013glu34r9h7ul2","content":"<p>Frozen-Flask（原名Flask-Static)是一个基于<a href=\"\">Flask</a>的Static(静态)网页生成器。它可以轻松地冻结你现在已有的Flask项目，生成一系列的静态网页（例如：静态博客),然后直接搭载在HTTP服务器上而不需要安装其他的软件。相对于动态网页，Frozen-Flask生成的网站更易于托管，比如Github-Pages或Coding-Pages上面。同时当你的网站足够庞大以至于静态网页不能满足你的需求时，与其他静态网页生成器相比，基于Flask的Frozen-Flask可以让你的网站更快捷地迁移到动态的Flask上面。本文带你进一步了解这个神奇的工具。</p>\n<p>（翻译自官方文档，英文版请点击<a href=\"http://pythonhosted.org/Frozen-Flask/#flask_frozen.relative_url_for\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>通过以下其中一个安装本扩展</p>\n<pre><code>$ easy_install Frozen-Flask\n</code></pre><a id=\"more\"></a>\n<p>如果你安装了pip组件</p>\n<pre><code>$ pip install Frozen-Flask\n</code></pre><p>或者你可以从Github获得<a href=\"https://github.com/SimonSapin/Frozen-Flask\" target=\"_blank\" rel=\"noopener\">源代码</a></p>\n<h2 id=\"上下文\"><a href=\"#上下文\" class=\"headerlink\" title=\"上下文\"></a>上下文</h2><p>这篇文档假设你已经有一个工作中的<a href=\"http://flask.pocoo.org/\" target=\"_blank\" rel=\"noopener\">Flask</a>应用。你可以通过开发服务器运行测试</p>\n<pre><code>from myapplication import app\napp.run(debug=True)\n</code></pre><p>Frozen-Flask用于部署：取代了安装python, WSGI服务器和Flask，你可以使用Frozen-Flask 来冻结你的应用并且可以只部署静态HTML文件在你的服务器上。</p>\n<h2 id=\"开始吧\"><a href=\"#开始吧\" class=\"headerlink\" title=\"开始吧\"></a>开始吧</h2><p>创建一个<a href=\"\">冻结器</a>实例和你的app对象放在一起，然后调用它的<a href=\"\">freeze()</a>方法。将其放入一个freeze.py的脚本文件(名字无所谓其实)</p>\n<pre><code>#!python\nfrom flask_frozen import Freezer\nfrom myapplication import app\n\nfreezer = Freezer(app)\n\nif __name__ == &apos;__main__&apos;:\n    freezer.freeze()\n</code></pre><p>这样会在你的static和templates目录旁边创建一个build文件夹，里面放着创建出来的静态文件。</p>\n<pre><code>Note\n\nFrozen-Flask considers it “owns” its build directory. By default, it will silently overwrite files in that directory, and remove those it did not create.\n\nThe [configuration]() allows you to change the destination directory, or control what files are removed if at all.\n</code></pre><p>This build will be most likely be partial since Frozen-Flask can only guess so much about your application.</p>\n<h2 id=\"寻找URL地址\"><a href=\"#寻找URL地址\" class=\"headerlink\" title=\"寻找URL地址\"></a>寻找URL地址</h2><p>Frozen-Flask 通过在WSGI层模拟请求并且写出返回信息给相应的文件。所以它需要知道在你的应用里面都有哪些URL链接。</p>\n<p>下列URLs可以被自动找到</p>\n<ul>\n<li>被你的Flask应用或者它的<a href=\"http://flask.pocoo.org/docs/0.11/blueprints/\" target=\"_blank\" rel=\"noopener\">蓝图</a>控制的静态文件</li>\n<li>没有变量的URL地址，如果它们接受GET方法</li>\n<li>0.6版新功能: 通过<a href=\"http://flask.pocoo.org/docs/0.11/api/#flask.url_for\" target=\"_blank\" rel=\"noopener\">flask.url_for()</a>请求的地址</li>\n</ul>\n<p>这意味着如果你的应用在URL地址（没有参数）有索引页并且其他所有的相关页面可以通过那个地址递归调用url_for()找到，那么Frozen-Flask就可以全部自动地找到。</p>\n<p>否则，你需要编写URL生成器</p>\n<h2 id=\"URL生成器\"><a href=\"#URL生成器\" class=\"headerlink\" title=\"URL生成器\"></a>URL生成器</h2><p>让我们假设你的应用看上去像这样</p>\n<pre><code>#!python\n@app.route(&apos;/&apos;)\ndef products_list():\n    return render_template(&apos;index.html&apos;, products=models.Product.all())\n\n@app.route(&apos;/product_&lt;int:product_id&gt;/&apos;)\ndef product_details():\n    product = models.Product.get_or_404(id=product_id)\n    return render_template(&apos;product.html&apos;, product=product)\n</code></pre><p>如果因为某些原因，一些生产出来的页面不会被链接（或者它们不是通过url_for()调用）, Frozen-Flask 不会找到它们。</p>\n<p>为了告诉Frozen-Flask这些网页，在调用<a href=\"\">freeze()</a>之前写一个URL生成器并且将它放在<a href=\"\">Freezer</a>实例里面</p>\n<pre><code>#!python\n@freezer.register_generator\ndef product_details():\n    for product in models.Product.all():\n        yield {&apos;product_id&apos;: product.id}\n</code></pre><p>Frozen-Flask 会调用url_for(endpoint,**values),来找到URL地址，endpoint是生成器函数的名字，values是被生成器调用的每一个dict字典</p>\n<p>你可以指定一个不同的endpoint通过一个(endpoint,values)元组而不仅仅是values，或者你可以通过传递url_for 并且单单产生URLs字符串</p>\n<p>另外，生成器函数不需要使用<a href=\"https://docs.python.org/3/glossary.html#term-generator\" target=\"_blank\" rel=\"noopener\">Python generators</a>来使用yield，它们可以是可以被调用的 并且返回可迭代的对象</p>\n<p>下面的例子都是一样的</p>\n<pre><code>#!python\n@freezer.register_generator\ndef product_details():  # endpoint defaults to the function name\n    # `values` dicts\n    yield {&apos;product_id&apos;: &apos;1&apos;}\n    yield {&apos;product_id&apos;: &apos;2&apos;}\n\n@freezer.register_generator\ndef product_url_generator():  # Some other function name\n    # `(endpoint, values)` tuples\n    yield &apos;product_details&apos;, {&apos;product_id&apos;: &apos;1&apos;}\n    yield &apos;product_details&apos;, {&apos;product_id&apos;: &apos;2&apos;}\n\n@freezer.register_generator\ndef product_url_generator():\n    # URLs as strings\n    yield &apos;/product_1/&apos;\n    yield &apos;/product_2/&apos;\n\n@freezer.register_generator\ndef product_url_generator():\n    # Return a list. (Any iterable type will do.)\n    return [\n        &apos;/product_1/&apos;,\n        # Mixing forms works too.\n        (&apos;product_details&apos;, {&apos;product_id&apos;: &apos;2&apos;}),\n    ]\n</code></pre><p>多次生成一个URL是Ok的，Frozen-Flask会只创建一次。给不同的函数起同样的名字并不是一个好的习惯，但是这里仍然可以使用，因为它们只被装饰器调用。你可能有一个模块for views，另一个模块for freezer 和 URL generator, 所以相同的名字不是问题。</p>\n<h2 id=\"测试URL生成器\"><a href=\"#测试URL生成器\" class=\"headerlink\" title=\"测试URL生成器\"></a>测试URL生成器</h2><p>Frozen Flask 背后的点子是你<a href=\"#2\"><strong>可以直接使用Flask</strong></a>来开发并测试你的应用。况且在部署在服务器之前，非常有必要来测试你的URL生成器，以免有内容丢失。</p>\n<p>你可以在浏览器打开新生成的静态HTML文件，但是链接可能不能使用。FREEZER_RELATIVE_URLS<a href=\"\">设置</a>可以修复这个问题，但是添加一个可见的index.html到链接。或者使用[run()]方法来使用生成的网页来大件一个HTTP服务器。这样一来你就可以在上传之前确认是否工作正常：</p>\n<pre><code>#!python\nif __name__ == &apos;__main__&apos;:\n    freezer.run(debug)\n</code></pre><p><a href=\"\">Freeze.run()</a>在服务前冻结你的应用并且当重载器kicks in.但是reloader只会查看Python的文件，而不是模板或静态文件。因为这样，你可能想要只用<a href=\"\">Freeze.run()</a>来测试URL生成器，其他情况照常使用<a href=\"http://flask.pocoo.org/docs/0.11/api/#flask.Flask.run\" target=\"_blank\" rel=\"noopener\">app.run()</a></p>\n<p><a href=\"http://flask-script.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener\"><strong>Flask-Script</strong></a>may come in handy here.</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>Frozen-Flask可以通过Flask的<a href=\"http://flask.pocoo.org/docs/0.11/config/\" target=\"_blank\" rel=\"noopener\">配置系统</a>。下列是可用配置属性。</p>\n<p>FREEZER_BASE_URL</p>\n<blockquote>\n<p>你的App应该呗安装到的地址。这个会影响<a href=\"\">flask.url_for()</a>的输出结果：absolute URLS(with_external = True) 或者如果你的应用不在你的域名根目录下。默认是’<a href=\"http://localhost/&#39;\" target=\"_blank\" rel=\"noopener\">http://localhost/&#39;</a>.</p>\n</blockquote>\n<p>FREEZER_RELATIVE_URLS</p>\n<blockquote>\n<p>如果被设置为True，Frozen-Flask 会patch Jinja的环境，url_for()会返回相对路径的URLs.默认为False.除非你明确使用<a href=\"\">relative_url_for()</a>，python的代码是不会被影响的。</p>\n</blockquote>\n<p>FREEZER_DEFAULT_MIMETYPE</p>\n<blockquote>\n<p>如果不能根据文件扩展名来决定MIME类型时MIME的默认类型。如果你在使用Apache Web Server. 这应该会与Apache配置里的默认DefaultType的值对应。默认是application/octet-stream.（0.7版更新)</p>\n</blockquote>\n<p>FREEZER_IGNORE_MIMETYPE_WARNINGS</p>\n<blockquote>\n<p>如果被设置为True,当服务器返回的MIME类型和文件名扩展衍生出的MIME类型不同，Frozen-Flask不会显示Warning.默认是False。（0.8版更新)</p>\n</blockquote>\n<p>FREEZER_DESTINATION</p>\n<blockquote>\n<p>到生成的静态网站的目录的路径。默认在build文件夹，static/templates文件夹旁边。</p>\n</blockquote>\n<p>FREEZER_REMOVE_EXTRA_FILES</p>\n<blockquote>\n<p>默认为True,Frozen-Flask将会把目标文件夹里面不是这次build的出来的文件删除。（就是删除原来的程序）。这是为了清除上次冻结器产生的文件，而这些文件已经不再需要了。将此项设置为False等同于设置FREEZER_DESTINATION_IGNORE为[‘*’].</p>\n</blockquote>\n<p>FREEZER_DESTINATION_IGNORE</p>\n<blockquote>\n<p>一个（默认为空的）列表的fnmatch patterns.目标路径内符合pattern的文件或文件夹不会被移除，即便是FREEZER_REMOVE_EXTRA_FILES 为True。就像 .gitignore文件一样，作用于整个路径如果它有一个/，而且作用于每一个被/分隔的部分,否则，比如，这会被设置成[‘.git*’]如果默认是一个git仓库。</p>\n</blockquote>\n<p>FREEZER_STATIC_IGNORE</p>\n<blockquote>\n<p>一个（默认为空的）列表的fnmatch patterns，文件通过发送<em>static</em>文件that match any of the patterns are not coppied to the build directory. As in .gitignore files, patterns apply to the whole path if they contain a slash /, to each slash-separated part otherwise. For example, this could be set to [‘*.scss’] to stop all SASS files from being frozen.</p>\n</blockquote>\n<p>FREEZER_IGNORE_404_NOT_FOUND</p>\n<blockquote>\n<p>如果设置为True（默认False），Frozen-Flask不会在遇到404错误返回时停止你的应用。在这种情况下，会有一个警告会被显示并且会使用你的404错误处理器或Flask默认设置来生成一个404错误网页。这项功能在你开发过程中网页链接到还没有写的网页时很有用。（0.12版更新）</p>\n</blockquote>\n<h2 id=\"文件名和MIME类型\"><a href=\"#文件名和MIME类型\" class=\"headerlink\" title=\"文件名和MIME类型\"></a>文件名和MIME类型</h2><p>对于每一个URL，Frozen-Flask模拟一个请求并且将内容保存在FREEZER_DESTINATION 下的文件夹内。文件名字是根据URL地址来定的。URL有一个尾斜杠来表示一个文件夹名，内容存放于该文件夹下index.html下.</p>\n<p>被从URL里面移除的查询字符串用来建立文件名字。例如/lorem/?page=ipsum被保存为lorem/index.html. URL只有在它们的查询字符串相同时不同。它们应该返回相同的结果，否则，行为会被当做未定义行为。</p>\n<p>另外，扩展检查了文件扩展名是否与Content-Type HTTP response header提供的MIME类型相匹配，Content-Type是一个静态web服务器可能会传送不是你期望的内容，这样Frozen-flask回发出警告</p>\n<p>比如，下列的views 都是错的</p>\n<pre><code>#!python\n@app.route(&apos;/lipsum&apos;)\ndef lipsum():\n    return &apos;&lt;p&gt;Lorem ipsum, ...&lt;/p&gt;&apos;\n\n@app.route(&apos;/style.css&apos;)\ndef compressed_css():\n    return &apos;/* ... */&apos;\n</code></pre><p>作为结果Flask的Content-Type是text/html; charset=utf-8,但是Frozen-Flask和大多说web服务器通过文件名得到的MIME类型是application/octet-stream 和 text/css</p>\n<p>上述代码可以这样通过添加URL的尾斜杠或者添加Content-Type</p>\n<pre><code>#!python\n# Saved as `lipsum/index.html` matches the &apos;text/html&apos; MIME type.\n@app.route(&apos;/lipsum/&apos;)\ndef lipsum():\n    return &apos;&lt;p&gt;Lorem ipsum, ...&lt;/p&gt;&apos;\n\n@app.route(&apos;/style.css&apos;)\ndef compressed_css():\n    return &apos;/* ... */&apos;, 200, {&apos;Content-Type&apos;: &apos;text/css; charset=utf-8&apos;}\n</code></pre><p>你也可以通过<a href=\"#6\">配置</a>来禁用。</p>\n<h2 id=\"字符编码\"><a href=\"#字符编码\" class=\"headerlink\" title=\"字符编码\"></a>字符编码</h2><p>Flask内部使用Unicode，默认是UTF8来进行I/O操作.它会把一个MIME类型和编码方式发送到正确的Content-Type header。Frozen-Flask会尝试通过文件扩展名<a href=\"#7\">保存MIME类型</a>，但是它不能保护编码元数据。你可能需要添加正确的<meta>标签到你的HTML。</p>\n<p>对于URL，Flask的默认也是UTF8编码，所以你的web服务器会得到URL-encoded UTF-8 HTTP 请求。由你来转换这些到你的文件系统默认编码。Frozen-Flask总是使用Unicode描写文件名。</p>\n<p>##<a name=\"9\">API </a></p>\n<p>class flask_frozen.Freezer(app=None, with_static_files=True,with_no_argument_rules=True, log_url_for=True)</p>\n<blockquote>\n<p>   <strong>参数</strong>：</p>\n<pre><code>- app(Flask实例):你的应用程序或者None如果你使用了init_app()\n- with_static_files (boolean)是否自动为静态文件生成Url地址\n-with_no_argument_rules (boolean)是否对那些没有参数的log_url_for (boolean)URL规则去自动生成URL\n-log_url_for (boolean)： 是否去log调用你的appmakes to url_for()并且通过它来生成URLs。\n</code></pre></blockquote>\n<blockquote>\n<p>   <strong>all_urls()</strong><br>        运行所有的生成器并生成相关与app根目录的URL地址对测试URL生成器非常有帮助</p>\n</blockquote>\n<pre><code>Note:\nThis does not generate any page, so URLs that are normally generated from url_for() calls will not be included here.   \n</code></pre><blockquote>\n<p><strong>freeze()</strong><br>    清除目标目录并通过生成器建立所有地址</p>\n</blockquote>\n<blockquote>\n<p><strong>init_app(app)</strong><br>    允许在Freezer初始化后注册一个app<br>    参数： app： 你的Flask应用</p>\n</blockquote>\n<blockquote>\n<p><strong>register_generator(function)</strong><br>    注册一个函数为URL生成器<br>    这个函数应该返回一个可迭代的URL路径或者(endpoint, values) 元组 to be used as url_for(endpoint, **values).</p>\n</blockquote>\n<blockquote>\n<p><strong>root</strong><br>    Frozen-Flask写入文件的绝对路径：resolved value for the FREEZER_DESTINATION <a href=\"\">configuration</a>.</p>\n</blockquote>\n<blockquote>\n<p><strong>run（＊＊options)</strong><br>    和serve()一样但是需要先冻结（调用freeze())</p>\n</blockquote>\n<p>flask_frozen.walk_directory(root, ignore=())<br>    递归逐层进入根目录并且生成用’/‘分割的相对路径。<br>    之前被用来执行静态文件的URL生成器<br>    参数：ignore: 一列fnmatch样式,用法类似.gitignore,     patterns that contains a slash are matched against the whole path, others against individual slash-separated parts.</p>\n<p>flask_frozen.relative_url_for(endpoint, **values)<br>    类似于<a href=\"\">url_for()</a>，但是在可能的情况下返回相关的URL</p>\n<pre><code>绝对URL(with _external=True or to a different subdomain)是不变的，但是/foo/bar 变成../bar,依赖于\n当前请求的上下文路径(This, of course, requires a Flask request context.)\n\nURLs 否则也会以 &apos;/&apos;结束来加载index.html。 也正因为如此，这个函数只可以和Frozen-Flask一起用，不可以在app.run()(Flask)或其他的WSGI服务器上使用。\n</code></pre><p>如果FREEZER_RELATIVE_URLS<a href=\"#6\">配置</a>是True，frozen-Flask会自动修补应用程序的Jinja环境来让模板中的url_for变成这个函数。</p>\n","site":{"data":{}},"excerpt":"<p>Frozen-Flask（原名Flask-Static)是一个基于<a href=\"\">Flask</a>的Static(静态)网页生成器。它可以轻松地冻结你现在已有的Flask项目，生成一系列的静态网页（例如：静态博客),然后直接搭载在HTTP服务器上而不需要安装其他的软件。相对于动态网页，Frozen-Flask生成的网站更易于托管，比如Github-Pages或Coding-Pages上面。同时当你的网站足够庞大以至于静态网页不能满足你的需求时，与其他静态网页生成器相比，基于Flask的Frozen-Flask可以让你的网站更快捷地迁移到动态的Flask上面。本文带你进一步了解这个神奇的工具。</p>\n<p>（翻译自官方文档，英文版请点击<a href=\"http://pythonhosted.org/Frozen-Flask/#flask_frozen.relative_url_for\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>通过以下其中一个安装本扩展</p>\n<pre><code>$ easy_install Frozen-Flask\n</code></pre>","more":"<p>如果你安装了pip组件</p>\n<pre><code>$ pip install Frozen-Flask\n</code></pre><p>或者你可以从Github获得<a href=\"https://github.com/SimonSapin/Frozen-Flask\" target=\"_blank\" rel=\"noopener\">源代码</a></p>\n<h2 id=\"上下文\"><a href=\"#上下文\" class=\"headerlink\" title=\"上下文\"></a>上下文</h2><p>这篇文档假设你已经有一个工作中的<a href=\"http://flask.pocoo.org/\" target=\"_blank\" rel=\"noopener\">Flask</a>应用。你可以通过开发服务器运行测试</p>\n<pre><code>from myapplication import app\napp.run(debug=True)\n</code></pre><p>Frozen-Flask用于部署：取代了安装python, WSGI服务器和Flask，你可以使用Frozen-Flask 来冻结你的应用并且可以只部署静态HTML文件在你的服务器上。</p>\n<h2 id=\"开始吧\"><a href=\"#开始吧\" class=\"headerlink\" title=\"开始吧\"></a>开始吧</h2><p>创建一个<a href=\"\">冻结器</a>实例和你的app对象放在一起，然后调用它的<a href=\"\">freeze()</a>方法。将其放入一个freeze.py的脚本文件(名字无所谓其实)</p>\n<pre><code>#!python\nfrom flask_frozen import Freezer\nfrom myapplication import app\n\nfreezer = Freezer(app)\n\nif __name__ == &apos;__main__&apos;:\n    freezer.freeze()\n</code></pre><p>这样会在你的static和templates目录旁边创建一个build文件夹，里面放着创建出来的静态文件。</p>\n<pre><code>Note\n\nFrozen-Flask considers it “owns” its build directory. By default, it will silently overwrite files in that directory, and remove those it did not create.\n\nThe [configuration]() allows you to change the destination directory, or control what files are removed if at all.\n</code></pre><p>This build will be most likely be partial since Frozen-Flask can only guess so much about your application.</p>\n<h2 id=\"寻找URL地址\"><a href=\"#寻找URL地址\" class=\"headerlink\" title=\"寻找URL地址\"></a>寻找URL地址</h2><p>Frozen-Flask 通过在WSGI层模拟请求并且写出返回信息给相应的文件。所以它需要知道在你的应用里面都有哪些URL链接。</p>\n<p>下列URLs可以被自动找到</p>\n<ul>\n<li>被你的Flask应用或者它的<a href=\"http://flask.pocoo.org/docs/0.11/blueprints/\" target=\"_blank\" rel=\"noopener\">蓝图</a>控制的静态文件</li>\n<li>没有变量的URL地址，如果它们接受GET方法</li>\n<li>0.6版新功能: 通过<a href=\"http://flask.pocoo.org/docs/0.11/api/#flask.url_for\" target=\"_blank\" rel=\"noopener\">flask.url_for()</a>请求的地址</li>\n</ul>\n<p>这意味着如果你的应用在URL地址（没有参数）有索引页并且其他所有的相关页面可以通过那个地址递归调用url_for()找到，那么Frozen-Flask就可以全部自动地找到。</p>\n<p>否则，你需要编写URL生成器</p>\n<h2 id=\"URL生成器\"><a href=\"#URL生成器\" class=\"headerlink\" title=\"URL生成器\"></a>URL生成器</h2><p>让我们假设你的应用看上去像这样</p>\n<pre><code>#!python\n@app.route(&apos;/&apos;)\ndef products_list():\n    return render_template(&apos;index.html&apos;, products=models.Product.all())\n\n@app.route(&apos;/product_&lt;int:product_id&gt;/&apos;)\ndef product_details():\n    product = models.Product.get_or_404(id=product_id)\n    return render_template(&apos;product.html&apos;, product=product)\n</code></pre><p>如果因为某些原因，一些生产出来的页面不会被链接（或者它们不是通过url_for()调用）, Frozen-Flask 不会找到它们。</p>\n<p>为了告诉Frozen-Flask这些网页，在调用<a href=\"\">freeze()</a>之前写一个URL生成器并且将它放在<a href=\"\">Freezer</a>实例里面</p>\n<pre><code>#!python\n@freezer.register_generator\ndef product_details():\n    for product in models.Product.all():\n        yield {&apos;product_id&apos;: product.id}\n</code></pre><p>Frozen-Flask 会调用url_for(endpoint,**values),来找到URL地址，endpoint是生成器函数的名字，values是被生成器调用的每一个dict字典</p>\n<p>你可以指定一个不同的endpoint通过一个(endpoint,values)元组而不仅仅是values，或者你可以通过传递url_for 并且单单产生URLs字符串</p>\n<p>另外，生成器函数不需要使用<a href=\"https://docs.python.org/3/glossary.html#term-generator\" target=\"_blank\" rel=\"noopener\">Python generators</a>来使用yield，它们可以是可以被调用的 并且返回可迭代的对象</p>\n<p>下面的例子都是一样的</p>\n<pre><code>#!python\n@freezer.register_generator\ndef product_details():  # endpoint defaults to the function name\n    # `values` dicts\n    yield {&apos;product_id&apos;: &apos;1&apos;}\n    yield {&apos;product_id&apos;: &apos;2&apos;}\n\n@freezer.register_generator\ndef product_url_generator():  # Some other function name\n    # `(endpoint, values)` tuples\n    yield &apos;product_details&apos;, {&apos;product_id&apos;: &apos;1&apos;}\n    yield &apos;product_details&apos;, {&apos;product_id&apos;: &apos;2&apos;}\n\n@freezer.register_generator\ndef product_url_generator():\n    # URLs as strings\n    yield &apos;/product_1/&apos;\n    yield &apos;/product_2/&apos;\n\n@freezer.register_generator\ndef product_url_generator():\n    # Return a list. (Any iterable type will do.)\n    return [\n        &apos;/product_1/&apos;,\n        # Mixing forms works too.\n        (&apos;product_details&apos;, {&apos;product_id&apos;: &apos;2&apos;}),\n    ]\n</code></pre><p>多次生成一个URL是Ok的，Frozen-Flask会只创建一次。给不同的函数起同样的名字并不是一个好的习惯，但是这里仍然可以使用，因为它们只被装饰器调用。你可能有一个模块for views，另一个模块for freezer 和 URL generator, 所以相同的名字不是问题。</p>\n<h2 id=\"测试URL生成器\"><a href=\"#测试URL生成器\" class=\"headerlink\" title=\"测试URL生成器\"></a>测试URL生成器</h2><p>Frozen Flask 背后的点子是你<a href=\"#2\"><strong>可以直接使用Flask</strong></a>来开发并测试你的应用。况且在部署在服务器之前，非常有必要来测试你的URL生成器，以免有内容丢失。</p>\n<p>你可以在浏览器打开新生成的静态HTML文件，但是链接可能不能使用。FREEZER_RELATIVE_URLS<a href=\"\">设置</a>可以修复这个问题，但是添加一个可见的index.html到链接。或者使用[run()]方法来使用生成的网页来大件一个HTTP服务器。这样一来你就可以在上传之前确认是否工作正常：</p>\n<pre><code>#!python\nif __name__ == &apos;__main__&apos;:\n    freezer.run(debug)\n</code></pre><p><a href=\"\">Freeze.run()</a>在服务前冻结你的应用并且当重载器kicks in.但是reloader只会查看Python的文件，而不是模板或静态文件。因为这样，你可能想要只用<a href=\"\">Freeze.run()</a>来测试URL生成器，其他情况照常使用<a href=\"http://flask.pocoo.org/docs/0.11/api/#flask.Flask.run\" target=\"_blank\" rel=\"noopener\">app.run()</a></p>\n<p><a href=\"http://flask-script.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener\"><strong>Flask-Script</strong></a>may come in handy here.</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>Frozen-Flask可以通过Flask的<a href=\"http://flask.pocoo.org/docs/0.11/config/\" target=\"_blank\" rel=\"noopener\">配置系统</a>。下列是可用配置属性。</p>\n<p>FREEZER_BASE_URL</p>\n<blockquote>\n<p>你的App应该呗安装到的地址。这个会影响<a href=\"\">flask.url_for()</a>的输出结果：absolute URLS(with_external = True) 或者如果你的应用不在你的域名根目录下。默认是’<a href=\"http://localhost/&#39;\" target=\"_blank\" rel=\"noopener\">http://localhost/&#39;</a>.</p>\n</blockquote>\n<p>FREEZER_RELATIVE_URLS</p>\n<blockquote>\n<p>如果被设置为True，Frozen-Flask 会patch Jinja的环境，url_for()会返回相对路径的URLs.默认为False.除非你明确使用<a href=\"\">relative_url_for()</a>，python的代码是不会被影响的。</p>\n</blockquote>\n<p>FREEZER_DEFAULT_MIMETYPE</p>\n<blockquote>\n<p>如果不能根据文件扩展名来决定MIME类型时MIME的默认类型。如果你在使用Apache Web Server. 这应该会与Apache配置里的默认DefaultType的值对应。默认是application/octet-stream.（0.7版更新)</p>\n</blockquote>\n<p>FREEZER_IGNORE_MIMETYPE_WARNINGS</p>\n<blockquote>\n<p>如果被设置为True,当服务器返回的MIME类型和文件名扩展衍生出的MIME类型不同，Frozen-Flask不会显示Warning.默认是False。（0.8版更新)</p>\n</blockquote>\n<p>FREEZER_DESTINATION</p>\n<blockquote>\n<p>到生成的静态网站的目录的路径。默认在build文件夹，static/templates文件夹旁边。</p>\n</blockquote>\n<p>FREEZER_REMOVE_EXTRA_FILES</p>\n<blockquote>\n<p>默认为True,Frozen-Flask将会把目标文件夹里面不是这次build的出来的文件删除。（就是删除原来的程序）。这是为了清除上次冻结器产生的文件，而这些文件已经不再需要了。将此项设置为False等同于设置FREEZER_DESTINATION_IGNORE为[‘*’].</p>\n</blockquote>\n<p>FREEZER_DESTINATION_IGNORE</p>\n<blockquote>\n<p>一个（默认为空的）列表的fnmatch patterns.目标路径内符合pattern的文件或文件夹不会被移除，即便是FREEZER_REMOVE_EXTRA_FILES 为True。就像 .gitignore文件一样，作用于整个路径如果它有一个/，而且作用于每一个被/分隔的部分,否则，比如，这会被设置成[‘.git*’]如果默认是一个git仓库。</p>\n</blockquote>\n<p>FREEZER_STATIC_IGNORE</p>\n<blockquote>\n<p>一个（默认为空的）列表的fnmatch patterns，文件通过发送<em>static</em>文件that match any of the patterns are not coppied to the build directory. As in .gitignore files, patterns apply to the whole path if they contain a slash /, to each slash-separated part otherwise. For example, this could be set to [‘*.scss’] to stop all SASS files from being frozen.</p>\n</blockquote>\n<p>FREEZER_IGNORE_404_NOT_FOUND</p>\n<blockquote>\n<p>如果设置为True（默认False），Frozen-Flask不会在遇到404错误返回时停止你的应用。在这种情况下，会有一个警告会被显示并且会使用你的404错误处理器或Flask默认设置来生成一个404错误网页。这项功能在你开发过程中网页链接到还没有写的网页时很有用。（0.12版更新）</p>\n</blockquote>\n<h2 id=\"文件名和MIME类型\"><a href=\"#文件名和MIME类型\" class=\"headerlink\" title=\"文件名和MIME类型\"></a>文件名和MIME类型</h2><p>对于每一个URL，Frozen-Flask模拟一个请求并且将内容保存在FREEZER_DESTINATION 下的文件夹内。文件名字是根据URL地址来定的。URL有一个尾斜杠来表示一个文件夹名，内容存放于该文件夹下index.html下.</p>\n<p>被从URL里面移除的查询字符串用来建立文件名字。例如/lorem/?page=ipsum被保存为lorem/index.html. URL只有在它们的查询字符串相同时不同。它们应该返回相同的结果，否则，行为会被当做未定义行为。</p>\n<p>另外，扩展检查了文件扩展名是否与Content-Type HTTP response header提供的MIME类型相匹配，Content-Type是一个静态web服务器可能会传送不是你期望的内容，这样Frozen-flask回发出警告</p>\n<p>比如，下列的views 都是错的</p>\n<pre><code>#!python\n@app.route(&apos;/lipsum&apos;)\ndef lipsum():\n    return &apos;&lt;p&gt;Lorem ipsum, ...&lt;/p&gt;&apos;\n\n@app.route(&apos;/style.css&apos;)\ndef compressed_css():\n    return &apos;/* ... */&apos;\n</code></pre><p>作为结果Flask的Content-Type是text/html; charset=utf-8,但是Frozen-Flask和大多说web服务器通过文件名得到的MIME类型是application/octet-stream 和 text/css</p>\n<p>上述代码可以这样通过添加URL的尾斜杠或者添加Content-Type</p>\n<pre><code>#!python\n# Saved as `lipsum/index.html` matches the &apos;text/html&apos; MIME type.\n@app.route(&apos;/lipsum/&apos;)\ndef lipsum():\n    return &apos;&lt;p&gt;Lorem ipsum, ...&lt;/p&gt;&apos;\n\n@app.route(&apos;/style.css&apos;)\ndef compressed_css():\n    return &apos;/* ... */&apos;, 200, {&apos;Content-Type&apos;: &apos;text/css; charset=utf-8&apos;}\n</code></pre><p>你也可以通过<a href=\"#6\">配置</a>来禁用。</p>\n<h2 id=\"字符编码\"><a href=\"#字符编码\" class=\"headerlink\" title=\"字符编码\"></a>字符编码</h2><p>Flask内部使用Unicode，默认是UTF8来进行I/O操作.它会把一个MIME类型和编码方式发送到正确的Content-Type header。Frozen-Flask会尝试通过文件扩展名<a href=\"#7\">保存MIME类型</a>，但是它不能保护编码元数据。你可能需要添加正确的<meta>标签到你的HTML。</p>\n<p>对于URL，Flask的默认也是UTF8编码，所以你的web服务器会得到URL-encoded UTF-8 HTTP 请求。由你来转换这些到你的文件系统默认编码。Frozen-Flask总是使用Unicode描写文件名。</p>\n<p>##<a name=\"9\">API </a></p>\n<p>class flask_frozen.Freezer(app=None, with_static_files=True,with_no_argument_rules=True, log_url_for=True)</p>\n<blockquote>\n<p>   <strong>参数</strong>：</p>\n<pre><code>- app(Flask实例):你的应用程序或者None如果你使用了init_app()\n- with_static_files (boolean)是否自动为静态文件生成Url地址\n-with_no_argument_rules (boolean)是否对那些没有参数的log_url_for (boolean)URL规则去自动生成URL\n-log_url_for (boolean)： 是否去log调用你的appmakes to url_for()并且通过它来生成URLs。\n</code></pre></blockquote>\n<blockquote>\n<p>   <strong>all_urls()</strong><br>        运行所有的生成器并生成相关与app根目录的URL地址对测试URL生成器非常有帮助</p>\n</blockquote>\n<pre><code>Note:\nThis does not generate any page, so URLs that are normally generated from url_for() calls will not be included here.   \n</code></pre><blockquote>\n<p><strong>freeze()</strong><br>    清除目标目录并通过生成器建立所有地址</p>\n</blockquote>\n<blockquote>\n<p><strong>init_app(app)</strong><br>    允许在Freezer初始化后注册一个app<br>    参数： app： 你的Flask应用</p>\n</blockquote>\n<blockquote>\n<p><strong>register_generator(function)</strong><br>    注册一个函数为URL生成器<br>    这个函数应该返回一个可迭代的URL路径或者(endpoint, values) 元组 to be used as url_for(endpoint, **values).</p>\n</blockquote>\n<blockquote>\n<p><strong>root</strong><br>    Frozen-Flask写入文件的绝对路径：resolved value for the FREEZER_DESTINATION <a href=\"\">configuration</a>.</p>\n</blockquote>\n<blockquote>\n<p><strong>run（＊＊options)</strong><br>    和serve()一样但是需要先冻结（调用freeze())</p>\n</blockquote>\n<p>flask_frozen.walk_directory(root, ignore=())<br>    递归逐层进入根目录并且生成用’/‘分割的相对路径。<br>    之前被用来执行静态文件的URL生成器<br>    参数：ignore: 一列fnmatch样式,用法类似.gitignore,     patterns that contains a slash are matched against the whole path, others against individual slash-separated parts.</p>\n<p>flask_frozen.relative_url_for(endpoint, **values)<br>    类似于<a href=\"\">url_for()</a>，但是在可能的情况下返回相关的URL</p>\n<pre><code>绝对URL(with _external=True or to a different subdomain)是不变的，但是/foo/bar 变成../bar,依赖于\n当前请求的上下文路径(This, of course, requires a Flask request context.)\n\nURLs 否则也会以 &apos;/&apos;结束来加载index.html。 也正因为如此，这个函数只可以和Frozen-Flask一起用，不可以在app.run()(Flask)或其他的WSGI服务器上使用。\n</code></pre><p>如果FREEZER_RELATIVE_URLS<a href=\"#6\">配置</a>是True，frozen-Flask会自动修补应用程序的Jinja环境来让模板中的url_for变成这个函数。</p>"},{"title":"财务报表分析：报表简介","date":"2016-09-07T16:07:15.000Z","_content":"\n\n##财务报表简介\n\n财务报表指日常会计核算资料的基础上按照规定方式编写的综合反映企业某一日期的财务状况，经营成果的书面文件。它主要分为三大部分，它们分别是:\n\n- 资产负债表(Balance sheet)，公司的资产和负债，体现公司在某一时刻下的财务状况\n- 损益表 (Income statement)，指出公司的运营表现，盈利或者亏损\n- 现金流量表 (Cash Flow statement) 指出在某一时间段内公司的现金流动情况\n\n通过这些报表我们可以多方位地了解到公司的状况。\n- 对于经理来说，可以更清楚地了解公司的表现和潜力；\n- 对于股东来说，财务报表可以对公司估值，推测公司的未来前景；\n- 对债权人来讲，可以了解到公司财务的健康度是否可以偿还债务。\n- 对政府来讲，可以有效地监管公司，进一步避免偷税漏税。\n\n我们先来看损益表;\n\n##损益表(Income statement)\n\n损益表展现的是公司的总收入(Revenue不是净利润 = 销售数量 x 单价)，开销(Expense),和净利润\n\n    总收入(Revenue） - 开销(Expense) = 净收入（Income）\n    \n虽然是作为记录销售收入的损益表，但是上面记录的净收入和我们的现金流入并不一定相等，比如：\n\n- 使用权责发生制(accural accounting)，当产品售出并完成交接后计算收入和支出（比如收到一百万的预付款，一年内分五次向客户提供产品。即便一百万进账，只有每次提供服务后才能记录收入二十万)\n- 设备折旧的开销并不影响现金流量\n\n<!--More-->\n\n先上表格感受一下：\n        \n>**A公司损益表**\n\n|  条目                                      |  2015        |\n|:------------------------------------------| ------------:|\n| Revenue               | $ 1,725,000|\n|  Cost of Good sold    | $ 525,000|\n|**Gross Profit**|$1,200,000|\n|**Operating Expenses**|-|\n|Advertising|$5,000|\n|Employee benifits|$15,000|\n|Insurance|$25,000|\n|Office supply|$10,000|\n|Salaries and wages|$550,000|\n|**Operating Income before depriciation**|$595,000|\n|Depreciation|$120,000|\n|Operating profit|$475,000|\n|Interest Expense|$25,000|\n|**Earning before tax**|$450,000|\n|Extrodinary expense|$20,000|\n|Tax expense(40%)|$270,000|\n|Net Income|$50,000|\n|Dividends|-|\n|Earning per share|-|\n\n从总收入(Revenue)到净收入(Net Income)，损益表大致分为五个部分:\n\n1. 毛利润（Gross Profit)\n    - 总收入 - 生产成本 = 毛利润\n2. 营业收入(Operating income)\n    - 毛利润 - 运营成本 = 营业收入（计算设备折旧前，也称为EBITDA - Earning befor Interest Tax Deprciation & Amortization）\n    - 运营成本是非直接生产成本(生产材料生产劳动力以外的成本)，比如公司福利，购买的保险，办公用品，水电花销（非工厂使用) \n3. 营业利润(Operation Profit)\n    - 营业收入 - 折旧开支 = 营业利润\n4. 税前利润，这一环节清偿债务利息\n    - 如果没有负债或者不需要支付利息的话 = 营业利润\n    - 税前利润 = 营业利润 - 债务利息\n5. 税后利润（净利润)\n    - 所得税 = 税前利润 x 税率\n    - 净利润 = 税前利润 - 所得税\n    - 值得一提的是非常费用(extraordinary expense),即非常规损失（灾害损失，失窃等），对于这些开销可以进行税务减免，假如税率为40%,损失为20,000.我们可以将花销记为 **损失金额 x (1 - 税率) = 16，000**\n    \n×其中2,3两步可以分开也可以合并，折旧成本可以计算在运营成本内\n\n###损益表的作用\n通过上面的例子我们不难看出，损益表与公司的经营成本利润息息相关。我们可以通过损益表来计算各部分支出所占营业额比例并用来分析利润增减变化的原因，作为公司经营决策的依据，优化公司的运营结构，增加利润空间。\n\n###生产成本/实际成本\n\n在这里我们顺便提一下人们盛传的\"一双耐克鞋的成本只需要8美元却卖100美元\",实际上这是不准确的，因为8美元是鞋的生产成本而并不是公司实际的成本。我们再来看上面的损益表: 销售额1,725,000美元，生产成本只有525,000美元，毛利润则高达1,200,000美元，是生产成本的两倍还多！所以我们可以由此推断出公司的售价太高以至于不切实际吗？并不是这样的，我们来看一下净利润(Net Income),只有50,000美元，实际利润率只有3%不到\n\n###股息和每股收益\n损益表的最后部分是股息(dividends)和每股收益(Earning per share)，其中每股收益是将净收入按股份分配给股东:\n\n    每股收益 = 净收入 / 股份数量\n\n股息则为公司对股东的分红，但是股息和每股收益往往**并不相同**，这将涉及到[股东权益变动表]()的内容。\n\n\n\n损益表展现了公司的运营结构，就好比我们看到了公司的筋脉。但是我们并不能直观地了解到公司的规模（即便我们可以通过营业额来推测，但并不准确）。要了解公司的规模 —— 是猴子， 猩猩 ， 还是人，我们需要的是[资产负债表]().\n\n\n\n##资产负债表\n\n资产负债表是公司资产(Asset)和负债(Liability)的速写，它展现了公司的规模以及资产债务配置。大致有以下几点：\n\n- 公司的总资产，总债务和股东权益\n- 公司投资的项目，融资的方式和时间的长短\n- 营运资金，公司财务健康状况\n- 一些其他细节\n\n还是先来看一张报表：\n\n>**B公司资产负债表**\n\n|  条目                                    |  2016  |\n|:----------------------------------------| ------:|\n|**Asset**|-|\n|Cash|$35|\n|Account receivable(A/R)|$1,450|\n|Inventory|$930|\n|Other Current Asset|$402|\n|**Total current asset**|$2,817|\n|Gross Financial Assets|$7,500|\n|- Acc Dep|($2,582)|\n|Net Financial Assets|$4,918|\n|**Total Assets**|$7,735|\n|**Liability**|-|\n|Account Payable(A/P)|$373|\n|Note Payable(N/P)|$90|\n|Other Current Liability|$1,554|\n|**Total Current Liability**|$2,017|\n|Long term debt|$2,100|\n|**Equity**|-|\n|Common Stock|$1,894|\n|Retained Earning|$1,724|\n|**Total Equity**|$3,618|\n|**Total Liability & and Equity**|$7,735|\n\n\n首先，根据上表我们不难看出:\n\n    总资产(Total Asset) = 总债务(Total Liability ) + 总股东权益(Total Equity) \n\n这个公式很基础，也很重要。它的道理其实也很简单: 假如你和你的朋友合资开了一家公司。公司的总资产是100w, 其中60w是你和你的朋友出的资金，另外四十万是银行的贷款。资产负债表会显示：总资产100w,总负债40w,股东权益60w。 如果我们不能够将它配平，股东的钱加上银行的资金大于或者小于100w。我们就会莫名其妙多了/少了一笔资金，这是非常不合理的，也很吓人。\n\n\n###资产\n\n资产分为两种，流动资产和固定资产。我们使用流动性来区分这二者: 在公司的账簿上只能**挂一年及以内**的，我们称为流动资产，反之则为固定资产，首先我们来看流动资产：\n\n流动资产通常有:\n\n- 现金\n- 应收账款，（提前预支给顾客商品，并未立即收到付款的项目。也就是我们说的赊账）\n- 存货（未卖出去的商品）\n- 预付费的项目（保险，房租，水电杂费等)\n- 短线持有股票债券等（一年以内)\n\n其中，现金的流动性是最好的。其他项目，相比于固定资产，也是最容易套现的。公司可以在需要的时刻使用现金或者套现来清偿债务。\n\n固定资产则是一些本身变动并不是很大的资产。你可能今天手里有三百万现金，明天拿去投资（现金流出),但是你如果今天买了一栋楼，那么这个楼是长期投资并且会在很长一短时间内（一年以上）出现在资产负债表的相同位置，这栋楼就是你的固定资产。固定资产通常如下：\n\n- 生产装备设备\n- 楼房，地皮\n- 长线持有的债券\n- 折旧费用（负值）\n- 无形资产（商标，专利，等等）\n\n相比于流动资产，固定资产的套现能力要差很多。作为固定资产，我们不得不提一个名词 - **账面价值(book value)**。 账面价值就是以历史成本为衡量标准的资产价值。假如你十年前花了2000万买了一栋楼，十年后的今天它的市值已经涨到了2个亿。根据历史成本原则，我们在资产负债表上仍然将这栋楼的价值记为2000万。如果不使用这种方法而是根据市场价格来报的话，试想一下我们的损益表和现金流量表会有怎样的变化。-- 20xx年，如果房子当年贬值到1000万，而你的税前收入为500万，但是你不得不把房价亏损记入损益表，这时损益表显示你税前亏损500万。\n\n\n\n###负债\n\n负债与资产相对也相似。分为流动债务与长期债务，仍然以一年为衡量标准。负债是公司筹资或融资后的产物，负债过少不利于公司发展，而负债过多容易破产。通常负债表显示的债务为公司的资金来源，数额或者利息：\n\n- 银行贷款\n- 公司发行的债券\n- 到期应付利息\n- 未付工资， 未付货款\n\n\n\n###股东权益\n\n\n股东权益通常是指股东在公司所投的资金和相应回报之和，它通常包含\n\n- 流通的股票\n- 股票除面值外的价值 （ 发行时10元一股，流通时涨到100元，90元为是面值以外的价值）\n- 未分配的利润\n\n\n\n\n即便我们可以通过损益表看到公司的盈亏状况和收入支出的结构，可以通过资产负债表看到公司的规模，资产配置，负债状况和股东权益。但是作为利益相关者（投资者或内部管理人员)， 我们还需要了解公司资金的动向：从哪儿来，到哪儿去，用了多少。这个时候我们需要**现金流量表**\n\n\n\n##现金流量表\n\n现金流量表是指记录企业在一段时间内现金或者现金等价物流入或流出的报表。它具体列举了公司各项经济活动中的现金流入的来源和流出的具体原因，反应了资产负债表中项目的资金变动。由于资产负债表记录的是使用历史成本的账面价值容易引起误导，而损益表的净利润又不能代表公司的现金收入，所以对于投资者或者财务经理来讲，现金流量表在决策时有着举足轻重的地位。\n\n###现金流量表的构成\n\n现金流量表主要分为三个部分：\n\n- 通过运营产生的现金流动\n    - 商品出售后的资金回流\n    - 劳动力，生产材料的支付\n    - 日常运营开销\n    - ...\n- 通过投资产生的现金流动\n    - 通过投资获得的利润\n    - 买卖不动产的资金流出\n    -  ...\n- 通过筹资产生的现金流动\n    - 通过筹资而流入的现金流\n    - 公司所需支付的利息，分红\n    -  ...\n\n###现金流量表的作用\n\n基于现金流量表，我们可以\n- 分析公司的趋势，\n- 创现能力，现金流量表评估公司自身创造现金流量（比如回收应收账款)的能力，\n- 偿债能力，如果现金与流动负债比率过低，偿债压力会非常大。\n\n\n###现金流量表的编制\n\n>**直接法**\n\n下面是一张使用直接法(Direct method)编制的现金流量表（括号内为流出）\n\n>**C公司现金流量表(直接法)**\n\n|  条目                                    |  2015  |\n|:----------------------------------------| ------:|\n|**Cash flow from operating activities**|-|\n|cash collected from customers|$5,486|\n|cash paid for labor|($890)|\n|cash paid for material|($1,134)|\n|Lease payment|($400)|\n|Sales of A/R|$236|\n|Net cash flow from operating acivities|$3,298|\n|**Cash flow from investing activities**|-|\n|Dividends received|$35|\n|Purchase of equipment|($453)|\n|Purchase of bonds|($350)|\n|Net cash flow from investing acivities|($768)|\n|**Cash flow from financing activities**|-|\n|Interest paid|($15)|\n|Proceed of short-term debt|$800|\n|Net cash flow from financing acivities|$785|\n|**Cash flow from income taxes**|\n|Cash paid for current tax expense|($935)|\n|**Net change in cash**|$2,470|\n|**Beginning cash**|$3,153|\n|**Ending cash**|$5,623|\n\n\n直接法是指通过现金流动的主要类别直接反映企业经营活动的现金流量的方法。上表反映了公司具体的现金流动（销售资金回流，各项成本支付，各类投资融资项目的现金流动。采用直接法可以更精准地揭示现金的来源和用途，对未来现金流量的预测有帮助。\n\n\n>**间接法**\n\n间接法是通过在以当前净利润的基础上通过调整项目来反映企业经营活动的方法。它可以通过比较净收益和净现金流量的差别来分析收益的质量和资金管理状况。\n\n\n我们先回到资产负债表，观察它的变化：\n\n>**B公司资产负债表**\n\n|  条目                                    |  2016  |  2015  |\n|:----------------------------------------| ------:| ------:|\n|**Asset**|-|-|\n|Cash|$35|$350|\n|Account receivable(A/R)|$1,450|$1,125|\n|Inventory|$930|$245|\n|Other Current Asset|$402|$351|\n|Total current asset|$2,817|$2,071|\n|Gross Financial Assets|$7,500|$6,400|\n|- Acc Dep|($2,582)|($2,313)|\n|Net Financial Assets|$4,918|$4,087|\n|Total Assets|$7,735|$6,158|\n|**Liability**|-|-|\n|Account Payable(A/P)|$373|$$325|\n|Note Payable(N/P)(1 year)|$90|$120|\n|Other Current Liability|$1,554|$1,265|\n|Total Current Liability|$2,017|$$1,710|\n|Long term debt|$2,100|$1,200|\n|**Equity**|-|-|\n|Common Stock|$1,894|$2,354|\n|Retained Earning|$1,724|$894|\n|Total Equity|$3,618|$3,248|\n|Total Liability & and Equity|$7,735|$6,158 | \n\n我们可以通过一些简单的会计公式来推导：\n\n    总资产(Total Asset) = 总债务(Total Liability ) + 总股东权益(Total Equity) \n    流动资产 + 固定资产 = 流动债务 + 长期债务 + 总股东权益\n    现金 + 非现金流动资产 + 固定资产 = 流动债务 + 长期债务 + 总股东权益\n\n所以我们可以得到\n\n    现金 = 流动债务 + 长期债务 + 总股东权益 - 非现金流动资产 - 固定资产 \n    \n可以看出，债务和股东权益与现金正相关，而非现金资产与现金负相关。可以把它们归结为两类，现金的来源和用途\n\n- 增加负债和股东投资的本质是企业从外部或内部获取现金，所以是现金的来源\n- 资产的增加可以说是企业对其本身或外部进行投资，所以是现金的用途\n    \n归好类后我们来看运营产生的现金流动\n\n|  条目                                    |  2016  |\n|:----------------------------------------| ------:|\n|**Cash flow from operating activities**|-|\n| - A/R |($325)|\n| - Inventory|($685)|\n| - Other current Asset|$(51)|\n| + Accumulated Deprication|$269|\n| + A/P|$48|\n|Net cash flow from operating acivities|($744)|\n\n\n值得一提的是，我们Accumulated Deprication（折旧贬值）一项，在损益表里记为开销，在资产负债表中也是抵消资产的项目，为什么现金流动是流入呢？\n>因为作为开销，这个钱本来是应该流出的。我们以损益表的净利润为基础进行调整，**已经扣除了折旧损失**而**折旧是无形的无法流出**。所以我们需要在现金流量表里面补回来。\n\n在来看我们的通过投资产生的现金流动\n\n|  条目                                    |  2016  |\n|:----------------------------------------| ------:|\n|**Cash flow from investing activities**| | \n| - Gross Financial Assets(Purchase)|($1,100)|\n|Net cash flow from investing acivities|($1,100)|\n\n在来看我们的通过融资产生的现金流动\n\n|  条目                                    |  2016  |\n|:----------------------------------------| ------:|\n|**Cash flow from investing activities**| | \n| - N/P|($30)|\n| + Long term debt|$900|\n| + Other current Liability|$289|\n| - Common stock|($460)|\n|Net cash flow from financing acivities|($699)|\n\n假设我们的净利润是$$2,228M于是我们有了一张完整的现金流量表：\n\n>**B公司现金流量表(间接法)**\n\n|  条目                                    |  2016  |\n|:----------------------------------------| ------:|\n|**Net Income**|$2,228|\n|**Cash flow from operating activities**|-|\n| - A/R |($325)|\n| - Inventory|($685)|\n| - Other current Asset|$(51)|\n| + Accumulated Deprication|$269|\n| + A/P|$48|\n|Net cash flow from operating acivities|($744)|\n|**Cash flow from investing activities**| | \n| - Gross Financial Assets(Purchase)|($1,100)|\n|Net cash flow from investing acivities|($1,100)|\n|**Cash flow from investing activities**| | \n| - N/P|($30)|\n| + Long term debt|$900|\n| + Other current Liability|$289|\n| - Common stock|($460)|\n|Net cash flow from financing acivities|($699)|\n|**Net Cash Flow**|($315)|\n|Beginning cash|$350|\n|Ending Cash|$35|\n\n和之前的资产负债表相比，仔细看看少了什么？没错，是Retained Earnings(未分配利润)，道理很简单，未分配利润包含在了Net Income（净利润)里面。有趣的是，上面表格中除了我们除了net income 以外，所有数字来源于资产负债表，这意味着我们可以通过初始现金和结算时的现金和资产负债表中的各项变动来倒着推算公司的净利润\n\n根据公司运营产生的现金流动，我们不难看出，公司的现金大幅减少而资产大幅增加，这说明了**公司正在进行扩张**。而公司的现金不足以支撑公司的扩张，所以公司先通过增加债务的方式获得资金。\n\n\n\n\n\n三种报表互相关联，从不同角度评估了公司的财务状况，是投资者和管理者决策时的重要工具。\n","source":"_posts/financial-reporting-intro.md","raw":"---\ntitle: 财务报表分析：报表简介\ndate: 2016-09-08 00:07:15\ncategories: Finance\n---\n\n\n##财务报表简介\n\n财务报表指日常会计核算资料的基础上按照规定方式编写的综合反映企业某一日期的财务状况，经营成果的书面文件。它主要分为三大部分，它们分别是:\n\n- 资产负债表(Balance sheet)，公司的资产和负债，体现公司在某一时刻下的财务状况\n- 损益表 (Income statement)，指出公司的运营表现，盈利或者亏损\n- 现金流量表 (Cash Flow statement) 指出在某一时间段内公司的现金流动情况\n\n通过这些报表我们可以多方位地了解到公司的状况。\n- 对于经理来说，可以更清楚地了解公司的表现和潜力；\n- 对于股东来说，财务报表可以对公司估值，推测公司的未来前景；\n- 对债权人来讲，可以了解到公司财务的健康度是否可以偿还债务。\n- 对政府来讲，可以有效地监管公司，进一步避免偷税漏税。\n\n我们先来看损益表;\n\n##损益表(Income statement)\n\n损益表展现的是公司的总收入(Revenue不是净利润 = 销售数量 x 单价)，开销(Expense),和净利润\n\n    总收入(Revenue） - 开销(Expense) = 净收入（Income）\n    \n虽然是作为记录销售收入的损益表，但是上面记录的净收入和我们的现金流入并不一定相等，比如：\n\n- 使用权责发生制(accural accounting)，当产品售出并完成交接后计算收入和支出（比如收到一百万的预付款，一年内分五次向客户提供产品。即便一百万进账，只有每次提供服务后才能记录收入二十万)\n- 设备折旧的开销并不影响现金流量\n\n<!--More-->\n\n先上表格感受一下：\n        \n>**A公司损益表**\n\n|  条目                                      |  2015        |\n|:------------------------------------------| ------------:|\n| Revenue               | $ 1,725,000|\n|  Cost of Good sold    | $ 525,000|\n|**Gross Profit**|$1,200,000|\n|**Operating Expenses**|-|\n|Advertising|$5,000|\n|Employee benifits|$15,000|\n|Insurance|$25,000|\n|Office supply|$10,000|\n|Salaries and wages|$550,000|\n|**Operating Income before depriciation**|$595,000|\n|Depreciation|$120,000|\n|Operating profit|$475,000|\n|Interest Expense|$25,000|\n|**Earning before tax**|$450,000|\n|Extrodinary expense|$20,000|\n|Tax expense(40%)|$270,000|\n|Net Income|$50,000|\n|Dividends|-|\n|Earning per share|-|\n\n从总收入(Revenue)到净收入(Net Income)，损益表大致分为五个部分:\n\n1. 毛利润（Gross Profit)\n    - 总收入 - 生产成本 = 毛利润\n2. 营业收入(Operating income)\n    - 毛利润 - 运营成本 = 营业收入（计算设备折旧前，也称为EBITDA - Earning befor Interest Tax Deprciation & Amortization）\n    - 运营成本是非直接生产成本(生产材料生产劳动力以外的成本)，比如公司福利，购买的保险，办公用品，水电花销（非工厂使用) \n3. 营业利润(Operation Profit)\n    - 营业收入 - 折旧开支 = 营业利润\n4. 税前利润，这一环节清偿债务利息\n    - 如果没有负债或者不需要支付利息的话 = 营业利润\n    - 税前利润 = 营业利润 - 债务利息\n5. 税后利润（净利润)\n    - 所得税 = 税前利润 x 税率\n    - 净利润 = 税前利润 - 所得税\n    - 值得一提的是非常费用(extraordinary expense),即非常规损失（灾害损失，失窃等），对于这些开销可以进行税务减免，假如税率为40%,损失为20,000.我们可以将花销记为 **损失金额 x (1 - 税率) = 16，000**\n    \n×其中2,3两步可以分开也可以合并，折旧成本可以计算在运营成本内\n\n###损益表的作用\n通过上面的例子我们不难看出，损益表与公司的经营成本利润息息相关。我们可以通过损益表来计算各部分支出所占营业额比例并用来分析利润增减变化的原因，作为公司经营决策的依据，优化公司的运营结构，增加利润空间。\n\n###生产成本/实际成本\n\n在这里我们顺便提一下人们盛传的\"一双耐克鞋的成本只需要8美元却卖100美元\",实际上这是不准确的，因为8美元是鞋的生产成本而并不是公司实际的成本。我们再来看上面的损益表: 销售额1,725,000美元，生产成本只有525,000美元，毛利润则高达1,200,000美元，是生产成本的两倍还多！所以我们可以由此推断出公司的售价太高以至于不切实际吗？并不是这样的，我们来看一下净利润(Net Income),只有50,000美元，实际利润率只有3%不到\n\n###股息和每股收益\n损益表的最后部分是股息(dividends)和每股收益(Earning per share)，其中每股收益是将净收入按股份分配给股东:\n\n    每股收益 = 净收入 / 股份数量\n\n股息则为公司对股东的分红，但是股息和每股收益往往**并不相同**，这将涉及到[股东权益变动表]()的内容。\n\n\n\n损益表展现了公司的运营结构，就好比我们看到了公司的筋脉。但是我们并不能直观地了解到公司的规模（即便我们可以通过营业额来推测，但并不准确）。要了解公司的规模 —— 是猴子， 猩猩 ， 还是人，我们需要的是[资产负债表]().\n\n\n\n##资产负债表\n\n资产负债表是公司资产(Asset)和负债(Liability)的速写，它展现了公司的规模以及资产债务配置。大致有以下几点：\n\n- 公司的总资产，总债务和股东权益\n- 公司投资的项目，融资的方式和时间的长短\n- 营运资金，公司财务健康状况\n- 一些其他细节\n\n还是先来看一张报表：\n\n>**B公司资产负债表**\n\n|  条目                                    |  2016  |\n|:----------------------------------------| ------:|\n|**Asset**|-|\n|Cash|$35|\n|Account receivable(A/R)|$1,450|\n|Inventory|$930|\n|Other Current Asset|$402|\n|**Total current asset**|$2,817|\n|Gross Financial Assets|$7,500|\n|- Acc Dep|($2,582)|\n|Net Financial Assets|$4,918|\n|**Total Assets**|$7,735|\n|**Liability**|-|\n|Account Payable(A/P)|$373|\n|Note Payable(N/P)|$90|\n|Other Current Liability|$1,554|\n|**Total Current Liability**|$2,017|\n|Long term debt|$2,100|\n|**Equity**|-|\n|Common Stock|$1,894|\n|Retained Earning|$1,724|\n|**Total Equity**|$3,618|\n|**Total Liability & and Equity**|$7,735|\n\n\n首先，根据上表我们不难看出:\n\n    总资产(Total Asset) = 总债务(Total Liability ) + 总股东权益(Total Equity) \n\n这个公式很基础，也很重要。它的道理其实也很简单: 假如你和你的朋友合资开了一家公司。公司的总资产是100w, 其中60w是你和你的朋友出的资金，另外四十万是银行的贷款。资产负债表会显示：总资产100w,总负债40w,股东权益60w。 如果我们不能够将它配平，股东的钱加上银行的资金大于或者小于100w。我们就会莫名其妙多了/少了一笔资金，这是非常不合理的，也很吓人。\n\n\n###资产\n\n资产分为两种，流动资产和固定资产。我们使用流动性来区分这二者: 在公司的账簿上只能**挂一年及以内**的，我们称为流动资产，反之则为固定资产，首先我们来看流动资产：\n\n流动资产通常有:\n\n- 现金\n- 应收账款，（提前预支给顾客商品，并未立即收到付款的项目。也就是我们说的赊账）\n- 存货（未卖出去的商品）\n- 预付费的项目（保险，房租，水电杂费等)\n- 短线持有股票债券等（一年以内)\n\n其中，现金的流动性是最好的。其他项目，相比于固定资产，也是最容易套现的。公司可以在需要的时刻使用现金或者套现来清偿债务。\n\n固定资产则是一些本身变动并不是很大的资产。你可能今天手里有三百万现金，明天拿去投资（现金流出),但是你如果今天买了一栋楼，那么这个楼是长期投资并且会在很长一短时间内（一年以上）出现在资产负债表的相同位置，这栋楼就是你的固定资产。固定资产通常如下：\n\n- 生产装备设备\n- 楼房，地皮\n- 长线持有的债券\n- 折旧费用（负值）\n- 无形资产（商标，专利，等等）\n\n相比于流动资产，固定资产的套现能力要差很多。作为固定资产，我们不得不提一个名词 - **账面价值(book value)**。 账面价值就是以历史成本为衡量标准的资产价值。假如你十年前花了2000万买了一栋楼，十年后的今天它的市值已经涨到了2个亿。根据历史成本原则，我们在资产负债表上仍然将这栋楼的价值记为2000万。如果不使用这种方法而是根据市场价格来报的话，试想一下我们的损益表和现金流量表会有怎样的变化。-- 20xx年，如果房子当年贬值到1000万，而你的税前收入为500万，但是你不得不把房价亏损记入损益表，这时损益表显示你税前亏损500万。\n\n\n\n###负债\n\n负债与资产相对也相似。分为流动债务与长期债务，仍然以一年为衡量标准。负债是公司筹资或融资后的产物，负债过少不利于公司发展，而负债过多容易破产。通常负债表显示的债务为公司的资金来源，数额或者利息：\n\n- 银行贷款\n- 公司发行的债券\n- 到期应付利息\n- 未付工资， 未付货款\n\n\n\n###股东权益\n\n\n股东权益通常是指股东在公司所投的资金和相应回报之和，它通常包含\n\n- 流通的股票\n- 股票除面值外的价值 （ 发行时10元一股，流通时涨到100元，90元为是面值以外的价值）\n- 未分配的利润\n\n\n\n\n即便我们可以通过损益表看到公司的盈亏状况和收入支出的结构，可以通过资产负债表看到公司的规模，资产配置，负债状况和股东权益。但是作为利益相关者（投资者或内部管理人员)， 我们还需要了解公司资金的动向：从哪儿来，到哪儿去，用了多少。这个时候我们需要**现金流量表**\n\n\n\n##现金流量表\n\n现金流量表是指记录企业在一段时间内现金或者现金等价物流入或流出的报表。它具体列举了公司各项经济活动中的现金流入的来源和流出的具体原因，反应了资产负债表中项目的资金变动。由于资产负债表记录的是使用历史成本的账面价值容易引起误导，而损益表的净利润又不能代表公司的现金收入，所以对于投资者或者财务经理来讲，现金流量表在决策时有着举足轻重的地位。\n\n###现金流量表的构成\n\n现金流量表主要分为三个部分：\n\n- 通过运营产生的现金流动\n    - 商品出售后的资金回流\n    - 劳动力，生产材料的支付\n    - 日常运营开销\n    - ...\n- 通过投资产生的现金流动\n    - 通过投资获得的利润\n    - 买卖不动产的资金流出\n    -  ...\n- 通过筹资产生的现金流动\n    - 通过筹资而流入的现金流\n    - 公司所需支付的利息，分红\n    -  ...\n\n###现金流量表的作用\n\n基于现金流量表，我们可以\n- 分析公司的趋势，\n- 创现能力，现金流量表评估公司自身创造现金流量（比如回收应收账款)的能力，\n- 偿债能力，如果现金与流动负债比率过低，偿债压力会非常大。\n\n\n###现金流量表的编制\n\n>**直接法**\n\n下面是一张使用直接法(Direct method)编制的现金流量表（括号内为流出）\n\n>**C公司现金流量表(直接法)**\n\n|  条目                                    |  2015  |\n|:----------------------------------------| ------:|\n|**Cash flow from operating activities**|-|\n|cash collected from customers|$5,486|\n|cash paid for labor|($890)|\n|cash paid for material|($1,134)|\n|Lease payment|($400)|\n|Sales of A/R|$236|\n|Net cash flow from operating acivities|$3,298|\n|**Cash flow from investing activities**|-|\n|Dividends received|$35|\n|Purchase of equipment|($453)|\n|Purchase of bonds|($350)|\n|Net cash flow from investing acivities|($768)|\n|**Cash flow from financing activities**|-|\n|Interest paid|($15)|\n|Proceed of short-term debt|$800|\n|Net cash flow from financing acivities|$785|\n|**Cash flow from income taxes**|\n|Cash paid for current tax expense|($935)|\n|**Net change in cash**|$2,470|\n|**Beginning cash**|$3,153|\n|**Ending cash**|$5,623|\n\n\n直接法是指通过现金流动的主要类别直接反映企业经营活动的现金流量的方法。上表反映了公司具体的现金流动（销售资金回流，各项成本支付，各类投资融资项目的现金流动。采用直接法可以更精准地揭示现金的来源和用途，对未来现金流量的预测有帮助。\n\n\n>**间接法**\n\n间接法是通过在以当前净利润的基础上通过调整项目来反映企业经营活动的方法。它可以通过比较净收益和净现金流量的差别来分析收益的质量和资金管理状况。\n\n\n我们先回到资产负债表，观察它的变化：\n\n>**B公司资产负债表**\n\n|  条目                                    |  2016  |  2015  |\n|:----------------------------------------| ------:| ------:|\n|**Asset**|-|-|\n|Cash|$35|$350|\n|Account receivable(A/R)|$1,450|$1,125|\n|Inventory|$930|$245|\n|Other Current Asset|$402|$351|\n|Total current asset|$2,817|$2,071|\n|Gross Financial Assets|$7,500|$6,400|\n|- Acc Dep|($2,582)|($2,313)|\n|Net Financial Assets|$4,918|$4,087|\n|Total Assets|$7,735|$6,158|\n|**Liability**|-|-|\n|Account Payable(A/P)|$373|$$325|\n|Note Payable(N/P)(1 year)|$90|$120|\n|Other Current Liability|$1,554|$1,265|\n|Total Current Liability|$2,017|$$1,710|\n|Long term debt|$2,100|$1,200|\n|**Equity**|-|-|\n|Common Stock|$1,894|$2,354|\n|Retained Earning|$1,724|$894|\n|Total Equity|$3,618|$3,248|\n|Total Liability & and Equity|$7,735|$6,158 | \n\n我们可以通过一些简单的会计公式来推导：\n\n    总资产(Total Asset) = 总债务(Total Liability ) + 总股东权益(Total Equity) \n    流动资产 + 固定资产 = 流动债务 + 长期债务 + 总股东权益\n    现金 + 非现金流动资产 + 固定资产 = 流动债务 + 长期债务 + 总股东权益\n\n所以我们可以得到\n\n    现金 = 流动债务 + 长期债务 + 总股东权益 - 非现金流动资产 - 固定资产 \n    \n可以看出，债务和股东权益与现金正相关，而非现金资产与现金负相关。可以把它们归结为两类，现金的来源和用途\n\n- 增加负债和股东投资的本质是企业从外部或内部获取现金，所以是现金的来源\n- 资产的增加可以说是企业对其本身或外部进行投资，所以是现金的用途\n    \n归好类后我们来看运营产生的现金流动\n\n|  条目                                    |  2016  |\n|:----------------------------------------| ------:|\n|**Cash flow from operating activities**|-|\n| - A/R |($325)|\n| - Inventory|($685)|\n| - Other current Asset|$(51)|\n| + Accumulated Deprication|$269|\n| + A/P|$48|\n|Net cash flow from operating acivities|($744)|\n\n\n值得一提的是，我们Accumulated Deprication（折旧贬值）一项，在损益表里记为开销，在资产负债表中也是抵消资产的项目，为什么现金流动是流入呢？\n>因为作为开销，这个钱本来是应该流出的。我们以损益表的净利润为基础进行调整，**已经扣除了折旧损失**而**折旧是无形的无法流出**。所以我们需要在现金流量表里面补回来。\n\n在来看我们的通过投资产生的现金流动\n\n|  条目                                    |  2016  |\n|:----------------------------------------| ------:|\n|**Cash flow from investing activities**| | \n| - Gross Financial Assets(Purchase)|($1,100)|\n|Net cash flow from investing acivities|($1,100)|\n\n在来看我们的通过融资产生的现金流动\n\n|  条目                                    |  2016  |\n|:----------------------------------------| ------:|\n|**Cash flow from investing activities**| | \n| - N/P|($30)|\n| + Long term debt|$900|\n| + Other current Liability|$289|\n| - Common stock|($460)|\n|Net cash flow from financing acivities|($699)|\n\n假设我们的净利润是$$2,228M于是我们有了一张完整的现金流量表：\n\n>**B公司现金流量表(间接法)**\n\n|  条目                                    |  2016  |\n|:----------------------------------------| ------:|\n|**Net Income**|$2,228|\n|**Cash flow from operating activities**|-|\n| - A/R |($325)|\n| - Inventory|($685)|\n| - Other current Asset|$(51)|\n| + Accumulated Deprication|$269|\n| + A/P|$48|\n|Net cash flow from operating acivities|($744)|\n|**Cash flow from investing activities**| | \n| - Gross Financial Assets(Purchase)|($1,100)|\n|Net cash flow from investing acivities|($1,100)|\n|**Cash flow from investing activities**| | \n| - N/P|($30)|\n| + Long term debt|$900|\n| + Other current Liability|$289|\n| - Common stock|($460)|\n|Net cash flow from financing acivities|($699)|\n|**Net Cash Flow**|($315)|\n|Beginning cash|$350|\n|Ending Cash|$35|\n\n和之前的资产负债表相比，仔细看看少了什么？没错，是Retained Earnings(未分配利润)，道理很简单，未分配利润包含在了Net Income（净利润)里面。有趣的是，上面表格中除了我们除了net income 以外，所有数字来源于资产负债表，这意味着我们可以通过初始现金和结算时的现金和资产负债表中的各项变动来倒着推算公司的净利润\n\n根据公司运营产生的现金流动，我们不难看出，公司的现金大幅减少而资产大幅增加，这说明了**公司正在进行扩张**。而公司的现金不足以支撑公司的扩张，所以公司先通过增加债务的方式获得资金。\n\n\n\n\n\n三种报表互相关联，从不同角度评估了公司的财务状况，是投资者和管理者决策时的重要工具。\n","slug":"financial-reporting-intro","published":1,"updated":"2018-05-30T16:08:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiqvlo1o001bglu3ioz5uf9x","content":"<p>##财务报表简介</p>\n<p>财务报表指日常会计核算资料的基础上按照规定方式编写的综合反映企业某一日期的财务状况，经营成果的书面文件。它主要分为三大部分，它们分别是:</p>\n<ul>\n<li>资产负债表(Balance sheet)，公司的资产和负债，体现公司在某一时刻下的财务状况</li>\n<li>损益表 (Income statement)，指出公司的运营表现，盈利或者亏损</li>\n<li>现金流量表 (Cash Flow statement) 指出在某一时间段内公司的现金流动情况</li>\n</ul>\n<p>通过这些报表我们可以多方位地了解到公司的状况。</p>\n<ul>\n<li>对于经理来说，可以更清楚地了解公司的表现和潜力；</li>\n<li>对于股东来说，财务报表可以对公司估值，推测公司的未来前景；</li>\n<li>对债权人来讲，可以了解到公司财务的健康度是否可以偿还债务。</li>\n<li>对政府来讲，可以有效地监管公司，进一步避免偷税漏税。</li>\n</ul>\n<p>我们先来看损益表;</p>\n<p>##损益表(Income statement)</p>\n<p>损益表展现的是公司的总收入(Revenue不是净利润 = 销售数量 x 单价)，开销(Expense),和净利润</p>\n<pre><code>总收入(Revenue） - 开销(Expense) = 净收入（Income）\n</code></pre><p>虽然是作为记录销售收入的损益表，但是上面记录的净收入和我们的现金流入并不一定相等，比如：</p>\n<ul>\n<li>使用权责发生制(accural accounting)，当产品售出并完成交接后计算收入和支出（比如收到一百万的预付款，一年内分五次向客户提供产品。即便一百万进账，只有每次提供服务后才能记录收入二十万)</li>\n<li>设备折旧的开销并不影响现金流量</li>\n</ul>\n<a id=\"more\"></a>\n<p>先上表格感受一下：</p>\n<blockquote>\n<p><strong>A公司损益表</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">条目</th>\n<th style=\"text-align:right\">2015</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Revenue</td>\n<td style=\"text-align:right\">$ 1,725,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cost of Good sold</td>\n<td style=\"text-align:right\">$ 525,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Gross Profit</strong></td>\n<td style=\"text-align:right\">$1,200,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Operating Expenses</strong></td>\n<td style=\"text-align:right\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Advertising</td>\n<td style=\"text-align:right\">$5,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Employee benifits</td>\n<td style=\"text-align:right\">$15,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Insurance</td>\n<td style=\"text-align:right\">$25,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Office supply</td>\n<td style=\"text-align:right\">$10,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Salaries and wages</td>\n<td style=\"text-align:right\">$550,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Operating Income before depriciation</strong></td>\n<td style=\"text-align:right\">$595,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Depreciation</td>\n<td style=\"text-align:right\">$120,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Operating profit</td>\n<td style=\"text-align:right\">$475,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Interest Expense</td>\n<td style=\"text-align:right\">$25,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Earning before tax</strong></td>\n<td style=\"text-align:right\">$450,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Extrodinary expense</td>\n<td style=\"text-align:right\">$20,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Tax expense(40%)</td>\n<td style=\"text-align:right\">$270,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Net Income</td>\n<td style=\"text-align:right\">$50,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Dividends</td>\n<td style=\"text-align:right\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Earning per share</td>\n<td style=\"text-align:right\">-</td>\n</tr>\n</tbody>\n</table>\n<p>从总收入(Revenue)到净收入(Net Income)，损益表大致分为五个部分:</p>\n<ol>\n<li>毛利润（Gross Profit)<ul>\n<li>总收入 - 生产成本 = 毛利润</li>\n</ul>\n</li>\n<li>营业收入(Operating income)<ul>\n<li>毛利润 - 运营成本 = 营业收入（计算设备折旧前，也称为EBITDA - Earning befor Interest Tax Deprciation &amp; Amortization）</li>\n<li>运营成本是非直接生产成本(生产材料生产劳动力以外的成本)，比如公司福利，购买的保险，办公用品，水电花销（非工厂使用) </li>\n</ul>\n</li>\n<li>营业利润(Operation Profit)<ul>\n<li>营业收入 - 折旧开支 = 营业利润</li>\n</ul>\n</li>\n<li>税前利润，这一环节清偿债务利息<ul>\n<li>如果没有负债或者不需要支付利息的话 = 营业利润</li>\n<li>税前利润 = 营业利润 - 债务利息</li>\n</ul>\n</li>\n<li>税后利润（净利润)<ul>\n<li>所得税 = 税前利润 x 税率</li>\n<li>净利润 = 税前利润 - 所得税</li>\n<li>值得一提的是非常费用(extraordinary expense),即非常规损失（灾害损失，失窃等），对于这些开销可以进行税务减免，假如税率为40%,损失为20,000.我们可以将花销记为 <strong>损失金额 x (1 - 税率) = 16，000</strong></li>\n</ul>\n</li>\n</ol>\n<p>×其中2,3两步可以分开也可以合并，折旧成本可以计算在运营成本内</p>\n<p>###损益表的作用<br>通过上面的例子我们不难看出，损益表与公司的经营成本利润息息相关。我们可以通过损益表来计算各部分支出所占营业额比例并用来分析利润增减变化的原因，作为公司经营决策的依据，优化公司的运营结构，增加利润空间。</p>\n<p>###生产成本/实际成本</p>\n<p>在这里我们顺便提一下人们盛传的”一双耐克鞋的成本只需要8美元却卖100美元”,实际上这是不准确的，因为8美元是鞋的生产成本而并不是公司实际的成本。我们再来看上面的损益表: 销售额1,725,000美元，生产成本只有525,000美元，毛利润则高达1,200,000美元，是生产成本的两倍还多！所以我们可以由此推断出公司的售价太高以至于不切实际吗？并不是这样的，我们来看一下净利润(Net Income),只有50,000美元，实际利润率只有3%不到</p>\n<p>###股息和每股收益<br>损益表的最后部分是股息(dividends)和每股收益(Earning per share)，其中每股收益是将净收入按股份分配给股东:</p>\n<pre><code>每股收益 = 净收入 / 股份数量\n</code></pre><p>股息则为公司对股东的分红，但是股息和每股收益往往<strong>并不相同</strong>，这将涉及到<a href=\"\">股东权益变动表</a>的内容。</p>\n<p>损益表展现了公司的运营结构，就好比我们看到了公司的筋脉。但是我们并不能直观地了解到公司的规模（即便我们可以通过营业额来推测，但并不准确）。要了解公司的规模 —— 是猴子， 猩猩 ， 还是人，我们需要的是<a href=\"\">资产负债表</a>.</p>\n<p>##资产负债表</p>\n<p>资产负债表是公司资产(Asset)和负债(Liability)的速写，它展现了公司的规模以及资产债务配置。大致有以下几点：</p>\n<ul>\n<li>公司的总资产，总债务和股东权益</li>\n<li>公司投资的项目，融资的方式和时间的长短</li>\n<li>营运资金，公司财务健康状况</li>\n<li>一些其他细节</li>\n</ul>\n<p>还是先来看一张报表：</p>\n<blockquote>\n<p><strong>B公司资产负债表</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">条目</th>\n<th style=\"text-align:right\">2016</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>Asset</strong></td>\n<td style=\"text-align:right\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cash</td>\n<td style=\"text-align:right\">$35</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Account receivable(A/R)</td>\n<td style=\"text-align:right\">$1,450</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Inventory</td>\n<td style=\"text-align:right\">$930</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Other Current Asset</td>\n<td style=\"text-align:right\">$402</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Total current asset</strong></td>\n<td style=\"text-align:right\">$2,817</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Gross Financial Assets</td>\n<td style=\"text-align:right\">$7,500</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">- Acc Dep</td>\n<td style=\"text-align:right\">($2,582)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Net Financial Assets</td>\n<td style=\"text-align:right\">$4,918</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Total Assets</strong></td>\n<td style=\"text-align:right\">$7,735</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Liability</strong></td>\n<td style=\"text-align:right\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Account Payable(A/P)</td>\n<td style=\"text-align:right\">$373</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Note Payable(N/P)</td>\n<td style=\"text-align:right\">$90</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Other Current Liability</td>\n<td style=\"text-align:right\">$1,554</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Total Current Liability</strong></td>\n<td style=\"text-align:right\">$2,017</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Long term debt</td>\n<td style=\"text-align:right\">$2,100</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Equity</strong></td>\n<td style=\"text-align:right\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Common Stock</td>\n<td style=\"text-align:right\">$1,894</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Retained Earning</td>\n<td style=\"text-align:right\">$1,724</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Total Equity</strong></td>\n<td style=\"text-align:right\">$3,618</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Total Liability &amp; and Equity</strong></td>\n<td style=\"text-align:right\">$7,735</td>\n</tr>\n</tbody>\n</table>\n<p>首先，根据上表我们不难看出:</p>\n<pre><code>总资产(Total Asset) = 总债务(Total Liability ) + 总股东权益(Total Equity) \n</code></pre><p>这个公式很基础，也很重要。它的道理其实也很简单: 假如你和你的朋友合资开了一家公司。公司的总资产是100w, 其中60w是你和你的朋友出的资金，另外四十万是银行的贷款。资产负债表会显示：总资产100w,总负债40w,股东权益60w。 如果我们不能够将它配平，股东的钱加上银行的资金大于或者小于100w。我们就会莫名其妙多了/少了一笔资金，这是非常不合理的，也很吓人。</p>\n<p>###资产</p>\n<p>资产分为两种，流动资产和固定资产。我们使用流动性来区分这二者: 在公司的账簿上只能<strong>挂一年及以内</strong>的，我们称为流动资产，反之则为固定资产，首先我们来看流动资产：</p>\n<p>流动资产通常有:</p>\n<ul>\n<li>现金</li>\n<li>应收账款，（提前预支给顾客商品，并未立即收到付款的项目。也就是我们说的赊账）</li>\n<li>存货（未卖出去的商品）</li>\n<li>预付费的项目（保险，房租，水电杂费等)</li>\n<li>短线持有股票债券等（一年以内)</li>\n</ul>\n<p>其中，现金的流动性是最好的。其他项目，相比于固定资产，也是最容易套现的。公司可以在需要的时刻使用现金或者套现来清偿债务。</p>\n<p>固定资产则是一些本身变动并不是很大的资产。你可能今天手里有三百万现金，明天拿去投资（现金流出),但是你如果今天买了一栋楼，那么这个楼是长期投资并且会在很长一短时间内（一年以上）出现在资产负债表的相同位置，这栋楼就是你的固定资产。固定资产通常如下：</p>\n<ul>\n<li>生产装备设备</li>\n<li>楼房，地皮</li>\n<li>长线持有的债券</li>\n<li>折旧费用（负值）</li>\n<li>无形资产（商标，专利，等等）</li>\n</ul>\n<p>相比于流动资产，固定资产的套现能力要差很多。作为固定资产，我们不得不提一个名词 - <strong>账面价值(book value)</strong>。 账面价值就是以历史成本为衡量标准的资产价值。假如你十年前花了2000万买了一栋楼，十年后的今天它的市值已经涨到了2个亿。根据历史成本原则，我们在资产负债表上仍然将这栋楼的价值记为2000万。如果不使用这种方法而是根据市场价格来报的话，试想一下我们的损益表和现金流量表会有怎样的变化。– 20xx年，如果房子当年贬值到1000万，而你的税前收入为500万，但是你不得不把房价亏损记入损益表，这时损益表显示你税前亏损500万。</p>\n<p>###负债</p>\n<p>负债与资产相对也相似。分为流动债务与长期债务，仍然以一年为衡量标准。负债是公司筹资或融资后的产物，负债过少不利于公司发展，而负债过多容易破产。通常负债表显示的债务为公司的资金来源，数额或者利息：</p>\n<ul>\n<li>银行贷款</li>\n<li>公司发行的债券</li>\n<li>到期应付利息</li>\n<li>未付工资， 未付货款</li>\n</ul>\n<p>###股东权益</p>\n<p>股东权益通常是指股东在公司所投的资金和相应回报之和，它通常包含</p>\n<ul>\n<li>流通的股票</li>\n<li>股票除面值外的价值 （ 发行时10元一股，流通时涨到100元，90元为是面值以外的价值）</li>\n<li>未分配的利润</li>\n</ul>\n<p>即便我们可以通过损益表看到公司的盈亏状况和收入支出的结构，可以通过资产负债表看到公司的规模，资产配置，负债状况和股东权益。但是作为利益相关者（投资者或内部管理人员)， 我们还需要了解公司资金的动向：从哪儿来，到哪儿去，用了多少。这个时候我们需要<strong>现金流量表</strong></p>\n<p>##现金流量表</p>\n<p>现金流量表是指记录企业在一段时间内现金或者现金等价物流入或流出的报表。它具体列举了公司各项经济活动中的现金流入的来源和流出的具体原因，反应了资产负债表中项目的资金变动。由于资产负债表记录的是使用历史成本的账面价值容易引起误导，而损益表的净利润又不能代表公司的现金收入，所以对于投资者或者财务经理来讲，现金流量表在决策时有着举足轻重的地位。</p>\n<p>###现金流量表的构成</p>\n<p>现金流量表主要分为三个部分：</p>\n<ul>\n<li>通过运营产生的现金流动<ul>\n<li>商品出售后的资金回流</li>\n<li>劳动力，生产材料的支付</li>\n<li>日常运营开销</li>\n<li>…</li>\n</ul>\n</li>\n<li>通过投资产生的现金流动<ul>\n<li>通过投资获得的利润</li>\n<li>买卖不动产的资金流出</li>\n<li>…</li>\n</ul>\n</li>\n<li>通过筹资产生的现金流动<ul>\n<li>通过筹资而流入的现金流</li>\n<li>公司所需支付的利息，分红</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n<p>###现金流量表的作用</p>\n<p>基于现金流量表，我们可以</p>\n<ul>\n<li>分析公司的趋势，</li>\n<li>创现能力，现金流量表评估公司自身创造现金流量（比如回收应收账款)的能力，</li>\n<li>偿债能力，如果现金与流动负债比率过低，偿债压力会非常大。</li>\n</ul>\n<p>###现金流量表的编制</p>\n<blockquote>\n<p><strong>直接法</strong></p>\n</blockquote>\n<p>下面是一张使用直接法(Direct method)编制的现金流量表（括号内为流出）</p>\n<blockquote>\n<p><strong>C公司现金流量表(直接法)</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">条目</th>\n<th style=\"text-align:right\">2015</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>Cash flow from operating activities</strong></td>\n<td style=\"text-align:right\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cash collected from customers</td>\n<td style=\"text-align:right\">$5,486</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cash paid for labor</td>\n<td style=\"text-align:right\">($890)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cash paid for material</td>\n<td style=\"text-align:right\">($1,134)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Lease payment</td>\n<td style=\"text-align:right\">($400)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Sales of A/R</td>\n<td style=\"text-align:right\">$236</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Net cash flow from operating acivities</td>\n<td style=\"text-align:right\">$3,298</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Cash flow from investing activities</strong></td>\n<td style=\"text-align:right\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Dividends received</td>\n<td style=\"text-align:right\">$35</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Purchase of equipment</td>\n<td style=\"text-align:right\">($453)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Purchase of bonds</td>\n<td style=\"text-align:right\">($350)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Net cash flow from investing acivities</td>\n<td style=\"text-align:right\">($768)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Cash flow from financing activities</strong></td>\n<td style=\"text-align:right\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Interest paid</td>\n<td style=\"text-align:right\">($15)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Proceed of short-term debt</td>\n<td style=\"text-align:right\">$800</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Net cash flow from financing acivities</td>\n<td style=\"text-align:right\">$785</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Cash flow from income taxes</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cash paid for current tax expense</td>\n<td style=\"text-align:right\">($935)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Net change in cash</strong></td>\n<td style=\"text-align:right\">$2,470</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Beginning cash</strong></td>\n<td style=\"text-align:right\">$3,153</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Ending cash</strong></td>\n<td style=\"text-align:right\">$5,623</td>\n</tr>\n</tbody>\n</table>\n<p>直接法是指通过现金流动的主要类别直接反映企业经营活动的现金流量的方法。上表反映了公司具体的现金流动（销售资金回流，各项成本支付，各类投资融资项目的现金流动。采用直接法可以更精准地揭示现金的来源和用途，对未来现金流量的预测有帮助。</p>\n<blockquote>\n<p><strong>间接法</strong></p>\n</blockquote>\n<p>间接法是通过在以当前净利润的基础上通过调整项目来反映企业经营活动的方法。它可以通过比较净收益和净现金流量的差别来分析收益的质量和资金管理状况。</p>\n<p>我们先回到资产负债表，观察它的变化：</p>\n<blockquote>\n<p><strong>B公司资产负债表</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">条目</th>\n<th style=\"text-align:right\">2016</th>\n<th style=\"text-align:right\">2015</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>Asset</strong></td>\n<td style=\"text-align:right\">-</td>\n<td style=\"text-align:right\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cash</td>\n<td style=\"text-align:right\">$35</td>\n<td style=\"text-align:right\">$350</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Account receivable(A/R)</td>\n<td style=\"text-align:right\">$1,450</td>\n<td style=\"text-align:right\">$1,125</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Inventory</td>\n<td style=\"text-align:right\">$930</td>\n<td style=\"text-align:right\">$245</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Other Current Asset</td>\n<td style=\"text-align:right\">$402</td>\n<td style=\"text-align:right\">$351</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Total current asset</td>\n<td style=\"text-align:right\">$2,817</td>\n<td style=\"text-align:right\">$2,071</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Gross Financial Assets</td>\n<td style=\"text-align:right\">$7,500</td>\n<td style=\"text-align:right\">$6,400</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">- Acc Dep</td>\n<td style=\"text-align:right\">($2,582)</td>\n<td style=\"text-align:right\">($2,313)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Net Financial Assets</td>\n<td style=\"text-align:right\">$4,918</td>\n<td style=\"text-align:right\">$4,087</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Total Assets</td>\n<td style=\"text-align:right\">$7,735</td>\n<td style=\"text-align:right\">$6,158</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Liability</strong></td>\n<td style=\"text-align:right\">-</td>\n<td style=\"text-align:right\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Account Payable(A/P)</td>\n<td style=\"text-align:right\">$373</td>\n<td style=\"text-align:right\">$$325</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Note Payable(N/P)(1 year)</td>\n<td style=\"text-align:right\">$90</td>\n<td style=\"text-align:right\">$120</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Other Current Liability</td>\n<td style=\"text-align:right\">$1,554</td>\n<td style=\"text-align:right\">$1,265</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Total Current Liability</td>\n<td style=\"text-align:right\">$2,017</td>\n<td style=\"text-align:right\">$$1,710</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Long term debt</td>\n<td style=\"text-align:right\">$2,100</td>\n<td style=\"text-align:right\">$1,200</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Equity</strong></td>\n<td style=\"text-align:right\">-</td>\n<td style=\"text-align:right\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Common Stock</td>\n<td style=\"text-align:right\">$1,894</td>\n<td style=\"text-align:right\">$2,354</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Retained Earning</td>\n<td style=\"text-align:right\">$1,724</td>\n<td style=\"text-align:right\">$894</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Total Equity</td>\n<td style=\"text-align:right\">$3,618</td>\n<td style=\"text-align:right\">$3,248</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Total Liability &amp; and Equity</td>\n<td style=\"text-align:right\">$7,735</td>\n<td style=\"text-align:right\">$6,158</td>\n</tr>\n</tbody>\n</table>\n<p>我们可以通过一些简单的会计公式来推导：</p>\n<pre><code>总资产(Total Asset) = 总债务(Total Liability ) + 总股东权益(Total Equity) \n流动资产 + 固定资产 = 流动债务 + 长期债务 + 总股东权益\n现金 + 非现金流动资产 + 固定资产 = 流动债务 + 长期债务 + 总股东权益\n</code></pre><p>所以我们可以得到</p>\n<pre><code>现金 = 流动债务 + 长期债务 + 总股东权益 - 非现金流动资产 - 固定资产 \n</code></pre><p>可以看出，债务和股东权益与现金正相关，而非现金资产与现金负相关。可以把它们归结为两类，现金的来源和用途</p>\n<ul>\n<li>增加负债和股东投资的本质是企业从外部或内部获取现金，所以是现金的来源</li>\n<li>资产的增加可以说是企业对其本身或外部进行投资，所以是现金的用途</li>\n</ul>\n<p>归好类后我们来看运营产生的现金流动</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">条目</th>\n<th style=\"text-align:right\">2016</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>Cash flow from operating activities</strong></td>\n<td style=\"text-align:right\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">- A/R</td>\n<td style=\"text-align:right\">($325)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">- Inventory</td>\n<td style=\"text-align:right\">($685)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">- Other current Asset</td>\n<td style=\"text-align:right\">$(51)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+ Accumulated Deprication</td>\n<td style=\"text-align:right\">$269</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+ A/P</td>\n<td style=\"text-align:right\">$48</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Net cash flow from operating acivities</td>\n<td style=\"text-align:right\">($744)</td>\n</tr>\n</tbody>\n</table>\n<p>值得一提的是，我们Accumulated Deprication（折旧贬值）一项，在损益表里记为开销，在资产负债表中也是抵消资产的项目，为什么现金流动是流入呢？</p>\n<blockquote>\n<p>因为作为开销，这个钱本来是应该流出的。我们以损益表的净利润为基础进行调整，<strong>已经扣除了折旧损失</strong>而<strong>折旧是无形的无法流出</strong>。所以我们需要在现金流量表里面补回来。</p>\n</blockquote>\n<p>在来看我们的通过投资产生的现金流动</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">条目</th>\n<th style=\"text-align:right\">2016</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>Cash flow from investing activities</strong></td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">- Gross Financial Assets(Purchase)</td>\n<td style=\"text-align:right\">($1,100)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Net cash flow from investing acivities</td>\n<td style=\"text-align:right\">($1,100)</td>\n</tr>\n</tbody>\n</table>\n<p>在来看我们的通过融资产生的现金流动</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">条目</th>\n<th style=\"text-align:right\">2016</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>Cash flow from investing activities</strong></td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">- N/P</td>\n<td style=\"text-align:right\">($30)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+ Long term debt</td>\n<td style=\"text-align:right\">$900</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+ Other current Liability</td>\n<td style=\"text-align:right\">$289</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">- Common stock</td>\n<td style=\"text-align:right\">($460)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Net cash flow from financing acivities</td>\n<td style=\"text-align:right\">($699)</td>\n</tr>\n</tbody>\n</table>\n<p>假设我们的净利润是$$2,228M于是我们有了一张完整的现金流量表：</p>\n<blockquote>\n<p><strong>B公司现金流量表(间接法)</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">条目</th>\n<th style=\"text-align:right\">2016</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>Net Income</strong></td>\n<td style=\"text-align:right\">$2,228</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Cash flow from operating activities</strong></td>\n<td style=\"text-align:right\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">- A/R</td>\n<td style=\"text-align:right\">($325)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">- Inventory</td>\n<td style=\"text-align:right\">($685)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">- Other current Asset</td>\n<td style=\"text-align:right\">$(51)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+ Accumulated Deprication</td>\n<td style=\"text-align:right\">$269</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+ A/P</td>\n<td style=\"text-align:right\">$48</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Net cash flow from operating acivities</td>\n<td style=\"text-align:right\">($744)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Cash flow from investing activities</strong></td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">- Gross Financial Assets(Purchase)</td>\n<td style=\"text-align:right\">($1,100)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Net cash flow from investing acivities</td>\n<td style=\"text-align:right\">($1,100)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Cash flow from investing activities</strong></td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">- N/P</td>\n<td style=\"text-align:right\">($30)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+ Long term debt</td>\n<td style=\"text-align:right\">$900</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+ Other current Liability</td>\n<td style=\"text-align:right\">$289</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">- Common stock</td>\n<td style=\"text-align:right\">($460)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Net cash flow from financing acivities</td>\n<td style=\"text-align:right\">($699)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Net Cash Flow</strong></td>\n<td style=\"text-align:right\">($315)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Beginning cash</td>\n<td style=\"text-align:right\">$350</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ending Cash</td>\n<td style=\"text-align:right\">$35</td>\n</tr>\n</tbody>\n</table>\n<p>和之前的资产负债表相比，仔细看看少了什么？没错，是Retained Earnings(未分配利润)，道理很简单，未分配利润包含在了Net Income（净利润)里面。有趣的是，上面表格中除了我们除了net income 以外，所有数字来源于资产负债表，这意味着我们可以通过初始现金和结算时的现金和资产负债表中的各项变动来倒着推算公司的净利润</p>\n<p>根据公司运营产生的现金流动，我们不难看出，公司的现金大幅减少而资产大幅增加，这说明了<strong>公司正在进行扩张</strong>。而公司的现金不足以支撑公司的扩张，所以公司先通过增加债务的方式获得资金。</p>\n<p>三种报表互相关联，从不同角度评估了公司的财务状况，是投资者和管理者决策时的重要工具。</p>\n","site":{"data":{}},"excerpt":"<p>##财务报表简介</p>\n<p>财务报表指日常会计核算资料的基础上按照规定方式编写的综合反映企业某一日期的财务状况，经营成果的书面文件。它主要分为三大部分，它们分别是:</p>\n<ul>\n<li>资产负债表(Balance sheet)，公司的资产和负债，体现公司在某一时刻下的财务状况</li>\n<li>损益表 (Income statement)，指出公司的运营表现，盈利或者亏损</li>\n<li>现金流量表 (Cash Flow statement) 指出在某一时间段内公司的现金流动情况</li>\n</ul>\n<p>通过这些报表我们可以多方位地了解到公司的状况。</p>\n<ul>\n<li>对于经理来说，可以更清楚地了解公司的表现和潜力；</li>\n<li>对于股东来说，财务报表可以对公司估值，推测公司的未来前景；</li>\n<li>对债权人来讲，可以了解到公司财务的健康度是否可以偿还债务。</li>\n<li>对政府来讲，可以有效地监管公司，进一步避免偷税漏税。</li>\n</ul>\n<p>我们先来看损益表;</p>\n<p>##损益表(Income statement)</p>\n<p>损益表展现的是公司的总收入(Revenue不是净利润 = 销售数量 x 单价)，开销(Expense),和净利润</p>\n<pre><code>总收入(Revenue） - 开销(Expense) = 净收入（Income）\n</code></pre><p>虽然是作为记录销售收入的损益表，但是上面记录的净收入和我们的现金流入并不一定相等，比如：</p>\n<ul>\n<li>使用权责发生制(accural accounting)，当产品售出并完成交接后计算收入和支出（比如收到一百万的预付款，一年内分五次向客户提供产品。即便一百万进账，只有每次提供服务后才能记录收入二十万)</li>\n<li>设备折旧的开销并不影响现金流量</li>\n</ul>","more":"<p>先上表格感受一下：</p>\n<blockquote>\n<p><strong>A公司损益表</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">条目</th>\n<th style=\"text-align:right\">2015</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Revenue</td>\n<td style=\"text-align:right\">$ 1,725,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cost of Good sold</td>\n<td style=\"text-align:right\">$ 525,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Gross Profit</strong></td>\n<td style=\"text-align:right\">$1,200,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Operating Expenses</strong></td>\n<td style=\"text-align:right\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Advertising</td>\n<td style=\"text-align:right\">$5,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Employee benifits</td>\n<td style=\"text-align:right\">$15,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Insurance</td>\n<td style=\"text-align:right\">$25,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Office supply</td>\n<td style=\"text-align:right\">$10,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Salaries and wages</td>\n<td style=\"text-align:right\">$550,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Operating Income before depriciation</strong></td>\n<td style=\"text-align:right\">$595,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Depreciation</td>\n<td style=\"text-align:right\">$120,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Operating profit</td>\n<td style=\"text-align:right\">$475,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Interest Expense</td>\n<td style=\"text-align:right\">$25,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Earning before tax</strong></td>\n<td style=\"text-align:right\">$450,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Extrodinary expense</td>\n<td style=\"text-align:right\">$20,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Tax expense(40%)</td>\n<td style=\"text-align:right\">$270,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Net Income</td>\n<td style=\"text-align:right\">$50,000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Dividends</td>\n<td style=\"text-align:right\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Earning per share</td>\n<td style=\"text-align:right\">-</td>\n</tr>\n</tbody>\n</table>\n<p>从总收入(Revenue)到净收入(Net Income)，损益表大致分为五个部分:</p>\n<ol>\n<li>毛利润（Gross Profit)<ul>\n<li>总收入 - 生产成本 = 毛利润</li>\n</ul>\n</li>\n<li>营业收入(Operating income)<ul>\n<li>毛利润 - 运营成本 = 营业收入（计算设备折旧前，也称为EBITDA - Earning befor Interest Tax Deprciation &amp; Amortization）</li>\n<li>运营成本是非直接生产成本(生产材料生产劳动力以外的成本)，比如公司福利，购买的保险，办公用品，水电花销（非工厂使用) </li>\n</ul>\n</li>\n<li>营业利润(Operation Profit)<ul>\n<li>营业收入 - 折旧开支 = 营业利润</li>\n</ul>\n</li>\n<li>税前利润，这一环节清偿债务利息<ul>\n<li>如果没有负债或者不需要支付利息的话 = 营业利润</li>\n<li>税前利润 = 营业利润 - 债务利息</li>\n</ul>\n</li>\n<li>税后利润（净利润)<ul>\n<li>所得税 = 税前利润 x 税率</li>\n<li>净利润 = 税前利润 - 所得税</li>\n<li>值得一提的是非常费用(extraordinary expense),即非常规损失（灾害损失，失窃等），对于这些开销可以进行税务减免，假如税率为40%,损失为20,000.我们可以将花销记为 <strong>损失金额 x (1 - 税率) = 16，000</strong></li>\n</ul>\n</li>\n</ol>\n<p>×其中2,3两步可以分开也可以合并，折旧成本可以计算在运营成本内</p>\n<p>###损益表的作用<br>通过上面的例子我们不难看出，损益表与公司的经营成本利润息息相关。我们可以通过损益表来计算各部分支出所占营业额比例并用来分析利润增减变化的原因，作为公司经营决策的依据，优化公司的运营结构，增加利润空间。</p>\n<p>###生产成本/实际成本</p>\n<p>在这里我们顺便提一下人们盛传的”一双耐克鞋的成本只需要8美元却卖100美元”,实际上这是不准确的，因为8美元是鞋的生产成本而并不是公司实际的成本。我们再来看上面的损益表: 销售额1,725,000美元，生产成本只有525,000美元，毛利润则高达1,200,000美元，是生产成本的两倍还多！所以我们可以由此推断出公司的售价太高以至于不切实际吗？并不是这样的，我们来看一下净利润(Net Income),只有50,000美元，实际利润率只有3%不到</p>\n<p>###股息和每股收益<br>损益表的最后部分是股息(dividends)和每股收益(Earning per share)，其中每股收益是将净收入按股份分配给股东:</p>\n<pre><code>每股收益 = 净收入 / 股份数量\n</code></pre><p>股息则为公司对股东的分红，但是股息和每股收益往往<strong>并不相同</strong>，这将涉及到<a href=\"\">股东权益变动表</a>的内容。</p>\n<p>损益表展现了公司的运营结构，就好比我们看到了公司的筋脉。但是我们并不能直观地了解到公司的规模（即便我们可以通过营业额来推测，但并不准确）。要了解公司的规模 —— 是猴子， 猩猩 ， 还是人，我们需要的是<a href=\"\">资产负债表</a>.</p>\n<p>##资产负债表</p>\n<p>资产负债表是公司资产(Asset)和负债(Liability)的速写，它展现了公司的规模以及资产债务配置。大致有以下几点：</p>\n<ul>\n<li>公司的总资产，总债务和股东权益</li>\n<li>公司投资的项目，融资的方式和时间的长短</li>\n<li>营运资金，公司财务健康状况</li>\n<li>一些其他细节</li>\n</ul>\n<p>还是先来看一张报表：</p>\n<blockquote>\n<p><strong>B公司资产负债表</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">条目</th>\n<th style=\"text-align:right\">2016</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>Asset</strong></td>\n<td style=\"text-align:right\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cash</td>\n<td style=\"text-align:right\">$35</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Account receivable(A/R)</td>\n<td style=\"text-align:right\">$1,450</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Inventory</td>\n<td style=\"text-align:right\">$930</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Other Current Asset</td>\n<td style=\"text-align:right\">$402</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Total current asset</strong></td>\n<td style=\"text-align:right\">$2,817</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Gross Financial Assets</td>\n<td style=\"text-align:right\">$7,500</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">- Acc Dep</td>\n<td style=\"text-align:right\">($2,582)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Net Financial Assets</td>\n<td style=\"text-align:right\">$4,918</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Total Assets</strong></td>\n<td style=\"text-align:right\">$7,735</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Liability</strong></td>\n<td style=\"text-align:right\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Account Payable(A/P)</td>\n<td style=\"text-align:right\">$373</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Note Payable(N/P)</td>\n<td style=\"text-align:right\">$90</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Other Current Liability</td>\n<td style=\"text-align:right\">$1,554</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Total Current Liability</strong></td>\n<td style=\"text-align:right\">$2,017</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Long term debt</td>\n<td style=\"text-align:right\">$2,100</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Equity</strong></td>\n<td style=\"text-align:right\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Common Stock</td>\n<td style=\"text-align:right\">$1,894</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Retained Earning</td>\n<td style=\"text-align:right\">$1,724</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Total Equity</strong></td>\n<td style=\"text-align:right\">$3,618</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Total Liability &amp; and Equity</strong></td>\n<td style=\"text-align:right\">$7,735</td>\n</tr>\n</tbody>\n</table>\n<p>首先，根据上表我们不难看出:</p>\n<pre><code>总资产(Total Asset) = 总债务(Total Liability ) + 总股东权益(Total Equity) \n</code></pre><p>这个公式很基础，也很重要。它的道理其实也很简单: 假如你和你的朋友合资开了一家公司。公司的总资产是100w, 其中60w是你和你的朋友出的资金，另外四十万是银行的贷款。资产负债表会显示：总资产100w,总负债40w,股东权益60w。 如果我们不能够将它配平，股东的钱加上银行的资金大于或者小于100w。我们就会莫名其妙多了/少了一笔资金，这是非常不合理的，也很吓人。</p>\n<p>###资产</p>\n<p>资产分为两种，流动资产和固定资产。我们使用流动性来区分这二者: 在公司的账簿上只能<strong>挂一年及以内</strong>的，我们称为流动资产，反之则为固定资产，首先我们来看流动资产：</p>\n<p>流动资产通常有:</p>\n<ul>\n<li>现金</li>\n<li>应收账款，（提前预支给顾客商品，并未立即收到付款的项目。也就是我们说的赊账）</li>\n<li>存货（未卖出去的商品）</li>\n<li>预付费的项目（保险，房租，水电杂费等)</li>\n<li>短线持有股票债券等（一年以内)</li>\n</ul>\n<p>其中，现金的流动性是最好的。其他项目，相比于固定资产，也是最容易套现的。公司可以在需要的时刻使用现金或者套现来清偿债务。</p>\n<p>固定资产则是一些本身变动并不是很大的资产。你可能今天手里有三百万现金，明天拿去投资（现金流出),但是你如果今天买了一栋楼，那么这个楼是长期投资并且会在很长一短时间内（一年以上）出现在资产负债表的相同位置，这栋楼就是你的固定资产。固定资产通常如下：</p>\n<ul>\n<li>生产装备设备</li>\n<li>楼房，地皮</li>\n<li>长线持有的债券</li>\n<li>折旧费用（负值）</li>\n<li>无形资产（商标，专利，等等）</li>\n</ul>\n<p>相比于流动资产，固定资产的套现能力要差很多。作为固定资产，我们不得不提一个名词 - <strong>账面价值(book value)</strong>。 账面价值就是以历史成本为衡量标准的资产价值。假如你十年前花了2000万买了一栋楼，十年后的今天它的市值已经涨到了2个亿。根据历史成本原则，我们在资产负债表上仍然将这栋楼的价值记为2000万。如果不使用这种方法而是根据市场价格来报的话，试想一下我们的损益表和现金流量表会有怎样的变化。– 20xx年，如果房子当年贬值到1000万，而你的税前收入为500万，但是你不得不把房价亏损记入损益表，这时损益表显示你税前亏损500万。</p>\n<p>###负债</p>\n<p>负债与资产相对也相似。分为流动债务与长期债务，仍然以一年为衡量标准。负债是公司筹资或融资后的产物，负债过少不利于公司发展，而负债过多容易破产。通常负债表显示的债务为公司的资金来源，数额或者利息：</p>\n<ul>\n<li>银行贷款</li>\n<li>公司发行的债券</li>\n<li>到期应付利息</li>\n<li>未付工资， 未付货款</li>\n</ul>\n<p>###股东权益</p>\n<p>股东权益通常是指股东在公司所投的资金和相应回报之和，它通常包含</p>\n<ul>\n<li>流通的股票</li>\n<li>股票除面值外的价值 （ 发行时10元一股，流通时涨到100元，90元为是面值以外的价值）</li>\n<li>未分配的利润</li>\n</ul>\n<p>即便我们可以通过损益表看到公司的盈亏状况和收入支出的结构，可以通过资产负债表看到公司的规模，资产配置，负债状况和股东权益。但是作为利益相关者（投资者或内部管理人员)， 我们还需要了解公司资金的动向：从哪儿来，到哪儿去，用了多少。这个时候我们需要<strong>现金流量表</strong></p>\n<p>##现金流量表</p>\n<p>现金流量表是指记录企业在一段时间内现金或者现金等价物流入或流出的报表。它具体列举了公司各项经济活动中的现金流入的来源和流出的具体原因，反应了资产负债表中项目的资金变动。由于资产负债表记录的是使用历史成本的账面价值容易引起误导，而损益表的净利润又不能代表公司的现金收入，所以对于投资者或者财务经理来讲，现金流量表在决策时有着举足轻重的地位。</p>\n<p>###现金流量表的构成</p>\n<p>现金流量表主要分为三个部分：</p>\n<ul>\n<li>通过运营产生的现金流动<ul>\n<li>商品出售后的资金回流</li>\n<li>劳动力，生产材料的支付</li>\n<li>日常运营开销</li>\n<li>…</li>\n</ul>\n</li>\n<li>通过投资产生的现金流动<ul>\n<li>通过投资获得的利润</li>\n<li>买卖不动产的资金流出</li>\n<li>…</li>\n</ul>\n</li>\n<li>通过筹资产生的现金流动<ul>\n<li>通过筹资而流入的现金流</li>\n<li>公司所需支付的利息，分红</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n<p>###现金流量表的作用</p>\n<p>基于现金流量表，我们可以</p>\n<ul>\n<li>分析公司的趋势，</li>\n<li>创现能力，现金流量表评估公司自身创造现金流量（比如回收应收账款)的能力，</li>\n<li>偿债能力，如果现金与流动负债比率过低，偿债压力会非常大。</li>\n</ul>\n<p>###现金流量表的编制</p>\n<blockquote>\n<p><strong>直接法</strong></p>\n</blockquote>\n<p>下面是一张使用直接法(Direct method)编制的现金流量表（括号内为流出）</p>\n<blockquote>\n<p><strong>C公司现金流量表(直接法)</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">条目</th>\n<th style=\"text-align:right\">2015</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>Cash flow from operating activities</strong></td>\n<td style=\"text-align:right\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cash collected from customers</td>\n<td style=\"text-align:right\">$5,486</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cash paid for labor</td>\n<td style=\"text-align:right\">($890)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cash paid for material</td>\n<td style=\"text-align:right\">($1,134)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Lease payment</td>\n<td style=\"text-align:right\">($400)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Sales of A/R</td>\n<td style=\"text-align:right\">$236</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Net cash flow from operating acivities</td>\n<td style=\"text-align:right\">$3,298</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Cash flow from investing activities</strong></td>\n<td style=\"text-align:right\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Dividends received</td>\n<td style=\"text-align:right\">$35</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Purchase of equipment</td>\n<td style=\"text-align:right\">($453)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Purchase of bonds</td>\n<td style=\"text-align:right\">($350)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Net cash flow from investing acivities</td>\n<td style=\"text-align:right\">($768)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Cash flow from financing activities</strong></td>\n<td style=\"text-align:right\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Interest paid</td>\n<td style=\"text-align:right\">($15)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Proceed of short-term debt</td>\n<td style=\"text-align:right\">$800</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Net cash flow from financing acivities</td>\n<td style=\"text-align:right\">$785</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Cash flow from income taxes</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cash paid for current tax expense</td>\n<td style=\"text-align:right\">($935)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Net change in cash</strong></td>\n<td style=\"text-align:right\">$2,470</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Beginning cash</strong></td>\n<td style=\"text-align:right\">$3,153</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Ending cash</strong></td>\n<td style=\"text-align:right\">$5,623</td>\n</tr>\n</tbody>\n</table>\n<p>直接法是指通过现金流动的主要类别直接反映企业经营活动的现金流量的方法。上表反映了公司具体的现金流动（销售资金回流，各项成本支付，各类投资融资项目的现金流动。采用直接法可以更精准地揭示现金的来源和用途，对未来现金流量的预测有帮助。</p>\n<blockquote>\n<p><strong>间接法</strong></p>\n</blockquote>\n<p>间接法是通过在以当前净利润的基础上通过调整项目来反映企业经营活动的方法。它可以通过比较净收益和净现金流量的差别来分析收益的质量和资金管理状况。</p>\n<p>我们先回到资产负债表，观察它的变化：</p>\n<blockquote>\n<p><strong>B公司资产负债表</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">条目</th>\n<th style=\"text-align:right\">2016</th>\n<th style=\"text-align:right\">2015</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>Asset</strong></td>\n<td style=\"text-align:right\">-</td>\n<td style=\"text-align:right\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cash</td>\n<td style=\"text-align:right\">$35</td>\n<td style=\"text-align:right\">$350</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Account receivable(A/R)</td>\n<td style=\"text-align:right\">$1,450</td>\n<td style=\"text-align:right\">$1,125</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Inventory</td>\n<td style=\"text-align:right\">$930</td>\n<td style=\"text-align:right\">$245</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Other Current Asset</td>\n<td style=\"text-align:right\">$402</td>\n<td style=\"text-align:right\">$351</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Total current asset</td>\n<td style=\"text-align:right\">$2,817</td>\n<td style=\"text-align:right\">$2,071</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Gross Financial Assets</td>\n<td style=\"text-align:right\">$7,500</td>\n<td style=\"text-align:right\">$6,400</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">- Acc Dep</td>\n<td style=\"text-align:right\">($2,582)</td>\n<td style=\"text-align:right\">($2,313)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Net Financial Assets</td>\n<td style=\"text-align:right\">$4,918</td>\n<td style=\"text-align:right\">$4,087</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Total Assets</td>\n<td style=\"text-align:right\">$7,735</td>\n<td style=\"text-align:right\">$6,158</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Liability</strong></td>\n<td style=\"text-align:right\">-</td>\n<td style=\"text-align:right\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Account Payable(A/P)</td>\n<td style=\"text-align:right\">$373</td>\n<td style=\"text-align:right\">$$325</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Note Payable(N/P)(1 year)</td>\n<td style=\"text-align:right\">$90</td>\n<td style=\"text-align:right\">$120</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Other Current Liability</td>\n<td style=\"text-align:right\">$1,554</td>\n<td style=\"text-align:right\">$1,265</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Total Current Liability</td>\n<td style=\"text-align:right\">$2,017</td>\n<td style=\"text-align:right\">$$1,710</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Long term debt</td>\n<td style=\"text-align:right\">$2,100</td>\n<td style=\"text-align:right\">$1,200</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Equity</strong></td>\n<td style=\"text-align:right\">-</td>\n<td style=\"text-align:right\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Common Stock</td>\n<td style=\"text-align:right\">$1,894</td>\n<td style=\"text-align:right\">$2,354</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Retained Earning</td>\n<td style=\"text-align:right\">$1,724</td>\n<td style=\"text-align:right\">$894</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Total Equity</td>\n<td style=\"text-align:right\">$3,618</td>\n<td style=\"text-align:right\">$3,248</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Total Liability &amp; and Equity</td>\n<td style=\"text-align:right\">$7,735</td>\n<td style=\"text-align:right\">$6,158</td>\n</tr>\n</tbody>\n</table>\n<p>我们可以通过一些简单的会计公式来推导：</p>\n<pre><code>总资产(Total Asset) = 总债务(Total Liability ) + 总股东权益(Total Equity) \n流动资产 + 固定资产 = 流动债务 + 长期债务 + 总股东权益\n现金 + 非现金流动资产 + 固定资产 = 流动债务 + 长期债务 + 总股东权益\n</code></pre><p>所以我们可以得到</p>\n<pre><code>现金 = 流动债务 + 长期债务 + 总股东权益 - 非现金流动资产 - 固定资产 \n</code></pre><p>可以看出，债务和股东权益与现金正相关，而非现金资产与现金负相关。可以把它们归结为两类，现金的来源和用途</p>\n<ul>\n<li>增加负债和股东投资的本质是企业从外部或内部获取现金，所以是现金的来源</li>\n<li>资产的增加可以说是企业对其本身或外部进行投资，所以是现金的用途</li>\n</ul>\n<p>归好类后我们来看运营产生的现金流动</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">条目</th>\n<th style=\"text-align:right\">2016</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>Cash flow from operating activities</strong></td>\n<td style=\"text-align:right\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">- A/R</td>\n<td style=\"text-align:right\">($325)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">- Inventory</td>\n<td style=\"text-align:right\">($685)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">- Other current Asset</td>\n<td style=\"text-align:right\">$(51)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+ Accumulated Deprication</td>\n<td style=\"text-align:right\">$269</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+ A/P</td>\n<td style=\"text-align:right\">$48</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Net cash flow from operating acivities</td>\n<td style=\"text-align:right\">($744)</td>\n</tr>\n</tbody>\n</table>\n<p>值得一提的是，我们Accumulated Deprication（折旧贬值）一项，在损益表里记为开销，在资产负债表中也是抵消资产的项目，为什么现金流动是流入呢？</p>\n<blockquote>\n<p>因为作为开销，这个钱本来是应该流出的。我们以损益表的净利润为基础进行调整，<strong>已经扣除了折旧损失</strong>而<strong>折旧是无形的无法流出</strong>。所以我们需要在现金流量表里面补回来。</p>\n</blockquote>\n<p>在来看我们的通过投资产生的现金流动</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">条目</th>\n<th style=\"text-align:right\">2016</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>Cash flow from investing activities</strong></td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">- Gross Financial Assets(Purchase)</td>\n<td style=\"text-align:right\">($1,100)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Net cash flow from investing acivities</td>\n<td style=\"text-align:right\">($1,100)</td>\n</tr>\n</tbody>\n</table>\n<p>在来看我们的通过融资产生的现金流动</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">条目</th>\n<th style=\"text-align:right\">2016</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>Cash flow from investing activities</strong></td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">- N/P</td>\n<td style=\"text-align:right\">($30)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+ Long term debt</td>\n<td style=\"text-align:right\">$900</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+ Other current Liability</td>\n<td style=\"text-align:right\">$289</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">- Common stock</td>\n<td style=\"text-align:right\">($460)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Net cash flow from financing acivities</td>\n<td style=\"text-align:right\">($699)</td>\n</tr>\n</tbody>\n</table>\n<p>假设我们的净利润是$$2,228M于是我们有了一张完整的现金流量表：</p>\n<blockquote>\n<p><strong>B公司现金流量表(间接法)</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">条目</th>\n<th style=\"text-align:right\">2016</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>Net Income</strong></td>\n<td style=\"text-align:right\">$2,228</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Cash flow from operating activities</strong></td>\n<td style=\"text-align:right\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">- A/R</td>\n<td style=\"text-align:right\">($325)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">- Inventory</td>\n<td style=\"text-align:right\">($685)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">- Other current Asset</td>\n<td style=\"text-align:right\">$(51)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+ Accumulated Deprication</td>\n<td style=\"text-align:right\">$269</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+ A/P</td>\n<td style=\"text-align:right\">$48</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Net cash flow from operating acivities</td>\n<td style=\"text-align:right\">($744)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Cash flow from investing activities</strong></td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">- Gross Financial Assets(Purchase)</td>\n<td style=\"text-align:right\">($1,100)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Net cash flow from investing acivities</td>\n<td style=\"text-align:right\">($1,100)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Cash flow from investing activities</strong></td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">- N/P</td>\n<td style=\"text-align:right\">($30)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+ Long term debt</td>\n<td style=\"text-align:right\">$900</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+ Other current Liability</td>\n<td style=\"text-align:right\">$289</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">- Common stock</td>\n<td style=\"text-align:right\">($460)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Net cash flow from financing acivities</td>\n<td style=\"text-align:right\">($699)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Net Cash Flow</strong></td>\n<td style=\"text-align:right\">($315)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Beginning cash</td>\n<td style=\"text-align:right\">$350</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ending Cash</td>\n<td style=\"text-align:right\">$35</td>\n</tr>\n</tbody>\n</table>\n<p>和之前的资产负债表相比，仔细看看少了什么？没错，是Retained Earnings(未分配利润)，道理很简单，未分配利润包含在了Net Income（净利润)里面。有趣的是，上面表格中除了我们除了net income 以外，所有数字来源于资产负债表，这意味着我们可以通过初始现金和结算时的现金和资产负债表中的各项变动来倒着推算公司的净利润</p>\n<p>根据公司运营产生的现金流动，我们不难看出，公司的现金大幅减少而资产大幅增加，这说明了<strong>公司正在进行扩张</strong>。而公司的现金不足以支撑公司的扩张，所以公司先通过增加债务的方式获得资金。</p>\n<p>三种报表互相关联，从不同角度评估了公司的财务状况，是投资者和管理者决策时的重要工具。</p>"},{"title":"Python:建立一个IP代理池","date":"2018-04-14T03:20:13.000Z","_content":"\n生活中我们经常会用到一些代理服务器，尤其在做爬虫抓取对方网站数据的时候，很容易会被对方服务器封IP。通常我在抓取数据的时候会采用**抓取数据->IP被封时触发代理抓取机制->使用代理继续抓取->代理耗尽重新抓取**的机制，显得有些粗糙，而且在抓取代理的时候会阻塞，非常影响效率。痛定思痛，在开发Jalapeno的时候接触到事件驱动引擎，于是决定开发这个独立持续运转的代理池。\n\n本节我会从事件驱动引擎开始演示并逐步实现抓取、存活验证等功能，最后完成使用Queue多线程多进程的并行及使用控制器通信。\n\n<!--More-->\n## 工具准备\n\n这次我们需要的工具有\n- Python3.x （必备lol）\n- Requests (熟悉urllib可以代替Requests，免去第三方库依赖)\n\n先引入我们需要的工具\n\n    ```Python\n    from threading import Thread #线程模块\n    import os #系统调用，识别路径\n    import pickle #存储\n    import requests as req #Requests模块\n    import re #正则表达式\n    import time #我们用time.sleep()休眠\n    #下面两个是队列模块，保护数据读写不混乱，跨进程通信。\n    from queue import Empty,Queue\n    from multiprocessing import Queue as QP,Process\n    #这里是个坑，在Mac下Multiprocessing 的Queue不能使用qsize， queue的Queue不能跨进程通信及pickle\n    ```\n\n## 事件驱动引擎\n\n先简单介绍一下事件驱动引擎的机制，事件驱动，顾名思义就是接收事件再处理事件的一个过程。流程如下\n\n    启动 -> 引擎持续运转待命 ->接收各类事件／信号（包括停止运行）->处理事件,如图\n    \n![](ip-proxy-pool/flow_min.png)\n    \n    \n代码结构如下：\n\n    ```Python\n    class IP_proxy_pool(object):\n\n        def __init__(self):\n            pass\n        def Start(self):\n            pass\n        def __Run(self):\n            pass\n        def __EventProcess(self,event,eventName):\n            pass\n        def __Stop(self):\n            pass\n    ```\n\n接下来我们来看各个部分的代码及其原理\n            \n### \\_\\_init__\n\n\\__init__包含了我们整个代理池的初始参数，其中一部分是引擎所需要的，另一部分是其他功能的参数。\n\n代码：\n\n    ```Python\n    def __init__(self,ready=5,max_pages= 10):\n        self.settings = dict(\n\t\t\tPool_ready = 5,\n\t\t\tmax_pages = 10\n\t\t\t)\n\n\t\tself.commander = None\n\t\tself.output = None\n\t\tself.__workers = {}\n\t\tself._Raw = Queue()\n\t\tself._available = Queue()\n\t\tself.__active = False\n\t\tself.__worker_is_working = False\n\t\tself.__ready = False\n\t\tself._cache_path = os.getcwd()+os.sep+\"proxylist.pkl\"\n\t\tself.header = {'User-Agent':'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'}\n\t\tself.command = dict(\n\t\t\tStop = self.__Stop,\n\t\t\tCrawl = self.crawler,\n\t\t\tStatus = self.Status,\n\t\t\tGet= self.get_a_proxy,\n\t\t\tMonitor = self.__Monitor,\n\t\t\tVerify = self.verify_IP) \n    ```\n    \n\n- self.setting:代理池默认设置。包含了爬虫最大访问页数和最低可用ip数量        \n- self.commander: 引擎组件。作为接收主进程命令的管道，在Start中初始化，并不需要在__init__中出现所以初始为None。后面会在多进程启动部分中讲解\n- self.output: 同上，将运行结果反馈给主进程\n- self.workers:引擎组件。包含了所有正在工作的子线程，通过dict的形式将任务名称和对应线程联系\n- self._Raw：从IP代理网站上解析出来的所有IP地址，未经过验证是否存活\n- self._available：存活可用的IP\n- self.__active: 引擎组件。当self.__active为True时，引擎保持运转。\n- self.__worker_is_working: 当值为True时，表示爬虫正在抓取IP地址。\n- self.ready: 监测控件。监测当前代理池中可用IP是否超过最低标准。如果低于标准，将启动IP抓取工作\n- self._cache_path: 存储／读取抓取结果到本地的路径\n- self.header: 爬虫请求网页的报头，与网络访问相关。会出现在Crawler和Verify中。\n- self.command: 包含了输入请求信号所对应的任务\n\n然后就开始我们的引擎组建工作\n\n### Start()\n\nStart()相当于引擎的启动装置，建立通信管道，设置操作模式，最后进入运行。在多进程模式下，由于这是我们启动引擎执行的函数，所以我们使用“args= xxx\"将通信和设置变量传入本函数中。\n\n代码：\n\n    ```Python\n\tdef Start(self,commander,output,Manual=True):\n\t\tself.__active = True\n\t\tself.commander,self.output = commander,output \n\t\tself.read_cache()\n\t\t#for each in ['Monitor']\n\t\tif Manual:\n\t\t\tself.__Run()\n\t\telse:\n\t\t\tfor each in ['Crawl','Monitor','Verify']:\n\t\t\t\tself.commander.put(each)\n\t\t\tself.__Run()\n    ```\n\n在Start中：\n\n1.首先我们设置self.__active=True,表示引擎开始运转。\n\n2.构建通信管道 self.commander,self.output，这两个变量是由主进程的控制器传入。\n\n3.读取存档。没有存档会自行创建。\n\n4.如果设置模式为Manual,则只维持运转，需要指令输入。如果不是，则自动启动爬虫，监测系统和IP筛选工作。\n\n\n### __Run()\n\n__Run()是引擎的运转核心，作用机制比较简单。当active指示为True时，维持运转，持续接收指示信号并交付处理。\n\n   ```Python\n    def __Run(self):\n\t\twhile self.__active:\n\t\t\ttry:\n\t\t\t\teventname = self.commander.get(block=True,timeout=1)\n\t\t\t\tself.__EventProcess(self.command[eventname],eventname)\n\t\t\texcept Empty:\n\t\t\t\tpass\n    ```\n                \n先尝试从commander获取指示信号，如果为空，则except捕获异常跳过本轮循环。\n如果顺利接受信号，则交付__EventProcess处理。\n\n>注意：commander.get()方法中,我们设置timeout=1避免卡死，设置block来阻塞一个timeout的等待时常，避免程序高速运转浪费过多CPU资源。\n\n### __EventProcess()\n\n__EventProcess()是引擎的事件处理调度模块，它在目前的工作中将任务分成两类并执行：直接执行和开启新线程并行。\n\n    ```Python\n\tdef __EventProcess(self,event,eventName):\n\t\tprint(\"Event is Processing\")\n\t\t#在主程序中直接运行\n\t\tif eventName in ('Status','Stop','Get'):\n\t\t\tevent()\n\t\telse:#开线程运行\n\t\t\tself.__workers[eventName]=Thread(target=event)\n\t\t\tself.__workers[eventName].start()\n    ```\n\t\t\n### __Stop()\n\nStop()是在当我们的任务完成后，我们将要关闭引擎并自动存档的模块。\n\n    ```Python\n\tdef __Stop(self):\n\t\tself.__active = False\n\t\tfor name,worker in self.__workers.items():\t\t\n\t\t\tworker.join()\n\t\tprint('\\nSaving your proxies . . .')\n\t\tself.write_cache()\n    ```\n\n\n整个流程分成三步：\n\n1.关闭active指示\n\n2.等待workers中的所有子线程任务结束。\n\n3.write_cache存档，方便下次读取\n\n>这里需要注意的是关闭active指示需要在第一步。**因为Thread不像Process那样可以调用terminate()强制中止**，所以在相关子线程任务中我们保持了和引擎同步的方法，在任务执行完毕之前**或者self.active=True**的时候，都会保持运行。也就是说如果我们关掉active指示，我们就可以让所有子线程跳出循环自动退出。最后在第二步中用join方法等待任务结束。\n\n到这里我们的完整的食物驱动引擎架构基本完成，我们继续来构建功能性组件。\n\n\n\n## 功能性组件\n\n功能性组件实现了我们代理池的核心功能，即抓取IP地址，实时监测，状态输出及读写功能。\n\n\n### Status()状态输出\n\n状态输出是将我们的代理池的信息以字符串的形式放入output（输出管道），方便我们查看当前运行状态\n\n代码：\n    \n    ```Python\n\tdef Status(self):\n\t\tmsg ='''\n\n\t\tEngine Active               {}\n\t\tIP Pool Ready               {}\n\t\tCrawler Working             {}\n\t\tRaw IP Pool size            {}\n\t\tAlive IP available          {}\n\n\t\t'''.format(self.__active,self.__ready,self.__worker_is_working,self._Raw.qsize(),self._available.qsize())\n\t\tself.output.put(msg)\n    ```\n\n\n示例：\n\n    In [34]: print(remote.send('Status'))\n    \n    \n\t\tEngine Active               True\n\t\tIP Pool Ready               False\n\t\tCrawler Working             False\n\t\tRaw IP Pool size            399\n\t\tAlive IP available          0\n\n\n### crawler():IP抓取爬虫\n看到这里终于看到我们的核心组件之一爬虫的真身了。这里我用西刺代理的高匿IP地址页面举例。\n\n    ```Python\n\tdef crawler(self):\n\t\tself.__worker_is_working = True\n\t\tregex = re.compile(r'<tr class.*?<td.*?<td>(.+?)</td.*?<td>(.+?)</td.*?</td.*?</td.*?<td>(.+?)</td.*?</tr>',re.S)\n\t\tfor i in range(1,self.settings['max_pages']+1):\n\t\t\tif not self.__active:\n\t\t\t\tbreak\n\t\t\tpage_source= req.get(\"http://www.xicidaili.com/nn/{}\".format(i),headers =self.header).text\n\t\t\tresult = re.findall(regex,page_source)\n\t\t\tfor each in result:\n\t\t\t\tself._Raw.put(each)\n\t\t\ttime.sleep(60)\n\t\tself.__worker_is_working = False\n    ```\n1.当爬虫开始运行时设置__worker_is_working = True，表示爬虫结束运行。\n\n2.接下来就是爬虫的抓取流程并将结果放入self.\\_Raw中，爬虫可以参考我之前的相关文章。在这里要注意三点：\n\n- 使用requests(req)添加header的方法\n- time.sleep(60)设置爬取间隔，减少对方服务器访问压力。此时也可以和IP验证的时间同步\n- self.\\_Raw使用的结构是队列（QUEUE）的形式，我们在这里用的是线程的Queue()而不是multiprocessing的Queue(),因为线程的Queue()自带线程锁，可以保护数据不错乱。并且可以使用qsize功能来获取队列长度（数量）\n    \n3.抓取完成。\\__worker_is_working = False，退出。\n\n\n### \\__Monitor()\n\nMonitor()的运行机制如下，\n\n    ```Python\n    def __Monitor(self):\n    \twhile self.__active:\n    \t\tif self.__worker_is_working:\n    \t\t\tpass\n    \t\telif self._available.qsize() < self.settings['Pool_ready']:\n    \t\t\tself.commander.put(\"Crawl\")\n    \t\ttime.sleep(15)\n    ```\n\n\n- 当引擎运行时，检测爬虫是否在工作。\n- 如果没有在工作，检测代理池中的IP是否达到最低标准。\n- 如果没有达到，启动爬虫，\n- 休息15秒重新检测。\n\n### verify_IP():IP存活验证\n \n事实上，并不是每一个从代理网站上抓取到的IP地址**并不一定能用**.所以在这里我们添加一下验证。原理很简单：从self.\\_Raw里面拿出一个IP，挂上IP之后去访问一个网站（我这里就用百度了，不要怪我。。lol）,如果访问请求返回结果是200，则说明访问成功，该IP地址可以使用。\n\n代码：\n\n    ```Python\n    def verify_IP(self):\n        while self.__active:\n            try:\n                proxy_item = self._Raw.get(block=True,timeout=1)\n                #注意下面使用IP的格式 {'HTTPS'：'183.159.80.92:18118'}\n                req_proxy = {proxy_item[2]:'{}:{}'.format(proxy_item[0],proxy_item[1])}\n                print(\"verifying {}:{}\".format(proxy_item[0],proxy_item[1]))\n                attempt = req.get('http://www.baidu.com',headers= self.header,proxies = req_proxy,timeout=5)#注意这里使用IP的方式\n                if attempt.status_code == 200:\n                    self._available.put(attempt)\n            except Empty:\n                print(\"Raw pool is empty\")\n                time.sleep(60)\n            except:\n                pass\n    ```\n\n\n###get_a_proxy() 获得一个IP地址（输出）        \n\n这一块的任务相对来说就简单许多，你只需要从可用的IP队列中获得一个并输出即可。（当可用IP队列为空时我用原始_Raw列队列充数这种事情我是不会说出来的hiahiahia，当然如果愿意用自己的爬虫来验证是否可用而不去检测有效的时候，会有一定的灵活操作空间）\n    \n    ```Python\n\tdef get_a_proxy(self):\n\t\ttry:\n\n\t\t\tif self._available.qsize() > 0:\n\t\t\t\tip = self._available.get(block=True,timeout=1)\n\t\t\telse:\n\t\t\t\tip = self._Raw.get(block=True,timeout=1)\n\t\t\tself.output.put(ip)\n\n\t\texcept:\n\t\t\tself.output.put('Oops. Both pools Empty.')   \n    ```    \n\n\n### 存档读写\n\n抓取了很多很多好用的代理不想白白浪费吧，下次要用的时候不想等重头来过吧。存档读写功能，你值得拥有。\n        \n    ```Python   \n\tdef read_cache(self):\n        #检测是否文件已存在。如果没有就创建一个\n\t\tif not os.path.isfile(self._cache_path):\n\t\t\tself.write_cache()\n        #读取内容\n\t\telse:\n\t\t\ttry:\n\t\t\t\tf = open(self._cache_path,'rb')\n\t\t\t\traw,available = pickle.load(f)\n\t\t\t\t[self._Raw.put(each) for each in raw]\n\t\t\t\t[self._available.put(each) for each in available]\n\t\t\t\tf.close()\n\t\t\texcept:\n\t\t\t\tpass\n    #存档            \n\tdef write_cache(self):\n\t\tf = open(self._cache_path,\"wb\")\n\t\traw = list(self._Raw.queue)\n\t\tavailable = list(self._available.queue)\n\t\tpickle.dump([raw,available],f)\n\t\tf.close()        \n    ```\n比较令人郁闷的是我们的线程Queue()不能直接pickle存储，所以我们在这里先将其转换成列表.\n\n好了，我们的IP代理池到这里就完结了？\nNoNoNo,我们需要一个控制器来操作它。\n\n## 使用方法\n\n我们来看一下我们在主进程是如何调用它的\n\n\n### Controller()：控制器\n\n前面讲到我们需要进行进程间的通信，所以我们使用self.commander和self.output来作为通信管道。我们将这两个管道和操作方法一起封装在一起，就是我们的控制器。\n\n    ```Python  \n    class Controller():\n        def __init__(self):\n            self.commander = QP()\n            self.output = QP()\n\n        def send(self,command):\n            self.commander.put(command)\n            if command in ['Status','Get']:\n                return self.output.get(timeout=1)          \n    ```\n\n需要注意的是我们必须使用multiprocessing 封装的Queue才可以进行通信，\n\n### 操作\n\n一个简单的操作演示，在解释器上跑跑看\n\n    ```Python\n    #先创建一个代理池\n    In [39]: pool = IP_proxy_pool()\n    #创建控制器\n    In [40]: remote = Controller()\n    #创建一个新进程来使用代理池引擎\n    In [41]: pool_process= Process(target = test.Start,args = (remote.commander,remote.output,))\n    #启动引擎,这里的start不是引擎的Start，是进程的启动操作，通过start()调用Start()\n    In [42]:pool_process.start()\n    #最后可以通过Controller的send()方法操作\n    In [43]: remote.send('Get')\n    Out[43]: ('49.81.34.87', '46491', 'HTTPS')\n    ```\n    \n好啦，一个IP代理池到这里就被我们构建出来了。可以放在代码里自动运行也可以在解释器里面手工操作获得IP地址。以后挂代理看视频抓数据就用它了hiahiahia.\n\n哦对了，最后留几个作业lol:想想看如何完善里面的监测和报错机制，如何抓取其他网站的IP，如何避免抓取到重复的IP\n\n先就这么多了，Bye~\n    \n## 完整代码\n\n    ```Python\n    from threading import Thread\n    import os\n    import pickle\n    import requests as req\n    import re\n    import time\n    from queue import Empty,Queue\n    from multiprocessing import Queue as QP,Process\n    #这里是个坑，Multiprocessing 的Queue不能使用qsize， queue的Queue不能跨进程通信及pickle\n\n\n    class IP_proxy_pool(object):\n\n        def __init__(self,ready=5,max_pages= 10):\n            self.settings = dict(\n                Pool_ready = 5,\n                max_pages = 10\n                )\n\n            self.commander = None\n            self.output = None\n            self.__workers = {}\n            self._Raw = Queue()\n            self._available = Queue()\n            self.__active = False\n            self.__worker_is_working = False\n            self.__ready = False\n            self._cache_path = os.getcwd()+os.sep+\"proxylist.pkl\"\n            self.header = {'User-Agent':'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'}\n            self.command = dict(\n                Stop = self.__Stop,\n                Crawl = self.crawler,\n                Status = self.Status,\n                Get= self.get_a_proxy,\n                Monitor = self.__Monitor,\n                Verify = self.verify_IP)\n\n        def Start(self,commander,output,Manual=True):\n            self.__active = True\n            self.commander,self.output = commander,output \n            self.read_cache()\n            #for each in ['Monitor']\n            if Manual:\n                self.__Run()\n            else:\n                for each in ['Crawl','Monitor','Verify']:\n                    self.commander.put(each)\n                self.__Run()\n\n        def __Run(self):\n\n            while self.__active:\n                try:\n                    eventname = self.commander.get(block=True,timeout=1)\n                    #Need Check event\n                    print(\"Receive the command {}\".format(eventname))\n                    self.__EventProcess(self.command[eventname],eventname)\n                except Empty:\n                    pass\n\n        def __EventProcess(self,event,eventName):\n            print(\"Event is Processing\")\n            #在主程序中直接运行\n            if eventName in ('Status','Stop','Get'):\n                event()\n            else:#开线程运行\n                self.__workers[eventName]=Thread(target=event)\n                self.__workers[eventName].start()\n\n\n        def __Stop(self):\n            self.__active = False\n            for name,worker in self.__workers.items():\t\t\n                worker.join()\n            print('\\nSaving your proxies . . .')\n            self.write_cache()\n\n        def Status(self):\n            print(\"You reached level Status\")\n            msg ='''\n\n            Engine Active               {}\n            IP Pool Ready               {}\n            Crawler Working             {}\n            Raw IP Pool size            {}\n            Alive IP available          {}\n\n            '''.format(self.__active,self.__ready,self.__worker_is_working,self._Raw.qsize(),self._available.qsize())\n            self.output.put(msg)\n\n        def crawler(self):\n            self.__worker_is_working = True\n            regex = re.compile(r'<tr class.*?<td.*?<td>(.+?)</td.*?<td>(.+?)</td.*?</td.*?</td.*?<td>(.+?)</td.*?</tr>',re.S)\n            for i in range(1,self.settings['max_pages']+1):\n                if not self.__active:\n                    break\n                page_source= req.get(\"http://www.xicidaili.com/nn/{}\".format(i),headers =self.header).text\n                result = re.findall(regex,page_source)\n                for each in result:\n                    self._Raw.put(each)\n                time.sleep(60)\n            self.__worker_is_working = False\n\n        def __Monitor(self):\n            while self.__active:\n                if self.__worker_is_working:\n                    pass\n                elif self._available.qsize() < self.settings['Pool_ready']:\n                    self.commander.put(\"Crawl\")\n                time.sleep(15)\n\n\n        def verify_IP(self):\n            while self.__active:\n                try:\n                    proxy_item = self._Raw.get(block=True,timeout=1)\n                    req_proxy = {proxy_item[2]:'{}:{}'.format(proxy_item[0],proxy_item[1])}\n                    print(\"verifying {}:{}\".format(proxy_item[0],proxy_item[1]))\n                    attempt = req.get('http://www.baidu.com',headers= self.header,proxies = req_proxy,timeout=5)\n                    if attempt.status_code == 200:\n                        self._available.put(attempt)\n                except Empty:\n                    print(\"Raw pool is empty\")\n                    time.sleep(60)\n                except:\n                    pass\n\n        def get_a_proxy(self):\n            try:\n\n                if self._available.qsize() > 0:\n                    ip = self._available.get(block=True,timeout=1)\n                else:\n                    ip = self._Raw.get(block=True,timeout=1)\n                self.output.put(ip)\n\n            except:\n                self.output.put('Oops. Both pools Empty.')\n\n\n        def read_cache(self):\n            if not os.path.isfile(self._cache_path):\n                self.write_cache()\n            else:\n                try:\n                    f = open(self._cache_path,'rb')\n                    raw,available = pickle.load(f)\n                    [self._Raw.put(each) for each in raw]\n                    [self._available.put(each) for each in available]\n                    f.close()\n                except:\n                    pass\n\n        def write_cache(self):\n            f = open(self._cache_path,\"wb\")\n            raw = list(self._Raw.queue)\n            available = list(self._available.queue)\n            pickle.dump([raw,available],f)\n            f.close()\n\n    class Controller():\n        def __init__(self):\n            self.commander = QP()\n            self.output = QP()\n\n        def send(self,command):\n            self.commander.put(command)\n            if command in ['Status','Get']:\n                return self.output.get(timeout=1)\n    ```\n\n## Reference\n- [事件驱动引擎原理和使用: vn.py](http://www.vnpy.org/basic-tutorial-4.html)\n- [Python爬虫代理池结构](http://python.jobbole.com/86994/)\n- [ChenghaoQian.com: （我自己）](http://chenghaoqian.com)\n\n\n\n\n\n\n  ","source":"_posts/ip-proxy-pool.md","raw":"---\ntitle: Python:建立一个IP代理池\ndate: 2018-04-14 11:20:13\ntags:\ncategories: Python爬虫\n---\n\n生活中我们经常会用到一些代理服务器，尤其在做爬虫抓取对方网站数据的时候，很容易会被对方服务器封IP。通常我在抓取数据的时候会采用**抓取数据->IP被封时触发代理抓取机制->使用代理继续抓取->代理耗尽重新抓取**的机制，显得有些粗糙，而且在抓取代理的时候会阻塞，非常影响效率。痛定思痛，在开发Jalapeno的时候接触到事件驱动引擎，于是决定开发这个独立持续运转的代理池。\n\n本节我会从事件驱动引擎开始演示并逐步实现抓取、存活验证等功能，最后完成使用Queue多线程多进程的并行及使用控制器通信。\n\n<!--More-->\n## 工具准备\n\n这次我们需要的工具有\n- Python3.x （必备lol）\n- Requests (熟悉urllib可以代替Requests，免去第三方库依赖)\n\n先引入我们需要的工具\n\n    ```Python\n    from threading import Thread #线程模块\n    import os #系统调用，识别路径\n    import pickle #存储\n    import requests as req #Requests模块\n    import re #正则表达式\n    import time #我们用time.sleep()休眠\n    #下面两个是队列模块，保护数据读写不混乱，跨进程通信。\n    from queue import Empty,Queue\n    from multiprocessing import Queue as QP,Process\n    #这里是个坑，在Mac下Multiprocessing 的Queue不能使用qsize， queue的Queue不能跨进程通信及pickle\n    ```\n\n## 事件驱动引擎\n\n先简单介绍一下事件驱动引擎的机制，事件驱动，顾名思义就是接收事件再处理事件的一个过程。流程如下\n\n    启动 -> 引擎持续运转待命 ->接收各类事件／信号（包括停止运行）->处理事件,如图\n    \n![](ip-proxy-pool/flow_min.png)\n    \n    \n代码结构如下：\n\n    ```Python\n    class IP_proxy_pool(object):\n\n        def __init__(self):\n            pass\n        def Start(self):\n            pass\n        def __Run(self):\n            pass\n        def __EventProcess(self,event,eventName):\n            pass\n        def __Stop(self):\n            pass\n    ```\n\n接下来我们来看各个部分的代码及其原理\n            \n### \\_\\_init__\n\n\\__init__包含了我们整个代理池的初始参数，其中一部分是引擎所需要的，另一部分是其他功能的参数。\n\n代码：\n\n    ```Python\n    def __init__(self,ready=5,max_pages= 10):\n        self.settings = dict(\n\t\t\tPool_ready = 5,\n\t\t\tmax_pages = 10\n\t\t\t)\n\n\t\tself.commander = None\n\t\tself.output = None\n\t\tself.__workers = {}\n\t\tself._Raw = Queue()\n\t\tself._available = Queue()\n\t\tself.__active = False\n\t\tself.__worker_is_working = False\n\t\tself.__ready = False\n\t\tself._cache_path = os.getcwd()+os.sep+\"proxylist.pkl\"\n\t\tself.header = {'User-Agent':'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'}\n\t\tself.command = dict(\n\t\t\tStop = self.__Stop,\n\t\t\tCrawl = self.crawler,\n\t\t\tStatus = self.Status,\n\t\t\tGet= self.get_a_proxy,\n\t\t\tMonitor = self.__Monitor,\n\t\t\tVerify = self.verify_IP) \n    ```\n    \n\n- self.setting:代理池默认设置。包含了爬虫最大访问页数和最低可用ip数量        \n- self.commander: 引擎组件。作为接收主进程命令的管道，在Start中初始化，并不需要在__init__中出现所以初始为None。后面会在多进程启动部分中讲解\n- self.output: 同上，将运行结果反馈给主进程\n- self.workers:引擎组件。包含了所有正在工作的子线程，通过dict的形式将任务名称和对应线程联系\n- self._Raw：从IP代理网站上解析出来的所有IP地址，未经过验证是否存活\n- self._available：存活可用的IP\n- self.__active: 引擎组件。当self.__active为True时，引擎保持运转。\n- self.__worker_is_working: 当值为True时，表示爬虫正在抓取IP地址。\n- self.ready: 监测控件。监测当前代理池中可用IP是否超过最低标准。如果低于标准，将启动IP抓取工作\n- self._cache_path: 存储／读取抓取结果到本地的路径\n- self.header: 爬虫请求网页的报头，与网络访问相关。会出现在Crawler和Verify中。\n- self.command: 包含了输入请求信号所对应的任务\n\n然后就开始我们的引擎组建工作\n\n### Start()\n\nStart()相当于引擎的启动装置，建立通信管道，设置操作模式，最后进入运行。在多进程模式下，由于这是我们启动引擎执行的函数，所以我们使用“args= xxx\"将通信和设置变量传入本函数中。\n\n代码：\n\n    ```Python\n\tdef Start(self,commander,output,Manual=True):\n\t\tself.__active = True\n\t\tself.commander,self.output = commander,output \n\t\tself.read_cache()\n\t\t#for each in ['Monitor']\n\t\tif Manual:\n\t\t\tself.__Run()\n\t\telse:\n\t\t\tfor each in ['Crawl','Monitor','Verify']:\n\t\t\t\tself.commander.put(each)\n\t\t\tself.__Run()\n    ```\n\n在Start中：\n\n1.首先我们设置self.__active=True,表示引擎开始运转。\n\n2.构建通信管道 self.commander,self.output，这两个变量是由主进程的控制器传入。\n\n3.读取存档。没有存档会自行创建。\n\n4.如果设置模式为Manual,则只维持运转，需要指令输入。如果不是，则自动启动爬虫，监测系统和IP筛选工作。\n\n\n### __Run()\n\n__Run()是引擎的运转核心，作用机制比较简单。当active指示为True时，维持运转，持续接收指示信号并交付处理。\n\n   ```Python\n    def __Run(self):\n\t\twhile self.__active:\n\t\t\ttry:\n\t\t\t\teventname = self.commander.get(block=True,timeout=1)\n\t\t\t\tself.__EventProcess(self.command[eventname],eventname)\n\t\t\texcept Empty:\n\t\t\t\tpass\n    ```\n                \n先尝试从commander获取指示信号，如果为空，则except捕获异常跳过本轮循环。\n如果顺利接受信号，则交付__EventProcess处理。\n\n>注意：commander.get()方法中,我们设置timeout=1避免卡死，设置block来阻塞一个timeout的等待时常，避免程序高速运转浪费过多CPU资源。\n\n### __EventProcess()\n\n__EventProcess()是引擎的事件处理调度模块，它在目前的工作中将任务分成两类并执行：直接执行和开启新线程并行。\n\n    ```Python\n\tdef __EventProcess(self,event,eventName):\n\t\tprint(\"Event is Processing\")\n\t\t#在主程序中直接运行\n\t\tif eventName in ('Status','Stop','Get'):\n\t\t\tevent()\n\t\telse:#开线程运行\n\t\t\tself.__workers[eventName]=Thread(target=event)\n\t\t\tself.__workers[eventName].start()\n    ```\n\t\t\n### __Stop()\n\nStop()是在当我们的任务完成后，我们将要关闭引擎并自动存档的模块。\n\n    ```Python\n\tdef __Stop(self):\n\t\tself.__active = False\n\t\tfor name,worker in self.__workers.items():\t\t\n\t\t\tworker.join()\n\t\tprint('\\nSaving your proxies . . .')\n\t\tself.write_cache()\n    ```\n\n\n整个流程分成三步：\n\n1.关闭active指示\n\n2.等待workers中的所有子线程任务结束。\n\n3.write_cache存档，方便下次读取\n\n>这里需要注意的是关闭active指示需要在第一步。**因为Thread不像Process那样可以调用terminate()强制中止**，所以在相关子线程任务中我们保持了和引擎同步的方法，在任务执行完毕之前**或者self.active=True**的时候，都会保持运行。也就是说如果我们关掉active指示，我们就可以让所有子线程跳出循环自动退出。最后在第二步中用join方法等待任务结束。\n\n到这里我们的完整的食物驱动引擎架构基本完成，我们继续来构建功能性组件。\n\n\n\n## 功能性组件\n\n功能性组件实现了我们代理池的核心功能，即抓取IP地址，实时监测，状态输出及读写功能。\n\n\n### Status()状态输出\n\n状态输出是将我们的代理池的信息以字符串的形式放入output（输出管道），方便我们查看当前运行状态\n\n代码：\n    \n    ```Python\n\tdef Status(self):\n\t\tmsg ='''\n\n\t\tEngine Active               {}\n\t\tIP Pool Ready               {}\n\t\tCrawler Working             {}\n\t\tRaw IP Pool size            {}\n\t\tAlive IP available          {}\n\n\t\t'''.format(self.__active,self.__ready,self.__worker_is_working,self._Raw.qsize(),self._available.qsize())\n\t\tself.output.put(msg)\n    ```\n\n\n示例：\n\n    In [34]: print(remote.send('Status'))\n    \n    \n\t\tEngine Active               True\n\t\tIP Pool Ready               False\n\t\tCrawler Working             False\n\t\tRaw IP Pool size            399\n\t\tAlive IP available          0\n\n\n### crawler():IP抓取爬虫\n看到这里终于看到我们的核心组件之一爬虫的真身了。这里我用西刺代理的高匿IP地址页面举例。\n\n    ```Python\n\tdef crawler(self):\n\t\tself.__worker_is_working = True\n\t\tregex = re.compile(r'<tr class.*?<td.*?<td>(.+?)</td.*?<td>(.+?)</td.*?</td.*?</td.*?<td>(.+?)</td.*?</tr>',re.S)\n\t\tfor i in range(1,self.settings['max_pages']+1):\n\t\t\tif not self.__active:\n\t\t\t\tbreak\n\t\t\tpage_source= req.get(\"http://www.xicidaili.com/nn/{}\".format(i),headers =self.header).text\n\t\t\tresult = re.findall(regex,page_source)\n\t\t\tfor each in result:\n\t\t\t\tself._Raw.put(each)\n\t\t\ttime.sleep(60)\n\t\tself.__worker_is_working = False\n    ```\n1.当爬虫开始运行时设置__worker_is_working = True，表示爬虫结束运行。\n\n2.接下来就是爬虫的抓取流程并将结果放入self.\\_Raw中，爬虫可以参考我之前的相关文章。在这里要注意三点：\n\n- 使用requests(req)添加header的方法\n- time.sleep(60)设置爬取间隔，减少对方服务器访问压力。此时也可以和IP验证的时间同步\n- self.\\_Raw使用的结构是队列（QUEUE）的形式，我们在这里用的是线程的Queue()而不是multiprocessing的Queue(),因为线程的Queue()自带线程锁，可以保护数据不错乱。并且可以使用qsize功能来获取队列长度（数量）\n    \n3.抓取完成。\\__worker_is_working = False，退出。\n\n\n### \\__Monitor()\n\nMonitor()的运行机制如下，\n\n    ```Python\n    def __Monitor(self):\n    \twhile self.__active:\n    \t\tif self.__worker_is_working:\n    \t\t\tpass\n    \t\telif self._available.qsize() < self.settings['Pool_ready']:\n    \t\t\tself.commander.put(\"Crawl\")\n    \t\ttime.sleep(15)\n    ```\n\n\n- 当引擎运行时，检测爬虫是否在工作。\n- 如果没有在工作，检测代理池中的IP是否达到最低标准。\n- 如果没有达到，启动爬虫，\n- 休息15秒重新检测。\n\n### verify_IP():IP存活验证\n \n事实上，并不是每一个从代理网站上抓取到的IP地址**并不一定能用**.所以在这里我们添加一下验证。原理很简单：从self.\\_Raw里面拿出一个IP，挂上IP之后去访问一个网站（我这里就用百度了，不要怪我。。lol）,如果访问请求返回结果是200，则说明访问成功，该IP地址可以使用。\n\n代码：\n\n    ```Python\n    def verify_IP(self):\n        while self.__active:\n            try:\n                proxy_item = self._Raw.get(block=True,timeout=1)\n                #注意下面使用IP的格式 {'HTTPS'：'183.159.80.92:18118'}\n                req_proxy = {proxy_item[2]:'{}:{}'.format(proxy_item[0],proxy_item[1])}\n                print(\"verifying {}:{}\".format(proxy_item[0],proxy_item[1]))\n                attempt = req.get('http://www.baidu.com',headers= self.header,proxies = req_proxy,timeout=5)#注意这里使用IP的方式\n                if attempt.status_code == 200:\n                    self._available.put(attempt)\n            except Empty:\n                print(\"Raw pool is empty\")\n                time.sleep(60)\n            except:\n                pass\n    ```\n\n\n###get_a_proxy() 获得一个IP地址（输出）        \n\n这一块的任务相对来说就简单许多，你只需要从可用的IP队列中获得一个并输出即可。（当可用IP队列为空时我用原始_Raw列队列充数这种事情我是不会说出来的hiahiahia，当然如果愿意用自己的爬虫来验证是否可用而不去检测有效的时候，会有一定的灵活操作空间）\n    \n    ```Python\n\tdef get_a_proxy(self):\n\t\ttry:\n\n\t\t\tif self._available.qsize() > 0:\n\t\t\t\tip = self._available.get(block=True,timeout=1)\n\t\t\telse:\n\t\t\t\tip = self._Raw.get(block=True,timeout=1)\n\t\t\tself.output.put(ip)\n\n\t\texcept:\n\t\t\tself.output.put('Oops. Both pools Empty.')   \n    ```    \n\n\n### 存档读写\n\n抓取了很多很多好用的代理不想白白浪费吧，下次要用的时候不想等重头来过吧。存档读写功能，你值得拥有。\n        \n    ```Python   \n\tdef read_cache(self):\n        #检测是否文件已存在。如果没有就创建一个\n\t\tif not os.path.isfile(self._cache_path):\n\t\t\tself.write_cache()\n        #读取内容\n\t\telse:\n\t\t\ttry:\n\t\t\t\tf = open(self._cache_path,'rb')\n\t\t\t\traw,available = pickle.load(f)\n\t\t\t\t[self._Raw.put(each) for each in raw]\n\t\t\t\t[self._available.put(each) for each in available]\n\t\t\t\tf.close()\n\t\t\texcept:\n\t\t\t\tpass\n    #存档            \n\tdef write_cache(self):\n\t\tf = open(self._cache_path,\"wb\")\n\t\traw = list(self._Raw.queue)\n\t\tavailable = list(self._available.queue)\n\t\tpickle.dump([raw,available],f)\n\t\tf.close()        \n    ```\n比较令人郁闷的是我们的线程Queue()不能直接pickle存储，所以我们在这里先将其转换成列表.\n\n好了，我们的IP代理池到这里就完结了？\nNoNoNo,我们需要一个控制器来操作它。\n\n## 使用方法\n\n我们来看一下我们在主进程是如何调用它的\n\n\n### Controller()：控制器\n\n前面讲到我们需要进行进程间的通信，所以我们使用self.commander和self.output来作为通信管道。我们将这两个管道和操作方法一起封装在一起，就是我们的控制器。\n\n    ```Python  \n    class Controller():\n        def __init__(self):\n            self.commander = QP()\n            self.output = QP()\n\n        def send(self,command):\n            self.commander.put(command)\n            if command in ['Status','Get']:\n                return self.output.get(timeout=1)          \n    ```\n\n需要注意的是我们必须使用multiprocessing 封装的Queue才可以进行通信，\n\n### 操作\n\n一个简单的操作演示，在解释器上跑跑看\n\n    ```Python\n    #先创建一个代理池\n    In [39]: pool = IP_proxy_pool()\n    #创建控制器\n    In [40]: remote = Controller()\n    #创建一个新进程来使用代理池引擎\n    In [41]: pool_process= Process(target = test.Start,args = (remote.commander,remote.output,))\n    #启动引擎,这里的start不是引擎的Start，是进程的启动操作，通过start()调用Start()\n    In [42]:pool_process.start()\n    #最后可以通过Controller的send()方法操作\n    In [43]: remote.send('Get')\n    Out[43]: ('49.81.34.87', '46491', 'HTTPS')\n    ```\n    \n好啦，一个IP代理池到这里就被我们构建出来了。可以放在代码里自动运行也可以在解释器里面手工操作获得IP地址。以后挂代理看视频抓数据就用它了hiahiahia.\n\n哦对了，最后留几个作业lol:想想看如何完善里面的监测和报错机制，如何抓取其他网站的IP，如何避免抓取到重复的IP\n\n先就这么多了，Bye~\n    \n## 完整代码\n\n    ```Python\n    from threading import Thread\n    import os\n    import pickle\n    import requests as req\n    import re\n    import time\n    from queue import Empty,Queue\n    from multiprocessing import Queue as QP,Process\n    #这里是个坑，Multiprocessing 的Queue不能使用qsize， queue的Queue不能跨进程通信及pickle\n\n\n    class IP_proxy_pool(object):\n\n        def __init__(self,ready=5,max_pages= 10):\n            self.settings = dict(\n                Pool_ready = 5,\n                max_pages = 10\n                )\n\n            self.commander = None\n            self.output = None\n            self.__workers = {}\n            self._Raw = Queue()\n            self._available = Queue()\n            self.__active = False\n            self.__worker_is_working = False\n            self.__ready = False\n            self._cache_path = os.getcwd()+os.sep+\"proxylist.pkl\"\n            self.header = {'User-Agent':'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'}\n            self.command = dict(\n                Stop = self.__Stop,\n                Crawl = self.crawler,\n                Status = self.Status,\n                Get= self.get_a_proxy,\n                Monitor = self.__Monitor,\n                Verify = self.verify_IP)\n\n        def Start(self,commander,output,Manual=True):\n            self.__active = True\n            self.commander,self.output = commander,output \n            self.read_cache()\n            #for each in ['Monitor']\n            if Manual:\n                self.__Run()\n            else:\n                for each in ['Crawl','Monitor','Verify']:\n                    self.commander.put(each)\n                self.__Run()\n\n        def __Run(self):\n\n            while self.__active:\n                try:\n                    eventname = self.commander.get(block=True,timeout=1)\n                    #Need Check event\n                    print(\"Receive the command {}\".format(eventname))\n                    self.__EventProcess(self.command[eventname],eventname)\n                except Empty:\n                    pass\n\n        def __EventProcess(self,event,eventName):\n            print(\"Event is Processing\")\n            #在主程序中直接运行\n            if eventName in ('Status','Stop','Get'):\n                event()\n            else:#开线程运行\n                self.__workers[eventName]=Thread(target=event)\n                self.__workers[eventName].start()\n\n\n        def __Stop(self):\n            self.__active = False\n            for name,worker in self.__workers.items():\t\t\n                worker.join()\n            print('\\nSaving your proxies . . .')\n            self.write_cache()\n\n        def Status(self):\n            print(\"You reached level Status\")\n            msg ='''\n\n            Engine Active               {}\n            IP Pool Ready               {}\n            Crawler Working             {}\n            Raw IP Pool size            {}\n            Alive IP available          {}\n\n            '''.format(self.__active,self.__ready,self.__worker_is_working,self._Raw.qsize(),self._available.qsize())\n            self.output.put(msg)\n\n        def crawler(self):\n            self.__worker_is_working = True\n            regex = re.compile(r'<tr class.*?<td.*?<td>(.+?)</td.*?<td>(.+?)</td.*?</td.*?</td.*?<td>(.+?)</td.*?</tr>',re.S)\n            for i in range(1,self.settings['max_pages']+1):\n                if not self.__active:\n                    break\n                page_source= req.get(\"http://www.xicidaili.com/nn/{}\".format(i),headers =self.header).text\n                result = re.findall(regex,page_source)\n                for each in result:\n                    self._Raw.put(each)\n                time.sleep(60)\n            self.__worker_is_working = False\n\n        def __Monitor(self):\n            while self.__active:\n                if self.__worker_is_working:\n                    pass\n                elif self._available.qsize() < self.settings['Pool_ready']:\n                    self.commander.put(\"Crawl\")\n                time.sleep(15)\n\n\n        def verify_IP(self):\n            while self.__active:\n                try:\n                    proxy_item = self._Raw.get(block=True,timeout=1)\n                    req_proxy = {proxy_item[2]:'{}:{}'.format(proxy_item[0],proxy_item[1])}\n                    print(\"verifying {}:{}\".format(proxy_item[0],proxy_item[1]))\n                    attempt = req.get('http://www.baidu.com',headers= self.header,proxies = req_proxy,timeout=5)\n                    if attempt.status_code == 200:\n                        self._available.put(attempt)\n                except Empty:\n                    print(\"Raw pool is empty\")\n                    time.sleep(60)\n                except:\n                    pass\n\n        def get_a_proxy(self):\n            try:\n\n                if self._available.qsize() > 0:\n                    ip = self._available.get(block=True,timeout=1)\n                else:\n                    ip = self._Raw.get(block=True,timeout=1)\n                self.output.put(ip)\n\n            except:\n                self.output.put('Oops. Both pools Empty.')\n\n\n        def read_cache(self):\n            if not os.path.isfile(self._cache_path):\n                self.write_cache()\n            else:\n                try:\n                    f = open(self._cache_path,'rb')\n                    raw,available = pickle.load(f)\n                    [self._Raw.put(each) for each in raw]\n                    [self._available.put(each) for each in available]\n                    f.close()\n                except:\n                    pass\n\n        def write_cache(self):\n            f = open(self._cache_path,\"wb\")\n            raw = list(self._Raw.queue)\n            available = list(self._available.queue)\n            pickle.dump([raw,available],f)\n            f.close()\n\n    class Controller():\n        def __init__(self):\n            self.commander = QP()\n            self.output = QP()\n\n        def send(self,command):\n            self.commander.put(command)\n            if command in ['Status','Get']:\n                return self.output.get(timeout=1)\n    ```\n\n## Reference\n- [事件驱动引擎原理和使用: vn.py](http://www.vnpy.org/basic-tutorial-4.html)\n- [Python爬虫代理池结构](http://python.jobbole.com/86994/)\n- [ChenghaoQian.com: （我自己）](http://chenghaoqian.com)\n\n\n\n\n\n\n  ","slug":"ip-proxy-pool","published":1,"updated":"2018-06-22T08:41:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiqvlo1q001cglu3jvwq2l84","content":"<p>生活中我们经常会用到一些代理服务器，尤其在做爬虫抓取对方网站数据的时候，很容易会被对方服务器封IP。通常我在抓取数据的时候会采用<strong>抓取数据-&gt;IP被封时触发代理抓取机制-&gt;使用代理继续抓取-&gt;代理耗尽重新抓取</strong>的机制，显得有些粗糙，而且在抓取代理的时候会阻塞，非常影响效率。痛定思痛，在开发Jalapeno的时候接触到事件驱动引擎，于是决定开发这个独立持续运转的代理池。</p>\n<p>本节我会从事件驱动引擎开始演示并逐步实现抓取、存活验证等功能，最后完成使用Queue多线程多进程的并行及使用控制器通信。</p>\n<a id=\"more\"></a>\n<h2 id=\"工具准备\"><a href=\"#工具准备\" class=\"headerlink\" title=\"工具准备\"></a>工具准备</h2><p>这次我们需要的工具有</p>\n<ul>\n<li>Python3.x （必备lol）</li>\n<li>Requests (熟悉urllib可以代替Requests，免去第三方库依赖)</li>\n</ul>\n<p>先引入我们需要的工具</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread <span class=\"comment\">#线程模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os <span class=\"comment\">#系统调用，识别路径</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pickle <span class=\"comment\">#存储</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests <span class=\"keyword\">as</span> req <span class=\"comment\">#Requests模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> re <span class=\"comment\">#正则表达式</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time <span class=\"comment\">#我们用time.sleep()休眠</span></span><br><span class=\"line\"><span class=\"comment\">#下面两个是队列模块，保护数据读写不混乱，跨进程通信。</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> queue <span class=\"keyword\">import</span> Empty,Queue</span><br><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Queue <span class=\"keyword\">as</span> QP,Process</span><br><span class=\"line\"><span class=\"comment\">#这里是个坑，在Mac下Multiprocessing 的Queue不能使用qsize， queue的Queue不能跨进程通信及pickle</span></span><br></pre></td></tr></table></figure>\n</code></pre><h2 id=\"事件驱动引擎\"><a href=\"#事件驱动引擎\" class=\"headerlink\" title=\"事件驱动引擎\"></a>事件驱动引擎</h2><p>先简单介绍一下事件驱动引擎的机制，事件驱动，顾名思义就是接收事件再处理事件的一个过程。流程如下</p>\n<pre><code>启动 -&gt; 引擎持续运转待命 -&gt;接收各类事件／信号（包括停止运行）-&gt;处理事件,如图\n</code></pre><p><img src=\"/article/ip-proxy-pool/flow_min.png\" alt=\"\"></p>\n<p>代码结构如下：</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IP_proxy_pool</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Start</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__Run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__EventProcess</span><span class=\"params\">(self,event,eventName)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__Stop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>接下来我们来看各个部分的代码及其原理</p>\n<h3 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"__init__\"></a>__init__</h3><p>__init__包含了我们整个代理池的初始参数，其中一部分是引擎所需要的，另一部分是其他功能的参数。</p>\n<p>代码：</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,ready=<span class=\"number\">5</span>,max_pages= <span class=\"number\">10</span>)</span>:</span></span><br><span class=\"line\">      self.settings = dict(</span><br><span class=\"line\">\tPool_ready = <span class=\"number\">5</span>,</span><br><span class=\"line\">\tmax_pages = <span class=\"number\">10</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\"></span><br><span class=\"line\">self.commander = <span class=\"keyword\">None</span></span><br><span class=\"line\">self.output = <span class=\"keyword\">None</span></span><br><span class=\"line\">self.__workers = &#123;&#125;</span><br><span class=\"line\">self._Raw = Queue()</span><br><span class=\"line\">self._available = Queue()</span><br><span class=\"line\">self.__active = <span class=\"keyword\">False</span></span><br><span class=\"line\">self.__worker_is_working = <span class=\"keyword\">False</span></span><br><span class=\"line\">self.__ready = <span class=\"keyword\">False</span></span><br><span class=\"line\">self._cache_path = os.getcwd()+os.sep+<span class=\"string\">\"proxylist.pkl\"</span></span><br><span class=\"line\">self.header = &#123;<span class=\"string\">'User-Agent'</span>:<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'</span>&#125;</span><br><span class=\"line\">self.command = dict(</span><br><span class=\"line\">\tStop = self.__Stop,</span><br><span class=\"line\">\tCrawl = self.crawler,</span><br><span class=\"line\">\tStatus = self.Status,</span><br><span class=\"line\">\tGet= self.get_a_proxy,</span><br><span class=\"line\">\tMonitor = self.__Monitor,</span><br><span class=\"line\">\tVerify = self.verify_IP)</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>self.setting:代理池默认设置。包含了爬虫最大访问页数和最低可用ip数量        </li>\n<li>self.commander: 引擎组件。作为接收主进程命令的管道，在Start中初始化，并不需要在<strong>init</strong>中出现所以初始为None。后面会在多进程启动部分中讲解</li>\n<li>self.output: 同上，将运行结果反馈给主进程</li>\n<li>self.workers:引擎组件。包含了所有正在工作的子线程，通过dict的形式将任务名称和对应线程联系</li>\n<li>self._Raw：从IP代理网站上解析出来的所有IP地址，未经过验证是否存活</li>\n<li>self._available：存活可用的IP</li>\n<li>self.<strong>active: 引擎组件。当self.</strong>active为True时，引擎保持运转。</li>\n<li>self.__worker_is_working: 当值为True时，表示爬虫正在抓取IP地址。</li>\n<li>self.ready: 监测控件。监测当前代理池中可用IP是否超过最低标准。如果低于标准，将启动IP抓取工作</li>\n<li>self._cache_path: 存储／读取抓取结果到本地的路径</li>\n<li>self.header: 爬虫请求网页的报头，与网络访问相关。会出现在Crawler和Verify中。</li>\n<li>self.command: 包含了输入请求信号所对应的任务</li>\n</ul>\n<p>然后就开始我们的引擎组建工作</p>\n<h3 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start()\"></a>Start()</h3><p>Start()相当于引擎的启动装置，建立通信管道，设置操作模式，最后进入运行。在多进程模式下，由于这是我们启动引擎执行的函数，所以我们使用“args= xxx”将通信和设置变量传入本函数中。</p>\n<p>代码：</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Start</span><span class=\"params\">(self,commander,output,Manual=True)</span>:</span></span><br><span class=\"line\">\tself.__active = <span class=\"keyword\">True</span></span><br><span class=\"line\">\tself.commander,self.output = commander,output </span><br><span class=\"line\">\tself.read_cache()</span><br><span class=\"line\">\t<span class=\"comment\">#for each in ['Monitor']</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> Manual:</span><br><span class=\"line\">\t\tself.__Run()</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> [<span class=\"string\">'Crawl'</span>,<span class=\"string\">'Monitor'</span>,<span class=\"string\">'Verify'</span>]:</span><br><span class=\"line\">\t\t\tself.commander.put(each)</span><br><span class=\"line\">\t\tself.__Run()</span><br></pre></td></tr></table></figure>\n</code></pre><p>在Start中：</p>\n<p>1.首先我们设置self.__active=True,表示引擎开始运转。</p>\n<p>2.构建通信管道 self.commander,self.output，这两个变量是由主进程的控制器传入。</p>\n<p>3.读取存档。没有存档会自行创建。</p>\n<p>4.如果设置模式为Manual,则只维持运转，需要指令输入。如果不是，则自动启动爬虫，监测系统和IP筛选工作。</p>\n<h3 id=\"Run\"><a href=\"#Run\" class=\"headerlink\" title=\"__Run()\"></a>__Run()</h3><p>__Run()是引擎的运转核心，作用机制比较简单。当active指示为True时，维持运转，持续接收指示信号并交付处理。</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__Run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> self.__active:</span><br><span class=\"line\">\t<span class=\"keyword\">try</span>:</span><br><span class=\"line\">\t\teventname = self.commander.get(block=<span class=\"keyword\">True</span>,timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\tself.__EventProcess(self.command[eventname],eventname)</span><br><span class=\"line\">\t<span class=\"keyword\">except</span> Empty:</span><br><span class=\"line\">\t\t<span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>先尝试从commander获取指示信号，如果为空，则except捕获异常跳过本轮循环。<br>如果顺利接受信号，则交付__EventProcess处理。</p>\n<blockquote>\n<p>注意：commander.get()方法中,我们设置timeout=1避免卡死，设置block来阻塞一个timeout的等待时常，避免程序高速运转浪费过多CPU资源。</p>\n</blockquote>\n<h3 id=\"EventProcess\"><a href=\"#EventProcess\" class=\"headerlink\" title=\"__EventProcess()\"></a>__EventProcess()</h3><p>__EventProcess()是引擎的事件处理调度模块，它在目前的工作中将任务分成两类并执行：直接执行和开启新线程并行。</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__EventProcess</span><span class=\"params\">(self,event,eventName)</span>:</span></span><br><span class=\"line\">\tprint(<span class=\"string\">\"Event is Processing\"</span>)</span><br><span class=\"line\">\t<span class=\"comment\">#在主程序中直接运行</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> eventName <span class=\"keyword\">in</span> (<span class=\"string\">'Status'</span>,<span class=\"string\">'Stop'</span>,<span class=\"string\">'Get'</span>):</span><br><span class=\"line\">\t\tevent()</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:<span class=\"comment\">#开线程运行</span></span><br><span class=\"line\">\t\tself.__workers[eventName]=Thread(target=event)</span><br><span class=\"line\">\t\tself.__workers[eventName].start()</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"Stop\"><a href=\"#Stop\" class=\"headerlink\" title=\"__Stop()\"></a>__Stop()</h3><p>Stop()是在当我们的任务完成后，我们将要关闭引擎并自动存档的模块。</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__Stop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\tself.__active = <span class=\"keyword\">False</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> name,worker <span class=\"keyword\">in</span> self.__workers.items():\t\t</span><br><span class=\"line\">\t\tworker.join()</span><br><span class=\"line\">\tprint(<span class=\"string\">'\\nSaving your proxies . . .'</span>)</span><br><span class=\"line\">\tself.write_cache()</span><br></pre></td></tr></table></figure>\n</code></pre><p>整个流程分成三步：</p>\n<p>1.关闭active指示</p>\n<p>2.等待workers中的所有子线程任务结束。</p>\n<p>3.write_cache存档，方便下次读取</p>\n<blockquote>\n<p>这里需要注意的是关闭active指示需要在第一步。<strong>因为Thread不像Process那样可以调用terminate()强制中止</strong>，所以在相关子线程任务中我们保持了和引擎同步的方法，在任务执行完毕之前<strong>或者self.active=True</strong>的时候，都会保持运行。也就是说如果我们关掉active指示，我们就可以让所有子线程跳出循环自动退出。最后在第二步中用join方法等待任务结束。</p>\n</blockquote>\n<p>到这里我们的完整的食物驱动引擎架构基本完成，我们继续来构建功能性组件。</p>\n<h2 id=\"功能性组件\"><a href=\"#功能性组件\" class=\"headerlink\" title=\"功能性组件\"></a>功能性组件</h2><p>功能性组件实现了我们代理池的核心功能，即抓取IP地址，实时监测，状态输出及读写功能。</p>\n<h3 id=\"Status-状态输出\"><a href=\"#Status-状态输出\" class=\"headerlink\" title=\"Status()状态输出\"></a>Status()状态输出</h3><p>状态输出是将我们的代理池的信息以字符串的形式放入output（输出管道），方便我们查看当前运行状态</p>\n<p>代码：</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Status</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\tmsg =<span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\tEngine Active               &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">\tIP Pool Ready               &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">\tCrawler Working             &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">\tRaw IP Pool size            &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">\tAlive IP available          &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\t'''</span>.format(self.__active,self.__ready,self.__worker_is_working,self._Raw.qsize(),self._available.qsize())</span><br><span class=\"line\">\tself.output.put(msg)</span><br></pre></td></tr></table></figure>\n</code></pre><p>示例：</p>\n<pre><code>In [34]: print(remote.send(&apos;Status&apos;))\n\n\n    Engine Active               True\n    IP Pool Ready               False\n    Crawler Working             False\n    Raw IP Pool size            399\n    Alive IP available          0\n</code></pre><h3 id=\"crawler-IP抓取爬虫\"><a href=\"#crawler-IP抓取爬虫\" class=\"headerlink\" title=\"crawler():IP抓取爬虫\"></a>crawler():IP抓取爬虫</h3><p>看到这里终于看到我们的核心组件之一爬虫的真身了。这里我用西刺代理的高匿IP地址页面举例。</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">crawler</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\tself.__worker_is_working = <span class=\"keyword\">True</span></span><br><span class=\"line\">\tregex = re.compile(<span class=\"string\">r'&lt;tr class.*?&lt;td.*?&lt;td&gt;(.+?)&lt;/td.*?&lt;td&gt;(.+?)&lt;/td.*?&lt;/td.*?&lt;/td.*?&lt;td&gt;(.+?)&lt;/td.*?&lt;/tr&gt;'</span>,re.S)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,self.settings[<span class=\"string\">'max_pages'</span>]+<span class=\"number\">1</span>):</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.__active:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\tpage_source= req.get(<span class=\"string\">\"http://www.xicidaili.com/nn/&#123;&#125;\"</span>.format(i),headers =self.header).text</span><br><span class=\"line\">\t\tresult = re.findall(regex,page_source)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> result:</span><br><span class=\"line\">\t\t\tself._Raw.put(each)</span><br><span class=\"line\">\t\ttime.sleep(<span class=\"number\">60</span>)</span><br><span class=\"line\">\tself.__worker_is_working = <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>1.当爬虫开始运行时设置__worker_is_working = True，表示爬虫结束运行。</p>\n<p>2.接下来就是爬虫的抓取流程并将结果放入self._Raw中，爬虫可以参考我之前的相关文章。在这里要注意三点：</p>\n<ul>\n<li>使用requests(req)添加header的方法</li>\n<li>time.sleep(60)设置爬取间隔，减少对方服务器访问压力。此时也可以和IP验证的时间同步</li>\n<li>self._Raw使用的结构是队列（QUEUE）的形式，我们在这里用的是线程的Queue()而不是multiprocessing的Queue(),因为线程的Queue()自带线程锁，可以保护数据不错乱。并且可以使用qsize功能来获取队列长度（数量）</li>\n</ul>\n<p>3.抓取完成。__worker_is_working = False，退出。</p>\n<h3 id=\"Monitor\"><a href=\"#Monitor\" class=\"headerlink\" title=\"__Monitor()\"></a>__Monitor()</h3><p>Monitor()的运行机制如下，</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__Monitor</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> self.__active:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> self.__worker_is_working:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">pass</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">elif</span> self._available.qsize() &lt; self.settings[<span class=\"string\">'Pool_ready'</span>]:</span><br><span class=\"line\">\t\t\tself.commander.put(<span class=\"string\">\"Crawl\"</span>)</span><br><span class=\"line\">\t\ttime.sleep(<span class=\"number\">15</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>当引擎运行时，检测爬虫是否在工作。</li>\n<li>如果没有在工作，检测代理池中的IP是否达到最低标准。</li>\n<li>如果没有达到，启动爬虫，</li>\n<li>休息15秒重新检测。</li>\n</ul>\n<h3 id=\"verify-IP-IP存活验证\"><a href=\"#verify-IP-IP存活验证\" class=\"headerlink\" title=\"verify_IP():IP存活验证\"></a>verify_IP():IP存活验证</h3><p>事实上，并不是每一个从代理网站上抓取到的IP地址<strong>并不一定能用</strong>.所以在这里我们添加一下验证。原理很简单：从self._Raw里面拿出一个IP，挂上IP之后去访问一个网站（我这里就用百度了，不要怪我。。lol）,如果访问请求返回结果是200，则说明访问成功，该IP地址可以使用。</p>\n<p>代码：</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">verify_IP</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> self.__active:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            proxy_item = self._Raw.get(block=<span class=\"keyword\">True</span>,timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"comment\">#注意下面使用IP的格式 &#123;'HTTPS'：'183.159.80.92:18118'&#125;</span></span><br><span class=\"line\">            req_proxy = &#123;proxy_item[<span class=\"number\">2</span>]:<span class=\"string\">'&#123;&#125;:&#123;&#125;'</span>.format(proxy_item[<span class=\"number\">0</span>],proxy_item[<span class=\"number\">1</span>])&#125;</span><br><span class=\"line\">            print(<span class=\"string\">\"verifying &#123;&#125;:&#123;&#125;\"</span>.format(proxy_item[<span class=\"number\">0</span>],proxy_item[<span class=\"number\">1</span>]))</span><br><span class=\"line\">            attempt = req.get(<span class=\"string\">'http://www.baidu.com'</span>,headers= self.header,proxies = req_proxy,timeout=<span class=\"number\">5</span>)<span class=\"comment\">#注意这里使用IP的方式</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> attempt.status_code == <span class=\"number\">200</span>:</span><br><span class=\"line\">                self._available.put(attempt)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Empty:</span><br><span class=\"line\">            print(<span class=\"string\">\"Raw pool is empty\"</span>)</span><br><span class=\"line\">            time.sleep(<span class=\"number\">60</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>###get_a_proxy() 获得一个IP地址（输出）        </p>\n<p>这一块的任务相对来说就简单许多，你只需要从可用的IP队列中获得一个并输出即可。（当可用IP队列为空时我用原始_Raw列队列充数这种事情我是不会说出来的hiahiahia，当然如果愿意用自己的爬虫来验证是否可用而不去检测有效的时候，会有一定的灵活操作空间）</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_a_proxy</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> self._available.qsize() &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t\t\tip = self._available.get(block=<span class=\"keyword\">True</span>,timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\tip = self._Raw.get(block=<span class=\"keyword\">True</span>,timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\tself.output.put(ip)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">except</span>:</span><br><span class=\"line\">\t\t\tself.output.put(<span class=\"string\">'Oops. Both pools Empty.'</span>)   </span><br><span class=\"line\">    ```    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 存档读写</span></span><br><span class=\"line\"></span><br><span class=\"line\">抓取了很多很多好用的代理不想白白浪费吧，下次要用的时候不想等重头来过吧。存档读写功能，你值得拥有。</span><br><span class=\"line\">        </span><br><span class=\"line\">    ```Python   </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read_cache</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\">#检测是否文件已存在。如果没有就创建一个</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isfile(self._cache_path):</span><br><span class=\"line\">\t\t\tself.write_cache()</span><br><span class=\"line\">        <span class=\"comment\">#读取内容</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span>:</span><br><span class=\"line\">\t\t\t\tf = open(self._cache_path,<span class=\"string\">'rb'</span>)</span><br><span class=\"line\">\t\t\t\traw,available = pickle.load(f)</span><br><span class=\"line\">\t\t\t\t[self._Raw.put(each) <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> raw]</span><br><span class=\"line\">\t\t\t\t[self._available.put(each) <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> available]</span><br><span class=\"line\">\t\t\t\tf.close()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">except</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"comment\">#存档            </span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write_cache</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t\tf = open(self._cache_path,<span class=\"string\">\"wb\"</span>)</span><br><span class=\"line\">\t\traw = list(self._Raw.queue)</span><br><span class=\"line\">\t\tavailable = list(self._available.queue)</span><br><span class=\"line\">\t\tpickle.dump([raw,available],f)</span><br><span class=\"line\">\t\tf.close()</span><br></pre></td></tr></table></figure>\n</code></pre><p>比较令人郁闷的是我们的线程Queue()不能直接pickle存储，所以我们在这里先将其转换成列表.</p>\n<p>好了，我们的IP代理池到这里就完结了？<br>NoNoNo,我们需要一个控制器来操作它。</p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>我们来看一下我们在主进程是如何调用它的</p>\n<h3 id=\"Controller-：控制器\"><a href=\"#Controller-：控制器\" class=\"headerlink\" title=\"Controller()：控制器\"></a>Controller()：控制器</h3><p>前面讲到我们需要进行进程间的通信，所以我们使用self.commander和self.output来作为通信管道。我们将这两个管道和操作方法一起封装在一起，就是我们的控制器。</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Controller</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.commander = QP()</span><br><span class=\"line\">        self.output = QP()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span><span class=\"params\">(self,command)</span>:</span></span><br><span class=\"line\">        self.commander.put(command)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> command <span class=\"keyword\">in</span> [<span class=\"string\">'Status'</span>,<span class=\"string\">'Get'</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.output.get(timeout=<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>需要注意的是我们必须使用multiprocessing 封装的Queue才可以进行通信，</p>\n<h3 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h3><p>一个简单的操作演示，在解释器上跑跑看</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#先创建一个代理池</span></span><br><span class=\"line\">In [<span class=\"number\">39</span>]: pool = IP_proxy_pool()</span><br><span class=\"line\"><span class=\"comment\">#创建控制器</span></span><br><span class=\"line\">In [<span class=\"number\">40</span>]: remote = Controller()</span><br><span class=\"line\"><span class=\"comment\">#创建一个新进程来使用代理池引擎</span></span><br><span class=\"line\">In [<span class=\"number\">41</span>]: pool_process= Process(target = test.Start,args = (remote.commander,remote.output,))</span><br><span class=\"line\"><span class=\"comment\">#启动引擎,这里的start不是引擎的Start，是进程的启动操作，通过start()调用Start()</span></span><br><span class=\"line\">In [<span class=\"number\">42</span>]:pool_process.start()</span><br><span class=\"line\"><span class=\"comment\">#最后可以通过Controller的send()方法操作</span></span><br><span class=\"line\">In [<span class=\"number\">43</span>]: remote.send(<span class=\"string\">'Get'</span>)</span><br><span class=\"line\">Out[<span class=\"number\">43</span>]: (<span class=\"string\">'49.81.34.87'</span>, <span class=\"string\">'46491'</span>, <span class=\"string\">'HTTPS'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>好啦，一个IP代理池到这里就被我们构建出来了。可以放在代码里自动运行也可以在解释器里面手工操作获得IP地址。以后挂代理看视频抓数据就用它了hiahiahia.</p>\n<p>哦对了，最后留几个作业lol:想想看如何完善里面的监测和报错机制，如何抓取其他网站的IP，如何避免抓取到重复的IP</p>\n<p>先就这么多了，Bye~</p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests <span class=\"keyword\">as</span> req</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> queue <span class=\"keyword\">import</span> Empty,Queue</span><br><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Queue <span class=\"keyword\">as</span> QP,Process</span><br><span class=\"line\"><span class=\"comment\">#这里是个坑，Multiprocessing 的Queue不能使用qsize， queue的Queue不能跨进程通信及pickle</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IP_proxy_pool</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,ready=<span class=\"number\">5</span>,max_pages= <span class=\"number\">10</span>)</span>:</span></span><br><span class=\"line\">        self.settings = dict(</span><br><span class=\"line\">            Pool_ready = <span class=\"number\">5</span>,</span><br><span class=\"line\">            max_pages = <span class=\"number\">10</span></span><br><span class=\"line\">            )</span><br><span class=\"line\"></span><br><span class=\"line\">        self.commander = <span class=\"keyword\">None</span></span><br><span class=\"line\">        self.output = <span class=\"keyword\">None</span></span><br><span class=\"line\">        self.__workers = &#123;&#125;</span><br><span class=\"line\">        self._Raw = Queue()</span><br><span class=\"line\">        self._available = Queue()</span><br><span class=\"line\">        self.__active = <span class=\"keyword\">False</span></span><br><span class=\"line\">        self.__worker_is_working = <span class=\"keyword\">False</span></span><br><span class=\"line\">        self.__ready = <span class=\"keyword\">False</span></span><br><span class=\"line\">        self._cache_path = os.getcwd()+os.sep+<span class=\"string\">\"proxylist.pkl\"</span></span><br><span class=\"line\">        self.header = &#123;<span class=\"string\">'User-Agent'</span>:<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'</span>&#125;</span><br><span class=\"line\">        self.command = dict(</span><br><span class=\"line\">            Stop = self.__Stop,</span><br><span class=\"line\">            Crawl = self.crawler,</span><br><span class=\"line\">            Status = self.Status,</span><br><span class=\"line\">            Get= self.get_a_proxy,</span><br><span class=\"line\">            Monitor = self.__Monitor,</span><br><span class=\"line\">            Verify = self.verify_IP)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Start</span><span class=\"params\">(self,commander,output,Manual=True)</span>:</span></span><br><span class=\"line\">        self.__active = <span class=\"keyword\">True</span></span><br><span class=\"line\">        self.commander,self.output = commander,output </span><br><span class=\"line\">        self.read_cache()</span><br><span class=\"line\">        <span class=\"comment\">#for each in ['Monitor']</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> Manual:</span><br><span class=\"line\">            self.__Run()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> [<span class=\"string\">'Crawl'</span>,<span class=\"string\">'Monitor'</span>,<span class=\"string\">'Verify'</span>]:</span><br><span class=\"line\">                self.commander.put(each)</span><br><span class=\"line\">            self.__Run()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__Run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> self.__active:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                eventname = self.commander.get(block=<span class=\"keyword\">True</span>,timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"comment\">#Need Check event</span></span><br><span class=\"line\">                print(<span class=\"string\">\"Receive the command &#123;&#125;\"</span>.format(eventname))</span><br><span class=\"line\">                self.__EventProcess(self.command[eventname],eventname)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> Empty:</span><br><span class=\"line\">                <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__EventProcess</span><span class=\"params\">(self,event,eventName)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"Event is Processing\"</span>)</span><br><span class=\"line\">        <span class=\"comment\">#在主程序中直接运行</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> eventName <span class=\"keyword\">in</span> (<span class=\"string\">'Status'</span>,<span class=\"string\">'Stop'</span>,<span class=\"string\">'Get'</span>):</span><br><span class=\"line\">            event()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:<span class=\"comment\">#开线程运行</span></span><br><span class=\"line\">            self.__workers[eventName]=Thread(target=event)</span><br><span class=\"line\">            self.__workers[eventName].start()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__Stop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.__active = <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> name,worker <span class=\"keyword\">in</span> self.__workers.items():\t\t</span><br><span class=\"line\">            worker.join()</span><br><span class=\"line\">        print(<span class=\"string\">'\\nSaving your proxies . . .'</span>)</span><br><span class=\"line\">        self.write_cache()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Status</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"You reached level Status\"</span>)</span><br><span class=\"line\">        msg =<span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        Engine Active               &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">        IP Pool Ready               &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">        Crawler Working             &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">        Raw IP Pool size            &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">        Alive IP available          &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        '''</span>.format(self.__active,self.__ready,self.__worker_is_working,self._Raw.qsize(),self._available.qsize())</span><br><span class=\"line\">        self.output.put(msg)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">crawler</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.__worker_is_working = <span class=\"keyword\">True</span></span><br><span class=\"line\">        regex = re.compile(<span class=\"string\">r'&lt;tr class.*?&lt;td.*?&lt;td&gt;(.+?)&lt;/td.*?&lt;td&gt;(.+?)&lt;/td.*?&lt;/td.*?&lt;/td.*?&lt;td&gt;(.+?)&lt;/td.*?&lt;/tr&gt;'</span>,re.S)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,self.settings[<span class=\"string\">'max_pages'</span>]+<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.__active:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            page_source= req.get(<span class=\"string\">\"http://www.xicidaili.com/nn/&#123;&#125;\"</span>.format(i),headers =self.header).text</span><br><span class=\"line\">            result = re.findall(regex,page_source)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> result:</span><br><span class=\"line\">                self._Raw.put(each)</span><br><span class=\"line\">            time.sleep(<span class=\"number\">60</span>)</span><br><span class=\"line\">        self.__worker_is_working = <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__Monitor</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> self.__active:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> self.__worker_is_working:</span><br><span class=\"line\">                <span class=\"keyword\">pass</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> self._available.qsize() &lt; self.settings[<span class=\"string\">'Pool_ready'</span>]:</span><br><span class=\"line\">                self.commander.put(<span class=\"string\">\"Crawl\"</span>)</span><br><span class=\"line\">            time.sleep(<span class=\"number\">15</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">verify_IP</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> self.__active:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                proxy_item = self._Raw.get(block=<span class=\"keyword\">True</span>,timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">                req_proxy = &#123;proxy_item[<span class=\"number\">2</span>]:<span class=\"string\">'&#123;&#125;:&#123;&#125;'</span>.format(proxy_item[<span class=\"number\">0</span>],proxy_item[<span class=\"number\">1</span>])&#125;</span><br><span class=\"line\">                print(<span class=\"string\">\"verifying &#123;&#125;:&#123;&#125;\"</span>.format(proxy_item[<span class=\"number\">0</span>],proxy_item[<span class=\"number\">1</span>]))</span><br><span class=\"line\">                attempt = req.get(<span class=\"string\">'http://www.baidu.com'</span>,headers= self.header,proxies = req_proxy,timeout=<span class=\"number\">5</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> attempt.status_code == <span class=\"number\">200</span>:</span><br><span class=\"line\">                    self._available.put(attempt)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> Empty:</span><br><span class=\"line\">                print(<span class=\"string\">\"Raw pool is empty\"</span>)</span><br><span class=\"line\">                time.sleep(<span class=\"number\">60</span>)</span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_a_proxy</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> self._available.qsize() &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                ip = self._available.get(block=<span class=\"keyword\">True</span>,timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                ip = self._Raw.get(block=<span class=\"keyword\">True</span>,timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">            self.output.put(ip)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            self.output.put(<span class=\"string\">'Oops. Both pools Empty.'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read_cache</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isfile(self._cache_path):</span><br><span class=\"line\">            self.write_cache()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                f = open(self._cache_path,<span class=\"string\">'rb'</span>)</span><br><span class=\"line\">                raw,available = pickle.load(f)</span><br><span class=\"line\">                [self._Raw.put(each) <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> raw]</span><br><span class=\"line\">                [self._available.put(each) <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> available]</span><br><span class=\"line\">                f.close()</span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write_cache</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        f = open(self._cache_path,<span class=\"string\">\"wb\"</span>)</span><br><span class=\"line\">        raw = list(self._Raw.queue)</span><br><span class=\"line\">        available = list(self._available.queue)</span><br><span class=\"line\">        pickle.dump([raw,available],f)</span><br><span class=\"line\">        f.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Controller</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.commander = QP()</span><br><span class=\"line\">        self.output = QP()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span><span class=\"params\">(self,command)</span>:</span></span><br><span class=\"line\">        self.commander.put(command)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> command <span class=\"keyword\">in</span> [<span class=\"string\">'Status'</span>,<span class=\"string\">'Get'</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.output.get(timeout=<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"http://www.vnpy.org/basic-tutorial-4.html\" target=\"_blank\" rel=\"noopener\">事件驱动引擎原理和使用: vn.py</a></li>\n<li><a href=\"http://python.jobbole.com/86994/\" target=\"_blank\" rel=\"noopener\">Python爬虫代理池结构</a></li>\n<li><a href=\"http://chenghaoqian.com\">ChenghaoQian.com: （我自己）</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>生活中我们经常会用到一些代理服务器，尤其在做爬虫抓取对方网站数据的时候，很容易会被对方服务器封IP。通常我在抓取数据的时候会采用<strong>抓取数据-&gt;IP被封时触发代理抓取机制-&gt;使用代理继续抓取-&gt;代理耗尽重新抓取</strong>的机制，显得有些粗糙，而且在抓取代理的时候会阻塞，非常影响效率。痛定思痛，在开发Jalapeno的时候接触到事件驱动引擎，于是决定开发这个独立持续运转的代理池。</p>\n<p>本节我会从事件驱动引擎开始演示并逐步实现抓取、存活验证等功能，最后完成使用Queue多线程多进程的并行及使用控制器通信。</p>","more":"<h2 id=\"工具准备\"><a href=\"#工具准备\" class=\"headerlink\" title=\"工具准备\"></a>工具准备</h2><p>这次我们需要的工具有</p>\n<ul>\n<li>Python3.x （必备lol）</li>\n<li>Requests (熟悉urllib可以代替Requests，免去第三方库依赖)</li>\n</ul>\n<p>先引入我们需要的工具</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread <span class=\"comment\">#线程模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os <span class=\"comment\">#系统调用，识别路径</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pickle <span class=\"comment\">#存储</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests <span class=\"keyword\">as</span> req <span class=\"comment\">#Requests模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> re <span class=\"comment\">#正则表达式</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time <span class=\"comment\">#我们用time.sleep()休眠</span></span><br><span class=\"line\"><span class=\"comment\">#下面两个是队列模块，保护数据读写不混乱，跨进程通信。</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> queue <span class=\"keyword\">import</span> Empty,Queue</span><br><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Queue <span class=\"keyword\">as</span> QP,Process</span><br><span class=\"line\"><span class=\"comment\">#这里是个坑，在Mac下Multiprocessing 的Queue不能使用qsize， queue的Queue不能跨进程通信及pickle</span></span><br></pre></td></tr></table></figure>\n</code></pre><h2 id=\"事件驱动引擎\"><a href=\"#事件驱动引擎\" class=\"headerlink\" title=\"事件驱动引擎\"></a>事件驱动引擎</h2><p>先简单介绍一下事件驱动引擎的机制，事件驱动，顾名思义就是接收事件再处理事件的一个过程。流程如下</p>\n<pre><code>启动 -&gt; 引擎持续运转待命 -&gt;接收各类事件／信号（包括停止运行）-&gt;处理事件,如图\n</code></pre><p><img src=\"/article/ip-proxy-pool/flow_min.png\" alt=\"\"></p>\n<p>代码结构如下：</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IP_proxy_pool</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Start</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__Run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__EventProcess</span><span class=\"params\">(self,event,eventName)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__Stop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>接下来我们来看各个部分的代码及其原理</p>\n<h3 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"__init__\"></a>__init__</h3><p>__init__包含了我们整个代理池的初始参数，其中一部分是引擎所需要的，另一部分是其他功能的参数。</p>\n<p>代码：</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,ready=<span class=\"number\">5</span>,max_pages= <span class=\"number\">10</span>)</span>:</span></span><br><span class=\"line\">      self.settings = dict(</span><br><span class=\"line\">\tPool_ready = <span class=\"number\">5</span>,</span><br><span class=\"line\">\tmax_pages = <span class=\"number\">10</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\"></span><br><span class=\"line\">self.commander = <span class=\"keyword\">None</span></span><br><span class=\"line\">self.output = <span class=\"keyword\">None</span></span><br><span class=\"line\">self.__workers = &#123;&#125;</span><br><span class=\"line\">self._Raw = Queue()</span><br><span class=\"line\">self._available = Queue()</span><br><span class=\"line\">self.__active = <span class=\"keyword\">False</span></span><br><span class=\"line\">self.__worker_is_working = <span class=\"keyword\">False</span></span><br><span class=\"line\">self.__ready = <span class=\"keyword\">False</span></span><br><span class=\"line\">self._cache_path = os.getcwd()+os.sep+<span class=\"string\">\"proxylist.pkl\"</span></span><br><span class=\"line\">self.header = &#123;<span class=\"string\">'User-Agent'</span>:<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'</span>&#125;</span><br><span class=\"line\">self.command = dict(</span><br><span class=\"line\">\tStop = self.__Stop,</span><br><span class=\"line\">\tCrawl = self.crawler,</span><br><span class=\"line\">\tStatus = self.Status,</span><br><span class=\"line\">\tGet= self.get_a_proxy,</span><br><span class=\"line\">\tMonitor = self.__Monitor,</span><br><span class=\"line\">\tVerify = self.verify_IP)</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>self.setting:代理池默认设置。包含了爬虫最大访问页数和最低可用ip数量        </li>\n<li>self.commander: 引擎组件。作为接收主进程命令的管道，在Start中初始化，并不需要在<strong>init</strong>中出现所以初始为None。后面会在多进程启动部分中讲解</li>\n<li>self.output: 同上，将运行结果反馈给主进程</li>\n<li>self.workers:引擎组件。包含了所有正在工作的子线程，通过dict的形式将任务名称和对应线程联系</li>\n<li>self._Raw：从IP代理网站上解析出来的所有IP地址，未经过验证是否存活</li>\n<li>self._available：存活可用的IP</li>\n<li>self.<strong>active: 引擎组件。当self.</strong>active为True时，引擎保持运转。</li>\n<li>self.__worker_is_working: 当值为True时，表示爬虫正在抓取IP地址。</li>\n<li>self.ready: 监测控件。监测当前代理池中可用IP是否超过最低标准。如果低于标准，将启动IP抓取工作</li>\n<li>self._cache_path: 存储／读取抓取结果到本地的路径</li>\n<li>self.header: 爬虫请求网页的报头，与网络访问相关。会出现在Crawler和Verify中。</li>\n<li>self.command: 包含了输入请求信号所对应的任务</li>\n</ul>\n<p>然后就开始我们的引擎组建工作</p>\n<h3 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start()\"></a>Start()</h3><p>Start()相当于引擎的启动装置，建立通信管道，设置操作模式，最后进入运行。在多进程模式下，由于这是我们启动引擎执行的函数，所以我们使用“args= xxx”将通信和设置变量传入本函数中。</p>\n<p>代码：</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Start</span><span class=\"params\">(self,commander,output,Manual=True)</span>:</span></span><br><span class=\"line\">\tself.__active = <span class=\"keyword\">True</span></span><br><span class=\"line\">\tself.commander,self.output = commander,output </span><br><span class=\"line\">\tself.read_cache()</span><br><span class=\"line\">\t<span class=\"comment\">#for each in ['Monitor']</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> Manual:</span><br><span class=\"line\">\t\tself.__Run()</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> [<span class=\"string\">'Crawl'</span>,<span class=\"string\">'Monitor'</span>,<span class=\"string\">'Verify'</span>]:</span><br><span class=\"line\">\t\t\tself.commander.put(each)</span><br><span class=\"line\">\t\tself.__Run()</span><br></pre></td></tr></table></figure>\n</code></pre><p>在Start中：</p>\n<p>1.首先我们设置self.__active=True,表示引擎开始运转。</p>\n<p>2.构建通信管道 self.commander,self.output，这两个变量是由主进程的控制器传入。</p>\n<p>3.读取存档。没有存档会自行创建。</p>\n<p>4.如果设置模式为Manual,则只维持运转，需要指令输入。如果不是，则自动启动爬虫，监测系统和IP筛选工作。</p>\n<h3 id=\"Run\"><a href=\"#Run\" class=\"headerlink\" title=\"__Run()\"></a>__Run()</h3><p>__Run()是引擎的运转核心，作用机制比较简单。当active指示为True时，维持运转，持续接收指示信号并交付处理。</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__Run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> self.__active:</span><br><span class=\"line\">\t<span class=\"keyword\">try</span>:</span><br><span class=\"line\">\t\teventname = self.commander.get(block=<span class=\"keyword\">True</span>,timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\tself.__EventProcess(self.command[eventname],eventname)</span><br><span class=\"line\">\t<span class=\"keyword\">except</span> Empty:</span><br><span class=\"line\">\t\t<span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>先尝试从commander获取指示信号，如果为空，则except捕获异常跳过本轮循环。<br>如果顺利接受信号，则交付__EventProcess处理。</p>\n<blockquote>\n<p>注意：commander.get()方法中,我们设置timeout=1避免卡死，设置block来阻塞一个timeout的等待时常，避免程序高速运转浪费过多CPU资源。</p>\n</blockquote>\n<h3 id=\"EventProcess\"><a href=\"#EventProcess\" class=\"headerlink\" title=\"__EventProcess()\"></a>__EventProcess()</h3><p>__EventProcess()是引擎的事件处理调度模块，它在目前的工作中将任务分成两类并执行：直接执行和开启新线程并行。</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__EventProcess</span><span class=\"params\">(self,event,eventName)</span>:</span></span><br><span class=\"line\">\tprint(<span class=\"string\">\"Event is Processing\"</span>)</span><br><span class=\"line\">\t<span class=\"comment\">#在主程序中直接运行</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> eventName <span class=\"keyword\">in</span> (<span class=\"string\">'Status'</span>,<span class=\"string\">'Stop'</span>,<span class=\"string\">'Get'</span>):</span><br><span class=\"line\">\t\tevent()</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:<span class=\"comment\">#开线程运行</span></span><br><span class=\"line\">\t\tself.__workers[eventName]=Thread(target=event)</span><br><span class=\"line\">\t\tself.__workers[eventName].start()</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"Stop\"><a href=\"#Stop\" class=\"headerlink\" title=\"__Stop()\"></a>__Stop()</h3><p>Stop()是在当我们的任务完成后，我们将要关闭引擎并自动存档的模块。</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__Stop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\tself.__active = <span class=\"keyword\">False</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> name,worker <span class=\"keyword\">in</span> self.__workers.items():\t\t</span><br><span class=\"line\">\t\tworker.join()</span><br><span class=\"line\">\tprint(<span class=\"string\">'\\nSaving your proxies . . .'</span>)</span><br><span class=\"line\">\tself.write_cache()</span><br></pre></td></tr></table></figure>\n</code></pre><p>整个流程分成三步：</p>\n<p>1.关闭active指示</p>\n<p>2.等待workers中的所有子线程任务结束。</p>\n<p>3.write_cache存档，方便下次读取</p>\n<blockquote>\n<p>这里需要注意的是关闭active指示需要在第一步。<strong>因为Thread不像Process那样可以调用terminate()强制中止</strong>，所以在相关子线程任务中我们保持了和引擎同步的方法，在任务执行完毕之前<strong>或者self.active=True</strong>的时候，都会保持运行。也就是说如果我们关掉active指示，我们就可以让所有子线程跳出循环自动退出。最后在第二步中用join方法等待任务结束。</p>\n</blockquote>\n<p>到这里我们的完整的食物驱动引擎架构基本完成，我们继续来构建功能性组件。</p>\n<h2 id=\"功能性组件\"><a href=\"#功能性组件\" class=\"headerlink\" title=\"功能性组件\"></a>功能性组件</h2><p>功能性组件实现了我们代理池的核心功能，即抓取IP地址，实时监测，状态输出及读写功能。</p>\n<h3 id=\"Status-状态输出\"><a href=\"#Status-状态输出\" class=\"headerlink\" title=\"Status()状态输出\"></a>Status()状态输出</h3><p>状态输出是将我们的代理池的信息以字符串的形式放入output（输出管道），方便我们查看当前运行状态</p>\n<p>代码：</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Status</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\tmsg =<span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\tEngine Active               &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">\tIP Pool Ready               &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">\tCrawler Working             &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">\tRaw IP Pool size            &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">\tAlive IP available          &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\t'''</span>.format(self.__active,self.__ready,self.__worker_is_working,self._Raw.qsize(),self._available.qsize())</span><br><span class=\"line\">\tself.output.put(msg)</span><br></pre></td></tr></table></figure>\n</code></pre><p>示例：</p>\n<pre><code>In [34]: print(remote.send(&apos;Status&apos;))\n\n\n    Engine Active               True\n    IP Pool Ready               False\n    Crawler Working             False\n    Raw IP Pool size            399\n    Alive IP available          0\n</code></pre><h3 id=\"crawler-IP抓取爬虫\"><a href=\"#crawler-IP抓取爬虫\" class=\"headerlink\" title=\"crawler():IP抓取爬虫\"></a>crawler():IP抓取爬虫</h3><p>看到这里终于看到我们的核心组件之一爬虫的真身了。这里我用西刺代理的高匿IP地址页面举例。</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">crawler</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\tself.__worker_is_working = <span class=\"keyword\">True</span></span><br><span class=\"line\">\tregex = re.compile(<span class=\"string\">r'&lt;tr class.*?&lt;td.*?&lt;td&gt;(.+?)&lt;/td.*?&lt;td&gt;(.+?)&lt;/td.*?&lt;/td.*?&lt;/td.*?&lt;td&gt;(.+?)&lt;/td.*?&lt;/tr&gt;'</span>,re.S)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,self.settings[<span class=\"string\">'max_pages'</span>]+<span class=\"number\">1</span>):</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.__active:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\tpage_source= req.get(<span class=\"string\">\"http://www.xicidaili.com/nn/&#123;&#125;\"</span>.format(i),headers =self.header).text</span><br><span class=\"line\">\t\tresult = re.findall(regex,page_source)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> result:</span><br><span class=\"line\">\t\t\tself._Raw.put(each)</span><br><span class=\"line\">\t\ttime.sleep(<span class=\"number\">60</span>)</span><br><span class=\"line\">\tself.__worker_is_working = <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>1.当爬虫开始运行时设置__worker_is_working = True，表示爬虫结束运行。</p>\n<p>2.接下来就是爬虫的抓取流程并将结果放入self._Raw中，爬虫可以参考我之前的相关文章。在这里要注意三点：</p>\n<ul>\n<li>使用requests(req)添加header的方法</li>\n<li>time.sleep(60)设置爬取间隔，减少对方服务器访问压力。此时也可以和IP验证的时间同步</li>\n<li>self._Raw使用的结构是队列（QUEUE）的形式，我们在这里用的是线程的Queue()而不是multiprocessing的Queue(),因为线程的Queue()自带线程锁，可以保护数据不错乱。并且可以使用qsize功能来获取队列长度（数量）</li>\n</ul>\n<p>3.抓取完成。__worker_is_working = False，退出。</p>\n<h3 id=\"Monitor\"><a href=\"#Monitor\" class=\"headerlink\" title=\"__Monitor()\"></a>__Monitor()</h3><p>Monitor()的运行机制如下，</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__Monitor</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> self.__active:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> self.__worker_is_working:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">pass</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">elif</span> self._available.qsize() &lt; self.settings[<span class=\"string\">'Pool_ready'</span>]:</span><br><span class=\"line\">\t\t\tself.commander.put(<span class=\"string\">\"Crawl\"</span>)</span><br><span class=\"line\">\t\ttime.sleep(<span class=\"number\">15</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>当引擎运行时，检测爬虫是否在工作。</li>\n<li>如果没有在工作，检测代理池中的IP是否达到最低标准。</li>\n<li>如果没有达到，启动爬虫，</li>\n<li>休息15秒重新检测。</li>\n</ul>\n<h3 id=\"verify-IP-IP存活验证\"><a href=\"#verify-IP-IP存活验证\" class=\"headerlink\" title=\"verify_IP():IP存活验证\"></a>verify_IP():IP存活验证</h3><p>事实上，并不是每一个从代理网站上抓取到的IP地址<strong>并不一定能用</strong>.所以在这里我们添加一下验证。原理很简单：从self._Raw里面拿出一个IP，挂上IP之后去访问一个网站（我这里就用百度了，不要怪我。。lol）,如果访问请求返回结果是200，则说明访问成功，该IP地址可以使用。</p>\n<p>代码：</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">verify_IP</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> self.__active:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            proxy_item = self._Raw.get(block=<span class=\"keyword\">True</span>,timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"comment\">#注意下面使用IP的格式 &#123;'HTTPS'：'183.159.80.92:18118'&#125;</span></span><br><span class=\"line\">            req_proxy = &#123;proxy_item[<span class=\"number\">2</span>]:<span class=\"string\">'&#123;&#125;:&#123;&#125;'</span>.format(proxy_item[<span class=\"number\">0</span>],proxy_item[<span class=\"number\">1</span>])&#125;</span><br><span class=\"line\">            print(<span class=\"string\">\"verifying &#123;&#125;:&#123;&#125;\"</span>.format(proxy_item[<span class=\"number\">0</span>],proxy_item[<span class=\"number\">1</span>]))</span><br><span class=\"line\">            attempt = req.get(<span class=\"string\">'http://www.baidu.com'</span>,headers= self.header,proxies = req_proxy,timeout=<span class=\"number\">5</span>)<span class=\"comment\">#注意这里使用IP的方式</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> attempt.status_code == <span class=\"number\">200</span>:</span><br><span class=\"line\">                self._available.put(attempt)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Empty:</span><br><span class=\"line\">            print(<span class=\"string\">\"Raw pool is empty\"</span>)</span><br><span class=\"line\">            time.sleep(<span class=\"number\">60</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>###get_a_proxy() 获得一个IP地址（输出）        </p>\n<p>这一块的任务相对来说就简单许多，你只需要从可用的IP队列中获得一个并输出即可。（当可用IP队列为空时我用原始_Raw列队列充数这种事情我是不会说出来的hiahiahia，当然如果愿意用自己的爬虫来验证是否可用而不去检测有效的时候，会有一定的灵活操作空间）</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_a_proxy</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> self._available.qsize() &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t\t\tip = self._available.get(block=<span class=\"keyword\">True</span>,timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\tip = self._Raw.get(block=<span class=\"keyword\">True</span>,timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\tself.output.put(ip)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">except</span>:</span><br><span class=\"line\">\t\t\tself.output.put(<span class=\"string\">'Oops. Both pools Empty.'</span>)   </span><br><span class=\"line\">    ```    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 存档读写</span></span><br><span class=\"line\"></span><br><span class=\"line\">抓取了很多很多好用的代理不想白白浪费吧，下次要用的时候不想等重头来过吧。存档读写功能，你值得拥有。</span><br><span class=\"line\">        </span><br><span class=\"line\">    ```Python   </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read_cache</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\">#检测是否文件已存在。如果没有就创建一个</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isfile(self._cache_path):</span><br><span class=\"line\">\t\t\tself.write_cache()</span><br><span class=\"line\">        <span class=\"comment\">#读取内容</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span>:</span><br><span class=\"line\">\t\t\t\tf = open(self._cache_path,<span class=\"string\">'rb'</span>)</span><br><span class=\"line\">\t\t\t\traw,available = pickle.load(f)</span><br><span class=\"line\">\t\t\t\t[self._Raw.put(each) <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> raw]</span><br><span class=\"line\">\t\t\t\t[self._available.put(each) <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> available]</span><br><span class=\"line\">\t\t\t\tf.close()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">except</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"comment\">#存档            </span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write_cache</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t\tf = open(self._cache_path,<span class=\"string\">\"wb\"</span>)</span><br><span class=\"line\">\t\traw = list(self._Raw.queue)</span><br><span class=\"line\">\t\tavailable = list(self._available.queue)</span><br><span class=\"line\">\t\tpickle.dump([raw,available],f)</span><br><span class=\"line\">\t\tf.close()</span><br></pre></td></tr></table></figure>\n</code></pre><p>比较令人郁闷的是我们的线程Queue()不能直接pickle存储，所以我们在这里先将其转换成列表.</p>\n<p>好了，我们的IP代理池到这里就完结了？<br>NoNoNo,我们需要一个控制器来操作它。</p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>我们来看一下我们在主进程是如何调用它的</p>\n<h3 id=\"Controller-：控制器\"><a href=\"#Controller-：控制器\" class=\"headerlink\" title=\"Controller()：控制器\"></a>Controller()：控制器</h3><p>前面讲到我们需要进行进程间的通信，所以我们使用self.commander和self.output来作为通信管道。我们将这两个管道和操作方法一起封装在一起，就是我们的控制器。</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Controller</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.commander = QP()</span><br><span class=\"line\">        self.output = QP()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span><span class=\"params\">(self,command)</span>:</span></span><br><span class=\"line\">        self.commander.put(command)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> command <span class=\"keyword\">in</span> [<span class=\"string\">'Status'</span>,<span class=\"string\">'Get'</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.output.get(timeout=<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>需要注意的是我们必须使用multiprocessing 封装的Queue才可以进行通信，</p>\n<h3 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h3><p>一个简单的操作演示，在解释器上跑跑看</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#先创建一个代理池</span></span><br><span class=\"line\">In [<span class=\"number\">39</span>]: pool = IP_proxy_pool()</span><br><span class=\"line\"><span class=\"comment\">#创建控制器</span></span><br><span class=\"line\">In [<span class=\"number\">40</span>]: remote = Controller()</span><br><span class=\"line\"><span class=\"comment\">#创建一个新进程来使用代理池引擎</span></span><br><span class=\"line\">In [<span class=\"number\">41</span>]: pool_process= Process(target = test.Start,args = (remote.commander,remote.output,))</span><br><span class=\"line\"><span class=\"comment\">#启动引擎,这里的start不是引擎的Start，是进程的启动操作，通过start()调用Start()</span></span><br><span class=\"line\">In [<span class=\"number\">42</span>]:pool_process.start()</span><br><span class=\"line\"><span class=\"comment\">#最后可以通过Controller的send()方法操作</span></span><br><span class=\"line\">In [<span class=\"number\">43</span>]: remote.send(<span class=\"string\">'Get'</span>)</span><br><span class=\"line\">Out[<span class=\"number\">43</span>]: (<span class=\"string\">'49.81.34.87'</span>, <span class=\"string\">'46491'</span>, <span class=\"string\">'HTTPS'</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><p>好啦，一个IP代理池到这里就被我们构建出来了。可以放在代码里自动运行也可以在解释器里面手工操作获得IP地址。以后挂代理看视频抓数据就用它了hiahiahia.</p>\n<p>哦对了，最后留几个作业lol:想想看如何完善里面的监测和报错机制，如何抓取其他网站的IP，如何避免抓取到重复的IP</p>\n<p>先就这么多了，Bye~</p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests <span class=\"keyword\">as</span> req</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> queue <span class=\"keyword\">import</span> Empty,Queue</span><br><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Queue <span class=\"keyword\">as</span> QP,Process</span><br><span class=\"line\"><span class=\"comment\">#这里是个坑，Multiprocessing 的Queue不能使用qsize， queue的Queue不能跨进程通信及pickle</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IP_proxy_pool</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,ready=<span class=\"number\">5</span>,max_pages= <span class=\"number\">10</span>)</span>:</span></span><br><span class=\"line\">        self.settings = dict(</span><br><span class=\"line\">            Pool_ready = <span class=\"number\">5</span>,</span><br><span class=\"line\">            max_pages = <span class=\"number\">10</span></span><br><span class=\"line\">            )</span><br><span class=\"line\"></span><br><span class=\"line\">        self.commander = <span class=\"keyword\">None</span></span><br><span class=\"line\">        self.output = <span class=\"keyword\">None</span></span><br><span class=\"line\">        self.__workers = &#123;&#125;</span><br><span class=\"line\">        self._Raw = Queue()</span><br><span class=\"line\">        self._available = Queue()</span><br><span class=\"line\">        self.__active = <span class=\"keyword\">False</span></span><br><span class=\"line\">        self.__worker_is_working = <span class=\"keyword\">False</span></span><br><span class=\"line\">        self.__ready = <span class=\"keyword\">False</span></span><br><span class=\"line\">        self._cache_path = os.getcwd()+os.sep+<span class=\"string\">\"proxylist.pkl\"</span></span><br><span class=\"line\">        self.header = &#123;<span class=\"string\">'User-Agent'</span>:<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'</span>&#125;</span><br><span class=\"line\">        self.command = dict(</span><br><span class=\"line\">            Stop = self.__Stop,</span><br><span class=\"line\">            Crawl = self.crawler,</span><br><span class=\"line\">            Status = self.Status,</span><br><span class=\"line\">            Get= self.get_a_proxy,</span><br><span class=\"line\">            Monitor = self.__Monitor,</span><br><span class=\"line\">            Verify = self.verify_IP)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Start</span><span class=\"params\">(self,commander,output,Manual=True)</span>:</span></span><br><span class=\"line\">        self.__active = <span class=\"keyword\">True</span></span><br><span class=\"line\">        self.commander,self.output = commander,output </span><br><span class=\"line\">        self.read_cache()</span><br><span class=\"line\">        <span class=\"comment\">#for each in ['Monitor']</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> Manual:</span><br><span class=\"line\">            self.__Run()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> [<span class=\"string\">'Crawl'</span>,<span class=\"string\">'Monitor'</span>,<span class=\"string\">'Verify'</span>]:</span><br><span class=\"line\">                self.commander.put(each)</span><br><span class=\"line\">            self.__Run()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__Run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> self.__active:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                eventname = self.commander.get(block=<span class=\"keyword\">True</span>,timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"comment\">#Need Check event</span></span><br><span class=\"line\">                print(<span class=\"string\">\"Receive the command &#123;&#125;\"</span>.format(eventname))</span><br><span class=\"line\">                self.__EventProcess(self.command[eventname],eventname)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> Empty:</span><br><span class=\"line\">                <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__EventProcess</span><span class=\"params\">(self,event,eventName)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"Event is Processing\"</span>)</span><br><span class=\"line\">        <span class=\"comment\">#在主程序中直接运行</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> eventName <span class=\"keyword\">in</span> (<span class=\"string\">'Status'</span>,<span class=\"string\">'Stop'</span>,<span class=\"string\">'Get'</span>):</span><br><span class=\"line\">            event()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:<span class=\"comment\">#开线程运行</span></span><br><span class=\"line\">            self.__workers[eventName]=Thread(target=event)</span><br><span class=\"line\">            self.__workers[eventName].start()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__Stop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.__active = <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> name,worker <span class=\"keyword\">in</span> self.__workers.items():\t\t</span><br><span class=\"line\">            worker.join()</span><br><span class=\"line\">        print(<span class=\"string\">'\\nSaving your proxies . . .'</span>)</span><br><span class=\"line\">        self.write_cache()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Status</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"You reached level Status\"</span>)</span><br><span class=\"line\">        msg =<span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        Engine Active               &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">        IP Pool Ready               &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">        Crawler Working             &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">        Raw IP Pool size            &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">        Alive IP available          &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        '''</span>.format(self.__active,self.__ready,self.__worker_is_working,self._Raw.qsize(),self._available.qsize())</span><br><span class=\"line\">        self.output.put(msg)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">crawler</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.__worker_is_working = <span class=\"keyword\">True</span></span><br><span class=\"line\">        regex = re.compile(<span class=\"string\">r'&lt;tr class.*?&lt;td.*?&lt;td&gt;(.+?)&lt;/td.*?&lt;td&gt;(.+?)&lt;/td.*?&lt;/td.*?&lt;/td.*?&lt;td&gt;(.+?)&lt;/td.*?&lt;/tr&gt;'</span>,re.S)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,self.settings[<span class=\"string\">'max_pages'</span>]+<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.__active:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            page_source= req.get(<span class=\"string\">\"http://www.xicidaili.com/nn/&#123;&#125;\"</span>.format(i),headers =self.header).text</span><br><span class=\"line\">            result = re.findall(regex,page_source)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> result:</span><br><span class=\"line\">                self._Raw.put(each)</span><br><span class=\"line\">            time.sleep(<span class=\"number\">60</span>)</span><br><span class=\"line\">        self.__worker_is_working = <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__Monitor</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> self.__active:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> self.__worker_is_working:</span><br><span class=\"line\">                <span class=\"keyword\">pass</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> self._available.qsize() &lt; self.settings[<span class=\"string\">'Pool_ready'</span>]:</span><br><span class=\"line\">                self.commander.put(<span class=\"string\">\"Crawl\"</span>)</span><br><span class=\"line\">            time.sleep(<span class=\"number\">15</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">verify_IP</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> self.__active:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                proxy_item = self._Raw.get(block=<span class=\"keyword\">True</span>,timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">                req_proxy = &#123;proxy_item[<span class=\"number\">2</span>]:<span class=\"string\">'&#123;&#125;:&#123;&#125;'</span>.format(proxy_item[<span class=\"number\">0</span>],proxy_item[<span class=\"number\">1</span>])&#125;</span><br><span class=\"line\">                print(<span class=\"string\">\"verifying &#123;&#125;:&#123;&#125;\"</span>.format(proxy_item[<span class=\"number\">0</span>],proxy_item[<span class=\"number\">1</span>]))</span><br><span class=\"line\">                attempt = req.get(<span class=\"string\">'http://www.baidu.com'</span>,headers= self.header,proxies = req_proxy,timeout=<span class=\"number\">5</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> attempt.status_code == <span class=\"number\">200</span>:</span><br><span class=\"line\">                    self._available.put(attempt)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> Empty:</span><br><span class=\"line\">                print(<span class=\"string\">\"Raw pool is empty\"</span>)</span><br><span class=\"line\">                time.sleep(<span class=\"number\">60</span>)</span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_a_proxy</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> self._available.qsize() &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                ip = self._available.get(block=<span class=\"keyword\">True</span>,timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                ip = self._Raw.get(block=<span class=\"keyword\">True</span>,timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">            self.output.put(ip)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            self.output.put(<span class=\"string\">'Oops. Both pools Empty.'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read_cache</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isfile(self._cache_path):</span><br><span class=\"line\">            self.write_cache()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                f = open(self._cache_path,<span class=\"string\">'rb'</span>)</span><br><span class=\"line\">                raw,available = pickle.load(f)</span><br><span class=\"line\">                [self._Raw.put(each) <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> raw]</span><br><span class=\"line\">                [self._available.put(each) <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> available]</span><br><span class=\"line\">                f.close()</span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write_cache</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        f = open(self._cache_path,<span class=\"string\">\"wb\"</span>)</span><br><span class=\"line\">        raw = list(self._Raw.queue)</span><br><span class=\"line\">        available = list(self._available.queue)</span><br><span class=\"line\">        pickle.dump([raw,available],f)</span><br><span class=\"line\">        f.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Controller</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.commander = QP()</span><br><span class=\"line\">        self.output = QP()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span><span class=\"params\">(self,command)</span>:</span></span><br><span class=\"line\">        self.commander.put(command)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> command <span class=\"keyword\">in</span> [<span class=\"string\">'Status'</span>,<span class=\"string\">'Get'</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.output.get(timeout=<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n</code></pre><h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"http://www.vnpy.org/basic-tutorial-4.html\" target=\"_blank\" rel=\"noopener\">事件驱动引擎原理和使用: vn.py</a></li>\n<li><a href=\"http://python.jobbole.com/86994/\" target=\"_blank\" rel=\"noopener\">Python爬虫代理池结构</a></li>\n<li><a href=\"http://chenghaoqian.com\">ChenghaoQian.com: （我自己）</a></li>\n</ul>"},{"title":"为什么你要学公司财务（Corporate Finance)","date":"2016-08-26T15:49:36.000Z","_content":"\n\n通常来讲，一个公司可以通过投资实物资产来获得现金流(cash flow)和收入(income)。而资产有两种，一种是有形的资产，比如说设备，建筑等；另一种是看不见摸不着的无形资产，就像品牌，专利等。要获得这些资产有很多种手段，比如借贷，将投资收益进行再投资，或者也可以卖出一些股份来进行融资。在这种模式下，公司就会变得越来越健壮，但是这涉及到很多金融方面的知识。金融管理就是要研究金融经理是如何将持券人（债券）和股东（股票）手里的资本部署到可以升值的项目中的。\n\n<!--公司理财(一) 简介-->\n在这个过程中，通常问题集中在两个方面:\n\n- 投资给谁？（如何选择投资对象)\n- 怎么投资？（钱怎么花）\n\n对于一个公司，总是有成百上千的股东，而每个股东的财力，风险承受能力等都是不一样的。但是他们都有同样的目标：挣钱啊。财务经理能够有效地投资并且快速的让公司变得更有价值，同时也能让股票升值。之前手里一股3块钱，现在变成6块，手里的钱就多了一倍。为了实现大众的目标，财务经理的策略是：\n\n- 低价进行资金筹措\n- 投资高利润率的基金\n\n    \n说白了，就是**低价买进，高价卖出**但是说起来容易做起来难，怎么才能够做到低价买进高价卖出呢？\n\n这就是学习公司财务的意义。\n\n<!--More-->\n    \n## 投资和融资的决策\n\n要进行商业活动，公司总得有无数的实体资产来支撑运作。但是，这些资产可不是天上掉下来的，更不是刮风抓来的，**是要花钱买的**。和我们平常所理解的街边商贩不同，街边小商贩通常通过利润积攒下来的资金来购买新的资产，而公司有别的办法————融资。就是将公司的财产分成股份卖出去，然后获得现金流：就好比把一栋大楼分成五十份，然后以证券形式卖出去，大家把这些证券买回来以后，公司就多了一栋楼的**现金**。那股民买回来这些东西有什么用呢，又不能把楼拆开搬回家去。所以其实，随着大楼价格的变动，他们手里股票价格可会随着波动，有波动就意味着有升值的可能，就有赚钱的可能，也算一种投资，而他们手里的股票。我们可以称之为金融资产(Financial Assets)或者证券(Securities)。**证券属于金融资产，但是金融资产并不全是证券**，证券，通俗来讲是一种可以在金融市场上流通的金融资产。\n\n了解这些基本概念后，我们来回到公司的投资融资决策：\n- 投资决策，就是把资金投出去来换取实际资产\n- 融资决策，就是把实际资产拿出去卖掉获得现金流\n\n这么说太简单了，因为不是所有的购买资产的决策都是好的决策--总是会有可能赔本的，融资也是一样。 一个好的决策，应该尽可能地**低价买进，高价卖出**。\n### **投资决策（Investment)**\n\n说到投资决策，我们不得不提到**资本预算**和**资本支出**，资本预算就是公司对未来投资计划的预算，而支出就是投资项目所承担的开销。一般来讲，一些大型公司都会有年度财政预算和一系列的未来投资规划。这些资本的投入都会在将来带给你回报，尽管这个周期可能会很长。当然，也有短线投资。无论是资本支出的量还是投资周期的长短，都会关系到获得收益的效率和资金的流动性。\n\n### **融资决策(Financing)**\n\n通常来讲，公司通过借贷或者从股东手里筹措资金的方式来进行融资。如果通过借贷的方式，一般会支付一个固定利率的利息；如果从股东手里筹措，那么他们手里的股份会变多，但是这个股份价值是会浮动的。这些股东可以称为**权益投资人**。这两种融资方式的选择和决策可以称为资本结构的决策。资本就是长期的融资。对于大公司来讲，融资的方式方法简直太多了:\n- 它可以借钱：可以发行债券，从普通投资者手里借，也可以从银行贷款。借一年还是借十年？借多少？什么时候还钱？还多少？用什么货币结算？各种细节都需要进行考量。\n- 它也可以融资来增加产权，这通常有两种方式：一种是股权融资 - 对外发行更多的股票，大家都来买，公司的现金流增加。一种是再投资，通过将已经挣来的钱再继续购买新的资产。\n\n从某种意义上来讲，融资显得没有投资那么重要 —— 因为它挣不来钱，不能创造价值。但实际上，融资也很重要，因为融资的策略会和公司的健康度有关系，如果你的公司融资效率地下方式不当，可能会使公司负债累累。很简单的例子，高利贷。这也算是融资的方法，但是不是那么切实可行。借了钱，就有还不上的风险。财务经理在进行决策的时候需要意识到将遇到各种可能：好的一面和坏的一面。发行债券尽管会比股票更加稳定，但是如果滥用导致债务过重资不抵债，就要面临破产的结局。\n\n### **什么是公司**\n\n公司就是一个法人实体，作为法人，它可以像我们自然人一样签署合同，出借资金或者贷款，当然，也可以起诉或被起诉，等等。尽管公司的所有权的拥有者是股东，但是它们实际上是分开的，作为有限责任公司，因为负债破产的情况下，股东并没有连带责任，最多也就是把股本赔光而已，而多余的债务不需要赔付。\n\n当公司刚刚建立起来的时候，它可能只被个别几个人拥有，股东并不是很多。但是当公司变得越来越大需要大量融资快速成长的时候，就需要上市了，一旦上市了，公司的股权就进入了金融市场可以进行买卖。这个时候公司的股东会变得非常多，但是这些股民对公司并没有实际操作的权利。所有权和控制权的分离给了公司持续发展的空间，当然，不这样的话，几千股民共同管理公司早就乱了套了。\n\n公司制度是一个健康经济的基石，为什么这么说呢，因为在资本主义国家中，相对于经济来讲，公司是一个具有生产力的基础单元。作为公司，它可以:\n- 提供有价值的商品和服务需要资本。\n- 有生产能力企业（多产的）为顾客提供了产品，为社会提供了岗位，并且还让投资投资者赚得盆满钵满，这样互利共赢的行为推动了经济的发展。\n- 公司如果越有效率募集资金并部署它们，这些可爱的赞助商（持券人（债券）和股东（股票））的回报就越丰厚\n\n## 财务经理和机会成本\n\n财务经理主要负责公司的融资和投资决策。但是他更像是金融市场和公司连接的中间决策者。因为**融资就是融到别人的投资，投资就是投给别人的融资**，这使得财务经理将公司和金融市场通过投融资连接在了一起，过程大致如下:\n- 公司进行融资，财务经理做出决策，从金融市场获得投资者的资金\n- 然后将公司融到的资金进行公司运作或者购买实体资产（投资)\n- 通过公司运作获得现金流\n- 再返回给金融市场的投资者们\n\n机会成本: 在面对选择时，当你选择其中某一个选项。其他选项中收益最大的选项可以成为机会成本。比如说你眼前有三个项目，它们的收益是 8%, 10%, 12%, 如果你选择了10%或8%的项目，那它的机会成本是 12% —— 你本可以获得12%的收益但是你失去了这个机会，所以12% 是机会成本。如果选择了12%,你的机会成本是10%,当然你已经获得了最大收益，这时候机会成本供参考。实际生活中的机会成本远比例子复杂，因为考量的因素太多，这使得机会成本的参考价值更高。机会成本是财务经理进行投资决策时的重要考量。\n\n\n## 公司目标\n\n一个公司的目标并只是做大做强，**如何让股东的兜里都有钱，有更多的钱**也是其中之一。相比与做大做强，尽管很现实，但只是换一种说法罢了。一个公司可能有成千上万的股东，财务经理不能使他的决策满足所有人的口味，但是有一点大家都会说同意：**最大化公司的市值**。由于股份的价格是按公司市值的比例分配的，所以这样一来水涨船高，使得**股东的兜里都有钱，有更多的钱**。\n\n但尽管如此，股东对于投资的想法仍然有分歧的，我们都知道**风险与收益成正比**，有些股东不喜欢财务经理去触碰那些高风险高回报的投资项目，但是有些风险承受能力高的股东则期望更多的回报。作为财务经理，他/她需要很好地做出权衡。\n\n情况不仅如此，公司要挣钱，股东要吃饭。这看上去并不冲突:公司做大了股东不就更有钱了吗？但是，什么时候算是做大，股东什么时候能得到钱？公司是法人，股东是自然人，都是人，都要接触到投资活动。股东也希望尽可能**快**地拿到更多的钱，他们并不喜欢等待。提一个名词，分红：公司要分红，分出去的红就是分出去的资本。**如果削减分红，这些钱用来投资可以获得更大的收益**，对公司来讲当然是好的，对股东来说 --从长期来看是好的。但是他们愿意这样做吗？**分歧出现了**，公司的利益和股东的利益走向对立面。这很麻烦，站在公司和股东的中间，财务经理需要做出他/她自己权衡后的选择。经理做出的选择不能满足股东的需求，我们称之为**代理问题**。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/why-corporate-finance.md","raw":"---\ntitle: 为什么你要学公司财务（Corporate Finance)\ndate: 2016-08-26 23:49:36\ntags:\ncategories: Finance\n---\n\n\n通常来讲，一个公司可以通过投资实物资产来获得现金流(cash flow)和收入(income)。而资产有两种，一种是有形的资产，比如说设备，建筑等；另一种是看不见摸不着的无形资产，就像品牌，专利等。要获得这些资产有很多种手段，比如借贷，将投资收益进行再投资，或者也可以卖出一些股份来进行融资。在这种模式下，公司就会变得越来越健壮，但是这涉及到很多金融方面的知识。金融管理就是要研究金融经理是如何将持券人（债券）和股东（股票）手里的资本部署到可以升值的项目中的。\n\n<!--公司理财(一) 简介-->\n在这个过程中，通常问题集中在两个方面:\n\n- 投资给谁？（如何选择投资对象)\n- 怎么投资？（钱怎么花）\n\n对于一个公司，总是有成百上千的股东，而每个股东的财力，风险承受能力等都是不一样的。但是他们都有同样的目标：挣钱啊。财务经理能够有效地投资并且快速的让公司变得更有价值，同时也能让股票升值。之前手里一股3块钱，现在变成6块，手里的钱就多了一倍。为了实现大众的目标，财务经理的策略是：\n\n- 低价进行资金筹措\n- 投资高利润率的基金\n\n    \n说白了，就是**低价买进，高价卖出**但是说起来容易做起来难，怎么才能够做到低价买进高价卖出呢？\n\n这就是学习公司财务的意义。\n\n<!--More-->\n    \n## 投资和融资的决策\n\n要进行商业活动，公司总得有无数的实体资产来支撑运作。但是，这些资产可不是天上掉下来的，更不是刮风抓来的，**是要花钱买的**。和我们平常所理解的街边商贩不同，街边小商贩通常通过利润积攒下来的资金来购买新的资产，而公司有别的办法————融资。就是将公司的财产分成股份卖出去，然后获得现金流：就好比把一栋大楼分成五十份，然后以证券形式卖出去，大家把这些证券买回来以后，公司就多了一栋楼的**现金**。那股民买回来这些东西有什么用呢，又不能把楼拆开搬回家去。所以其实，随着大楼价格的变动，他们手里股票价格可会随着波动，有波动就意味着有升值的可能，就有赚钱的可能，也算一种投资，而他们手里的股票。我们可以称之为金融资产(Financial Assets)或者证券(Securities)。**证券属于金融资产，但是金融资产并不全是证券**，证券，通俗来讲是一种可以在金融市场上流通的金融资产。\n\n了解这些基本概念后，我们来回到公司的投资融资决策：\n- 投资决策，就是把资金投出去来换取实际资产\n- 融资决策，就是把实际资产拿出去卖掉获得现金流\n\n这么说太简单了，因为不是所有的购买资产的决策都是好的决策--总是会有可能赔本的，融资也是一样。 一个好的决策，应该尽可能地**低价买进，高价卖出**。\n### **投资决策（Investment)**\n\n说到投资决策，我们不得不提到**资本预算**和**资本支出**，资本预算就是公司对未来投资计划的预算，而支出就是投资项目所承担的开销。一般来讲，一些大型公司都会有年度财政预算和一系列的未来投资规划。这些资本的投入都会在将来带给你回报，尽管这个周期可能会很长。当然，也有短线投资。无论是资本支出的量还是投资周期的长短，都会关系到获得收益的效率和资金的流动性。\n\n### **融资决策(Financing)**\n\n通常来讲，公司通过借贷或者从股东手里筹措资金的方式来进行融资。如果通过借贷的方式，一般会支付一个固定利率的利息；如果从股东手里筹措，那么他们手里的股份会变多，但是这个股份价值是会浮动的。这些股东可以称为**权益投资人**。这两种融资方式的选择和决策可以称为资本结构的决策。资本就是长期的融资。对于大公司来讲，融资的方式方法简直太多了:\n- 它可以借钱：可以发行债券，从普通投资者手里借，也可以从银行贷款。借一年还是借十年？借多少？什么时候还钱？还多少？用什么货币结算？各种细节都需要进行考量。\n- 它也可以融资来增加产权，这通常有两种方式：一种是股权融资 - 对外发行更多的股票，大家都来买，公司的现金流增加。一种是再投资，通过将已经挣来的钱再继续购买新的资产。\n\n从某种意义上来讲，融资显得没有投资那么重要 —— 因为它挣不来钱，不能创造价值。但实际上，融资也很重要，因为融资的策略会和公司的健康度有关系，如果你的公司融资效率地下方式不当，可能会使公司负债累累。很简单的例子，高利贷。这也算是融资的方法，但是不是那么切实可行。借了钱，就有还不上的风险。财务经理在进行决策的时候需要意识到将遇到各种可能：好的一面和坏的一面。发行债券尽管会比股票更加稳定，但是如果滥用导致债务过重资不抵债，就要面临破产的结局。\n\n### **什么是公司**\n\n公司就是一个法人实体，作为法人，它可以像我们自然人一样签署合同，出借资金或者贷款，当然，也可以起诉或被起诉，等等。尽管公司的所有权的拥有者是股东，但是它们实际上是分开的，作为有限责任公司，因为负债破产的情况下，股东并没有连带责任，最多也就是把股本赔光而已，而多余的债务不需要赔付。\n\n当公司刚刚建立起来的时候，它可能只被个别几个人拥有，股东并不是很多。但是当公司变得越来越大需要大量融资快速成长的时候，就需要上市了，一旦上市了，公司的股权就进入了金融市场可以进行买卖。这个时候公司的股东会变得非常多，但是这些股民对公司并没有实际操作的权利。所有权和控制权的分离给了公司持续发展的空间，当然，不这样的话，几千股民共同管理公司早就乱了套了。\n\n公司制度是一个健康经济的基石，为什么这么说呢，因为在资本主义国家中，相对于经济来讲，公司是一个具有生产力的基础单元。作为公司，它可以:\n- 提供有价值的商品和服务需要资本。\n- 有生产能力企业（多产的）为顾客提供了产品，为社会提供了岗位，并且还让投资投资者赚得盆满钵满，这样互利共赢的行为推动了经济的发展。\n- 公司如果越有效率募集资金并部署它们，这些可爱的赞助商（持券人（债券）和股东（股票））的回报就越丰厚\n\n## 财务经理和机会成本\n\n财务经理主要负责公司的融资和投资决策。但是他更像是金融市场和公司连接的中间决策者。因为**融资就是融到别人的投资，投资就是投给别人的融资**，这使得财务经理将公司和金融市场通过投融资连接在了一起，过程大致如下:\n- 公司进行融资，财务经理做出决策，从金融市场获得投资者的资金\n- 然后将公司融到的资金进行公司运作或者购买实体资产（投资)\n- 通过公司运作获得现金流\n- 再返回给金融市场的投资者们\n\n机会成本: 在面对选择时，当你选择其中某一个选项。其他选项中收益最大的选项可以成为机会成本。比如说你眼前有三个项目，它们的收益是 8%, 10%, 12%, 如果你选择了10%或8%的项目，那它的机会成本是 12% —— 你本可以获得12%的收益但是你失去了这个机会，所以12% 是机会成本。如果选择了12%,你的机会成本是10%,当然你已经获得了最大收益，这时候机会成本供参考。实际生活中的机会成本远比例子复杂，因为考量的因素太多，这使得机会成本的参考价值更高。机会成本是财务经理进行投资决策时的重要考量。\n\n\n## 公司目标\n\n一个公司的目标并只是做大做强，**如何让股东的兜里都有钱，有更多的钱**也是其中之一。相比与做大做强，尽管很现实，但只是换一种说法罢了。一个公司可能有成千上万的股东，财务经理不能使他的决策满足所有人的口味，但是有一点大家都会说同意：**最大化公司的市值**。由于股份的价格是按公司市值的比例分配的，所以这样一来水涨船高，使得**股东的兜里都有钱，有更多的钱**。\n\n但尽管如此，股东对于投资的想法仍然有分歧的，我们都知道**风险与收益成正比**，有些股东不喜欢财务经理去触碰那些高风险高回报的投资项目，但是有些风险承受能力高的股东则期望更多的回报。作为财务经理，他/她需要很好地做出权衡。\n\n情况不仅如此，公司要挣钱，股东要吃饭。这看上去并不冲突:公司做大了股东不就更有钱了吗？但是，什么时候算是做大，股东什么时候能得到钱？公司是法人，股东是自然人，都是人，都要接触到投资活动。股东也希望尽可能**快**地拿到更多的钱，他们并不喜欢等待。提一个名词，分红：公司要分红，分出去的红就是分出去的资本。**如果削减分红，这些钱用来投资可以获得更大的收益**，对公司来讲当然是好的，对股东来说 --从长期来看是好的。但是他们愿意这样做吗？**分歧出现了**，公司的利益和股东的利益走向对立面。这很麻烦，站在公司和股东的中间，财务经理需要做出他/她自己权衡后的选择。经理做出的选择不能满足股东的需求，我们称之为**代理问题**。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"why-corporate-finance","published":1,"updated":"2018-05-30T23:54:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiqvlo1t001eglu3unr30tw5","content":"<p>通常来讲，一个公司可以通过投资实物资产来获得现金流(cash flow)和收入(income)。而资产有两种，一种是有形的资产，比如说设备，建筑等；另一种是看不见摸不着的无形资产，就像品牌，专利等。要获得这些资产有很多种手段，比如借贷，将投资收益进行再投资，或者也可以卖出一些股份来进行融资。在这种模式下，公司就会变得越来越健壮，但是这涉及到很多金融方面的知识。金融管理就是要研究金融经理是如何将持券人（债券）和股东（股票）手里的资本部署到可以升值的项目中的。</p>\n<!--公司理财(一) 简介-->\n<p>在这个过程中，通常问题集中在两个方面:</p>\n<ul>\n<li>投资给谁？（如何选择投资对象)</li>\n<li>怎么投资？（钱怎么花）</li>\n</ul>\n<p>对于一个公司，总是有成百上千的股东，而每个股东的财力，风险承受能力等都是不一样的。但是他们都有同样的目标：挣钱啊。财务经理能够有效地投资并且快速的让公司变得更有价值，同时也能让股票升值。之前手里一股3块钱，现在变成6块，手里的钱就多了一倍。为了实现大众的目标，财务经理的策略是：</p>\n<ul>\n<li>低价进行资金筹措</li>\n<li>投资高利润率的基金</li>\n</ul>\n<p>说白了，就是<strong>低价买进，高价卖出</strong>但是说起来容易做起来难，怎么才能够做到低价买进高价卖出呢？</p>\n<p>这就是学习公司财务的意义。</p>\n<a id=\"more\"></a>\n<h2 id=\"投资和融资的决策\"><a href=\"#投资和融资的决策\" class=\"headerlink\" title=\"投资和融资的决策\"></a>投资和融资的决策</h2><p>要进行商业活动，公司总得有无数的实体资产来支撑运作。但是，这些资产可不是天上掉下来的，更不是刮风抓来的，<strong>是要花钱买的</strong>。和我们平常所理解的街边商贩不同，街边小商贩通常通过利润积攒下来的资金来购买新的资产，而公司有别的办法————融资。就是将公司的财产分成股份卖出去，然后获得现金流：就好比把一栋大楼分成五十份，然后以证券形式卖出去，大家把这些证券买回来以后，公司就多了一栋楼的<strong>现金</strong>。那股民买回来这些东西有什么用呢，又不能把楼拆开搬回家去。所以其实，随着大楼价格的变动，他们手里股票价格可会随着波动，有波动就意味着有升值的可能，就有赚钱的可能，也算一种投资，而他们手里的股票。我们可以称之为金融资产(Financial Assets)或者证券(Securities)。<strong>证券属于金融资产，但是金融资产并不全是证券</strong>，证券，通俗来讲是一种可以在金融市场上流通的金融资产。</p>\n<p>了解这些基本概念后，我们来回到公司的投资融资决策：</p>\n<ul>\n<li>投资决策，就是把资金投出去来换取实际资产</li>\n<li>融资决策，就是把实际资产拿出去卖掉获得现金流</li>\n</ul>\n<p>这么说太简单了，因为不是所有的购买资产的决策都是好的决策–总是会有可能赔本的，融资也是一样。 一个好的决策，应该尽可能地<strong>低价买进，高价卖出</strong>。</p>\n<h3 id=\"投资决策（Investment\"><a href=\"#投资决策（Investment\" class=\"headerlink\" title=\"投资决策（Investment)\"></a><strong>投资决策（Investment)</strong></h3><p>说到投资决策，我们不得不提到<strong>资本预算</strong>和<strong>资本支出</strong>，资本预算就是公司对未来投资计划的预算，而支出就是投资项目所承担的开销。一般来讲，一些大型公司都会有年度财政预算和一系列的未来投资规划。这些资本的投入都会在将来带给你回报，尽管这个周期可能会很长。当然，也有短线投资。无论是资本支出的量还是投资周期的长短，都会关系到获得收益的效率和资金的流动性。</p>\n<h3 id=\"融资决策-Financing\"><a href=\"#融资决策-Financing\" class=\"headerlink\" title=\"融资决策(Financing)\"></a><strong>融资决策(Financing)</strong></h3><p>通常来讲，公司通过借贷或者从股东手里筹措资金的方式来进行融资。如果通过借贷的方式，一般会支付一个固定利率的利息；如果从股东手里筹措，那么他们手里的股份会变多，但是这个股份价值是会浮动的。这些股东可以称为<strong>权益投资人</strong>。这两种融资方式的选择和决策可以称为资本结构的决策。资本就是长期的融资。对于大公司来讲，融资的方式方法简直太多了:</p>\n<ul>\n<li>它可以借钱：可以发行债券，从普通投资者手里借，也可以从银行贷款。借一年还是借十年？借多少？什么时候还钱？还多少？用什么货币结算？各种细节都需要进行考量。</li>\n<li>它也可以融资来增加产权，这通常有两种方式：一种是股权融资 - 对外发行更多的股票，大家都来买，公司的现金流增加。一种是再投资，通过将已经挣来的钱再继续购买新的资产。</li>\n</ul>\n<p>从某种意义上来讲，融资显得没有投资那么重要 —— 因为它挣不来钱，不能创造价值。但实际上，融资也很重要，因为融资的策略会和公司的健康度有关系，如果你的公司融资效率地下方式不当，可能会使公司负债累累。很简单的例子，高利贷。这也算是融资的方法，但是不是那么切实可行。借了钱，就有还不上的风险。财务经理在进行决策的时候需要意识到将遇到各种可能：好的一面和坏的一面。发行债券尽管会比股票更加稳定，但是如果滥用导致债务过重资不抵债，就要面临破产的结局。</p>\n<h3 id=\"什么是公司\"><a href=\"#什么是公司\" class=\"headerlink\" title=\"什么是公司\"></a><strong>什么是公司</strong></h3><p>公司就是一个法人实体，作为法人，它可以像我们自然人一样签署合同，出借资金或者贷款，当然，也可以起诉或被起诉，等等。尽管公司的所有权的拥有者是股东，但是它们实际上是分开的，作为有限责任公司，因为负债破产的情况下，股东并没有连带责任，最多也就是把股本赔光而已，而多余的债务不需要赔付。</p>\n<p>当公司刚刚建立起来的时候，它可能只被个别几个人拥有，股东并不是很多。但是当公司变得越来越大需要大量融资快速成长的时候，就需要上市了，一旦上市了，公司的股权就进入了金融市场可以进行买卖。这个时候公司的股东会变得非常多，但是这些股民对公司并没有实际操作的权利。所有权和控制权的分离给了公司持续发展的空间，当然，不这样的话，几千股民共同管理公司早就乱了套了。</p>\n<p>公司制度是一个健康经济的基石，为什么这么说呢，因为在资本主义国家中，相对于经济来讲，公司是一个具有生产力的基础单元。作为公司，它可以:</p>\n<ul>\n<li>提供有价值的商品和服务需要资本。</li>\n<li>有生产能力企业（多产的）为顾客提供了产品，为社会提供了岗位，并且还让投资投资者赚得盆满钵满，这样互利共赢的行为推动了经济的发展。</li>\n<li>公司如果越有效率募集资金并部署它们，这些可爱的赞助商（持券人（债券）和股东（股票））的回报就越丰厚</li>\n</ul>\n<h2 id=\"财务经理和机会成本\"><a href=\"#财务经理和机会成本\" class=\"headerlink\" title=\"财务经理和机会成本\"></a>财务经理和机会成本</h2><p>财务经理主要负责公司的融资和投资决策。但是他更像是金融市场和公司连接的中间决策者。因为<strong>融资就是融到别人的投资，投资就是投给别人的融资</strong>，这使得财务经理将公司和金融市场通过投融资连接在了一起，过程大致如下:</p>\n<ul>\n<li>公司进行融资，财务经理做出决策，从金融市场获得投资者的资金</li>\n<li>然后将公司融到的资金进行公司运作或者购买实体资产（投资)</li>\n<li>通过公司运作获得现金流</li>\n<li>再返回给金融市场的投资者们</li>\n</ul>\n<p>机会成本: 在面对选择时，当你选择其中某一个选项。其他选项中收益最大的选项可以成为机会成本。比如说你眼前有三个项目，它们的收益是 8%, 10%, 12%, 如果你选择了10%或8%的项目，那它的机会成本是 12% —— 你本可以获得12%的收益但是你失去了这个机会，所以12% 是机会成本。如果选择了12%,你的机会成本是10%,当然你已经获得了最大收益，这时候机会成本供参考。实际生活中的机会成本远比例子复杂，因为考量的因素太多，这使得机会成本的参考价值更高。机会成本是财务经理进行投资决策时的重要考量。</p>\n<h2 id=\"公司目标\"><a href=\"#公司目标\" class=\"headerlink\" title=\"公司目标\"></a>公司目标</h2><p>一个公司的目标并只是做大做强，<strong>如何让股东的兜里都有钱，有更多的钱</strong>也是其中之一。相比与做大做强，尽管很现实，但只是换一种说法罢了。一个公司可能有成千上万的股东，财务经理不能使他的决策满足所有人的口味，但是有一点大家都会说同意：<strong>最大化公司的市值</strong>。由于股份的价格是按公司市值的比例分配的，所以这样一来水涨船高，使得<strong>股东的兜里都有钱，有更多的钱</strong>。</p>\n<p>但尽管如此，股东对于投资的想法仍然有分歧的，我们都知道<strong>风险与收益成正比</strong>，有些股东不喜欢财务经理去触碰那些高风险高回报的投资项目，但是有些风险承受能力高的股东则期望更多的回报。作为财务经理，他/她需要很好地做出权衡。</p>\n<p>情况不仅如此，公司要挣钱，股东要吃饭。这看上去并不冲突:公司做大了股东不就更有钱了吗？但是，什么时候算是做大，股东什么时候能得到钱？公司是法人，股东是自然人，都是人，都要接触到投资活动。股东也希望尽可能<strong>快</strong>地拿到更多的钱，他们并不喜欢等待。提一个名词，分红：公司要分红，分出去的红就是分出去的资本。<strong>如果削减分红，这些钱用来投资可以获得更大的收益</strong>，对公司来讲当然是好的，对股东来说 –从长期来看是好的。但是他们愿意这样做吗？<strong>分歧出现了</strong>，公司的利益和股东的利益走向对立面。这很麻烦，站在公司和股东的中间，财务经理需要做出他/她自己权衡后的选择。经理做出的选择不能满足股东的需求，我们称之为<strong>代理问题</strong>。</p>\n","site":{"data":{}},"excerpt":"<p>通常来讲，一个公司可以通过投资实物资产来获得现金流(cash flow)和收入(income)。而资产有两种，一种是有形的资产，比如说设备，建筑等；另一种是看不见摸不着的无形资产，就像品牌，专利等。要获得这些资产有很多种手段，比如借贷，将投资收益进行再投资，或者也可以卖出一些股份来进行融资。在这种模式下，公司就会变得越来越健壮，但是这涉及到很多金融方面的知识。金融管理就是要研究金融经理是如何将持券人（债券）和股东（股票）手里的资本部署到可以升值的项目中的。</p>\n<!--公司理财(一) 简介-->\n<p>在这个过程中，通常问题集中在两个方面:</p>\n<ul>\n<li>投资给谁？（如何选择投资对象)</li>\n<li>怎么投资？（钱怎么花）</li>\n</ul>\n<p>对于一个公司，总是有成百上千的股东，而每个股东的财力，风险承受能力等都是不一样的。但是他们都有同样的目标：挣钱啊。财务经理能够有效地投资并且快速的让公司变得更有价值，同时也能让股票升值。之前手里一股3块钱，现在变成6块，手里的钱就多了一倍。为了实现大众的目标，财务经理的策略是：</p>\n<ul>\n<li>低价进行资金筹措</li>\n<li>投资高利润率的基金</li>\n</ul>\n<p>说白了，就是<strong>低价买进，高价卖出</strong>但是说起来容易做起来难，怎么才能够做到低价买进高价卖出呢？</p>\n<p>这就是学习公司财务的意义。</p>","more":"<h2 id=\"投资和融资的决策\"><a href=\"#投资和融资的决策\" class=\"headerlink\" title=\"投资和融资的决策\"></a>投资和融资的决策</h2><p>要进行商业活动，公司总得有无数的实体资产来支撑运作。但是，这些资产可不是天上掉下来的，更不是刮风抓来的，<strong>是要花钱买的</strong>。和我们平常所理解的街边商贩不同，街边小商贩通常通过利润积攒下来的资金来购买新的资产，而公司有别的办法————融资。就是将公司的财产分成股份卖出去，然后获得现金流：就好比把一栋大楼分成五十份，然后以证券形式卖出去，大家把这些证券买回来以后，公司就多了一栋楼的<strong>现金</strong>。那股民买回来这些东西有什么用呢，又不能把楼拆开搬回家去。所以其实，随着大楼价格的变动，他们手里股票价格可会随着波动，有波动就意味着有升值的可能，就有赚钱的可能，也算一种投资，而他们手里的股票。我们可以称之为金融资产(Financial Assets)或者证券(Securities)。<strong>证券属于金融资产，但是金融资产并不全是证券</strong>，证券，通俗来讲是一种可以在金融市场上流通的金融资产。</p>\n<p>了解这些基本概念后，我们来回到公司的投资融资决策：</p>\n<ul>\n<li>投资决策，就是把资金投出去来换取实际资产</li>\n<li>融资决策，就是把实际资产拿出去卖掉获得现金流</li>\n</ul>\n<p>这么说太简单了，因为不是所有的购买资产的决策都是好的决策–总是会有可能赔本的，融资也是一样。 一个好的决策，应该尽可能地<strong>低价买进，高价卖出</strong>。</p>\n<h3 id=\"投资决策（Investment\"><a href=\"#投资决策（Investment\" class=\"headerlink\" title=\"投资决策（Investment)\"></a><strong>投资决策（Investment)</strong></h3><p>说到投资决策，我们不得不提到<strong>资本预算</strong>和<strong>资本支出</strong>，资本预算就是公司对未来投资计划的预算，而支出就是投资项目所承担的开销。一般来讲，一些大型公司都会有年度财政预算和一系列的未来投资规划。这些资本的投入都会在将来带给你回报，尽管这个周期可能会很长。当然，也有短线投资。无论是资本支出的量还是投资周期的长短，都会关系到获得收益的效率和资金的流动性。</p>\n<h3 id=\"融资决策-Financing\"><a href=\"#融资决策-Financing\" class=\"headerlink\" title=\"融资决策(Financing)\"></a><strong>融资决策(Financing)</strong></h3><p>通常来讲，公司通过借贷或者从股东手里筹措资金的方式来进行融资。如果通过借贷的方式，一般会支付一个固定利率的利息；如果从股东手里筹措，那么他们手里的股份会变多，但是这个股份价值是会浮动的。这些股东可以称为<strong>权益投资人</strong>。这两种融资方式的选择和决策可以称为资本结构的决策。资本就是长期的融资。对于大公司来讲，融资的方式方法简直太多了:</p>\n<ul>\n<li>它可以借钱：可以发行债券，从普通投资者手里借，也可以从银行贷款。借一年还是借十年？借多少？什么时候还钱？还多少？用什么货币结算？各种细节都需要进行考量。</li>\n<li>它也可以融资来增加产权，这通常有两种方式：一种是股权融资 - 对外发行更多的股票，大家都来买，公司的现金流增加。一种是再投资，通过将已经挣来的钱再继续购买新的资产。</li>\n</ul>\n<p>从某种意义上来讲，融资显得没有投资那么重要 —— 因为它挣不来钱，不能创造价值。但实际上，融资也很重要，因为融资的策略会和公司的健康度有关系，如果你的公司融资效率地下方式不当，可能会使公司负债累累。很简单的例子，高利贷。这也算是融资的方法，但是不是那么切实可行。借了钱，就有还不上的风险。财务经理在进行决策的时候需要意识到将遇到各种可能：好的一面和坏的一面。发行债券尽管会比股票更加稳定，但是如果滥用导致债务过重资不抵债，就要面临破产的结局。</p>\n<h3 id=\"什么是公司\"><a href=\"#什么是公司\" class=\"headerlink\" title=\"什么是公司\"></a><strong>什么是公司</strong></h3><p>公司就是一个法人实体，作为法人，它可以像我们自然人一样签署合同，出借资金或者贷款，当然，也可以起诉或被起诉，等等。尽管公司的所有权的拥有者是股东，但是它们实际上是分开的，作为有限责任公司，因为负债破产的情况下，股东并没有连带责任，最多也就是把股本赔光而已，而多余的债务不需要赔付。</p>\n<p>当公司刚刚建立起来的时候，它可能只被个别几个人拥有，股东并不是很多。但是当公司变得越来越大需要大量融资快速成长的时候，就需要上市了，一旦上市了，公司的股权就进入了金融市场可以进行买卖。这个时候公司的股东会变得非常多，但是这些股民对公司并没有实际操作的权利。所有权和控制权的分离给了公司持续发展的空间，当然，不这样的话，几千股民共同管理公司早就乱了套了。</p>\n<p>公司制度是一个健康经济的基石，为什么这么说呢，因为在资本主义国家中，相对于经济来讲，公司是一个具有生产力的基础单元。作为公司，它可以:</p>\n<ul>\n<li>提供有价值的商品和服务需要资本。</li>\n<li>有生产能力企业（多产的）为顾客提供了产品，为社会提供了岗位，并且还让投资投资者赚得盆满钵满，这样互利共赢的行为推动了经济的发展。</li>\n<li>公司如果越有效率募集资金并部署它们，这些可爱的赞助商（持券人（债券）和股东（股票））的回报就越丰厚</li>\n</ul>\n<h2 id=\"财务经理和机会成本\"><a href=\"#财务经理和机会成本\" class=\"headerlink\" title=\"财务经理和机会成本\"></a>财务经理和机会成本</h2><p>财务经理主要负责公司的融资和投资决策。但是他更像是金融市场和公司连接的中间决策者。因为<strong>融资就是融到别人的投资，投资就是投给别人的融资</strong>，这使得财务经理将公司和金融市场通过投融资连接在了一起，过程大致如下:</p>\n<ul>\n<li>公司进行融资，财务经理做出决策，从金融市场获得投资者的资金</li>\n<li>然后将公司融到的资金进行公司运作或者购买实体资产（投资)</li>\n<li>通过公司运作获得现金流</li>\n<li>再返回给金融市场的投资者们</li>\n</ul>\n<p>机会成本: 在面对选择时，当你选择其中某一个选项。其他选项中收益最大的选项可以成为机会成本。比如说你眼前有三个项目，它们的收益是 8%, 10%, 12%, 如果你选择了10%或8%的项目，那它的机会成本是 12% —— 你本可以获得12%的收益但是你失去了这个机会，所以12% 是机会成本。如果选择了12%,你的机会成本是10%,当然你已经获得了最大收益，这时候机会成本供参考。实际生活中的机会成本远比例子复杂，因为考量的因素太多，这使得机会成本的参考价值更高。机会成本是财务经理进行投资决策时的重要考量。</p>\n<h2 id=\"公司目标\"><a href=\"#公司目标\" class=\"headerlink\" title=\"公司目标\"></a>公司目标</h2><p>一个公司的目标并只是做大做强，<strong>如何让股东的兜里都有钱，有更多的钱</strong>也是其中之一。相比与做大做强，尽管很现实，但只是换一种说法罢了。一个公司可能有成千上万的股东，财务经理不能使他的决策满足所有人的口味，但是有一点大家都会说同意：<strong>最大化公司的市值</strong>。由于股份的价格是按公司市值的比例分配的，所以这样一来水涨船高，使得<strong>股东的兜里都有钱，有更多的钱</strong>。</p>\n<p>但尽管如此，股东对于投资的想法仍然有分歧的，我们都知道<strong>风险与收益成正比</strong>，有些股东不喜欢财务经理去触碰那些高风险高回报的投资项目，但是有些风险承受能力高的股东则期望更多的回报。作为财务经理，他/她需要很好地做出权衡。</p>\n<p>情况不仅如此，公司要挣钱，股东要吃饭。这看上去并不冲突:公司做大了股东不就更有钱了吗？但是，什么时候算是做大，股东什么时候能得到钱？公司是法人，股东是自然人，都是人，都要接触到投资活动。股东也希望尽可能<strong>快</strong>地拿到更多的钱，他们并不喜欢等待。提一个名词，分红：公司要分红，分出去的红就是分出去的资本。<strong>如果削减分红，这些钱用来投资可以获得更大的收益</strong>，对公司来讲当然是好的，对股东来说 –从长期来看是好的。但是他们愿意这样做吗？<strong>分歧出现了</strong>，公司的利益和股东的利益走向对立面。这很麻烦，站在公司和股东的中间，财务经理需要做出他/她自己权衡后的选择。经理做出的选择不能满足股东的需求，我们称之为<strong>代理问题</strong>。</p>"},{"title":"Go语言入门笔记","date":"2019-06-05T02:00:37.000Z","_content":"\n## 简介\n之前几年一直在使用Python，后来一个偶然的机会让我对Go有了一些了解。诞生在本世纪的Go语言算是编程语言中的新青年了，相比C和Java，有着近似Python的简洁语句，相比Python，又有着编译型语言的速度。尤其是其为并发而生的特性极大地提升了计算能力。\n\n## 基本规则\n\n  ```go\n  // test.go\n  package main //作为可执行程序\n\n  import \"fmt\"\n\n  func main() { //主函数\n      var mm = map[string]int{}\n      mm[\"Python\"] = 5\n      delete(mm,\"Python\")\n      fmt.Println(mm)\n\n  }\n  ```\n<!--More-->\n\n## 基本数据类型\n\n### 声明变量\n\n  ```go\n  //普通赋值\n  var num1 int = 1\n  //平行赋值\n  var num2,num3 int = 2,3\n  //多行赋值\n  var (num4 int=4\n      num5 int =5\n      unum6 uint64 = 65535\n\t)\n  //简单赋值\n  num7 := 7\n  //打印变量\n  fmt.Println(num1,num2,num3,num4,num5,unum6,num7)\n  ```\n\n### 常用类型\n\n#### 整数\n\n一共有10个，又分为两类，有符号int与无符号的uint，以及int8,int16,int32,int64,uint8等\n\n  ```go\n  var num1 int = 1\n  var unum1 uint = 2\n  ```\n#### 浮点数\n\n浮点数类型分为两个，即float32和float64.表达方法可以省掉不用的0，或者使用科学计数法\n\n\n  ```go\n\tvar float1 float32= 7.0\n\tvar float2 float64= .032\n\tfloat3:= 3.7E-2\n\tfloat4:= 60\n\tfmt.Println(float1,float2,float3,float4)\n  ```\n#### 复数\n复数同浮点数类似，分为complex32和complex64\n\n\n  ```go\n  var cplx = 3.7E+1 +5.98E-2i\n  ```\n\n#### Rune和Byte\n\nRune和byte属于别名类型，分别对应int32和uint8。rune可以表达一个Unicode字符\n\n\n  ```go\n  var char1 rune = '赞'\n  char2:= '赞'\n  ```\n#### 字符串类型\n\n一个字符串可以表达一个字符序列，表示方法如下。因为转义符\"\\\"的存在，分为解释型表示法和原生表示法，其中原生表示法忽略转义符，所见即所得。\n\n  ```go\n  //解释型表示法\n  var str1 string = \"这是一条字符串\\\\\"\n  //原生表示法\n  var str2 string = `这是一条字符串\\\\`\n  fmt.Println(str1,str2)\n  //输出结果\n  这是一条字符串\\ 这是一条字符串\\\\\n  ```\n\n## 高级数据类型\n\n### 数组\n    一个数组就是一个可以容纳多个相同类型元素的容器，这个容器的长度是固定的，在初始化中需要声明。\n\n\n#### 初始化与类型声明\n\n  ```go\n  //声明长度\n  var array1 = [3]int{}\n  //初始化数组内容\n  var array2 = [3]int{1,2,3}\n  #不声明长度初始化\n  var array3 = [...]int{1,3,5,6,9}\n  ```\n我们可以直接声明一个数组类型\n\n  ```go\n  type MyArray [5]int\n  var array4 Myarray\n  ```\n\n#### 索引\n\n索引方法与C和Python相同：\n\n  ```go\n  array4[0]  //array4第一个元素\n  array4[1]  //array4第二个元素\n  array4[2]  //array4第三个元素\n  array[0] = 5\n  ```\n\n### 切片\n\n切片与数组一样，也是可以容纳多个相同类型元素的容器。不同的是，无法通过切片类型来得知切片长度。\n\n#### 初始化与类型声明\n\n  ```go\n  //类型声明\n  type MyIntSlice []int\n  type MyStrSlice []string\n\n  //初始化与数组类似，但无需声明长度\n  var slice1 = []int{1,2,3,5,7}\n\n  //或者直接从数组取出\n  var array3 = [...]int{1,3,5,6,9}\n  var slice2 = array3[1:4] //返回[3,5,6]\n\n  //声明空值\n  var slice3 []int\n  ```\n\n#### 操作方法\n\n  ```go\n  //索引\n  var slice4 = []int{1,3,5,7,9,13,2}\n  slice5 = slice[1:4]  //[3,5,7]\n  //添加append\n  slice5 = append(slice4,1,2,1) //slice5 [3,5,7,1,2,1]\n  //切片复制（地址复制）\n  var a []int\n  a = append(a,3,4,5)\n  c := a\n  c[0]=1\n  fmt.Println(a,c)\n  //值复制，copy函数\n  var a []int\n  a = append(a,3,4,5)\n  c:=[]int{0}\n  copy(a,c)\n  fmt.Println(a,c) //[0 4 5] [0]\n  b:=[]int{}\n  copy(a,b)\n  fmt.Println(a,b) //[0 4 5] []\n  d:= []int{1,2,3,4}\n  copy(a,d)\n  fmt.Println(a,d)// [1 2 3] [1 2 3 4]\n  ```\n\n### 字典\n字典（Dict）与Python类似，是哈希表的实现，用于键值存储的无序集合\n\n声明变量\n\n  ```go\n  var dict = map[string]int{\"Golang\":1,\"Python\":0,\"C\":2}\n  dict2 := map[string]int{}\n  ```\n\n添加\n\n  ```go\n  dict[\"Java\"] = 5\n  ```\n\n索引\n\n  ```go\n  b := dict[\"Python\"] //b = 0\n  ```\n\n删除\n\n  ```go\n  delete(dict,\"Java\")\n  ```\n\n注意当字典为空时或不存在该键值时，我们使用索引会返回nil,因此我们无法判断是该键值对应nil还是不存在该键值。这时我们可采用另一种写法\n\n  ```go\n  e,ok := dict[\"Lua\"] // ok为False时表明不存在该键\n  ```\n\n### 通道\n通道是Go中非常独特的数据结构，它的设计目的是为了在不同的goroutine中传递数据，并且是并发安全的。前面的数据类型都不是并发安全的，需要注意。\n\n#### 初始化与赋值\n\n与其他数据类型不同的是，我们无法通过var来赋值，而是采用内建函数make\n\n    chStr := make(chan string,5)\n\n其中第一个值是声明所存储数据类型，第二个值为声明长度,下面我们来将一个字符串传输到通道中\n\n    chStr <- \"Value1\"\n\n如果我们想接受字符串\n\n    str_a := <- chStr\n\n同字典相同，当我们检测通道状态及消除nil歧议，可采用\n\n    str_b,ok := <- chStr\n\n最后关闭通道\n\n    close(chStr)\n\n#### 缓冲与非缓冲通道\n\n  ```go\n  ch1 := make(chan string,2) //缓冲通道，可容纳两个值\n  ch2 := make(chan string,0) //非缓冲通道\n  ```\n与缓冲通道不同的是，非缓冲通道在被发送数据后会立刻阻塞，直到数据被接收。同样，当缓冲通道接受数据长度大于缓冲区，也会阻塞\n\n\n\n#### 单向与双向通道\n一般来讲通道都是双向的，但是为了避免混淆我们可以将其声明为单向通道,声明方法如下\n\n  ```go\n  type Sender chan<- string\n  type Receiver <-chan string\n\n  var ch = make(chan string,3)\n  var sender Sender = ch\n  var recver Receiver = ch\n\n  str := \"hello\"\n  sender <- str\n  str_recv := <-recver\n  fmt.Println(str_recv)\n  ```\n\n## 进阶方法\n\n### 结构体\n学过C的话应该对结构体不陌生,在Go中，结构体更像Python的Class,它可以封装属性和操作（操作我们会在函数与方法中提到）\n\n声明一个结构体, 一本书具有三个属性，名字，作者和页数\n\n  ```go\n  type Book struct{\n      Name string\n      Author string\n      Pages int\n  }\n  ```\n\n接下来创建一个实例\n\n    book1 := Book{Name:\"You Name it\",Author:\"Adam\",Pages:541}\n\n 如果书写顺序与声明顺序一致，可省略字段名称：如果有零值则不可省略\n\n    book1 := Book{\"You Name it\",\"Adam\",541}\n\n### 函数\n\n前面提到了各种数据类型，接下来是函数。在Go语言中，函数是一等类型，即和Python一样可以作为值来传递，同时Go的函数可以返回多个结果。\n\n#### 函数声明及调用\n\n我们下面来声明一个简单的函数\n\n  ```go\n  func add(num1 int,num2 int)(int){\n      num3 := num1 + num2\n      return num3\n  }\n  ```\n\n函数声明的结构是 **func字段（形参1 类型， 形参2 类型）（输出类型）{函数语句}**\n我们现在调用它\n\n  ```go\n  func main(){\n      var num1,num2 int = 2,3\n      num3:= add(num1,num2)\n      fmt.Println(num3)\n  }\n  ```\n#### 方法\n\n除了作为函数使用，在面向对象编程中我们也可以将其作为方法封装，示例如下：\n\n  ```go\n  type Queue []int // 1. 定义一个类型\n  func main() {\n\n      var queue Queue //3. 创建Queue实例\n      queue.Push(1)   //4. 调用Push方法\n      fmt.Println(queue)\n\n  }\n\n  func (queue *Queue)Push(num int){ //2. 为类型Queue声明一个方法\n      *queue = append(*queue,num)\n  }\n  ```\n### 接口\n在Go语言中，一个接口类型代表一系列行为的集合，声明过程如下:\n\n  ```go\n  type People interface{\n      Grow()\n      Say()\n  }\n  ```\n\n\n我们先来看一个例子\n\n  ```go\n  package main\n  import \"fmt\"\n  //Human\n  type Human struct{\n      Age int\n  }\n  func (human *Human)Grow(){\n      human.Age++\n  }\n  func (human Human)Say(){\n      fmt.Println(\"Hello, I am a human\")\n  }\n  //Animal\n  type Animal struct{\n      Age int\n  }\n  func (animal *Animal)Grow(){\n      animal.Age++\n  }\n  //Robot\n  type Robot struct{\n  }\n  func (robot Robot)Say(){\n      fmt.Println(\"Hello, I am a robot\")\n  }\n  //Define Interfaces\n  type Talk interface{\n      Say()\n  }\n  type AgeGrow interface{\n      Grow()\n  }\n  ```\n\n在这个例子中我们定义了三个类：Human,Animal, Robot, 其中Human,Animal具有年龄增长的方法Grow(),Human，Robot具有方法Say(),输出一个字符串。接下来我们分别把两个不同类型的Grow方法和Say方法放在AgeGrow和Talk接口里面，下面是调用的示例：\n\n  ```go\n  func main() {\n      //1\n      var talk Talk\n      talk = new(Human)\n      talk.Say()\n      talk = new(Robot)\n      talk.Say()\n      //2\n      var (human =Human{Age:21}\n           animal =Animal{Age:8})\n      fmt.Printf(\"The current age of human and animal are %d and %d\\n\",human.Age,animal.Age)\n      AgeGrow.Grow(&human)\n      AgeGrow.Grow(&animal)\n      fmt.Printf(\"The current age of human and animal are %d and %d\\n\",human.Age,animal.Age)\n  }\n  ```\n输出结果为\n\n    Hello, I am a human\n    Hello, I am a robot\n    The current age of human and animal are 21 and 8\n    The current age of human and animal are 22 and 9\n\n#### **空接口**\n空接口即为不包含任何方法声明的接口类型，用**interface{}**表示。也正因为空接口的定义，Go语言中包含预定义的任何数据类型都可以被看作是接口的实现\n\n  ```go\n  var everything [4]interface{}\n  everything[0] = 1\n  everything[1] = []int{1,2,3}\n  everything[2] = \"is a string\"\n  fmt.Println(everything)\n  ```\n\n输出结果\n\n    [1 [1 2 3] is a string]\n\n#### 断言\n\n在类型字面量后面加一个**.(类型)**即可实现断言，作用类似于Python的isinstance\n\n  ```go\n  num,ok:=everything[0].(int)\n  fmt.Println(num,ok)\n  //返回结果\n  1 true\n  ```\n第一行进行了两项操作，即将everything[0]的值1赋给num，并断言类型为int，断言结果返回给ok,为true\n\n### 指针\n\n#### 取址符与取值符\n\n取址符为“&”，表示获取一个变量的内存地址。取值符为“\\*”，表示获得该内存地址所储存的值。下面是一个简单的例子\n\n\n\n  ```go\n  var num int = 5\n  ptr := &num\n  fmt.Println(num,ptr,*ptr)\n  num =6\n  fmt.Println(num,ptr,*ptr)\n  //返回结果\n  //5 0xc000092000 5\n  //6 0xc000092000 6\n  ```\n上面这段代码首先给变量num赋值5,然后创建变量ptr,值为num的内存地址0xc000092000。在println中我们同时也打印了*ptr的变量，得到的值为5，与num相同。之后我们再修改num为6,发现*ptr的值也变成了6.这是为什么呢？原因是我们的ptr储存了num的内存地址，*ptr取出来的值就是num的值。当num重新赋值时，内存地址没有改变，所以*ptr也相应变成了6。我们可以说ptr是指向num的指针。\n\n#### 值拷贝与指针拷贝\n\n\n  ```go\n  var a int = 5\n  b := a\n  c:= &a\n  a++\n  fmt.Println(a,b,*c)\n  ```\n\n最后的返回结果是 6 5 6， a和c同时添加了1，而b没有。这是因为b变量是存储在另一个内存地址并被赋值a,我们称之为值拷贝，即将a的值复制给另一个变量b，相互独立。而c作为指针指向a,当a改变时，c也相应改变，我们称之为指针拷贝。\n\n\n## 流程控制\n\n### if条件语句\nif语句根据条件表达式来决定执行分支语句,当a大于5时+1，否则-1\n\n  ```go\n  var a int = 5\n  if a<10{\n      a++\n  }else{\n      a--\n  }\n  ```\n\n我们也可以省略else，因为如果a<10，不成立，通过else执行-1或者直接-1是一样的\n\n  ```go\n  if a<10{\n      a++\n  }\n  a--\n  ```\n此外，它也支持串联：\n\n  ```go\n  if a<10{\n      a++\n  }else if a== 10{\n      a = a + 2\n  }else{\n      a--\n  }\n  ```\n表达式是自上而下的， 只有第一个满足的条件会被执行\n\n### Switch\n在选项变多的时候，使用if会比较繁琐，这时候我们可以使用switch:\n\n  ```go\n  var content string = \"A\"\n  switch content{\n  case \"A\":\n  \tfmt.Println(\"The letter is A\")\n  case \"B\":\n  \tfmt.Println(\"The letter is B\")\n        fallthrough\n  case \"C\":\n  \tfmt.Println(\"The letter is C\")\n\n  default:\n  \tfmt.Println(\"Where is your letter\")\n  }\n  ```\n上面这段代码演示了几点：\n\n- 当content为A或者C时，直接执行\"The letter is A/C\",然后跳出判断\n- 在case B中，我们使用了fallthrough, 意味着执行完case \"B\"会进入到下一个case \"C\"中执行\n- 当content不是A，B，C时，则执行default默认操作\n\n### For循环\n\n#### 基础用法\n\n相比其他语言，Go中有一个更加广义灵活的for语句。for语句包含了一条for子句，字句可以包含初始化子句，条件子句和后置子句，如下：\n  ```go\n  var i,num int\n  for i=1,i<100;i++{\n      num++\n  }\n  ```\n初始化子句和条件子句可以被省略：\n  ```go\n  //省略初始化子句\n  var i,num int = 0,0\n  for i<100,i++{\n      num++\n  }\n  //省略后置子句\n  for i:=0,i<100{\n      i++\n  }\n  ```\n由于Go语言没有While,想要实现while true这样的无限循环我们可以直接使用for:\n  ```go\n  i:=0\n  for{\n      i++\n  }\n  ```\n\n#### range子句\n\n对于字符串，切片，字典以及通道类型的值我们都可以使用range子句来迭代其中的每一个值。当使用range子句时，会返回两个值:\n- string:返回index值 和 字符\n- 切片: 返回index值 和切片元素\n- 字典：返回key 和 value\n- 注意这里通道只返回通道元素值\n\n\n示例：\n\n  ```go\n  //切片\n  ints :=[]int{1,2,3,4,5}\n  for i,v := range ints{\n      fmt.Println(i,v)\n  }\n\n  //字典\n  var dict = map[string]int{\"Golang\":1,\"Python\":0,\"C\":2}\n  for k,v := range dict{\n      fmt.Println(k,v)\n  }\n\n  //通道\n  for data := range ch{\n\n  }\n  ```\n\n#### 注意\n\n现在问题来了，当我们使用for时只使用一个变量，如下\n\n  ```go\n  //切片\n  ints :=[]int{1,3，5，7，9}\n  for v := range ints{\n      fmt.Println(v)\n  }\n  ```\n\n返回的结果时0 1 2 3 4，而不是1 3 5 7 9。这是因为返回的是index而并不是切片元素。如果需要返回元素就需要\n\n\n    for i,v := range ints{\n\n但是我们不使用i这个index,而go语法规定不允许未使用的变量存在，那我们怎么操作呢，我们前面出现过的\"\\_\"可以解决这个问题，即占用一个位置但无法有效调用。\n\n  ```go\n  ints :=[]int{1,3，5，7，9}\n  for _,v := range ints{\n      fmt.Println(v)\n  }\n  ```\n","source":"_posts/go-intro.md","raw":"---\ntitle: Go语言入门笔记\ndate: 2019-06-05 10:00:37\ntags:\ncategories: Go\n---\n\n## 简介\n之前几年一直在使用Python，后来一个偶然的机会让我对Go有了一些了解。诞生在本世纪的Go语言算是编程语言中的新青年了，相比C和Java，有着近似Python的简洁语句，相比Python，又有着编译型语言的速度。尤其是其为并发而生的特性极大地提升了计算能力。\n\n## 基本规则\n\n  ```go\n  // test.go\n  package main //作为可执行程序\n\n  import \"fmt\"\n\n  func main() { //主函数\n      var mm = map[string]int{}\n      mm[\"Python\"] = 5\n      delete(mm,\"Python\")\n      fmt.Println(mm)\n\n  }\n  ```\n<!--More-->\n\n## 基本数据类型\n\n### 声明变量\n\n  ```go\n  //普通赋值\n  var num1 int = 1\n  //平行赋值\n  var num2,num3 int = 2,3\n  //多行赋值\n  var (num4 int=4\n      num5 int =5\n      unum6 uint64 = 65535\n\t)\n  //简单赋值\n  num7 := 7\n  //打印变量\n  fmt.Println(num1,num2,num3,num4,num5,unum6,num7)\n  ```\n\n### 常用类型\n\n#### 整数\n\n一共有10个，又分为两类，有符号int与无符号的uint，以及int8,int16,int32,int64,uint8等\n\n  ```go\n  var num1 int = 1\n  var unum1 uint = 2\n  ```\n#### 浮点数\n\n浮点数类型分为两个，即float32和float64.表达方法可以省掉不用的0，或者使用科学计数法\n\n\n  ```go\n\tvar float1 float32= 7.0\n\tvar float2 float64= .032\n\tfloat3:= 3.7E-2\n\tfloat4:= 60\n\tfmt.Println(float1,float2,float3,float4)\n  ```\n#### 复数\n复数同浮点数类似，分为complex32和complex64\n\n\n  ```go\n  var cplx = 3.7E+1 +5.98E-2i\n  ```\n\n#### Rune和Byte\n\nRune和byte属于别名类型，分别对应int32和uint8。rune可以表达一个Unicode字符\n\n\n  ```go\n  var char1 rune = '赞'\n  char2:= '赞'\n  ```\n#### 字符串类型\n\n一个字符串可以表达一个字符序列，表示方法如下。因为转义符\"\\\"的存在，分为解释型表示法和原生表示法，其中原生表示法忽略转义符，所见即所得。\n\n  ```go\n  //解释型表示法\n  var str1 string = \"这是一条字符串\\\\\"\n  //原生表示法\n  var str2 string = `这是一条字符串\\\\`\n  fmt.Println(str1,str2)\n  //输出结果\n  这是一条字符串\\ 这是一条字符串\\\\\n  ```\n\n## 高级数据类型\n\n### 数组\n    一个数组就是一个可以容纳多个相同类型元素的容器，这个容器的长度是固定的，在初始化中需要声明。\n\n\n#### 初始化与类型声明\n\n  ```go\n  //声明长度\n  var array1 = [3]int{}\n  //初始化数组内容\n  var array2 = [3]int{1,2,3}\n  #不声明长度初始化\n  var array3 = [...]int{1,3,5,6,9}\n  ```\n我们可以直接声明一个数组类型\n\n  ```go\n  type MyArray [5]int\n  var array4 Myarray\n  ```\n\n#### 索引\n\n索引方法与C和Python相同：\n\n  ```go\n  array4[0]  //array4第一个元素\n  array4[1]  //array4第二个元素\n  array4[2]  //array4第三个元素\n  array[0] = 5\n  ```\n\n### 切片\n\n切片与数组一样，也是可以容纳多个相同类型元素的容器。不同的是，无法通过切片类型来得知切片长度。\n\n#### 初始化与类型声明\n\n  ```go\n  //类型声明\n  type MyIntSlice []int\n  type MyStrSlice []string\n\n  //初始化与数组类似，但无需声明长度\n  var slice1 = []int{1,2,3,5,7}\n\n  //或者直接从数组取出\n  var array3 = [...]int{1,3,5,6,9}\n  var slice2 = array3[1:4] //返回[3,5,6]\n\n  //声明空值\n  var slice3 []int\n  ```\n\n#### 操作方法\n\n  ```go\n  //索引\n  var slice4 = []int{1,3,5,7,9,13,2}\n  slice5 = slice[1:4]  //[3,5,7]\n  //添加append\n  slice5 = append(slice4,1,2,1) //slice5 [3,5,7,1,2,1]\n  //切片复制（地址复制）\n  var a []int\n  a = append(a,3,4,5)\n  c := a\n  c[0]=1\n  fmt.Println(a,c)\n  //值复制，copy函数\n  var a []int\n  a = append(a,3,4,5)\n  c:=[]int{0}\n  copy(a,c)\n  fmt.Println(a,c) //[0 4 5] [0]\n  b:=[]int{}\n  copy(a,b)\n  fmt.Println(a,b) //[0 4 5] []\n  d:= []int{1,2,3,4}\n  copy(a,d)\n  fmt.Println(a,d)// [1 2 3] [1 2 3 4]\n  ```\n\n### 字典\n字典（Dict）与Python类似，是哈希表的实现，用于键值存储的无序集合\n\n声明变量\n\n  ```go\n  var dict = map[string]int{\"Golang\":1,\"Python\":0,\"C\":2}\n  dict2 := map[string]int{}\n  ```\n\n添加\n\n  ```go\n  dict[\"Java\"] = 5\n  ```\n\n索引\n\n  ```go\n  b := dict[\"Python\"] //b = 0\n  ```\n\n删除\n\n  ```go\n  delete(dict,\"Java\")\n  ```\n\n注意当字典为空时或不存在该键值时，我们使用索引会返回nil,因此我们无法判断是该键值对应nil还是不存在该键值。这时我们可采用另一种写法\n\n  ```go\n  e,ok := dict[\"Lua\"] // ok为False时表明不存在该键\n  ```\n\n### 通道\n通道是Go中非常独特的数据结构，它的设计目的是为了在不同的goroutine中传递数据，并且是并发安全的。前面的数据类型都不是并发安全的，需要注意。\n\n#### 初始化与赋值\n\n与其他数据类型不同的是，我们无法通过var来赋值，而是采用内建函数make\n\n    chStr := make(chan string,5)\n\n其中第一个值是声明所存储数据类型，第二个值为声明长度,下面我们来将一个字符串传输到通道中\n\n    chStr <- \"Value1\"\n\n如果我们想接受字符串\n\n    str_a := <- chStr\n\n同字典相同，当我们检测通道状态及消除nil歧议，可采用\n\n    str_b,ok := <- chStr\n\n最后关闭通道\n\n    close(chStr)\n\n#### 缓冲与非缓冲通道\n\n  ```go\n  ch1 := make(chan string,2) //缓冲通道，可容纳两个值\n  ch2 := make(chan string,0) //非缓冲通道\n  ```\n与缓冲通道不同的是，非缓冲通道在被发送数据后会立刻阻塞，直到数据被接收。同样，当缓冲通道接受数据长度大于缓冲区，也会阻塞\n\n\n\n#### 单向与双向通道\n一般来讲通道都是双向的，但是为了避免混淆我们可以将其声明为单向通道,声明方法如下\n\n  ```go\n  type Sender chan<- string\n  type Receiver <-chan string\n\n  var ch = make(chan string,3)\n  var sender Sender = ch\n  var recver Receiver = ch\n\n  str := \"hello\"\n  sender <- str\n  str_recv := <-recver\n  fmt.Println(str_recv)\n  ```\n\n## 进阶方法\n\n### 结构体\n学过C的话应该对结构体不陌生,在Go中，结构体更像Python的Class,它可以封装属性和操作（操作我们会在函数与方法中提到）\n\n声明一个结构体, 一本书具有三个属性，名字，作者和页数\n\n  ```go\n  type Book struct{\n      Name string\n      Author string\n      Pages int\n  }\n  ```\n\n接下来创建一个实例\n\n    book1 := Book{Name:\"You Name it\",Author:\"Adam\",Pages:541}\n\n 如果书写顺序与声明顺序一致，可省略字段名称：如果有零值则不可省略\n\n    book1 := Book{\"You Name it\",\"Adam\",541}\n\n### 函数\n\n前面提到了各种数据类型，接下来是函数。在Go语言中，函数是一等类型，即和Python一样可以作为值来传递，同时Go的函数可以返回多个结果。\n\n#### 函数声明及调用\n\n我们下面来声明一个简单的函数\n\n  ```go\n  func add(num1 int,num2 int)(int){\n      num3 := num1 + num2\n      return num3\n  }\n  ```\n\n函数声明的结构是 **func字段（形参1 类型， 形参2 类型）（输出类型）{函数语句}**\n我们现在调用它\n\n  ```go\n  func main(){\n      var num1,num2 int = 2,3\n      num3:= add(num1,num2)\n      fmt.Println(num3)\n  }\n  ```\n#### 方法\n\n除了作为函数使用，在面向对象编程中我们也可以将其作为方法封装，示例如下：\n\n  ```go\n  type Queue []int // 1. 定义一个类型\n  func main() {\n\n      var queue Queue //3. 创建Queue实例\n      queue.Push(1)   //4. 调用Push方法\n      fmt.Println(queue)\n\n  }\n\n  func (queue *Queue)Push(num int){ //2. 为类型Queue声明一个方法\n      *queue = append(*queue,num)\n  }\n  ```\n### 接口\n在Go语言中，一个接口类型代表一系列行为的集合，声明过程如下:\n\n  ```go\n  type People interface{\n      Grow()\n      Say()\n  }\n  ```\n\n\n我们先来看一个例子\n\n  ```go\n  package main\n  import \"fmt\"\n  //Human\n  type Human struct{\n      Age int\n  }\n  func (human *Human)Grow(){\n      human.Age++\n  }\n  func (human Human)Say(){\n      fmt.Println(\"Hello, I am a human\")\n  }\n  //Animal\n  type Animal struct{\n      Age int\n  }\n  func (animal *Animal)Grow(){\n      animal.Age++\n  }\n  //Robot\n  type Robot struct{\n  }\n  func (robot Robot)Say(){\n      fmt.Println(\"Hello, I am a robot\")\n  }\n  //Define Interfaces\n  type Talk interface{\n      Say()\n  }\n  type AgeGrow interface{\n      Grow()\n  }\n  ```\n\n在这个例子中我们定义了三个类：Human,Animal, Robot, 其中Human,Animal具有年龄增长的方法Grow(),Human，Robot具有方法Say(),输出一个字符串。接下来我们分别把两个不同类型的Grow方法和Say方法放在AgeGrow和Talk接口里面，下面是调用的示例：\n\n  ```go\n  func main() {\n      //1\n      var talk Talk\n      talk = new(Human)\n      talk.Say()\n      talk = new(Robot)\n      talk.Say()\n      //2\n      var (human =Human{Age:21}\n           animal =Animal{Age:8})\n      fmt.Printf(\"The current age of human and animal are %d and %d\\n\",human.Age,animal.Age)\n      AgeGrow.Grow(&human)\n      AgeGrow.Grow(&animal)\n      fmt.Printf(\"The current age of human and animal are %d and %d\\n\",human.Age,animal.Age)\n  }\n  ```\n输出结果为\n\n    Hello, I am a human\n    Hello, I am a robot\n    The current age of human and animal are 21 and 8\n    The current age of human and animal are 22 and 9\n\n#### **空接口**\n空接口即为不包含任何方法声明的接口类型，用**interface{}**表示。也正因为空接口的定义，Go语言中包含预定义的任何数据类型都可以被看作是接口的实现\n\n  ```go\n  var everything [4]interface{}\n  everything[0] = 1\n  everything[1] = []int{1,2,3}\n  everything[2] = \"is a string\"\n  fmt.Println(everything)\n  ```\n\n输出结果\n\n    [1 [1 2 3] is a string]\n\n#### 断言\n\n在类型字面量后面加一个**.(类型)**即可实现断言，作用类似于Python的isinstance\n\n  ```go\n  num,ok:=everything[0].(int)\n  fmt.Println(num,ok)\n  //返回结果\n  1 true\n  ```\n第一行进行了两项操作，即将everything[0]的值1赋给num，并断言类型为int，断言结果返回给ok,为true\n\n### 指针\n\n#### 取址符与取值符\n\n取址符为“&”，表示获取一个变量的内存地址。取值符为“\\*”，表示获得该内存地址所储存的值。下面是一个简单的例子\n\n\n\n  ```go\n  var num int = 5\n  ptr := &num\n  fmt.Println(num,ptr,*ptr)\n  num =6\n  fmt.Println(num,ptr,*ptr)\n  //返回结果\n  //5 0xc000092000 5\n  //6 0xc000092000 6\n  ```\n上面这段代码首先给变量num赋值5,然后创建变量ptr,值为num的内存地址0xc000092000。在println中我们同时也打印了*ptr的变量，得到的值为5，与num相同。之后我们再修改num为6,发现*ptr的值也变成了6.这是为什么呢？原因是我们的ptr储存了num的内存地址，*ptr取出来的值就是num的值。当num重新赋值时，内存地址没有改变，所以*ptr也相应变成了6。我们可以说ptr是指向num的指针。\n\n#### 值拷贝与指针拷贝\n\n\n  ```go\n  var a int = 5\n  b := a\n  c:= &a\n  a++\n  fmt.Println(a,b,*c)\n  ```\n\n最后的返回结果是 6 5 6， a和c同时添加了1，而b没有。这是因为b变量是存储在另一个内存地址并被赋值a,我们称之为值拷贝，即将a的值复制给另一个变量b，相互独立。而c作为指针指向a,当a改变时，c也相应改变，我们称之为指针拷贝。\n\n\n## 流程控制\n\n### if条件语句\nif语句根据条件表达式来决定执行分支语句,当a大于5时+1，否则-1\n\n  ```go\n  var a int = 5\n  if a<10{\n      a++\n  }else{\n      a--\n  }\n  ```\n\n我们也可以省略else，因为如果a<10，不成立，通过else执行-1或者直接-1是一样的\n\n  ```go\n  if a<10{\n      a++\n  }\n  a--\n  ```\n此外，它也支持串联：\n\n  ```go\n  if a<10{\n      a++\n  }else if a== 10{\n      a = a + 2\n  }else{\n      a--\n  }\n  ```\n表达式是自上而下的， 只有第一个满足的条件会被执行\n\n### Switch\n在选项变多的时候，使用if会比较繁琐，这时候我们可以使用switch:\n\n  ```go\n  var content string = \"A\"\n  switch content{\n  case \"A\":\n  \tfmt.Println(\"The letter is A\")\n  case \"B\":\n  \tfmt.Println(\"The letter is B\")\n        fallthrough\n  case \"C\":\n  \tfmt.Println(\"The letter is C\")\n\n  default:\n  \tfmt.Println(\"Where is your letter\")\n  }\n  ```\n上面这段代码演示了几点：\n\n- 当content为A或者C时，直接执行\"The letter is A/C\",然后跳出判断\n- 在case B中，我们使用了fallthrough, 意味着执行完case \"B\"会进入到下一个case \"C\"中执行\n- 当content不是A，B，C时，则执行default默认操作\n\n### For循环\n\n#### 基础用法\n\n相比其他语言，Go中有一个更加广义灵活的for语句。for语句包含了一条for子句，字句可以包含初始化子句，条件子句和后置子句，如下：\n  ```go\n  var i,num int\n  for i=1,i<100;i++{\n      num++\n  }\n  ```\n初始化子句和条件子句可以被省略：\n  ```go\n  //省略初始化子句\n  var i,num int = 0,0\n  for i<100,i++{\n      num++\n  }\n  //省略后置子句\n  for i:=0,i<100{\n      i++\n  }\n  ```\n由于Go语言没有While,想要实现while true这样的无限循环我们可以直接使用for:\n  ```go\n  i:=0\n  for{\n      i++\n  }\n  ```\n\n#### range子句\n\n对于字符串，切片，字典以及通道类型的值我们都可以使用range子句来迭代其中的每一个值。当使用range子句时，会返回两个值:\n- string:返回index值 和 字符\n- 切片: 返回index值 和切片元素\n- 字典：返回key 和 value\n- 注意这里通道只返回通道元素值\n\n\n示例：\n\n  ```go\n  //切片\n  ints :=[]int{1,2,3,4,5}\n  for i,v := range ints{\n      fmt.Println(i,v)\n  }\n\n  //字典\n  var dict = map[string]int{\"Golang\":1,\"Python\":0,\"C\":2}\n  for k,v := range dict{\n      fmt.Println(k,v)\n  }\n\n  //通道\n  for data := range ch{\n\n  }\n  ```\n\n#### 注意\n\n现在问题来了，当我们使用for时只使用一个变量，如下\n\n  ```go\n  //切片\n  ints :=[]int{1,3，5，7，9}\n  for v := range ints{\n      fmt.Println(v)\n  }\n  ```\n\n返回的结果时0 1 2 3 4，而不是1 3 5 7 9。这是因为返回的是index而并不是切片元素。如果需要返回元素就需要\n\n\n    for i,v := range ints{\n\n但是我们不使用i这个index,而go语法规定不允许未使用的变量存在，那我们怎么操作呢，我们前面出现过的\"\\_\"可以解决这个问题，即占用一个位置但无法有效调用。\n\n  ```go\n  ints :=[]int{1,3，5，7，9}\n  for _,v := range ints{\n      fmt.Println(v)\n  }\n  ```\n","slug":"go-intro","published":1,"updated":"2019-06-07T14:27:32.000Z","_id":"cjwlypz4y0000xho9t2io6dp0","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>之前几年一直在使用Python，后来一个偶然的机会让我对Go有了一些了解。诞生在本世纪的Go语言算是编程语言中的新青年了，相比C和Java，有着近似Python的简洁语句，相比Python，又有着编译型语言的速度。尤其是其为并发而生的特性极大地提升了计算能力。</p>\n<h2 id=\"基本规则\"><a href=\"#基本规则\" class=\"headerlink\" title=\"基本规则\"></a>基本规则</h2>  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main <span class=\"comment\">//作为可执行程序</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123; <span class=\"comment\">//主函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> mm = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;&#125;</span><br><span class=\"line\">    mm[<span class=\"string\">\"Python\"</span>] = <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"built_in\">delete</span>(mm,<span class=\"string\">\"Python\"</span>)</span><br><span class=\"line\">    fmt.Println(mm)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h2><h3 id=\"声明变量\"><a href=\"#声明变量\" class=\"headerlink\" title=\"声明变量\"></a>声明变量</h3>  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">//普通赋值</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> num1 <span class=\"keyword\">int</span> = <span class=\"number\">1</span></span><br><span class=\"line\"> <span class=\"comment\">//平行赋值</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> num2,num3 <span class=\"keyword\">int</span> = <span class=\"number\">2</span>,<span class=\"number\">3</span></span><br><span class=\"line\"> <span class=\"comment\">//多行赋值</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> (num4 <span class=\"keyword\">int</span>=<span class=\"number\">4</span></span><br><span class=\"line\">     num5 <span class=\"keyword\">int</span> =<span class=\"number\">5</span></span><br><span class=\"line\">     unum6 <span class=\"keyword\">uint64</span> = <span class=\"number\">65535</span></span><br><span class=\"line\">)</span><br><span class=\"line\"> <span class=\"comment\">//简单赋值</span></span><br><span class=\"line\"> num7 := <span class=\"number\">7</span></span><br><span class=\"line\"> <span class=\"comment\">//打印变量</span></span><br><span class=\"line\"> fmt.Println(num1,num2,num3,num4,num5,unum6,num7)</span><br></pre></td></tr></table></figure>\n<h3 id=\"常用类型\"><a href=\"#常用类型\" class=\"headerlink\" title=\"常用类型\"></a>常用类型</h3><h4 id=\"整数\"><a href=\"#整数\" class=\"headerlink\" title=\"整数\"></a>整数</h4><p>一共有10个，又分为两类，有符号int与无符号的uint，以及int8,int16,int32,int64,uint8等</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num1 <span class=\"keyword\">int</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> unum1 <span class=\"keyword\">uint</span> = <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"浮点数\"><a href=\"#浮点数\" class=\"headerlink\" title=\"浮点数\"></a>浮点数</h4><p>浮点数类型分为两个，即float32和float64.表达方法可以省掉不用的0，或者使用科学计数法</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> float1 <span class=\"keyword\">float32</span>= <span class=\"number\">7.0</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> float2 <span class=\"keyword\">float64</span>= <span class=\"number\">.032</span></span><br><span class=\"line\">float3:= <span class=\"number\">3.7E-2</span></span><br><span class=\"line\">float4:= <span class=\"number\">60</span></span><br><span class=\"line\">fmt.Println(float1,float2,float3,float4)</span><br></pre></td></tr></table></figure>\n<h4 id=\"复数\"><a href=\"#复数\" class=\"headerlink\" title=\"复数\"></a>复数</h4><p>复数同浮点数类似，分为complex32和complex64</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cplx = <span class=\"number\">3.7E+1</span> +<span class=\"number\">5.98E-2i</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Rune和Byte\"><a href=\"#Rune和Byte\" class=\"headerlink\" title=\"Rune和Byte\"></a>Rune和Byte</h4><p>Rune和byte属于别名类型，分别对应int32和uint8。rune可以表达一个Unicode字符</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> char1 <span class=\"keyword\">rune</span> = <span class=\"string\">'赞'</span></span><br><span class=\"line\">char2:= <span class=\"string\">'赞'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"字符串类型\"><a href=\"#字符串类型\" class=\"headerlink\" title=\"字符串类型\"></a>字符串类型</h4><p>一个字符串可以表达一个字符序列，表示方法如下。因为转义符”\\”的存在，分为解释型表示法和原生表示法，其中原生表示法忽略转义符，所见即所得。</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//解释型表示法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str1 <span class=\"keyword\">string</span> = <span class=\"string\">\"这是一条字符串\\\\\"</span></span><br><span class=\"line\"><span class=\"comment\">//原生表示法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 <span class=\"keyword\">string</span> = <span class=\"string\">`这是一条字符串\\\\`</span></span><br><span class=\"line\">fmt.Println(str1,str2)</span><br><span class=\"line\"><span class=\"comment\">//输出结果</span></span><br><span class=\"line\">这是一条字符串\\ 这是一条字符串\\\\</span><br></pre></td></tr></table></figure>\n<h2 id=\"高级数据类型\"><a href=\"#高级数据类型\" class=\"headerlink\" title=\"高级数据类型\"></a>高级数据类型</h2><h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><pre><code>一个数组就是一个可以容纳多个相同类型元素的容器，这个容器的长度是固定的，在初始化中需要声明。\n</code></pre><h4 id=\"初始化与类型声明\"><a href=\"#初始化与类型声明\" class=\"headerlink\" title=\"初始化与类型声明\"></a>初始化与类型声明</h4>  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明长度</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"number\">3</span>]<span class=\"keyword\">int</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//初始化数组内容</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array2 = [<span class=\"number\">3</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">#不声明长度初始化</span><br><span class=\"line\"><span class=\"keyword\">var</span> array3 = [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以直接声明一个数组类型</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyArray [<span class=\"number\">5</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array4 Myarray</span><br></pre></td></tr></table></figure>\n<h4 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h4><p>索引方法与C和Python相同：</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array4[<span class=\"number\">0</span>]  <span class=\"comment\">//array4第一个元素</span></span><br><span class=\"line\">array4[<span class=\"number\">1</span>]  <span class=\"comment\">//array4第二个元素</span></span><br><span class=\"line\">array4[<span class=\"number\">2</span>]  <span class=\"comment\">//array4第三个元素</span></span><br><span class=\"line\">array[<span class=\"number\">0</span>] = <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"切片\"><a href=\"#切片\" class=\"headerlink\" title=\"切片\"></a>切片</h3><p>切片与数组一样，也是可以容纳多个相同类型元素的容器。不同的是，无法通过切片类型来得知切片长度。</p>\n<h4 id=\"初始化与类型声明-1\"><a href=\"#初始化与类型声明-1\" class=\"headerlink\" title=\"初始化与类型声明\"></a>初始化与类型声明</h4>  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//类型声明</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyIntSlice []<span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyStrSlice []<span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化与数组类似，但无需声明长度</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> slice1 = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者直接从数组取出</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array3 = [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> slice2 = array3[<span class=\"number\">1</span>:<span class=\"number\">4</span>] <span class=\"comment\">//返回[3,5,6]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//声明空值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> slice3 []<span class=\"keyword\">int</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"操作方法\"><a href=\"#操作方法\" class=\"headerlink\" title=\"操作方法\"></a>操作方法</h4>  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//索引</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> slice4 = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">13</span>,<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">slice5 = slice[<span class=\"number\">1</span>:<span class=\"number\">4</span>]  <span class=\"comment\">//[3,5,7]</span></span><br><span class=\"line\"><span class=\"comment\">//添加append</span></span><br><span class=\"line\">slice5 = <span class=\"built_in\">append</span>(slice4,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>) <span class=\"comment\">//slice5 [3,5,7,1,2,1]</span></span><br><span class=\"line\"><span class=\"comment\">//切片复制（地址复制）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a []<span class=\"keyword\">int</span></span><br><span class=\"line\">a = <span class=\"built_in\">append</span>(a,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\">c := a</span><br><span class=\"line\">c[<span class=\"number\">0</span>]=<span class=\"number\">1</span></span><br><span class=\"line\">fmt.Println(a,c)</span><br><span class=\"line\"><span class=\"comment\">//值复制，copy函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a []<span class=\"keyword\">int</span></span><br><span class=\"line\">a = <span class=\"built_in\">append</span>(a,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\">c:=[]<span class=\"keyword\">int</span>&#123;<span class=\"number\">0</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">copy</span>(a,c)</span><br><span class=\"line\">fmt.Println(a,c) <span class=\"comment\">//[0 4 5] [0]</span></span><br><span class=\"line\">b:=[]<span class=\"keyword\">int</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">copy</span>(a,b)</span><br><span class=\"line\">fmt.Println(a,b) <span class=\"comment\">//[0 4 5] []</span></span><br><span class=\"line\">d:= []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">copy</span>(a,d)</span><br><span class=\"line\">fmt.Println(a,d)<span class=\"comment\">// [1 2 3] [1 2 3 4]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h3><p>字典（Dict）与Python类似，是哈希表的实现，用于键值存储的无序集合</p>\n<p>声明变量</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dict = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;<span class=\"string\">\"Golang\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"Python\"</span>:<span class=\"number\">0</span>,<span class=\"string\">\"C\"</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">dict2 := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>添加</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict[<span class=\"string\">\"Java\"</span>] = <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<p>索引</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b := dict[<span class=\"string\">\"Python\"</span>] <span class=\"comment\">//b = 0</span></span><br></pre></td></tr></table></figure>\n<p>删除</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">delete</span>(dict,<span class=\"string\">\"Java\"</span>)</span><br></pre></td></tr></table></figure>\n<p>注意当字典为空时或不存在该键值时，我们使用索引会返回nil,因此我们无法判断是该键值对应nil还是不存在该键值。这时我们可采用另一种写法</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e,ok := dict[<span class=\"string\">\"Lua\"</span>] <span class=\"comment\">// ok为False时表明不存在该键</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"通道\"><a href=\"#通道\" class=\"headerlink\" title=\"通道\"></a>通道</h3><p>通道是Go中非常独特的数据结构，它的设计目的是为了在不同的goroutine中传递数据，并且是并发安全的。前面的数据类型都不是并发安全的，需要注意。</p>\n<h4 id=\"初始化与赋值\"><a href=\"#初始化与赋值\" class=\"headerlink\" title=\"初始化与赋值\"></a>初始化与赋值</h4><p>与其他数据类型不同的是，我们无法通过var来赋值，而是采用内建函数make</p>\n<pre><code>chStr := make(chan string,5)\n</code></pre><p>其中第一个值是声明所存储数据类型，第二个值为声明长度,下面我们来将一个字符串传输到通道中</p>\n<pre><code>chStr &lt;- &quot;Value1&quot;\n</code></pre><p>如果我们想接受字符串</p>\n<pre><code>str_a := &lt;- chStr\n</code></pre><p>同字典相同，当我们检测通道状态及消除nil歧议，可采用</p>\n<pre><code>str_b,ok := &lt;- chStr\n</code></pre><p>最后关闭通道</p>\n<pre><code>close(chStr)\n</code></pre><h4 id=\"缓冲与非缓冲通道\"><a href=\"#缓冲与非缓冲通道\" class=\"headerlink\" title=\"缓冲与非缓冲通道\"></a>缓冲与非缓冲通道</h4>  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch1 := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>,<span class=\"number\">2</span>) <span class=\"comment\">//缓冲通道，可容纳两个值</span></span><br><span class=\"line\">ch2 := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>,<span class=\"number\">0</span>) <span class=\"comment\">//非缓冲通道</span></span><br></pre></td></tr></table></figure>\n<p>与缓冲通道不同的是，非缓冲通道在被发送数据后会立刻阻塞，直到数据被接收。同样，当缓冲通道接受数据长度大于缓冲区，也会阻塞</p>\n<h4 id=\"单向与双向通道\"><a href=\"#单向与双向通道\" class=\"headerlink\" title=\"单向与双向通道\"></a>单向与双向通道</h4><p>一般来讲通道都是双向的，但是为了避免混淆我们可以将其声明为单向通道,声明方法如下</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Sender <span class=\"keyword\">chan</span>&lt;- <span class=\"keyword\">string</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Receiver &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ch = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> sender Sender = ch</span><br><span class=\"line\"><span class=\"keyword\">var</span> recver Receiver = ch</span><br><span class=\"line\"></span><br><span class=\"line\">str := <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">sender &lt;- str</span><br><span class=\"line\">str_recv := &lt;-recver</span><br><span class=\"line\">fmt.Println(str_recv)</span><br></pre></td></tr></table></figure>\n<h2 id=\"进阶方法\"><a href=\"#进阶方法\" class=\"headerlink\" title=\"进阶方法\"></a>进阶方法</h2><h3 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h3><p>学过C的话应该对结构体不陌生,在Go中，结构体更像Python的Class,它可以封装属性和操作（操作我们会在函数与方法中提到）</p>\n<p>声明一个结构体, 一本书具有三个属性，名字，作者和页数</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Book <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Name <span class=\"keyword\">string</span></span><br><span class=\"line\">    Author <span class=\"keyword\">string</span></span><br><span class=\"line\">    Pages <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来创建一个实例</p>\n<pre><code>book1 := Book{Name:&quot;You Name it&quot;,Author:&quot;Adam&quot;,Pages:541}\n</code></pre><p> 如果书写顺序与声明顺序一致，可省略字段名称：如果有零值则不可省略</p>\n<pre><code>book1 := Book{&quot;You Name it&quot;,&quot;Adam&quot;,541}\n</code></pre><h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p>前面提到了各种数据类型，接下来是函数。在Go语言中，函数是一等类型，即和Python一样可以作为值来传递，同时Go的函数可以返回多个结果。</p>\n<h4 id=\"函数声明及调用\"><a href=\"#函数声明及调用\" class=\"headerlink\" title=\"函数声明及调用\"></a>函数声明及调用</h4><p>我们下面来声明一个简单的函数</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">(num1 <span class=\"keyword\">int</span>,num2 <span class=\"keyword\">int</span>)</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">    num3 := num1 + num2</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num3</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>函数声明的结构是 <strong>func字段（形参1 类型， 形参2 类型）（输出类型）{函数语句}</strong><br>我们现在调用它</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num1,num2 <span class=\"keyword\">int</span> = <span class=\"number\">2</span>,<span class=\"number\">3</span></span><br><span class=\"line\">    num3:= add(num1,num2)</span><br><span class=\"line\">    fmt.Println(num3)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><p>除了作为函数使用，在面向对象编程中我们也可以将其作为方法封装，示例如下：</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Queue []<span class=\"keyword\">int</span> <span class=\"comment\">// 1. 定义一个类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> queue Queue <span class=\"comment\">//3. 创建Queue实例</span></span><br><span class=\"line\">    queue.Push(<span class=\"number\">1</span>)   <span class=\"comment\">//4. 调用Push方法</span></span><br><span class=\"line\">    fmt.Println(queue)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(queue *Queue)</span><span class=\"title\">Push</span><span class=\"params\">(num <span class=\"keyword\">int</span>)</span></span>&#123; <span class=\"comment\">//2. 为类型Queue声明一个方法</span></span><br><span class=\"line\">    *queue = <span class=\"built_in\">append</span>(*queue,num)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><p>在Go语言中，一个接口类型代表一系列行为的集合，声明过程如下:</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> People <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Grow()</span><br><span class=\"line\">    Say()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们先来看一个例子</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"comment\">//Human</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Human <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Age <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(human *Human)</span><span class=\"title\">Grow</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    human.Age++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(human Human)</span><span class=\"title\">Say</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"Hello, I am a human\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Animal</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Animal <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Age <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(animal *Animal)</span><span class=\"title\">Grow</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    animal.Age++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Robot</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Robot <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(robot Robot)</span><span class=\"title\">Say</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"Hello, I am a robot\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Define Interfaces</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Talk <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Say()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> AgeGrow <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Grow()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个例子中我们定义了三个类：Human,Animal, Robot, 其中Human,Animal具有年龄增长的方法Grow(),Human，Robot具有方法Say(),输出一个字符串。接下来我们分别把两个不同类型的Grow方法和Say方法放在AgeGrow和Talk接口里面，下面是调用的示例：</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//1</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> talk Talk</span><br><span class=\"line\">    talk = <span class=\"built_in\">new</span>(Human)</span><br><span class=\"line\">    talk.Say()</span><br><span class=\"line\">    talk = <span class=\"built_in\">new</span>(Robot)</span><br><span class=\"line\">    talk.Say()</span><br><span class=\"line\">    <span class=\"comment\">//2</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> (human =Human&#123;Age:<span class=\"number\">21</span>&#125;</span><br><span class=\"line\">         animal =Animal&#123;Age:<span class=\"number\">8</span>&#125;)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"The current age of human and animal are %d and %d\\n\"</span>,human.Age,animal.Age)</span><br><span class=\"line\">    AgeGrow.Grow(&amp;human)</span><br><span class=\"line\">    AgeGrow.Grow(&amp;animal)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"The current age of human and animal are %d and %d\\n\"</span>,human.Age,animal.Age)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为</p>\n<pre><code>Hello, I am a human\nHello, I am a robot\nThe current age of human and animal are 21 and 8\nThe current age of human and animal are 22 and 9\n</code></pre><h4 id=\"空接口\"><a href=\"#空接口\" class=\"headerlink\" title=\"空接口\"></a><strong>空接口</strong></h4><p>空接口即为不包含任何方法声明的接口类型，用<strong>interface{}</strong>表示。也正因为空接口的定义，Go语言中包含预定义的任何数据类型都可以被看作是接口的实现</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> everything [<span class=\"number\">4</span>]<span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">everything[<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">everything[<span class=\"number\">1</span>] = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">everything[<span class=\"number\">2</span>] = <span class=\"string\">\"is a string\"</span></span><br><span class=\"line\">fmt.Println(everything)</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<pre><code>[1 [1 2 3] is a string]\n</code></pre><h4 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h4><p>在类型字面量后面加一个<strong>.(类型)</strong>即可实现断言，作用类似于Python的isinstance</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num,ok:=everything[<span class=\"number\">0</span>].(<span class=\"keyword\">int</span>)</span><br><span class=\"line\">fmt.Println(num,ok)</span><br><span class=\"line\"><span class=\"comment\">//返回结果</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>第一行进行了两项操作，即将everything[0]的值1赋给num，并断言类型为int，断言结果返回给ok,为true</p>\n<h3 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h3><h4 id=\"取址符与取值符\"><a href=\"#取址符与取值符\" class=\"headerlink\" title=\"取址符与取值符\"></a>取址符与取值符</h4><p>取址符为“&amp;”，表示获取一个变量的内存地址。取值符为“*”，表示获得该内存地址所储存的值。下面是一个简单的例子</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num <span class=\"keyword\">int</span> = <span class=\"number\">5</span></span><br><span class=\"line\">ptr := &amp;num</span><br><span class=\"line\">fmt.Println(num,ptr,*ptr)</span><br><span class=\"line\">num =<span class=\"number\">6</span></span><br><span class=\"line\">fmt.Println(num,ptr,*ptr)</span><br><span class=\"line\"><span class=\"comment\">//返回结果</span></span><br><span class=\"line\"><span class=\"comment\">//5 0xc000092000 5</span></span><br><span class=\"line\"><span class=\"comment\">//6 0xc000092000 6</span></span><br></pre></td></tr></table></figure>\n<p>上面这段代码首先给变量num赋值5,然后创建变量ptr,值为num的内存地址0xc000092000。在println中我们同时也打印了<em>ptr的变量，得到的值为5，与num相同。之后我们再修改num为6,发现</em>ptr的值也变成了6.这是为什么呢？原因是我们的ptr储存了num的内存地址，<em>ptr取出来的值就是num的值。当num重新赋值时，内存地址没有改变，所以</em>ptr也相应变成了6。我们可以说ptr是指向num的指针。</p>\n<h4 id=\"值拷贝与指针拷贝\"><a href=\"#值拷贝与指针拷贝\" class=\"headerlink\" title=\"值拷贝与指针拷贝\"></a>值拷贝与指针拷贝</h4>  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"keyword\">int</span> = <span class=\"number\">5</span></span><br><span class=\"line\">b := a</span><br><span class=\"line\">c:= &amp;a</span><br><span class=\"line\">a++</span><br><span class=\"line\">fmt.Println(a,b,*c)</span><br></pre></td></tr></table></figure>\n<p>最后的返回结果是 6 5 6， a和c同时添加了1，而b没有。这是因为b变量是存储在另一个内存地址并被赋值a,我们称之为值拷贝，即将a的值复制给另一个变量b，相互独立。而c作为指针指向a,当a改变时，c也相应改变，我们称之为指针拷贝。</p>\n<h2 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h2><h3 id=\"if条件语句\"><a href=\"#if条件语句\" class=\"headerlink\" title=\"if条件语句\"></a>if条件语句</h3><p>if语句根据条件表达式来决定执行分支语句,当a大于5时+1，否则-1</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"keyword\">int</span> = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> a&lt;<span class=\"number\">10</span>&#123;</span><br><span class=\"line\">    a++</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    a--</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们也可以省略else，因为如果a&lt;10，不成立，通过else执行-1或者直接-1是一样的</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> a&lt;<span class=\"number\">10</span>&#123;</span><br><span class=\"line\">    a++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a--</span><br></pre></td></tr></table></figure>\n<p>此外，它也支持串联：</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> a&lt;<span class=\"number\">10</span>&#123;</span><br><span class=\"line\">    a++</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> a== <span class=\"number\">10</span>&#123;</span><br><span class=\"line\">    a = a + <span class=\"number\">2</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    a--</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>表达式是自上而下的， 只有第一个满足的条件会被执行</p>\n<h3 id=\"Switch\"><a href=\"#Switch\" class=\"headerlink\" title=\"Switch\"></a>Switch</h3><p>在选项变多的时候，使用if会比较繁琐，这时候我们可以使用switch:</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> content <span class=\"keyword\">string</span> = <span class=\"string\">\"A\"</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> content&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"A\"</span>:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"The letter is A\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"B\"</span>:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"The letter is B\"</span>)</span><br><span class=\"line\">      <span class=\"keyword\">fallthrough</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"C\"</span>:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"The letter is C\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Where is your letter\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这段代码演示了几点：</p>\n<ul>\n<li>当content为A或者C时，直接执行”The letter is A/C”,然后跳出判断</li>\n<li>在case B中，我们使用了fallthrough, 意味着执行完case “B”会进入到下一个case “C”中执行</li>\n<li>当content不是A，B，C时，则执行default默认操作</li>\n</ul>\n<h3 id=\"For循环\"><a href=\"#For循环\" class=\"headerlink\" title=\"For循环\"></a>For循环</h3><h4 id=\"基础用法\"><a href=\"#基础用法\" class=\"headerlink\" title=\"基础用法\"></a>基础用法</h4><p>相比其他语言，Go中有一个更加广义灵活的for语句。for语句包含了一条for子句，字句可以包含初始化子句，条件子句和后置子句，如下：<br>  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i,num <span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1</span>,i&lt;<span class=\"number\">100</span>;i++&#123;</span><br><span class=\"line\">    num++</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>初始化子句和条件子句可以被省略：<br>  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//省略初始化子句</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i,num <span class=\"keyword\">int</span> = <span class=\"number\">0</span>,<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i&lt;<span class=\"number\">100</span>,i++&#123;</span><br><span class=\"line\">    num++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//省略后置子句</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>,i&lt;<span class=\"number\">100</span>&#123;</span><br><span class=\"line\">    i++</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>由于Go语言没有While,想要实现while true这样的无限循环我们可以直接使用for:<br>  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i:=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>&#123;</span><br><span class=\"line\">    i++</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"range子句\"><a href=\"#range子句\" class=\"headerlink\" title=\"range子句\"></a>range子句</h4><p>对于字符串，切片，字典以及通道类型的值我们都可以使用range子句来迭代其中的每一个值。当使用range子句时，会返回两个值:</p>\n<ul>\n<li>string:返回index值 和 字符</li>\n<li>切片: 返回index值 和切片元素</li>\n<li>字典：返回key 和 value</li>\n<li>注意这里通道只返回通道元素值</li>\n</ul>\n<p>示例：</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//切片</span></span><br><span class=\"line\">ints :=[]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> i,v := <span class=\"keyword\">range</span> ints&#123;</span><br><span class=\"line\">    fmt.Println(i,v)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//字典</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dict = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;<span class=\"string\">\"Golang\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"Python\"</span>:<span class=\"number\">0</span>,<span class=\"string\">\"C\"</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> k,v := <span class=\"keyword\">range</span> dict&#123;</span><br><span class=\"line\">    fmt.Println(k,v)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通道</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> data := <span class=\"keyword\">range</span> ch&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><p>现在问题来了，当我们使用for时只使用一个变量，如下</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//切片</span></span><br><span class=\"line\">ints :=[]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>，<span class=\"number\">5</span>，<span class=\"number\">7</span>，<span class=\"number\">9</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> v := <span class=\"keyword\">range</span> ints&#123;</span><br><span class=\"line\">    fmt.Println(v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>返回的结果时0 1 2 3 4，而不是1 3 5 7 9。这是因为返回的是index而并不是切片元素。如果需要返回元素就需要</p>\n<pre><code>for i,v := range ints{\n</code></pre><p>但是我们不使用i这个index,而go语法规定不允许未使用的变量存在，那我们怎么操作呢，我们前面出现过的”_“可以解决这个问题，即占用一个位置但无法有效调用。</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ints :=[]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>，<span class=\"number\">5</span>，<span class=\"number\">7</span>，<span class=\"number\">9</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> _,v := <span class=\"keyword\">range</span> ints&#123;</span><br><span class=\"line\">    fmt.Println(v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>之前几年一直在使用Python，后来一个偶然的机会让我对Go有了一些了解。诞生在本世纪的Go语言算是编程语言中的新青年了，相比C和Java，有着近似Python的简洁语句，相比Python，又有着编译型语言的速度。尤其是其为并发而生的特性极大地提升了计算能力。</p>\n<h2 id=\"基本规则\"><a href=\"#基本规则\" class=\"headerlink\" title=\"基本规则\"></a>基本规则</h2>  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main <span class=\"comment\">//作为可执行程序</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123; <span class=\"comment\">//主函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> mm = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;&#125;</span><br><span class=\"line\">    mm[<span class=\"string\">\"Python\"</span>] = <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"built_in\">delete</span>(mm,<span class=\"string\">\"Python\"</span>)</span><br><span class=\"line\">    fmt.Println(mm)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h2><h3 id=\"声明变量\"><a href=\"#声明变量\" class=\"headerlink\" title=\"声明变量\"></a>声明变量</h3>  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">//普通赋值</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> num1 <span class=\"keyword\">int</span> = <span class=\"number\">1</span></span><br><span class=\"line\"> <span class=\"comment\">//平行赋值</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> num2,num3 <span class=\"keyword\">int</span> = <span class=\"number\">2</span>,<span class=\"number\">3</span></span><br><span class=\"line\"> <span class=\"comment\">//多行赋值</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> (num4 <span class=\"keyword\">int</span>=<span class=\"number\">4</span></span><br><span class=\"line\">     num5 <span class=\"keyword\">int</span> =<span class=\"number\">5</span></span><br><span class=\"line\">     unum6 <span class=\"keyword\">uint64</span> = <span class=\"number\">65535</span></span><br><span class=\"line\">)</span><br><span class=\"line\"> <span class=\"comment\">//简单赋值</span></span><br><span class=\"line\"> num7 := <span class=\"number\">7</span></span><br><span class=\"line\"> <span class=\"comment\">//打印变量</span></span><br><span class=\"line\"> fmt.Println(num1,num2,num3,num4,num5,unum6,num7)</span><br></pre></td></tr></table></figure>\n<h3 id=\"常用类型\"><a href=\"#常用类型\" class=\"headerlink\" title=\"常用类型\"></a>常用类型</h3><h4 id=\"整数\"><a href=\"#整数\" class=\"headerlink\" title=\"整数\"></a>整数</h4><p>一共有10个，又分为两类，有符号int与无符号的uint，以及int8,int16,int32,int64,uint8等</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num1 <span class=\"keyword\">int</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> unum1 <span class=\"keyword\">uint</span> = <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"浮点数\"><a href=\"#浮点数\" class=\"headerlink\" title=\"浮点数\"></a>浮点数</h4><p>浮点数类型分为两个，即float32和float64.表达方法可以省掉不用的0，或者使用科学计数法</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> float1 <span class=\"keyword\">float32</span>= <span class=\"number\">7.0</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> float2 <span class=\"keyword\">float64</span>= <span class=\"number\">.032</span></span><br><span class=\"line\">float3:= <span class=\"number\">3.7E-2</span></span><br><span class=\"line\">float4:= <span class=\"number\">60</span></span><br><span class=\"line\">fmt.Println(float1,float2,float3,float4)</span><br></pre></td></tr></table></figure>\n<h4 id=\"复数\"><a href=\"#复数\" class=\"headerlink\" title=\"复数\"></a>复数</h4><p>复数同浮点数类似，分为complex32和complex64</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cplx = <span class=\"number\">3.7E+1</span> +<span class=\"number\">5.98E-2i</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Rune和Byte\"><a href=\"#Rune和Byte\" class=\"headerlink\" title=\"Rune和Byte\"></a>Rune和Byte</h4><p>Rune和byte属于别名类型，分别对应int32和uint8。rune可以表达一个Unicode字符</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> char1 <span class=\"keyword\">rune</span> = <span class=\"string\">'赞'</span></span><br><span class=\"line\">char2:= <span class=\"string\">'赞'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"字符串类型\"><a href=\"#字符串类型\" class=\"headerlink\" title=\"字符串类型\"></a>字符串类型</h4><p>一个字符串可以表达一个字符序列，表示方法如下。因为转义符”\\”的存在，分为解释型表示法和原生表示法，其中原生表示法忽略转义符，所见即所得。</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//解释型表示法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str1 <span class=\"keyword\">string</span> = <span class=\"string\">\"这是一条字符串\\\\\"</span></span><br><span class=\"line\"><span class=\"comment\">//原生表示法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 <span class=\"keyword\">string</span> = <span class=\"string\">`这是一条字符串\\\\`</span></span><br><span class=\"line\">fmt.Println(str1,str2)</span><br><span class=\"line\"><span class=\"comment\">//输出结果</span></span><br><span class=\"line\">这是一条字符串\\ 这是一条字符串\\\\</span><br></pre></td></tr></table></figure>\n<h2 id=\"高级数据类型\"><a href=\"#高级数据类型\" class=\"headerlink\" title=\"高级数据类型\"></a>高级数据类型</h2><h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><pre><code>一个数组就是一个可以容纳多个相同类型元素的容器，这个容器的长度是固定的，在初始化中需要声明。\n</code></pre><h4 id=\"初始化与类型声明\"><a href=\"#初始化与类型声明\" class=\"headerlink\" title=\"初始化与类型声明\"></a>初始化与类型声明</h4>  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明长度</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"number\">3</span>]<span class=\"keyword\">int</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//初始化数组内容</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array2 = [<span class=\"number\">3</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">#不声明长度初始化</span><br><span class=\"line\"><span class=\"keyword\">var</span> array3 = [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以直接声明一个数组类型</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyArray [<span class=\"number\">5</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array4 Myarray</span><br></pre></td></tr></table></figure>\n<h4 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h4><p>索引方法与C和Python相同：</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array4[<span class=\"number\">0</span>]  <span class=\"comment\">//array4第一个元素</span></span><br><span class=\"line\">array4[<span class=\"number\">1</span>]  <span class=\"comment\">//array4第二个元素</span></span><br><span class=\"line\">array4[<span class=\"number\">2</span>]  <span class=\"comment\">//array4第三个元素</span></span><br><span class=\"line\">array[<span class=\"number\">0</span>] = <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"切片\"><a href=\"#切片\" class=\"headerlink\" title=\"切片\"></a>切片</h3><p>切片与数组一样，也是可以容纳多个相同类型元素的容器。不同的是，无法通过切片类型来得知切片长度。</p>\n<h4 id=\"初始化与类型声明-1\"><a href=\"#初始化与类型声明-1\" class=\"headerlink\" title=\"初始化与类型声明\"></a>初始化与类型声明</h4>  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//类型声明</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyIntSlice []<span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyStrSlice []<span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化与数组类似，但无需声明长度</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> slice1 = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者直接从数组取出</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array3 = [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> slice2 = array3[<span class=\"number\">1</span>:<span class=\"number\">4</span>] <span class=\"comment\">//返回[3,5,6]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//声明空值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> slice3 []<span class=\"keyword\">int</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"操作方法\"><a href=\"#操作方法\" class=\"headerlink\" title=\"操作方法\"></a>操作方法</h4>  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//索引</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> slice4 = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">13</span>,<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">slice5 = slice[<span class=\"number\">1</span>:<span class=\"number\">4</span>]  <span class=\"comment\">//[3,5,7]</span></span><br><span class=\"line\"><span class=\"comment\">//添加append</span></span><br><span class=\"line\">slice5 = <span class=\"built_in\">append</span>(slice4,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>) <span class=\"comment\">//slice5 [3,5,7,1,2,1]</span></span><br><span class=\"line\"><span class=\"comment\">//切片复制（地址复制）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a []<span class=\"keyword\">int</span></span><br><span class=\"line\">a = <span class=\"built_in\">append</span>(a,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\">c := a</span><br><span class=\"line\">c[<span class=\"number\">0</span>]=<span class=\"number\">1</span></span><br><span class=\"line\">fmt.Println(a,c)</span><br><span class=\"line\"><span class=\"comment\">//值复制，copy函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a []<span class=\"keyword\">int</span></span><br><span class=\"line\">a = <span class=\"built_in\">append</span>(a,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\">c:=[]<span class=\"keyword\">int</span>&#123;<span class=\"number\">0</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">copy</span>(a,c)</span><br><span class=\"line\">fmt.Println(a,c) <span class=\"comment\">//[0 4 5] [0]</span></span><br><span class=\"line\">b:=[]<span class=\"keyword\">int</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">copy</span>(a,b)</span><br><span class=\"line\">fmt.Println(a,b) <span class=\"comment\">//[0 4 5] []</span></span><br><span class=\"line\">d:= []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">copy</span>(a,d)</span><br><span class=\"line\">fmt.Println(a,d)<span class=\"comment\">// [1 2 3] [1 2 3 4]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h3><p>字典（Dict）与Python类似，是哈希表的实现，用于键值存储的无序集合</p>\n<p>声明变量</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dict = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;<span class=\"string\">\"Golang\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"Python\"</span>:<span class=\"number\">0</span>,<span class=\"string\">\"C\"</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">dict2 := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>添加</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict[<span class=\"string\">\"Java\"</span>] = <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<p>索引</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b := dict[<span class=\"string\">\"Python\"</span>] <span class=\"comment\">//b = 0</span></span><br></pre></td></tr></table></figure>\n<p>删除</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">delete</span>(dict,<span class=\"string\">\"Java\"</span>)</span><br></pre></td></tr></table></figure>\n<p>注意当字典为空时或不存在该键值时，我们使用索引会返回nil,因此我们无法判断是该键值对应nil还是不存在该键值。这时我们可采用另一种写法</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e,ok := dict[<span class=\"string\">\"Lua\"</span>] <span class=\"comment\">// ok为False时表明不存在该键</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"通道\"><a href=\"#通道\" class=\"headerlink\" title=\"通道\"></a>通道</h3><p>通道是Go中非常独特的数据结构，它的设计目的是为了在不同的goroutine中传递数据，并且是并发安全的。前面的数据类型都不是并发安全的，需要注意。</p>\n<h4 id=\"初始化与赋值\"><a href=\"#初始化与赋值\" class=\"headerlink\" title=\"初始化与赋值\"></a>初始化与赋值</h4><p>与其他数据类型不同的是，我们无法通过var来赋值，而是采用内建函数make</p>\n<pre><code>chStr := make(chan string,5)\n</code></pre><p>其中第一个值是声明所存储数据类型，第二个值为声明长度,下面我们来将一个字符串传输到通道中</p>\n<pre><code>chStr &lt;- &quot;Value1&quot;\n</code></pre><p>如果我们想接受字符串</p>\n<pre><code>str_a := &lt;- chStr\n</code></pre><p>同字典相同，当我们检测通道状态及消除nil歧议，可采用</p>\n<pre><code>str_b,ok := &lt;- chStr\n</code></pre><p>最后关闭通道</p>\n<pre><code>close(chStr)\n</code></pre><h4 id=\"缓冲与非缓冲通道\"><a href=\"#缓冲与非缓冲通道\" class=\"headerlink\" title=\"缓冲与非缓冲通道\"></a>缓冲与非缓冲通道</h4>  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch1 := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>,<span class=\"number\">2</span>) <span class=\"comment\">//缓冲通道，可容纳两个值</span></span><br><span class=\"line\">ch2 := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>,<span class=\"number\">0</span>) <span class=\"comment\">//非缓冲通道</span></span><br></pre></td></tr></table></figure>\n<p>与缓冲通道不同的是，非缓冲通道在被发送数据后会立刻阻塞，直到数据被接收。同样，当缓冲通道接受数据长度大于缓冲区，也会阻塞</p>\n<h4 id=\"单向与双向通道\"><a href=\"#单向与双向通道\" class=\"headerlink\" title=\"单向与双向通道\"></a>单向与双向通道</h4><p>一般来讲通道都是双向的，但是为了避免混淆我们可以将其声明为单向通道,声明方法如下</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Sender <span class=\"keyword\">chan</span>&lt;- <span class=\"keyword\">string</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Receiver &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ch = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> sender Sender = ch</span><br><span class=\"line\"><span class=\"keyword\">var</span> recver Receiver = ch</span><br><span class=\"line\"></span><br><span class=\"line\">str := <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">sender &lt;- str</span><br><span class=\"line\">str_recv := &lt;-recver</span><br><span class=\"line\">fmt.Println(str_recv)</span><br></pre></td></tr></table></figure>\n<h2 id=\"进阶方法\"><a href=\"#进阶方法\" class=\"headerlink\" title=\"进阶方法\"></a>进阶方法</h2><h3 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h3><p>学过C的话应该对结构体不陌生,在Go中，结构体更像Python的Class,它可以封装属性和操作（操作我们会在函数与方法中提到）</p>\n<p>声明一个结构体, 一本书具有三个属性，名字，作者和页数</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Book <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Name <span class=\"keyword\">string</span></span><br><span class=\"line\">    Author <span class=\"keyword\">string</span></span><br><span class=\"line\">    Pages <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来创建一个实例</p>\n<pre><code>book1 := Book{Name:&quot;You Name it&quot;,Author:&quot;Adam&quot;,Pages:541}\n</code></pre><p> 如果书写顺序与声明顺序一致，可省略字段名称：如果有零值则不可省略</p>\n<pre><code>book1 := Book{&quot;You Name it&quot;,&quot;Adam&quot;,541}\n</code></pre><h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p>前面提到了各种数据类型，接下来是函数。在Go语言中，函数是一等类型，即和Python一样可以作为值来传递，同时Go的函数可以返回多个结果。</p>\n<h4 id=\"函数声明及调用\"><a href=\"#函数声明及调用\" class=\"headerlink\" title=\"函数声明及调用\"></a>函数声明及调用</h4><p>我们下面来声明一个简单的函数</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">(num1 <span class=\"keyword\">int</span>,num2 <span class=\"keyword\">int</span>)</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">    num3 := num1 + num2</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num3</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>函数声明的结构是 <strong>func字段（形参1 类型， 形参2 类型）（输出类型）{函数语句}</strong><br>我们现在调用它</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num1,num2 <span class=\"keyword\">int</span> = <span class=\"number\">2</span>,<span class=\"number\">3</span></span><br><span class=\"line\">    num3:= add(num1,num2)</span><br><span class=\"line\">    fmt.Println(num3)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><p>除了作为函数使用，在面向对象编程中我们也可以将其作为方法封装，示例如下：</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Queue []<span class=\"keyword\">int</span> <span class=\"comment\">// 1. 定义一个类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> queue Queue <span class=\"comment\">//3. 创建Queue实例</span></span><br><span class=\"line\">    queue.Push(<span class=\"number\">1</span>)   <span class=\"comment\">//4. 调用Push方法</span></span><br><span class=\"line\">    fmt.Println(queue)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(queue *Queue)</span><span class=\"title\">Push</span><span class=\"params\">(num <span class=\"keyword\">int</span>)</span></span>&#123; <span class=\"comment\">//2. 为类型Queue声明一个方法</span></span><br><span class=\"line\">    *queue = <span class=\"built_in\">append</span>(*queue,num)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><p>在Go语言中，一个接口类型代表一系列行为的集合，声明过程如下:</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> People <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Grow()</span><br><span class=\"line\">    Say()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们先来看一个例子</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"comment\">//Human</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Human <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Age <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(human *Human)</span><span class=\"title\">Grow</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    human.Age++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(human Human)</span><span class=\"title\">Say</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"Hello, I am a human\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Animal</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Animal <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Age <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(animal *Animal)</span><span class=\"title\">Grow</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    animal.Age++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Robot</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Robot <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(robot Robot)</span><span class=\"title\">Say</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"Hello, I am a robot\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Define Interfaces</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Talk <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Say()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> AgeGrow <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Grow()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个例子中我们定义了三个类：Human,Animal, Robot, 其中Human,Animal具有年龄增长的方法Grow(),Human，Robot具有方法Say(),输出一个字符串。接下来我们分别把两个不同类型的Grow方法和Say方法放在AgeGrow和Talk接口里面，下面是调用的示例：</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//1</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> talk Talk</span><br><span class=\"line\">    talk = <span class=\"built_in\">new</span>(Human)</span><br><span class=\"line\">    talk.Say()</span><br><span class=\"line\">    talk = <span class=\"built_in\">new</span>(Robot)</span><br><span class=\"line\">    talk.Say()</span><br><span class=\"line\">    <span class=\"comment\">//2</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> (human =Human&#123;Age:<span class=\"number\">21</span>&#125;</span><br><span class=\"line\">         animal =Animal&#123;Age:<span class=\"number\">8</span>&#125;)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"The current age of human and animal are %d and %d\\n\"</span>,human.Age,animal.Age)</span><br><span class=\"line\">    AgeGrow.Grow(&amp;human)</span><br><span class=\"line\">    AgeGrow.Grow(&amp;animal)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"The current age of human and animal are %d and %d\\n\"</span>,human.Age,animal.Age)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为</p>\n<pre><code>Hello, I am a human\nHello, I am a robot\nThe current age of human and animal are 21 and 8\nThe current age of human and animal are 22 and 9\n</code></pre><h4 id=\"空接口\"><a href=\"#空接口\" class=\"headerlink\" title=\"空接口\"></a><strong>空接口</strong></h4><p>空接口即为不包含任何方法声明的接口类型，用<strong>interface{}</strong>表示。也正因为空接口的定义，Go语言中包含预定义的任何数据类型都可以被看作是接口的实现</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> everything [<span class=\"number\">4</span>]<span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">everything[<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">everything[<span class=\"number\">1</span>] = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">everything[<span class=\"number\">2</span>] = <span class=\"string\">\"is a string\"</span></span><br><span class=\"line\">fmt.Println(everything)</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<pre><code>[1 [1 2 3] is a string]\n</code></pre><h4 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h4><p>在类型字面量后面加一个<strong>.(类型)</strong>即可实现断言，作用类似于Python的isinstance</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num,ok:=everything[<span class=\"number\">0</span>].(<span class=\"keyword\">int</span>)</span><br><span class=\"line\">fmt.Println(num,ok)</span><br><span class=\"line\"><span class=\"comment\">//返回结果</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>第一行进行了两项操作，即将everything[0]的值1赋给num，并断言类型为int，断言结果返回给ok,为true</p>\n<h3 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h3><h4 id=\"取址符与取值符\"><a href=\"#取址符与取值符\" class=\"headerlink\" title=\"取址符与取值符\"></a>取址符与取值符</h4><p>取址符为“&amp;”，表示获取一个变量的内存地址。取值符为“*”，表示获得该内存地址所储存的值。下面是一个简单的例子</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num <span class=\"keyword\">int</span> = <span class=\"number\">5</span></span><br><span class=\"line\">ptr := &amp;num</span><br><span class=\"line\">fmt.Println(num,ptr,*ptr)</span><br><span class=\"line\">num =<span class=\"number\">6</span></span><br><span class=\"line\">fmt.Println(num,ptr,*ptr)</span><br><span class=\"line\"><span class=\"comment\">//返回结果</span></span><br><span class=\"line\"><span class=\"comment\">//5 0xc000092000 5</span></span><br><span class=\"line\"><span class=\"comment\">//6 0xc000092000 6</span></span><br></pre></td></tr></table></figure>\n<p>上面这段代码首先给变量num赋值5,然后创建变量ptr,值为num的内存地址0xc000092000。在println中我们同时也打印了<em>ptr的变量，得到的值为5，与num相同。之后我们再修改num为6,发现</em>ptr的值也变成了6.这是为什么呢？原因是我们的ptr储存了num的内存地址，<em>ptr取出来的值就是num的值。当num重新赋值时，内存地址没有改变，所以</em>ptr也相应变成了6。我们可以说ptr是指向num的指针。</p>\n<h4 id=\"值拷贝与指针拷贝\"><a href=\"#值拷贝与指针拷贝\" class=\"headerlink\" title=\"值拷贝与指针拷贝\"></a>值拷贝与指针拷贝</h4>  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"keyword\">int</span> = <span class=\"number\">5</span></span><br><span class=\"line\">b := a</span><br><span class=\"line\">c:= &amp;a</span><br><span class=\"line\">a++</span><br><span class=\"line\">fmt.Println(a,b,*c)</span><br></pre></td></tr></table></figure>\n<p>最后的返回结果是 6 5 6， a和c同时添加了1，而b没有。这是因为b变量是存储在另一个内存地址并被赋值a,我们称之为值拷贝，即将a的值复制给另一个变量b，相互独立。而c作为指针指向a,当a改变时，c也相应改变，我们称之为指针拷贝。</p>\n<h2 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h2><h3 id=\"if条件语句\"><a href=\"#if条件语句\" class=\"headerlink\" title=\"if条件语句\"></a>if条件语句</h3><p>if语句根据条件表达式来决定执行分支语句,当a大于5时+1，否则-1</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"keyword\">int</span> = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> a&lt;<span class=\"number\">10</span>&#123;</span><br><span class=\"line\">    a++</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    a--</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们也可以省略else，因为如果a&lt;10，不成立，通过else执行-1或者直接-1是一样的</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> a&lt;<span class=\"number\">10</span>&#123;</span><br><span class=\"line\">    a++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a--</span><br></pre></td></tr></table></figure>\n<p>此外，它也支持串联：</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> a&lt;<span class=\"number\">10</span>&#123;</span><br><span class=\"line\">    a++</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> a== <span class=\"number\">10</span>&#123;</span><br><span class=\"line\">    a = a + <span class=\"number\">2</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    a--</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>表达式是自上而下的， 只有第一个满足的条件会被执行</p>\n<h3 id=\"Switch\"><a href=\"#Switch\" class=\"headerlink\" title=\"Switch\"></a>Switch</h3><p>在选项变多的时候，使用if会比较繁琐，这时候我们可以使用switch:</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> content <span class=\"keyword\">string</span> = <span class=\"string\">\"A\"</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> content&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"A\"</span>:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"The letter is A\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"B\"</span>:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"The letter is B\"</span>)</span><br><span class=\"line\">      <span class=\"keyword\">fallthrough</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"C\"</span>:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"The letter is C\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Where is your letter\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这段代码演示了几点：</p>\n<ul>\n<li>当content为A或者C时，直接执行”The letter is A/C”,然后跳出判断</li>\n<li>在case B中，我们使用了fallthrough, 意味着执行完case “B”会进入到下一个case “C”中执行</li>\n<li>当content不是A，B，C时，则执行default默认操作</li>\n</ul>\n<h3 id=\"For循环\"><a href=\"#For循环\" class=\"headerlink\" title=\"For循环\"></a>For循环</h3><h4 id=\"基础用法\"><a href=\"#基础用法\" class=\"headerlink\" title=\"基础用法\"></a>基础用法</h4><p>相比其他语言，Go中有一个更加广义灵活的for语句。for语句包含了一条for子句，字句可以包含初始化子句，条件子句和后置子句，如下：<br>  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i,num <span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1</span>,i&lt;<span class=\"number\">100</span>;i++&#123;</span><br><span class=\"line\">    num++</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>初始化子句和条件子句可以被省略：<br>  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//省略初始化子句</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i,num <span class=\"keyword\">int</span> = <span class=\"number\">0</span>,<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i&lt;<span class=\"number\">100</span>,i++&#123;</span><br><span class=\"line\">    num++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//省略后置子句</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>,i&lt;<span class=\"number\">100</span>&#123;</span><br><span class=\"line\">    i++</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>由于Go语言没有While,想要实现while true这样的无限循环我们可以直接使用for:<br>  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i:=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>&#123;</span><br><span class=\"line\">    i++</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"range子句\"><a href=\"#range子句\" class=\"headerlink\" title=\"range子句\"></a>range子句</h4><p>对于字符串，切片，字典以及通道类型的值我们都可以使用range子句来迭代其中的每一个值。当使用range子句时，会返回两个值:</p>\n<ul>\n<li>string:返回index值 和 字符</li>\n<li>切片: 返回index值 和切片元素</li>\n<li>字典：返回key 和 value</li>\n<li>注意这里通道只返回通道元素值</li>\n</ul>\n<p>示例：</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//切片</span></span><br><span class=\"line\">ints :=[]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> i,v := <span class=\"keyword\">range</span> ints&#123;</span><br><span class=\"line\">    fmt.Println(i,v)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//字典</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dict = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;<span class=\"string\">\"Golang\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"Python\"</span>:<span class=\"number\">0</span>,<span class=\"string\">\"C\"</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> k,v := <span class=\"keyword\">range</span> dict&#123;</span><br><span class=\"line\">    fmt.Println(k,v)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通道</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> data := <span class=\"keyword\">range</span> ch&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><p>现在问题来了，当我们使用for时只使用一个变量，如下</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//切片</span></span><br><span class=\"line\">ints :=[]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>，<span class=\"number\">5</span>，<span class=\"number\">7</span>，<span class=\"number\">9</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> v := <span class=\"keyword\">range</span> ints&#123;</span><br><span class=\"line\">    fmt.Println(v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>返回的结果时0 1 2 3 4，而不是1 3 5 7 9。这是因为返回的是index而并不是切片元素。如果需要返回元素就需要</p>\n<pre><code>for i,v := range ints{\n</code></pre><p>但是我们不使用i这个index,而go语法规定不允许未使用的变量存在，那我们怎么操作呢，我们前面出现过的”_“可以解决这个问题，即占用一个位置但无法有效调用。</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ints :=[]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>，<span class=\"number\">5</span>，<span class=\"number\">7</span>，<span class=\"number\">9</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> _,v := <span class=\"keyword\">range</span> ints&#123;</span><br><span class=\"line\">    fmt.Println(v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[{"_id":"source/_posts/echo-control-2048/2048.png","slug":"2048.png","post":"cjiqvlnuj0003glu3c67xwg33","modified":0,"renderable":0},{"_id":"source/_posts/fib-recur/slowfastfib.png","slug":"slowfastfib.png","post":"cjiqvlnul0004glu34lk0l052","modified":0,"renderable":0},{"_id":"source/_posts/crawler-5-bs4index/bstree.png","slug":"bstree.png","post":"cjiqvlnuf0001glu3xu2s7853","modified":0,"renderable":0},{"_id":"source/_posts/crawler-5-bs4index/hook.png","slug":"hook.png","post":"cjiqvlnuf0001glu3xu2s7853","modified":0,"renderable":0},{"_id":"source/_posts/crawler-5-bs4index/newtree.png","slug":"newtree.png","post":"cjiqvlnuf0001glu3xu2s7853","modified":0,"renderable":0},{"_id":"source/_posts/crawler-5-bs4index/stock.png","slug":"stock.png","post":"cjiqvlnuf0001glu3xu2s7853","modified":0,"renderable":0},{"_id":"source/_posts/crawler-4-selenium/search.png","slug":"search.png","post":"cjiqvlnwc000sglu38egnmwlr","modified":0,"renderable":0},{"_id":"source/_posts/efficient-frontier/optresult-min.png","slug":"optresult-min.png","post":"cjiqvlnwe000yglu3vjguwgu1","modified":0,"renderable":0},{"_id":"source/_posts/efficient-frontier/result.png","slug":"result.png","post":"cjiqvlnwe000yglu3vjguwgu1","modified":0,"renderable":0},{"_id":"source/_posts/data-visualization-1/npvprofile1.png","slug":"npvprofile1.png","post":"cjiqvlnwd000vglu3zcmtjwsp","modified":0,"renderable":0},{"_id":"source/_posts/data-visualization-1/npvprofile2.png","slug":"npvprofile2.png","post":"cjiqvlnwd000vglu3zcmtjwsp","modified":0,"renderable":0},{"_id":"source/_posts/data-visualization-1/npvprofile3.png","slug":"npvprofile3.png","post":"cjiqvlnwd000vglu3zcmtjwsp","modified":0,"renderable":0},{"_id":"source/_posts/data-visualization-2/bar.png","slug":"bar.png","post":"cjiqvlnwd000tglu3lvrizhnq","modified":0,"renderable":0},{"_id":"source/_posts/data-visualization-2/barh.png","slug":"barh.png","post":"cjiqvlnwd000tglu3lvrizhnq","modified":0,"renderable":0},{"_id":"source/_posts/data-visualization-2/data.png","slug":"data.png","post":"cjiqvlnwd000tglu3lvrizhnq","modified":0,"renderable":0},{"_id":"source/_posts/data-visualization-2/hist.png","slug":"hist.png","post":"cjiqvlnwd000tglu3lvrizhnq","modified":0,"renderable":0},{"_id":"source/_posts/data-visualization-2/line.png","slug":"line.png","post":"cjiqvlnwd000tglu3lvrizhnq","modified":0,"renderable":0},{"_id":"source/_posts/data-visualization-2/linecompare.png","slug":"linecompare.png","post":"cjiqvlnwd000tglu3lvrizhnq","modified":0,"renderable":0},{"_id":"source/_posts/data-visualization-2/pie.png","slug":"pie.png","post":"cjiqvlnwd000tglu3lvrizhnq","modified":0,"renderable":0},{"_id":"source/_posts/data-visualization-2/scatter.png","slug":"scatter.png","post":"cjiqvlnwd000tglu3lvrizhnq","modified":0,"renderable":0},{"_id":"source/_posts/data-visualization-2/sp500.png","slug":"sp500.png","post":"cjiqvlnwd000tglu3lvrizhnq","modified":0,"renderable":0},{"_id":"source/_posts/data-visualization-2/tenQ.png","slug":"tenQ.png","post":"cjiqvlnwd000tglu3lvrizhnq","modified":0,"renderable":0},{"_id":"source/_posts/data-visualization-2/twobars.png","slug":"twobars.png","post":"cjiqvlnwd000tglu3lvrizhnq","modified":0,"renderable":0},{"_id":"source/_posts/data-visualization-2/unpie.png","slug":"unpie.png","post":"cjiqvlnwd000tglu3lvrizhnq","modified":0,"renderable":0},{"_id":"source/_posts/ip-proxy-pool/flow_min.png","slug":"flow_min.png","post":"cjiqvlo1q001cglu3jvwq2l84","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjiqvlnul0004glu34lk0l052","category_id":"cjiqvlnuh0002glu3rv8cw646","_id":"cjiqvlnuq0009glu3pndzl35q"},{"post_id":"cjiqvlnua0000glu3xwzldp06","category_id":"cjiqvlnuh0002glu3rv8cw646","_id":"cjiqvlnur000cglu3k43gvdhu"},{"post_id":"cjiqvlnuf0001glu3xu2s7853","category_id":"cjiqvlnun0006glu3m5fvul40","_id":"cjiqvlnuu000eglu3fmiko15c"},{"post_id":"cjiqvlnup0008glu37m1t749x","category_id":"cjiqvlnuh0002glu3rv8cw646","_id":"cjiqvlnux000hglu3sr5yt5c9"},{"post_id":"cjiqvlnuq000bglu33ne8eoeo","category_id":"cjiqvlnuh0002glu3rv8cw646","_id":"cjiqvlnux000iglu37chmo1wm"},{"post_id":"cjiqvlnuj0003glu3c67xwg33","category_id":"cjiqvlnuq000aglu325ck4hu5","_id":"cjiqvlnuz000kglu3njubof34"},{"post_id":"cjiqvlnus000dglu3q6uy7pfo","category_id":"cjiqvlnuh0002glu3rv8cw646","_id":"cjiqvlnv0000lglu3v35v4lp8"},{"post_id":"cjiqvlnuv000gglu3oku2p6nx","category_id":"cjiqvlnuh0002glu3rv8cw646","_id":"cjiqvlnv1000mglu3rsa8bm08"},{"post_id":"cjiqvlnum0005glu3qwt8mziu","category_id":"cjiqvlnuv000fglu33a9lacfa","_id":"cjiqvlnv1000nglu3t4cti9jk"},{"post_id":"cjiqvlnun0007glu3mpfwfn95","category_id":"cjiqvlnuq000aglu325ck4hu5","_id":"cjiqvlnv1000oglu3ssouznzv"},{"post_id":"cjiqvlnw9000pglu3vvb8y0p1","category_id":"cjiqvlnuh0002glu3rv8cw646","_id":"cjiqvlnwd000uglu3rhfe502r"},{"post_id":"cjiqvlnwb000rglu3xxko2zs3","category_id":"cjiqvlnuh0002glu3rv8cw646","_id":"cjiqvlnwe000wglu3qqbwilf4"},{"post_id":"cjiqvlnwc000sglu38egnmwlr","category_id":"cjiqvlnuh0002glu3rv8cw646","_id":"cjiqvlnwf000zglu36kzprlae"},{"post_id":"cjiqvlnwg0010glu3yl7uarti","category_id":"cjiqvlnuq000aglu325ck4hu5","_id":"cjiqvlnwj0014glu3g1xuowni"},{"post_id":"cjiqvlnwd000tglu3lvrizhnq","category_id":"cjiqvlnwe000xglu3pekuly4n","_id":"cjiqvlnwj0016glu3y6ry5743"},{"post_id":"cjiqvlnwh0011glu3gdgcakh5","category_id":"cjiqvlnuq000aglu325ck4hu5","_id":"cjiqvlnwk0017glu3zccuxysr"},{"post_id":"cjiqvlnwi0013glu34r9h7ul2","category_id":"cjiqvlnuq000aglu325ck4hu5","_id":"cjiqvlnwk0018glu322bq8kou"},{"post_id":"cjiqvlnwd000vglu3zcmtjwsp","category_id":"cjiqvlnwh0012glu3f1pknhf3","_id":"cjiqvlnwk0019glu32rf3exui"},{"post_id":"cjiqvlnwe000yglu3vjguwgu1","category_id":"cjiqvlnwj0015glu34h6981j9","_id":"cjiqvlnwk001aglu3tk0rhdtu"},{"post_id":"cjiqvlo1q001cglu3jvwq2l84","category_id":"cjiqvlnun0006glu3m5fvul40","_id":"cjiqvlo1u001fglu3y5ecgw30"},{"post_id":"cjiqvlo1o001bglu3ioz5uf9x","category_id":"cjiqvlo1t001dglu3wrgh95qo","_id":"cjiqvlo1v001hglu3hzvkegaa"},{"post_id":"cjiqvlo1t001eglu3unr30tw5","category_id":"cjiqvlo1t001dglu3wrgh95qo","_id":"cjiqvlo1v001iglu3eke0u5k7"},{"post_id":"cjwlypz4y0000xho9t2io6dp0","category_id":"cjwlypz5a0001xho93xv3igt4","_id":"cjwlypz5r0002xho9bgygkv2p"}],"PostTag":[],"Tag":[]}}